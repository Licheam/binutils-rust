extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type bfd_sym_data_struct;
    pub type bfd_pef_xlib_data_struct;
    pub type bfd_pef_data_struct;
    pub type plugin_data_struct;
    pub type mach_o_fat_data_struct;
    pub type mach_o_data_struct;
    pub type netbsd_core_struct;
    pub type versados_data_struct;
    pub type cisco_core_struct;
    pub type osf_core_struct;
    pub type lynx_core_struct;
    pub type sgi_core_struct;
    pub type hppabsd_core_struct;
    pub type hpux_core_struct;
    pub type som_data_struct;
    pub type trad_core_struct;
    pub type sco5_core_struct;
    pub type sun_core_struct;
    pub type mmo_data_struct;
    pub type elf_strtab_hash;
    pub type dwarf1_debug;
    pub type got_entry;
    pub type plt_entry;
    pub type tekhex_data_struct;
    pub type ihex_data_struct;
    pub type verilog_data_struct;
    pub type srec_data_struct;
    pub type ecoff_tdata;
    pub type xcoff_tdata;
    pub type pe_tdata;
    pub type coff_tdata;
    pub type artdata;
    pub type aout_data_struct;
    pub type bfd_iovec;
    pub type _bfd_window_internal;
    pub type ecoff_debug_swap;
    pub type symbol;
    pub type list_info_struct;
    pub type cie;
    pub type lineno_list;
    pub type cfi_escape_data;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn mempcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn strcasecmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncasecmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strtol(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_long;
    fn strtoul(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_ulong;
    fn free(_: *mut libc::c_void);
    fn snprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    static mut _bfd_std_section: [asection; 4];
    fn bfd_set_section_flags(sec: *mut asection, flags: flagword) -> bool;
    fn bfd_arch_bits_per_address(abfd: *const bfd) -> libc::c_uint;
    fn bfd_get_reloc_size(_: *const reloc_howto_type) -> libc::c_uint;
    fn bfd_reloc_type_lookup(
        abfd: *mut bfd,
        code: bfd_reloc_code_real_type,
    ) -> *const reloc_howto_type;
    fn bfd_get_reloc_code_name(code: bfd_reloc_code_real_type) -> *const libc::c_char;
    fn bfd_target_list() -> *mut *const libc::c_char;
    fn concat(_: *const libc::c_char, _: ...) -> *mut libc::c_char;
    fn xmalloc(_: size_t) -> *mut libc::c_void;
    fn xcalloc(_: size_t, _: size_t) -> *mut libc::c_void;
    fn xstrdup(_: *const libc::c_char) -> *mut libc::c_char;
    fn dcgettext(
        __domainname: *const libc::c_char,
        __msgid: *const libc::c_char,
        __category: libc::c_int,
    ) -> *mut libc::c_char;
    static mut stdoutput: *mut bfd;
    static mut now_subseg: subsegT;
    static mut now_seg: segT;
    static mut reg_section: segT;
    static mut expr_section: segT;
    static mut bss_section: segT;
    static mut flag_debug: libc::c_uchar;
    fn as_bad(format: *const libc::c_char, _: ...);
    fn as_fatal(format: *const libc::c_char, _: ...) -> !;
    fn as_warn(format: *const libc::c_char, _: ...);
    fn as_bad_where(
        file: *const libc::c_char,
        line: libc::c_uint,
        format: *const libc::c_char,
        _: ...
    );
    fn as_warn_where(
        file: *const libc::c_char,
        line: libc::c_uint,
        format: *const libc::c_char,
        _: ...
    );
    fn as_abort(_: *const libc::c_char, _: libc::c_int, _: *const libc::c_char) -> !;
    fn print_version_id();
    fn ieee_md_atof(
        _: libc::c_int,
        _: *mut libc::c_char,
        _: *mut libc::c_int,
        _: bool,
    ) -> *const libc::c_char;
    fn as_where(_: *mut libc::c_uint) -> *const libc::c_char;
    fn subseg_new(_: *const libc::c_char, _: subsegT) -> segT;
    fn subseg_set(_: segT, _: subsegT);
    fn generic_force_reloc(_: *mut fix) -> libc::c_int;
    fn get_symbol_name(_: *mut *mut libc::c_char) -> libc::c_char;
    fn restore_line_pointer(_: libc::c_char) -> libc::c_char;
    fn expr_set_rank(_: operatorT, _: operator_rankT);
    fn expr(_: libc::c_int, _: *mut expressionS, _: expr_mode) -> segT;
    fn make_expr_symbol(expressionP: *mut expressionS) -> *mut symbolS;
    fn current_location(_: *mut expressionS);
    fn resolve_expression(_: *mut expressionS) -> libc::c_int;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    static mut stdout: *mut FILE;
    static mut _bfd_elf_large_com_section: asection;
    static i386_optab: [insn_template; 0];
    static i386_regtab: [reg_entry; 0];
    static i386_regtab_size: libc::c_uint;
    static i386_seg_prefixes: [libc::c_uchar; 6];
    fn S_GET_SEGMENT(_: *mut symbolS) -> segT;
    fn symbol_get_value_expression(_: *mut symbolS) -> *mut expressionS;
    fn S_SET_SEGMENT(_: *mut symbolS, _: segT);
    fn S_GET_NAME(_: *mut symbolS) -> *const libc::c_char;
    fn symbol_get_bfdsym(_: *mut symbolS) -> *mut asymbol;
    static mut input_line_pointer: *mut libc::c_char;
    static mut is_end_of_line: [libc::c_char; 0];
    fn symbol_find_or_make(name: *const libc::c_char) -> *mut symbolS;
    fn fix_new_exp(
        _: *mut fragS,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut expressionS,
        _: libc::c_int,
        _: bfd_reloc_code_real_type,
    ) -> *mut fixS;
    fn symbol_section_p(_: *mut symbolS) -> libc::c_int;
    fn S_IS_EXTERNAL(_: *mut symbolS) -> libc::c_int;
    fn S_IS_DEFINED(_: *mut symbolS) -> libc::c_int;
    fn symbol_find(name: *const libc::c_char) -> *mut symbolS;
    fn htab_find(_: htab_t, _: *const libc::c_void) -> *mut libc::c_void;
    fn S_SET_THREAD_LOCAL(_: *mut symbolS);
    fn htab_print_statistics(f: *mut FILE, name: *const libc::c_char, table: htab_t);
    fn relax_frag(_: segT, _: *mut fragS, _: libc::c_long) -> libc::c_long;
    fn S_IS_LOCAL(_: *mut symbolS) -> libc::c_int;
    fn number_to_chars_littleendian(_: *mut libc::c_char, _: valueT, _: libc::c_int);
    fn S_IS_WEAK(_: *mut symbolS) -> libc::c_int;
    fn S_GET_VALUE(_: *mut symbolS) -> valueT;
    fn frag_more(nchars: size_t) -> *mut libc::c_char;
    fn elf_s_get_other(_: *mut symbolS) -> libc::c_int;
    fn dwarf2_emit_insn(_: libc::c_int);
    fn obj_elf_section_change_hook();
    static mut elf_com_section_ptr: *mut asection;
    fn elf_common_parse(
        ignore: libc::c_int,
        symbolP: *mut symbolS,
        size: addressT,
    ) -> *mut symbolS;
    fn record_alignment(_: segT, _: libc::c_uint);
    fn fix_new(
        _: *mut fragS,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut symbolS,
        _: offsetT,
        _: libc::c_int,
        _: bfd_reloc_code_real_type,
    ) -> *mut fixS;
    static mut frag_now: *mut fragS;
    fn frag_now_fix() -> addressT;
    static mut zero_address_frag: fragS;
    fn frag_append_1_char(_: libc::c_int);
    fn frag_grow(nchars: size_t);
    fn frag_new(old_frags_var_max_size: size_t);
    fn frag_wane(fragP: *mut fragS);
    fn frag_var(
        type_0: relax_stateT,
        max_chars: size_t,
        var: size_t,
        subtype: relax_substateT,
        symbol: *mut symbolS,
        offset: offsetT,
        opcode: *mut libc::c_char,
    ) -> *mut libc::c_char;
    fn htab_create_alloc(
        _: size_t,
        _: htab_hash,
        _: htab_eq,
        _: htab_del,
        _: htab_alloc,
        _: htab_free,
    ) -> htab_t;
    fn htab_hash_string(_: *const libc::c_void) -> hashval_t;
    fn htab_insert(
        _: htab_t,
        _: *mut libc::c_void,
        _: libc::c_int,
    ) -> *mut *mut libc::c_void;
    static mut lex_type: [libc::c_char; 0];
    static mut abs_section_offset: addressT;
    fn get_absolute_expression() -> offsetT;
    fn cons(nbytes: libc::c_int);
    fn demand_empty_rest_of_line();
    fn float_cons(_: libc::c_int);
    fn s_align_bytes(arg: libc::c_int);
    fn s_comm_internal(
        _: libc::c_int,
        _: Option::<
            unsafe extern "C" fn(libc::c_int, *mut symbolS, addressT) -> *mut symbolS,
        >,
    ) -> *mut symbolS;
    fn s_ignore(arg: libc::c_int);
    static mut abs_symbol: symbolS;
    fn symbol_new(
        _: *const libc::c_char,
        _: segT,
        _: *mut fragS,
        _: valueT,
    ) -> *mut symbolS;
    static _sch_istable: [libc::c_ushort; 256];
    static _sch_tolower: [libc::c_uchar; 256];
    fn section_symbol(_: segT) -> *mut symbolS;
    fn cfi_add_CFA_def_cfa(_: libc::c_uint, _: offsetT);
    fn cfi_add_CFA_offset(_: libc::c_uint, _: offsetT);
}
pub type size_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct obstack {
    pub chunk_size: size_t,
    pub chunk: *mut _obstack_chunk,
    pub object_base: *mut libc::c_char,
    pub next_free: *mut libc::c_char,
    pub chunk_limit: *mut libc::c_char,
    pub temp: C2RustUnnamed_1,
    pub alignment_mask: size_t,
    pub chunkfun: C2RustUnnamed_0,
    pub freefun: C2RustUnnamed,
    pub extra_arg: *mut libc::c_void,
    #[bitfield(name = "use_extra_arg", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "maybe_empty_object", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "alloc_failed", ty = "libc::c_uint", bits = "2..=2")]
    pub use_extra_arg_maybe_empty_object_alloc_failed: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub plain: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    pub extra: Option::<
        unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> (),
    >,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_0 {
    pub plain: Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void>,
    pub extra: Option::<
        unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void,
    >,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_1 {
    pub i: size_t,
    pub p: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _obstack_chunk {
    pub limit: *mut libc::c_char,
    pub prev: *mut _obstack_chunk,
    pub contents: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct option {
    pub name: *const libc::c_char,
    pub has_arg: libc::c_int,
    pub flag: *mut libc::c_int,
    pub val: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3],
}
pub type bfd_int64_t = libc::c_long;
pub type bfd_uint64_t = libc::c_ulong;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd {
    pub filename: *const libc::c_char,
    pub xvec: *const bfd_target,
    pub iostream: *mut libc::c_void,
    pub iovec: *const bfd_iovec,
    pub lru_prev: *mut bfd,
    pub lru_next: *mut bfd,
    pub where_0: ufile_ptr,
    pub mtime: libc::c_long,
    pub id: libc::c_uint,
    pub flags: flagword,
    #[bitfield(name = "format", ty = "bfd_format", bits = "0..=2")]
    #[bitfield(name = "direction", ty = "bfd_direction", bits = "3..=4")]
    #[bitfield(name = "cacheable", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "target_defaulted", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "opened_once", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "mtime_set", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "no_export", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "output_has_begun", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "has_armap", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "is_thin_archive", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "no_element_cache", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "selective_search", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "is_linker_output", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "is_linker_input", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "plugin_format", ty = "bfd_plugin_format", bits = "17..=18")]
    #[bitfield(name = "lto_output", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "lto_slim_object", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "read_only", ty = "libc::c_uint", bits = "21..=21")]
    pub format_direction_cacheable_target_defaulted_opened_once_mtime_set_no_export_output_has_begun_has_armap_is_thin_archive_no_element_cache_selective_search_is_linker_output_is_linker_input_plugin_format_lto_output_lto_slim_object_read_only: [u8; 3],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 5],
    pub plugin_dummy_bfd: *mut bfd,
    pub origin: ufile_ptr,
    pub proxy_origin: ufile_ptr,
    pub section_htab: bfd_hash_table,
    pub sections: *mut bfd_section,
    pub section_last: *mut bfd_section,
    pub section_count: libc::c_uint,
    pub archive_plugin_fd: libc::c_int,
    pub archive_plugin_fd_open_count: libc::c_uint,
    pub archive_pass: libc::c_int,
    pub start_address: bfd_vma,
    pub outsymbols: *mut *mut bfd_symbol,
    pub symcount: libc::c_uint,
    pub dynsymcount: libc::c_uint,
    pub arch_info: *const bfd_arch_info,
    pub size: ufile_ptr,
    pub arelt_data: *mut libc::c_void,
    pub my_archive: *mut bfd,
    pub archive_next: *mut bfd,
    pub archive_head: *mut bfd,
    pub nested_archives: *mut bfd,
    pub link: C2RustUnnamed_22,
    pub tdata: C2RustUnnamed_2,
    pub usrdata: *mut libc::c_void,
    pub memory: *mut libc::c_void,
    pub build_id: *const bfd_build_id,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_build_id {
    pub size: bfd_size_type,
    pub data: [bfd_byte; 1],
}
pub type bfd_byte = libc::c_uchar;
pub type bfd_size_type = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_2 {
    pub aout_data: *mut aout_data_struct,
    pub aout_ar_data: *mut artdata,
    pub coff_obj_data: *mut coff_tdata,
    pub pe_obj_data: *mut pe_tdata,
    pub xcoff_obj_data: *mut xcoff_tdata,
    pub ecoff_obj_data: *mut ecoff_tdata,
    pub srec_data: *mut srec_data_struct,
    pub verilog_data: *mut verilog_data_struct,
    pub ihex_data: *mut ihex_data_struct,
    pub tekhex_data: *mut tekhex_data_struct,
    pub elf_obj_data: *mut elf_obj_tdata,
    pub mmo_data: *mut mmo_data_struct,
    pub sun_core_data: *mut sun_core_struct,
    pub sco5_core_data: *mut sco5_core_struct,
    pub trad_core_data: *mut trad_core_struct,
    pub som_data: *mut som_data_struct,
    pub hpux_core_data: *mut hpux_core_struct,
    pub hppabsd_core_data: *mut hppabsd_core_struct,
    pub sgi_core_data: *mut sgi_core_struct,
    pub lynx_core_data: *mut lynx_core_struct,
    pub osf_core_data: *mut osf_core_struct,
    pub cisco_core_data: *mut cisco_core_struct,
    pub versados_data: *mut versados_data_struct,
    pub netbsd_core_data: *mut netbsd_core_struct,
    pub mach_o_data: *mut mach_o_data_struct,
    pub mach_o_fat_data: *mut mach_o_fat_data_struct,
    pub plugin_data: *mut plugin_data_struct,
    pub pef_data: *mut bfd_pef_data_struct,
    pub pef_xlib_data: *mut bfd_pef_xlib_data_struct,
    pub sym_data: *mut bfd_sym_data_struct,
    pub any: *mut libc::c_void,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct elf_obj_tdata {
    pub elf_header: [Elf_Internal_Ehdr; 1],
    pub elf_sect_ptr: *mut *mut Elf_Internal_Shdr,
    pub phdr: *mut Elf_Internal_Phdr,
    pub symtab_hdr: Elf_Internal_Shdr,
    pub shstrtab_hdr: Elf_Internal_Shdr,
    pub strtab_hdr: Elf_Internal_Shdr,
    pub dynsymtab_hdr: Elf_Internal_Shdr,
    pub dynstrtab_hdr: Elf_Internal_Shdr,
    pub dynversym_hdr: Elf_Internal_Shdr,
    pub dynverref_hdr: Elf_Internal_Shdr,
    pub dynverdef_hdr: Elf_Internal_Shdr,
    pub symtab_shndx_list: *mut elf_section_list,
    pub gp: bfd_vma,
    pub gp_size: libc::c_uint,
    pub num_elf_sections: libc::c_uint,
    pub being_created: *mut libc::c_uchar,
    pub sym_hashes: *mut *mut elf_link_hash_entry,
    pub local_got: C2RustUnnamed_18,
    pub dt_name: *const libc::c_char,
    pub dt_audit: *const libc::c_char,
    pub line_info: *mut libc::c_void,
    pub dwarf1_find_line_info: *mut dwarf1_debug,
    pub dwarf2_find_line_info: *mut libc::c_void,
    pub elf_find_function_cache: *mut libc::c_void,
    pub cverdefs: libc::c_uint,
    pub cverrefs: libc::c_uint,
    pub verdef: *mut Elf_Internal_Verdef,
    pub verref: *mut Elf_Internal_Verneed,
    pub eh_frame_section: *mut asection,
    pub symbuf: *mut libc::c_void,
    pub properties: *mut elf_property_list,
    pub known_obj_attributes: [[obj_attribute; 71]; 2],
    pub other_obj_attributes: [*mut obj_attribute_list; 2],
    pub sdt_note_head: *mut sdt_note,
    pub group_sect_ptr: *mut *mut Elf_Internal_Shdr,
    pub num_group: libc::c_uint,
    pub group_search_offset: libc::c_uint,
    pub symtab_section: libc::c_uint,
    pub dynsymtab_section: libc::c_uint,
    pub dynversym_section: libc::c_uint,
    pub dynverdef_section: libc::c_uint,
    pub dynverref_section: libc::c_uint,
    #[bitfield(name = "object_id", ty = "elf_target_id", bits = "0..=5")]
    #[bitfield(name = "dyn_lib_class", ty = "dynamic_lib_link_class", bits = "6..=9")]
    #[bitfield(name = "has_gnu_osabi", ty = "elf_gnu_osabi", bits = "10..=13")]
    #[bitfield(name = "has_no_copy_on_protected", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "bad_symtab", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "is_pie", ty = "libc::c_uint", bits = "16..=16")]
    pub object_id_dyn_lib_class_has_gnu_osabi_has_no_copy_on_protected_bad_symtab_is_pie: [u8; 3],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 1],
    pub core: *mut core_elf_obj_tdata,
    pub o: *mut output_elf_obj_tdata,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct output_elf_obj_tdata {
    pub seg_map: *mut elf_segment_map,
    pub strtab_ptr: *mut elf_strtab_hash,
    pub section_syms: *mut *mut asymbol,
    pub eh_frame_hdr: *mut asection,
    pub build_id: C2RustUnnamed_16,
    pub program_header_size: bfd_size_type,
    pub next_file_pos: file_ptr,
    pub link_info: *mut bfd_link_info,
    pub num_section_syms: libc::c_int,
    pub shstrtab_section: libc::c_uint,
    pub strtab_section: libc::c_uint,
    pub stack_flags: libc::c_uint,
    pub flags_init: bool,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd_link_info {
    #[bitfield(name = "type_0", ty = "output_type", bits = "0..=1")]
    #[bitfield(name = "symbolic", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "nocopyreloc", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "export_dynamic", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "create_default_symver", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "gc_sections", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "gc_keep_exported", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "notice_all", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "lto_plugin_active", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "lto_all_symbols_read", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "strip_discarded", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "dynamic_data", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "resolve_section_groups", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "big_endian", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "strip", ty = "bfd_link_strip", bits = "15..=16")]
    #[bitfield(name = "discard", ty = "bfd_link_discard", bits = "17..=18")]
    #[bitfield(name = "elf_stt_common", ty = "bfd_link_elf_stt_common", bits = "19..=20")]
    #[bitfield(name = "common_skip_ar_symbols", ty = "bfd_link_common_skip_ar_symbols", bits = "21..=22")]
    #[bitfield(name = "unresolved_syms_in_objects", ty = "report_method", bits = "23..=24")]
    #[bitfield(name = "unresolved_syms_in_shared_libs", ty = "report_method", bits = "25..=26")]
    #[bitfield(name = "warn_unresolved_syms", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "static_link", ty = "libc::c_uint", bits = "28..=28")]
    #[bitfield(name = "keep_memory", ty = "libc::c_uint", bits = "29..=29")]
    #[bitfield(name = "emitrelocations", ty = "libc::c_uint", bits = "30..=30")]
    #[bitfield(name = "relro", ty = "libc::c_uint", bits = "31..=31")]
    #[bitfield(name = "separate_code", ty = "libc::c_uint", bits = "32..=32")]
    #[bitfield(name = "eh_frame_hdr_type", ty = "libc::c_uint", bits = "33..=34")]
    #[bitfield(name = "textrel_check", ty = "textrel_check_method", bits = "35..=36")]
    #[bitfield(name = "emit_hash", ty = "libc::c_uint", bits = "37..=37")]
    #[bitfield(name = "emit_gnu_hash", ty = "libc::c_uint", bits = "38..=38")]
    #[bitfield(name = "reduce_memory_overheads", ty = "libc::c_uint", bits = "39..=39")]
    #[bitfield(name = "traditional_format", ty = "libc::c_uint", bits = "40..=40")]
    #[bitfield(name = "combreloc", ty = "libc::c_uint", bits = "41..=41")]
    #[bitfield(name = "default_imported_symver", ty = "libc::c_uint", bits = "42..=42")]
    #[bitfield(name = "new_dtags", ty = "libc::c_uint", bits = "43..=43")]
    #[bitfield(name = "no_ld_generated_unwind_info", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "task_link", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "allow_multiple_definition", ty = "libc::c_uint", bits = "46..=46")]
    #[bitfield(name = "prohibit_multiple_definition_absolute", ty = "libc::c_uint", bits = "47..=47")]
    #[bitfield(name = "warn_multiple_definition", ty = "libc::c_uint", bits = "48..=48")]
    #[bitfield(name = "allow_undefined_version", ty = "libc::c_uint", bits = "49..=49")]
    #[bitfield(name = "dynamic", ty = "libc::c_uint", bits = "50..=50")]
    #[bitfield(name = "execstack", ty = "libc::c_uint", bits = "51..=51")]
    #[bitfield(name = "noexecstack", ty = "libc::c_uint", bits = "52..=52")]
    #[bitfield(name = "optimize", ty = "libc::c_uint", bits = "53..=53")]
    #[bitfield(name = "print_gc_sections", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "warn_alternate_em", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "user_phdrs", ty = "libc::c_uint", bits = "56..=56")]
    #[bitfield(name = "load_phdrs", ty = "libc::c_uint", bits = "57..=57")]
    #[bitfield(name = "check_relocs_after_open_input", ty = "libc::c_uint", bits = "58..=58")]
    #[bitfield(name = "nointerp", ty = "libc::c_uint", bits = "59..=59")]
    #[bitfield(name = "inhibit_common_definition", ty = "libc::c_uint", bits = "60..=60")]
    #[bitfield(name = "has_map_file", ty = "libc::c_uint", bits = "61..=61")]
    #[bitfield(name = "non_contiguous_regions", ty = "libc::c_uint", bits = "62..=62")]
    #[bitfield(name = "non_contiguous_regions_warnings", ty = "libc::c_uint", bits = "63..=63")]
    #[bitfield(name = "unique_symbol", ty = "libc::c_uint", bits = "64..=64")]
    pub type_0_symbolic_nocopyreloc_export_dynamic_create_default_symver_gc_sections_gc_keep_exported_notice_all_lto_plugin_active_lto_all_symbols_read_strip_discarded_dynamic_data_resolve_section_groups_big_endian_strip_discard_elf_stt_common_common_skip_ar_symbols_unresolved_syms_in_objects_unresolved_syms_in_shared_libs_warn_unresolved_syms_static_link_keep_memory_emitrelocations_relro_separate_code_eh_frame_hdr_type_textrel_check_emit_hash_emit_gnu_hash_reduce_memory_overheads_traditional_format_combreloc_default_imported_symver_new_dtags_no_ld_generated_unwind_info_task_link_allow_multiple_definition_prohibit_multiple_definition_absolute_warn_multiple_definition_allow_undefined_version_dynamic_execstack_noexecstack_optimize_print_gc_sections_warn_alternate_em_user_phdrs_load_phdrs_check_relocs_after_open_input_nointerp_inhibit_common_definition_has_map_file_non_contiguous_regions_non_contiguous_regions_warnings_unique_symbol: [u8; 9],
    pub wrap_char: libc::c_char,
    pub path_separator: libc::c_char,
    pub compress_debug: compressed_debug_section_type,
    pub stacksize: bfd_signed_vma,
    pub disable_target_specific_optimizations: libc::c_int,
    pub callbacks: *const bfd_link_callbacks,
    pub hash: *mut bfd_link_hash_table,
    pub keep_hash: *mut bfd_hash_table,
    pub notice_hash: *mut bfd_hash_table,
    pub wrap_hash: *mut bfd_hash_table,
    pub ignore_hash: *mut bfd_hash_table,
    pub output_bfd: *mut bfd,
    pub out_implib_bfd: *mut bfd,
    pub input_bfds: *mut bfd,
    pub input_bfds_tail: *mut *mut bfd,
    pub create_object_symbols_section: *mut asection,
    pub gc_sym_list: *mut bfd_sym_chain,
    pub base_file: *mut libc::c_void,
    pub init_function: *const libc::c_char,
    pub fini_function: *const libc::c_char,
    pub relax_pass: libc::c_int,
    pub relax_trip: libc::c_int,
    pub extern_protected_data: libc::c_int,
    pub dynamic_undefined_weak: libc::c_int,
    pub pei386_auto_import: libc::c_int,
    pub pei386_runtime_pseudo_reloc: libc::c_int,
    pub spare_dynamic_tags: libc::c_uint,
    pub flags: bfd_vma,
    pub flags_1: bfd_vma,
    pub gnu_flags_1: bfd_vma,
    pub start_stop_gc: libc::c_int,
    pub start_stop_visibility: libc::c_uint,
    pub maxpagesize: bfd_vma,
    pub commonpagesize: bfd_vma,
    pub relro_start: bfd_vma,
    pub relro_end: bfd_vma,
    pub dynamic_list: *mut bfd_elf_dynamic_list,
    pub version_info: *mut bfd_elf_version_tree,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_version_tree {
    pub next: *mut bfd_elf_version_tree,
    pub name: *const libc::c_char,
    pub vernum: libc::c_uint,
    pub globals: bfd_elf_version_expr_head,
    pub locals: bfd_elf_version_expr_head,
    pub deps: *mut bfd_elf_version_deps,
    pub name_indx: libc::c_uint,
    pub used: libc::c_int,
    pub match_0: Option::<
        unsafe extern "C" fn(
            *mut bfd_elf_version_expr_head,
            *mut bfd_elf_version_expr,
            *const libc::c_char,
        ) -> *mut bfd_elf_version_expr,
    >,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd_elf_version_expr {
    pub next: *mut bfd_elf_version_expr,
    pub pattern: *const libc::c_char,
    #[bitfield(name = "literal", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "symver", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "script", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "mask", ty = "libc::c_uint", bits = "3..=5")]
    pub literal_symver_script_mask: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_version_expr_head {
    pub list: *mut bfd_elf_version_expr,
    pub htab: *mut libc::c_void,
    pub remaining: *mut bfd_elf_version_expr,
    pub mask: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_version_deps {
    pub next: *mut bfd_elf_version_deps,
    pub version_needed: *mut bfd_elf_version_tree,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_dynamic_list {
    pub head: bfd_elf_version_expr_head,
    pub match_0: Option::<
        unsafe extern "C" fn(
            *mut bfd_elf_version_expr_head,
            *mut bfd_elf_version_expr,
            *const libc::c_char,
        ) -> *mut bfd_elf_version_expr,
    >,
}
pub type bfd_vma = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_sym_chain {
    pub next: *mut bfd_sym_chain,
    pub name: *const libc::c_char,
}
pub type asection = bfd_section;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd_section {
    pub name: *const libc::c_char,
    pub id: libc::c_uint,
    pub section_id: libc::c_uint,
    pub index: libc::c_uint,
    pub next: *mut bfd_section,
    pub prev: *mut bfd_section,
    pub flags: flagword,
    #[bitfield(name = "user_set_vma", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "linker_mark", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "linker_has_input", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "gc_mark", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "compress_status", ty = "libc::c_uint", bits = "4..=5")]
    #[bitfield(name = "segment_mark", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "sec_info_type", ty = "libc::c_uint", bits = "7..=9")]
    #[bitfield(name = "use_rela_p", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "sec_flg0", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "sec_flg1", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "sec_flg2", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "sec_flg3", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "sec_flg4", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "sec_flg5", ty = "libc::c_uint", bits = "16..=16")]
    pub user_set_vma_linker_mark_linker_has_input_gc_mark_compress_status_segment_mark_sec_info_type_use_rela_p_sec_flg0_sec_flg1_sec_flg2_sec_flg3_sec_flg4_sec_flg5: [u8; 3],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 1],
    pub vma: bfd_vma,
    pub lma: bfd_vma,
    pub size: bfd_size_type,
    pub rawsize: bfd_size_type,
    pub compressed_size: bfd_size_type,
    pub relax: *mut relax_table,
    pub relax_count: libc::c_int,
    pub output_offset: bfd_vma,
    pub output_section: *mut bfd_section,
    pub alignment_power: libc::c_uint,
    pub relocation: *mut reloc_cache_entry,
    pub orelocation: *mut *mut reloc_cache_entry,
    pub reloc_count: libc::c_uint,
    pub filepos: file_ptr,
    pub rel_filepos: file_ptr,
    pub line_filepos: file_ptr,
    pub userdata: *mut libc::c_void,
    pub contents: *mut libc::c_uchar,
    pub lineno: *mut alent,
    pub lineno_count: libc::c_uint,
    pub entsize: libc::c_uint,
    pub kept_section: *mut bfd_section,
    pub moving_line_filepos: file_ptr,
    pub target_index: libc::c_int,
    pub used_by_bfd: *mut libc::c_void,
    pub constructor_chain: *mut relent_chain,
    pub owner: *mut bfd,
    pub symbol: *mut bfd_symbol,
    pub symbol_ptr_ptr: *mut *mut bfd_symbol,
    pub map_head: C2RustUnnamed_3,
    pub map_tail: C2RustUnnamed_3,
    pub already_assigned: *mut bfd_section,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_3 {
    pub link_order: *mut bfd_link_order,
    pub s: *mut bfd_section,
    pub linked_to_symbol_name: *const libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_link_order {
    pub next: *mut bfd_link_order,
    pub type_0: bfd_link_order_type,
    pub offset: bfd_vma,
    pub size: bfd_size_type,
    pub u: C2RustUnnamed_4,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_4 {
    pub indirect: C2RustUnnamed_8,
    pub data: C2RustUnnamed_7,
    pub reloc: C2RustUnnamed_5,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub p: *mut bfd_link_order_reloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_link_order_reloc {
    pub reloc: bfd_reloc_code_real_type,
    pub u: C2RustUnnamed_6,
    pub addend: bfd_vma,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_6 {
    pub section: *mut asection,
    pub name: *const libc::c_char,
}
pub type bfd_reloc_code_real_type = bfd_reloc_code_real;
pub type bfd_reloc_code_real = libc::c_uint;
pub const BFD_RELOC_UNUSED: bfd_reloc_code_real = 2383;
pub const BFD_RELOC_S12Z_OPR: bfd_reloc_code_real = 2382;
pub const BFD_RELOC_CKCORE_PCREL_BLOOP_IMM12BY4: bfd_reloc_code_real = 2381;
pub const BFD_RELOC_CKCORE_PCREL_BLOOP_IMM4BY4: bfd_reloc_code_real = 2380;
pub const BFD_RELOC_CKCORE_IRELATIVE: bfd_reloc_code_real = 2379;
pub const BFD_RELOC_CKCORE_CALLGRAPH: bfd_reloc_code_real = 2378;
pub const BFD_RELOC_CKCORE_NOJSRI: bfd_reloc_code_real = 2377;
pub const BFD_RELOC_CKCORE_PCREL_FLRW_IMM8BY4: bfd_reloc_code_real = 2376;
pub const BFD_RELOC_CKCORE_TLS_TPOFF32: bfd_reloc_code_real = 2375;
pub const BFD_RELOC_CKCORE_TLS_DTPOFF32: bfd_reloc_code_real = 2374;
pub const BFD_RELOC_CKCORE_TLS_DTPMOD32: bfd_reloc_code_real = 2373;
pub const BFD_RELOC_CKCORE_TLS_LDO32: bfd_reloc_code_real = 2372;
pub const BFD_RELOC_CKCORE_TLS_LDM32: bfd_reloc_code_real = 2371;
pub const BFD_RELOC_CKCORE_TLS_GD32: bfd_reloc_code_real = 2370;
pub const BFD_RELOC_CKCORE_TLS_IE32: bfd_reloc_code_real = 2369;
pub const BFD_RELOC_CKCORE_TLS_LE32: bfd_reloc_code_real = 2368;
pub const BFD_RELOC_CKCORE_PCREL_IMM7BY4: bfd_reloc_code_real = 2367;
pub const BFD_RELOC_CKCORE_PLT_IMM18BY4: bfd_reloc_code_real = 2366;
pub const BFD_RELOC_CKCORE_GOT_IMM18BY4: bfd_reloc_code_real = 2365;
pub const BFD_RELOC_CKCORE_GOTOFF_IMM18: bfd_reloc_code_real = 2364;
pub const BFD_RELOC_CKCORE_DOFFSET_IMM18BY4: bfd_reloc_code_real = 2363;
pub const BFD_RELOC_CKCORE_DOFFSET_IMM18BY2: bfd_reloc_code_real = 2362;
pub const BFD_RELOC_CKCORE_DOFFSET_IMM18: bfd_reloc_code_real = 2361;
pub const BFD_RELOC_CKCORE_PCREL_IMM18BY2: bfd_reloc_code_real = 2360;
pub const BFD_RELOC_CKCORE_DOFFSET_LO16: bfd_reloc_code_real = 2359;
pub const BFD_RELOC_CKCORE_TOFFSET_LO16: bfd_reloc_code_real = 2358;
pub const BFD_RELOC_CKCORE_PCREL_JSR_IMM26BY2: bfd_reloc_code_real = 2357;
pub const BFD_RELOC_CKCORE_ADDRPLT_LO16: bfd_reloc_code_real = 2356;
pub const BFD_RELOC_CKCORE_ADDRPLT_HI16: bfd_reloc_code_real = 2355;
pub const BFD_RELOC_CKCORE_ADDRGOT_LO16: bfd_reloc_code_real = 2354;
pub const BFD_RELOC_CKCORE_ADDRGOT_HI16: bfd_reloc_code_real = 2353;
pub const BFD_RELOC_CKCORE_PLT_LO16: bfd_reloc_code_real = 2352;
pub const BFD_RELOC_CKCORE_PLT_HI16: bfd_reloc_code_real = 2351;
pub const BFD_RELOC_CKCORE_PLT12: bfd_reloc_code_real = 2350;
pub const BFD_RELOC_CKCORE_GOT_LO16: bfd_reloc_code_real = 2349;
pub const BFD_RELOC_CKCORE_GOT_HI16: bfd_reloc_code_real = 2348;
pub const BFD_RELOC_CKCORE_GOT12: bfd_reloc_code_real = 2347;
pub const BFD_RELOC_CKCORE_GOTOFF_LO16: bfd_reloc_code_real = 2346;
pub const BFD_RELOC_CKCORE_GOTOFF_HI16: bfd_reloc_code_real = 2345;
pub const BFD_RELOC_CKCORE_GOTPC_LO16: bfd_reloc_code_real = 2344;
pub const BFD_RELOC_CKCORE_GOTPC_HI16: bfd_reloc_code_real = 2343;
pub const BFD_RELOC_CKCORE_ADDR_LO16: bfd_reloc_code_real = 2342;
pub const BFD_RELOC_CKCORE_ADDR_HI16: bfd_reloc_code_real = 2341;
pub const BFD_RELOC_CKCORE_PCREL_IMM10BY4: bfd_reloc_code_real = 2340;
pub const BFD_RELOC_CKCORE_PCREL_IMM10BY2: bfd_reloc_code_real = 2339;
pub const BFD_RELOC_CKCORE_PCREL_IMM16BY4: bfd_reloc_code_real = 2338;
pub const BFD_RELOC_CKCORE_PCREL_IMM16BY2: bfd_reloc_code_real = 2337;
pub const BFD_RELOC_CKCORE_PCREL_IMM26BY2: bfd_reloc_code_real = 2336;
pub const BFD_RELOC_CKCORE_ADDRPLT: bfd_reloc_code_real = 2335;
pub const BFD_RELOC_CKCORE_ADDRGOT: bfd_reloc_code_real = 2334;
pub const BFD_RELOC_CKCORE_PLT32: bfd_reloc_code_real = 2333;
pub const BFD_RELOC_CKCORE_GOT32: bfd_reloc_code_real = 2332;
pub const BFD_RELOC_CKCORE_GOTPC: bfd_reloc_code_real = 2331;
pub const BFD_RELOC_CKCORE_GOTOFF: bfd_reloc_code_real = 2330;
pub const BFD_RELOC_CKCORE_JUMP_SLOT: bfd_reloc_code_real = 2329;
pub const BFD_RELOC_CKCORE_GLOB_DAT: bfd_reloc_code_real = 2328;
pub const BFD_RELOC_CKCORE_COPY: bfd_reloc_code_real = 2327;
pub const BFD_RELOC_CKCORE_RELATIVE: bfd_reloc_code_real = 2326;
pub const BFD_RELOC_CKCORE_GNU_VTENTRY: bfd_reloc_code_real = 2325;
pub const BFD_RELOC_CKCORE_GNU_VTINHERIT: bfd_reloc_code_real = 2324;
pub const BFD_RELOC_CKCORE_PCREL_JSR_IMM11BY2: bfd_reloc_code_real = 2323;
pub const BFD_RELOC_CKCORE_PCREL32: bfd_reloc_code_real = 2322;
pub const BFD_RELOC_CKCORE_PCREL_IMM4BY2: bfd_reloc_code_real = 2321;
pub const BFD_RELOC_CKCORE_PCREL_IMM11BY2: bfd_reloc_code_real = 2320;
pub const BFD_RELOC_CKCORE_PCREL_IMM8BY4: bfd_reloc_code_real = 2319;
pub const BFD_RELOC_CKCORE_ADDR32: bfd_reloc_code_real = 2318;
pub const BFD_RELOC_CKCORE_NONE: bfd_reloc_code_real = 2317;
pub const BFD_RELOC_WASM32_PLT_SIG: bfd_reloc_code_real = 2316;
pub const BFD_RELOC_WASM32_INDEX: bfd_reloc_code_real = 2315;
pub const BFD_RELOC_WASM32_CODE_POINTER: bfd_reloc_code_real = 2314;
pub const BFD_RELOC_WASM32_COPY: bfd_reloc_code_real = 2313;
pub const BFD_RELOC_WASM32_ABS32_CODE: bfd_reloc_code_real = 2312;
pub const BFD_RELOC_WASM32_PLT_INDEX: bfd_reloc_code_real = 2311;
pub const BFD_RELOC_WASM32_LEB128_PLT: bfd_reloc_code_real = 2310;
pub const BFD_RELOC_WASM32_LEB128_GOT_CODE: bfd_reloc_code_real = 2309;
pub const BFD_RELOC_WASM32_LEB128_GOT: bfd_reloc_code_real = 2308;
pub const BFD_RELOC_WASM32_LEB128: bfd_reloc_code_real = 2307;
pub const BFD_RELOC_VISIUM_IM16_PCREL: bfd_reloc_code_real = 2306;
pub const BFD_RELOC_VISIUM_LO16_PCREL: bfd_reloc_code_real = 2305;
pub const BFD_RELOC_VISIUM_HI16_PCREL: bfd_reloc_code_real = 2304;
pub const BFD_RELOC_VISIUM_REL16: bfd_reloc_code_real = 2303;
pub const BFD_RELOC_VISIUM_IM16: bfd_reloc_code_real = 2302;
pub const BFD_RELOC_VISIUM_LO16: bfd_reloc_code_real = 2301;
pub const BFD_RELOC_VISIUM_HI16: bfd_reloc_code_real = 2300;
pub const BFD_RELOC_EPIPHANY_IMM8: bfd_reloc_code_real = 2299;
pub const BFD_RELOC_EPIPHANY_IMM11: bfd_reloc_code_real = 2298;
pub const BFD_RELOC_EPIPHANY_SIMM11: bfd_reloc_code_real = 2297;
pub const BFD_RELOC_EPIPHANY_LOW: bfd_reloc_code_real = 2296;
pub const BFD_RELOC_EPIPHANY_HIGH: bfd_reloc_code_real = 2295;
pub const BFD_RELOC_EPIPHANY_SIMM24: bfd_reloc_code_real = 2294;
pub const BFD_RELOC_EPIPHANY_SIMM8: bfd_reloc_code_real = 2293;
pub const BFD_RELOC_BPF_DISP32: bfd_reloc_code_real = 2292;
pub const BFD_RELOC_BPF_DISP16: bfd_reloc_code_real = 2291;
pub const BFD_RELOC_BPF_16: bfd_reloc_code_real = 2290;
pub const BFD_RELOC_BPF_32: bfd_reloc_code_real = 2289;
pub const BFD_RELOC_BPF_64: bfd_reloc_code_real = 2288;
pub const BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD: bfd_reloc_code_real = 2287;
pub const BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD: bfd_reloc_code_real = 2286;
pub const BFD_RELOC_TILEGX_IMM8_X1_TLS_ADD: bfd_reloc_code_real = 2285;
pub const BFD_RELOC_TILEGX_IMM8_X0_TLS_ADD: bfd_reloc_code_real = 2284;
pub const BFD_RELOC_TILEGX_TLS_IE_LOAD: bfd_reloc_code_real = 2283;
pub const BFD_RELOC_TILEGX_IMM8_Y1_TLS_GD_ADD: bfd_reloc_code_real = 2282;
pub const BFD_RELOC_TILEGX_IMM8_Y0_TLS_GD_ADD: bfd_reloc_code_real = 2281;
pub const BFD_RELOC_TILEGX_IMM8_X1_TLS_GD_ADD: bfd_reloc_code_real = 2280;
pub const BFD_RELOC_TILEGX_IMM8_X0_TLS_GD_ADD: bfd_reloc_code_real = 2279;
pub const BFD_RELOC_TILEGX_TLS_GD_CALL: bfd_reloc_code_real = 2278;
pub const BFD_RELOC_TILEGX_TLS_TPOFF32: bfd_reloc_code_real = 2277;
pub const BFD_RELOC_TILEGX_TLS_DTPOFF32: bfd_reloc_code_real = 2276;
pub const BFD_RELOC_TILEGX_TLS_DTPMOD32: bfd_reloc_code_real = 2275;
pub const BFD_RELOC_TILEGX_TLS_TPOFF64: bfd_reloc_code_real = 2274;
pub const BFD_RELOC_TILEGX_TLS_DTPOFF64: bfd_reloc_code_real = 2273;
pub const BFD_RELOC_TILEGX_TLS_DTPMOD64: bfd_reloc_code_real = 2272;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_IE: bfd_reloc_code_real = 2271;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_IE: bfd_reloc_code_real = 2270;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_IE: bfd_reloc_code_real = 2269;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_IE: bfd_reloc_code_real = 2268;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL: bfd_reloc_code_real = 2267;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL: bfd_reloc_code_real = 2266;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL: bfd_reloc_code_real = 2265;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL: bfd_reloc_code_real = 2264;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL: bfd_reloc_code_real = 2263;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL: bfd_reloc_code_real = 2262;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_IE: bfd_reloc_code_real = 2261;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_IE: bfd_reloc_code_real = 2260;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_GD: bfd_reloc_code_real = 2259;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_GD: bfd_reloc_code_real = 2258;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_GD: bfd_reloc_code_real = 2257;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_GD: bfd_reloc_code_real = 2256;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_LE: bfd_reloc_code_real = 2255;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_LE: bfd_reloc_code_real = 2254;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_LE: bfd_reloc_code_real = 2253;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_LE: bfd_reloc_code_real = 2252;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_LE: bfd_reloc_code_real = 2251;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_LE: bfd_reloc_code_real = 2250;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_GD: bfd_reloc_code_real = 2249;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_GD: bfd_reloc_code_real = 2248;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW3_PLT_PCREL: bfd_reloc_code_real = 2247;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW3_PLT_PCREL: bfd_reloc_code_real = 2246;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_GOT: bfd_reloc_code_real = 2245;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_GOT: bfd_reloc_code_real = 2244;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_GOT: bfd_reloc_code_real = 2243;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_GOT: bfd_reloc_code_real = 2242;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2_PLT_PCREL: bfd_reloc_code_real = 2241;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2_PLT_PCREL: bfd_reloc_code_real = 2240;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_PLT_PCREL: bfd_reloc_code_real = 2239;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_PLT_PCREL: bfd_reloc_code_real = 2238;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_PLT_PCREL: bfd_reloc_code_real = 2237;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_PLT_PCREL: bfd_reloc_code_real = 2236;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_GOT: bfd_reloc_code_real = 2235;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_GOT: bfd_reloc_code_real = 2234;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PCREL: bfd_reloc_code_real = 2233;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PCREL: bfd_reloc_code_real = 2232;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PCREL: bfd_reloc_code_real = 2231;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PCREL: bfd_reloc_code_real = 2230;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PCREL: bfd_reloc_code_real = 2229;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PCREL: bfd_reloc_code_real = 2228;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW3_PCREL: bfd_reloc_code_real = 2227;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW3_PCREL: bfd_reloc_code_real = 2226;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2_PCREL: bfd_reloc_code_real = 2225;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2_PCREL: bfd_reloc_code_real = 2224;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_PCREL: bfd_reloc_code_real = 2223;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_PCREL: bfd_reloc_code_real = 2222;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_PCREL: bfd_reloc_code_real = 2221;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_PCREL: bfd_reloc_code_real = 2220;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST: bfd_reloc_code_real = 2219;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST: bfd_reloc_code_real = 2218;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST: bfd_reloc_code_real = 2217;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST: bfd_reloc_code_real = 2216;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST: bfd_reloc_code_real = 2215;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST: bfd_reloc_code_real = 2214;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW3: bfd_reloc_code_real = 2213;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW3: bfd_reloc_code_real = 2212;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW2: bfd_reloc_code_real = 2211;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW2: bfd_reloc_code_real = 2210;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW1: bfd_reloc_code_real = 2209;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW1: bfd_reloc_code_real = 2208;
pub const BFD_RELOC_TILEGX_IMM16_X1_HW0: bfd_reloc_code_real = 2207;
pub const BFD_RELOC_TILEGX_IMM16_X0_HW0: bfd_reloc_code_real = 2206;
pub const BFD_RELOC_TILEGX_SHAMT_Y1: bfd_reloc_code_real = 2205;
pub const BFD_RELOC_TILEGX_SHAMT_Y0: bfd_reloc_code_real = 2204;
pub const BFD_RELOC_TILEGX_SHAMT_X1: bfd_reloc_code_real = 2203;
pub const BFD_RELOC_TILEGX_SHAMT_X0: bfd_reloc_code_real = 2202;
pub const BFD_RELOC_TILEGX_MMEND_X0: bfd_reloc_code_real = 2201;
pub const BFD_RELOC_TILEGX_MMSTART_X0: bfd_reloc_code_real = 2200;
pub const BFD_RELOC_TILEGX_MF_IMM14_X1: bfd_reloc_code_real = 2199;
pub const BFD_RELOC_TILEGX_MT_IMM14_X1: bfd_reloc_code_real = 2198;
pub const BFD_RELOC_TILEGX_DEST_IMM8_X1: bfd_reloc_code_real = 2197;
pub const BFD_RELOC_TILEGX_IMM8_Y1: bfd_reloc_code_real = 2196;
pub const BFD_RELOC_TILEGX_IMM8_X1: bfd_reloc_code_real = 2195;
pub const BFD_RELOC_TILEGX_IMM8_Y0: bfd_reloc_code_real = 2194;
pub const BFD_RELOC_TILEGX_IMM8_X0: bfd_reloc_code_real = 2193;
pub const BFD_RELOC_TILEGX_JUMPOFF_X1_PLT: bfd_reloc_code_real = 2192;
pub const BFD_RELOC_TILEGX_JUMPOFF_X1: bfd_reloc_code_real = 2191;
pub const BFD_RELOC_TILEGX_BROFF_X1: bfd_reloc_code_real = 2190;
pub const BFD_RELOC_TILEGX_RELATIVE: bfd_reloc_code_real = 2189;
pub const BFD_RELOC_TILEGX_JMP_SLOT: bfd_reloc_code_real = 2188;
pub const BFD_RELOC_TILEGX_GLOB_DAT: bfd_reloc_code_real = 2187;
pub const BFD_RELOC_TILEGX_COPY: bfd_reloc_code_real = 2186;
pub const BFD_RELOC_TILEGX_HW2_LAST: bfd_reloc_code_real = 2185;
pub const BFD_RELOC_TILEGX_HW1_LAST: bfd_reloc_code_real = 2184;
pub const BFD_RELOC_TILEGX_HW0_LAST: bfd_reloc_code_real = 2183;
pub const BFD_RELOC_TILEGX_HW3: bfd_reloc_code_real = 2182;
pub const BFD_RELOC_TILEGX_HW2: bfd_reloc_code_real = 2181;
pub const BFD_RELOC_TILEGX_HW1: bfd_reloc_code_real = 2180;
pub const BFD_RELOC_TILEGX_HW0: bfd_reloc_code_real = 2179;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HA: bfd_reloc_code_real = 2178;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HA: bfd_reloc_code_real = 2177;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HI: bfd_reloc_code_real = 2176;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HI: bfd_reloc_code_real = 2175;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_LO: bfd_reloc_code_real = 2174;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_LO: bfd_reloc_code_real = 2173;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE: bfd_reloc_code_real = 2172;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE: bfd_reloc_code_real = 2171;
pub const BFD_RELOC_TILEPRO_TLS_TPOFF32: bfd_reloc_code_real = 2170;
pub const BFD_RELOC_TILEPRO_TLS_DTPOFF32: bfd_reloc_code_real = 2169;
pub const BFD_RELOC_TILEPRO_TLS_DTPMOD32: bfd_reloc_code_real = 2168;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HA: bfd_reloc_code_real = 2167;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HA: bfd_reloc_code_real = 2166;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HI: bfd_reloc_code_real = 2165;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HI: bfd_reloc_code_real = 2164;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_LO: bfd_reloc_code_real = 2163;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_LO: bfd_reloc_code_real = 2162;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE: bfd_reloc_code_real = 2161;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE: bfd_reloc_code_real = 2160;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HA: bfd_reloc_code_real = 2159;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HA: bfd_reloc_code_real = 2158;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HI: bfd_reloc_code_real = 2157;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HI: bfd_reloc_code_real = 2156;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_LO: bfd_reloc_code_real = 2155;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_LO: bfd_reloc_code_real = 2154;
pub const BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD: bfd_reloc_code_real = 2153;
pub const BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD: bfd_reloc_code_real = 2152;
pub const BFD_RELOC_TILEPRO_TLS_IE_LOAD: bfd_reloc_code_real = 2151;
pub const BFD_RELOC_TILEPRO_IMM8_Y1_TLS_GD_ADD: bfd_reloc_code_real = 2150;
pub const BFD_RELOC_TILEPRO_IMM8_Y0_TLS_GD_ADD: bfd_reloc_code_real = 2149;
pub const BFD_RELOC_TILEPRO_IMM8_X1_TLS_GD_ADD: bfd_reloc_code_real = 2148;
pub const BFD_RELOC_TILEPRO_IMM8_X0_TLS_GD_ADD: bfd_reloc_code_real = 2147;
pub const BFD_RELOC_TILEPRO_TLS_GD_CALL: bfd_reloc_code_real = 2146;
pub const BFD_RELOC_TILEPRO_SHAMT_Y1: bfd_reloc_code_real = 2145;
pub const BFD_RELOC_TILEPRO_SHAMT_Y0: bfd_reloc_code_real = 2144;
pub const BFD_RELOC_TILEPRO_SHAMT_X1: bfd_reloc_code_real = 2143;
pub const BFD_RELOC_TILEPRO_SHAMT_X0: bfd_reloc_code_real = 2142;
pub const BFD_RELOC_TILEPRO_MMEND_X1: bfd_reloc_code_real = 2141;
pub const BFD_RELOC_TILEPRO_MMSTART_X1: bfd_reloc_code_real = 2140;
pub const BFD_RELOC_TILEPRO_MMEND_X0: bfd_reloc_code_real = 2139;
pub const BFD_RELOC_TILEPRO_MMSTART_X0: bfd_reloc_code_real = 2138;
pub const BFD_RELOC_TILEPRO_IMM16_X1_GOT_HA: bfd_reloc_code_real = 2137;
pub const BFD_RELOC_TILEPRO_IMM16_X0_GOT_HA: bfd_reloc_code_real = 2136;
pub const BFD_RELOC_TILEPRO_IMM16_X1_GOT_HI: bfd_reloc_code_real = 2135;
pub const BFD_RELOC_TILEPRO_IMM16_X0_GOT_HI: bfd_reloc_code_real = 2134;
pub const BFD_RELOC_TILEPRO_IMM16_X1_GOT_LO: bfd_reloc_code_real = 2133;
pub const BFD_RELOC_TILEPRO_IMM16_X0_GOT_LO: bfd_reloc_code_real = 2132;
pub const BFD_RELOC_TILEPRO_IMM16_X1_GOT: bfd_reloc_code_real = 2131;
pub const BFD_RELOC_TILEPRO_IMM16_X0_GOT: bfd_reloc_code_real = 2130;
pub const BFD_RELOC_TILEPRO_IMM16_X1_HA_PCREL: bfd_reloc_code_real = 2129;
pub const BFD_RELOC_TILEPRO_IMM16_X0_HA_PCREL: bfd_reloc_code_real = 2128;
pub const BFD_RELOC_TILEPRO_IMM16_X1_HI_PCREL: bfd_reloc_code_real = 2127;
pub const BFD_RELOC_TILEPRO_IMM16_X0_HI_PCREL: bfd_reloc_code_real = 2126;
pub const BFD_RELOC_TILEPRO_IMM16_X1_LO_PCREL: bfd_reloc_code_real = 2125;
pub const BFD_RELOC_TILEPRO_IMM16_X0_LO_PCREL: bfd_reloc_code_real = 2124;
pub const BFD_RELOC_TILEPRO_IMM16_X1_PCREL: bfd_reloc_code_real = 2123;
pub const BFD_RELOC_TILEPRO_IMM16_X0_PCREL: bfd_reloc_code_real = 2122;
pub const BFD_RELOC_TILEPRO_IMM16_X1_HA: bfd_reloc_code_real = 2121;
pub const BFD_RELOC_TILEPRO_IMM16_X0_HA: bfd_reloc_code_real = 2120;
pub const BFD_RELOC_TILEPRO_IMM16_X1_HI: bfd_reloc_code_real = 2119;
pub const BFD_RELOC_TILEPRO_IMM16_X0_HI: bfd_reloc_code_real = 2118;
pub const BFD_RELOC_TILEPRO_IMM16_X1_LO: bfd_reloc_code_real = 2117;
pub const BFD_RELOC_TILEPRO_IMM16_X0_LO: bfd_reloc_code_real = 2116;
pub const BFD_RELOC_TILEPRO_IMM16_X1: bfd_reloc_code_real = 2115;
pub const BFD_RELOC_TILEPRO_IMM16_X0: bfd_reloc_code_real = 2114;
pub const BFD_RELOC_TILEPRO_MF_IMM15_X1: bfd_reloc_code_real = 2113;
pub const BFD_RELOC_TILEPRO_MT_IMM15_X1: bfd_reloc_code_real = 2112;
pub const BFD_RELOC_TILEPRO_DEST_IMM8_X1: bfd_reloc_code_real = 2111;
pub const BFD_RELOC_TILEPRO_IMM8_Y1: bfd_reloc_code_real = 2110;
pub const BFD_RELOC_TILEPRO_IMM8_X1: bfd_reloc_code_real = 2109;
pub const BFD_RELOC_TILEPRO_IMM8_Y0: bfd_reloc_code_real = 2108;
pub const BFD_RELOC_TILEPRO_IMM8_X0: bfd_reloc_code_real = 2107;
pub const BFD_RELOC_TILEPRO_JOFFLONG_X1_PLT: bfd_reloc_code_real = 2106;
pub const BFD_RELOC_TILEPRO_JOFFLONG_X1: bfd_reloc_code_real = 2105;
pub const BFD_RELOC_TILEPRO_BROFF_X1: bfd_reloc_code_real = 2104;
pub const BFD_RELOC_TILEPRO_RELATIVE: bfd_reloc_code_real = 2103;
pub const BFD_RELOC_TILEPRO_JMP_SLOT: bfd_reloc_code_real = 2102;
pub const BFD_RELOC_TILEPRO_GLOB_DAT: bfd_reloc_code_real = 2101;
pub const BFD_RELOC_TILEPRO_COPY: bfd_reloc_code_real = 2100;
pub const BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC: bfd_reloc_code_real = 2099;
pub const BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC: bfd_reloc_code_real = 2098;
pub const BFD_RELOC_AARCH64_LD_GOT_LO12_NC: bfd_reloc_code_real = 2097;
pub const BFD_RELOC_AARCH64_TLSLE_LDST_TPREL_LO12_NC: bfd_reloc_code_real = 2096;
pub const BFD_RELOC_AARCH64_TLSLE_LDST_TPREL_LO12: bfd_reloc_code_real = 2095;
pub const BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12_NC: bfd_reloc_code_real = 2094;
pub const BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12: bfd_reloc_code_real = 2093;
pub const BFD_RELOC_AARCH64_LDST_LO12: bfd_reloc_code_real = 2092;
pub const BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP: bfd_reloc_code_real = 2091;
pub const BFD_RELOC_AARCH64_RELOC_END: bfd_reloc_code_real = 2090;
pub const BFD_RELOC_AARCH64_IRELATIVE: bfd_reloc_code_real = 2089;
pub const BFD_RELOC_AARCH64_TLSDESC: bfd_reloc_code_real = 2088;
pub const BFD_RELOC_AARCH64_TLS_TPREL: bfd_reloc_code_real = 2087;
pub const BFD_RELOC_AARCH64_TLS_DTPREL: bfd_reloc_code_real = 2086;
pub const BFD_RELOC_AARCH64_TLS_DTPMOD: bfd_reloc_code_real = 2085;
pub const BFD_RELOC_AARCH64_RELATIVE: bfd_reloc_code_real = 2084;
pub const BFD_RELOC_AARCH64_JUMP_SLOT: bfd_reloc_code_real = 2083;
pub const BFD_RELOC_AARCH64_GLOB_DAT: bfd_reloc_code_real = 2082;
pub const BFD_RELOC_AARCH64_COPY: bfd_reloc_code_real = 2081;
pub const BFD_RELOC_AARCH64_TLSDESC_CALL: bfd_reloc_code_real = 2080;
pub const BFD_RELOC_AARCH64_TLSDESC_ADD: bfd_reloc_code_real = 2079;
pub const BFD_RELOC_AARCH64_TLSDESC_LDR: bfd_reloc_code_real = 2078;
pub const BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC: bfd_reloc_code_real = 2077;
pub const BFD_RELOC_AARCH64_TLSDESC_OFF_G1: bfd_reloc_code_real = 2076;
pub const BFD_RELOC_AARCH64_TLSDESC_ADD_LO12: bfd_reloc_code_real = 2075;
pub const BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC: bfd_reloc_code_real = 2074;
pub const BFD_RELOC_AARCH64_TLSDESC_LD64_LO12: bfd_reloc_code_real = 2073;
pub const BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21: bfd_reloc_code_real = 2072;
pub const BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21: bfd_reloc_code_real = 2071;
pub const BFD_RELOC_AARCH64_TLSDESC_LD_PREL19: bfd_reloc_code_real = 2070;
pub const BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12_NC: bfd_reloc_code_real = 2069;
pub const BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12: bfd_reloc_code_real = 2068;
pub const BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12_NC: bfd_reloc_code_real = 2067;
pub const BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12: bfd_reloc_code_real = 2066;
pub const BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12_NC: bfd_reloc_code_real = 2065;
pub const BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12: bfd_reloc_code_real = 2064;
pub const BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12_NC: bfd_reloc_code_real = 2063;
pub const BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12: bfd_reloc_code_real = 2062;
pub const BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC: bfd_reloc_code_real = 2061;
pub const BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12: bfd_reloc_code_real = 2060;
pub const BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12: bfd_reloc_code_real = 2059;
pub const BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC: bfd_reloc_code_real = 2058;
pub const BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0: bfd_reloc_code_real = 2057;
pub const BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC: bfd_reloc_code_real = 2056;
pub const BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1: bfd_reloc_code_real = 2055;
pub const BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2: bfd_reloc_code_real = 2054;
pub const BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2: bfd_reloc_code_real = 2053;
pub const BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC: bfd_reloc_code_real = 2052;
pub const BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1: bfd_reloc_code_real = 2051;
pub const BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC: bfd_reloc_code_real = 2050;
pub const BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0: bfd_reloc_code_real = 2049;
pub const BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC: bfd_reloc_code_real = 2048;
pub const BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12: bfd_reloc_code_real = 2047;
pub const BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC: bfd_reloc_code_real = 2046;
pub const BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12: bfd_reloc_code_real = 2045;
pub const BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC: bfd_reloc_code_real = 2044;
pub const BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12: bfd_reloc_code_real = 2043;
pub const BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC: bfd_reloc_code_real = 2042;
pub const BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12: bfd_reloc_code_real = 2041;
pub const BFD_RELOC_AARCH64_TLSLD_ADR_PREL21: bfd_reloc_code_real = 2040;
pub const BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21: bfd_reloc_code_real = 2039;
pub const BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC: bfd_reloc_code_real = 2038;
pub const BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC: bfd_reloc_code_real = 2037;
pub const BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12: bfd_reloc_code_real = 2036;
pub const BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12: bfd_reloc_code_real = 2035;
pub const BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1: bfd_reloc_code_real = 2034;
pub const BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC: bfd_reloc_code_real = 2033;
pub const BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19: bfd_reloc_code_real = 2032;
pub const BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC: bfd_reloc_code_real = 2031;
pub const BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC: bfd_reloc_code_real = 2030;
pub const BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21: bfd_reloc_code_real = 2029;
pub const BFD_RELOC_AARCH64_TLSGD_MOVW_G1: bfd_reloc_code_real = 2028;
pub const BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC: bfd_reloc_code_real = 2027;
pub const BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC: bfd_reloc_code_real = 2026;
pub const BFD_RELOC_AARCH64_TLSGD_ADR_PREL21: bfd_reloc_code_real = 2025;
pub const BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21: bfd_reloc_code_real = 2024;
pub const BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15: bfd_reloc_code_real = 2023;
pub const BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14: bfd_reloc_code_real = 2022;
pub const BFD_RELOC_AARCH64_LD64_GOTOFF_LO15: bfd_reloc_code_real = 2021;
pub const BFD_RELOC_AARCH64_MOVW_GOTOFF_G1: bfd_reloc_code_real = 2020;
pub const BFD_RELOC_AARCH64_MOVW_GOTOFF_G0_NC: bfd_reloc_code_real = 2019;
pub const BFD_RELOC_AARCH64_LD32_GOT_LO12_NC: bfd_reloc_code_real = 2018;
pub const BFD_RELOC_AARCH64_LD64_GOT_LO12_NC: bfd_reloc_code_real = 2017;
pub const BFD_RELOC_AARCH64_ADR_GOT_PAGE: bfd_reloc_code_real = 2016;
pub const BFD_RELOC_AARCH64_GOT_LD_PREL19: bfd_reloc_code_real = 2015;
pub const BFD_RELOC_AARCH64_LDST128_LO12: bfd_reloc_code_real = 2014;
pub const BFD_RELOC_AARCH64_LDST64_LO12: bfd_reloc_code_real = 2013;
pub const BFD_RELOC_AARCH64_LDST32_LO12: bfd_reloc_code_real = 2012;
pub const BFD_RELOC_AARCH64_LDST16_LO12: bfd_reloc_code_real = 2011;
pub const BFD_RELOC_AARCH64_CALL26: bfd_reloc_code_real = 2010;
pub const BFD_RELOC_AARCH64_JUMP26: bfd_reloc_code_real = 2009;
pub const BFD_RELOC_AARCH64_BRANCH19: bfd_reloc_code_real = 2008;
pub const BFD_RELOC_AARCH64_TSTBR14: bfd_reloc_code_real = 2007;
pub const BFD_RELOC_AARCH64_LDST8_LO12: bfd_reloc_code_real = 2006;
pub const BFD_RELOC_AARCH64_ADD_LO12: bfd_reloc_code_real = 2005;
pub const BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL: bfd_reloc_code_real = 2004;
pub const BFD_RELOC_AARCH64_ADR_HI21_PCREL: bfd_reloc_code_real = 2003;
pub const BFD_RELOC_AARCH64_ADR_LO21_PCREL: bfd_reloc_code_real = 2002;
pub const BFD_RELOC_AARCH64_LD_LO19_PCREL: bfd_reloc_code_real = 2001;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G3: bfd_reloc_code_real = 2000;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G2_NC: bfd_reloc_code_real = 1999;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G2: bfd_reloc_code_real = 1998;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G1_NC: bfd_reloc_code_real = 1997;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G1: bfd_reloc_code_real = 1996;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G0_NC: bfd_reloc_code_real = 1995;
pub const BFD_RELOC_AARCH64_MOVW_PREL_G0: bfd_reloc_code_real = 1994;
pub const BFD_RELOC_AARCH64_MOVW_G2_S: bfd_reloc_code_real = 1993;
pub const BFD_RELOC_AARCH64_MOVW_G1_S: bfd_reloc_code_real = 1992;
pub const BFD_RELOC_AARCH64_MOVW_G0_S: bfd_reloc_code_real = 1991;
pub const BFD_RELOC_AARCH64_MOVW_G3: bfd_reloc_code_real = 1990;
pub const BFD_RELOC_AARCH64_MOVW_G2_NC: bfd_reloc_code_real = 1989;
pub const BFD_RELOC_AARCH64_MOVW_G2: bfd_reloc_code_real = 1988;
pub const BFD_RELOC_AARCH64_MOVW_G1_NC: bfd_reloc_code_real = 1987;
pub const BFD_RELOC_AARCH64_MOVW_G1: bfd_reloc_code_real = 1986;
pub const BFD_RELOC_AARCH64_MOVW_G0_NC: bfd_reloc_code_real = 1985;
pub const BFD_RELOC_AARCH64_MOVW_G0: bfd_reloc_code_real = 1984;
pub const BFD_RELOC_AARCH64_16_PCREL: bfd_reloc_code_real = 1983;
pub const BFD_RELOC_AARCH64_32_PCREL: bfd_reloc_code_real = 1982;
pub const BFD_RELOC_AARCH64_64_PCREL: bfd_reloc_code_real = 1981;
pub const BFD_RELOC_AARCH64_16: bfd_reloc_code_real = 1980;
pub const BFD_RELOC_AARCH64_32: bfd_reloc_code_real = 1979;
pub const BFD_RELOC_AARCH64_64: bfd_reloc_code_real = 1978;
pub const BFD_RELOC_AARCH64_NONE: bfd_reloc_code_real = 1977;
pub const BFD_RELOC_AARCH64_NULL: bfd_reloc_code_real = 1976;
pub const BFD_RELOC_AARCH64_RELOC_START: bfd_reloc_code_real = 1975;
pub const BFD_RELOC_MICROBLAZE_64_TEXTREL: bfd_reloc_code_real = 1974;
pub const BFD_RELOC_MICROBLAZE_64_TEXTPCREL: bfd_reloc_code_real = 1973;
pub const BFD_RELOC_MICROBLAZE_64_TLSTPREL: bfd_reloc_code_real = 1972;
pub const BFD_RELOC_MICROBLAZE_64_TLSGOTTPREL: bfd_reloc_code_real = 1971;
pub const BFD_RELOC_MICROBLAZE_64_TLSDTPREL: bfd_reloc_code_real = 1970;
pub const BFD_RELOC_MICROBLAZE_32_TLSDTPREL: bfd_reloc_code_real = 1969;
pub const BFD_RELOC_MICROBLAZE_32_TLSDTPMOD: bfd_reloc_code_real = 1968;
pub const BFD_RELOC_MICROBLAZE_64_TLSLD: bfd_reloc_code_real = 1967;
pub const BFD_RELOC_MICROBLAZE_64_TLSGD: bfd_reloc_code_real = 1966;
pub const BFD_RELOC_MICROBLAZE_64_TLS: bfd_reloc_code_real = 1965;
pub const BFD_RELOC_MICROBLAZE_COPY: bfd_reloc_code_real = 1964;
pub const BFD_RELOC_MICROBLAZE_32_GOTOFF: bfd_reloc_code_real = 1963;
pub const BFD_RELOC_MICROBLAZE_64_GOTOFF: bfd_reloc_code_real = 1962;
pub const BFD_RELOC_MICROBLAZE_64_PLT: bfd_reloc_code_real = 1961;
pub const BFD_RELOC_MICROBLAZE_64_GOT: bfd_reloc_code_real = 1960;
pub const BFD_RELOC_MICROBLAZE_64_GOTPC: bfd_reloc_code_real = 1959;
pub const BFD_RELOC_MICROBLAZE_64_NONE: bfd_reloc_code_real = 1958;
pub const BFD_RELOC_MICROBLAZE_32_SYM_OP_SYM: bfd_reloc_code_real = 1957;
pub const BFD_RELOC_MICROBLAZE_32_RWSDA: bfd_reloc_code_real = 1956;
pub const BFD_RELOC_MICROBLAZE_32_ROSDA: bfd_reloc_code_real = 1955;
pub const BFD_RELOC_MICROBLAZE_32_LO_PCREL: bfd_reloc_code_real = 1954;
pub const BFD_RELOC_MICROBLAZE_32_LO: bfd_reloc_code_real = 1953;
pub const BFD_RELOC_MACH_O_ARM64_POINTER_TO_GOT: bfd_reloc_code_real = 1952;
pub const BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGEOFF12: bfd_reloc_code_real = 1951;
pub const BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGE21: bfd_reloc_code_real = 1950;
pub const BFD_RELOC_MACH_O_ARM64_ADDEND: bfd_reloc_code_real = 1949;
pub const BFD_RELOC_MACH_O_X86_64_TLV: bfd_reloc_code_real = 1948;
pub const BFD_RELOC_MACH_O_X86_64_PCREL32_4: bfd_reloc_code_real = 1947;
pub const BFD_RELOC_MACH_O_X86_64_PCREL32_2: bfd_reloc_code_real = 1946;
pub const BFD_RELOC_MACH_O_X86_64_PCREL32_1: bfd_reloc_code_real = 1945;
pub const BFD_RELOC_MACH_O_X86_64_GOT_LOAD: bfd_reloc_code_real = 1944;
pub const BFD_RELOC_MACH_O_X86_64_GOT: bfd_reloc_code_real = 1943;
pub const BFD_RELOC_MACH_O_X86_64_BRANCH8: bfd_reloc_code_real = 1942;
pub const BFD_RELOC_MACH_O_X86_64_BRANCH32: bfd_reloc_code_real = 1941;
pub const BFD_RELOC_MACH_O_SUBTRACTOR64: bfd_reloc_code_real = 1940;
pub const BFD_RELOC_MACH_O_SUBTRACTOR32: bfd_reloc_code_real = 1939;
pub const BFD_RELOC_MACH_O_PAIR: bfd_reloc_code_real = 1938;
pub const BFD_RELOC_MACH_O_LOCAL_SECTDIFF: bfd_reloc_code_real = 1937;
pub const BFD_RELOC_MACH_O_SECTDIFF: bfd_reloc_code_real = 1936;
pub const BFD_RELOC_LM32_RELATIVE: bfd_reloc_code_real = 1935;
pub const BFD_RELOC_LM32_JMP_SLOT: bfd_reloc_code_real = 1934;
pub const BFD_RELOC_LM32_GLOB_DAT: bfd_reloc_code_real = 1933;
pub const BFD_RELOC_LM32_COPY: bfd_reloc_code_real = 1932;
pub const BFD_RELOC_LM32_GOTOFF_LO16: bfd_reloc_code_real = 1931;
pub const BFD_RELOC_LM32_GOTOFF_HI16: bfd_reloc_code_real = 1930;
pub const BFD_RELOC_LM32_16_GOT: bfd_reloc_code_real = 1929;
pub const BFD_RELOC_LM32_BRANCH: bfd_reloc_code_real = 1928;
pub const BFD_RELOC_LM32_CALL: bfd_reloc_code_real = 1927;
pub const BFD_RELOC_Z8K_IMM4L: bfd_reloc_code_real = 1926;
pub const BFD_RELOC_Z8K_CALLR: bfd_reloc_code_real = 1925;
pub const BFD_RELOC_Z8K_DISP7: bfd_reloc_code_real = 1924;
pub const BFD_RELOC_Z80_16_BE: bfd_reloc_code_real = 1923;
pub const BFD_RELOC_Z80_WORD1: bfd_reloc_code_real = 1922;
pub const BFD_RELOC_Z80_WORD0: bfd_reloc_code_real = 1921;
pub const BFD_RELOC_Z80_BYTE3: bfd_reloc_code_real = 1920;
pub const BFD_RELOC_Z80_BYTE2: bfd_reloc_code_real = 1919;
pub const BFD_RELOC_Z80_BYTE1: bfd_reloc_code_real = 1918;
pub const BFD_RELOC_Z80_BYTE0: bfd_reloc_code_real = 1917;
pub const BFD_RELOC_Z80_DISP8: bfd_reloc_code_real = 1916;
pub const BFD_RELOC_XTENSA_NDIFF32: bfd_reloc_code_real = 1915;
pub const BFD_RELOC_XTENSA_NDIFF16: bfd_reloc_code_real = 1914;
pub const BFD_RELOC_XTENSA_NDIFF8: bfd_reloc_code_real = 1913;
pub const BFD_RELOC_XTENSA_PDIFF32: bfd_reloc_code_real = 1912;
pub const BFD_RELOC_XTENSA_PDIFF16: bfd_reloc_code_real = 1911;
pub const BFD_RELOC_XTENSA_PDIFF8: bfd_reloc_code_real = 1910;
pub const BFD_RELOC_XTENSA_TLS_CALL: bfd_reloc_code_real = 1909;
pub const BFD_RELOC_XTENSA_TLS_ARG: bfd_reloc_code_real = 1908;
pub const BFD_RELOC_XTENSA_TLS_FUNC: bfd_reloc_code_real = 1907;
pub const BFD_RELOC_XTENSA_TLS_TPOFF: bfd_reloc_code_real = 1906;
pub const BFD_RELOC_XTENSA_TLS_DTPOFF: bfd_reloc_code_real = 1905;
pub const BFD_RELOC_XTENSA_TLSDESC_ARG: bfd_reloc_code_real = 1904;
pub const BFD_RELOC_XTENSA_TLSDESC_FN: bfd_reloc_code_real = 1903;
pub const BFD_RELOC_XTENSA_ASM_SIMPLIFY: bfd_reloc_code_real = 1902;
pub const BFD_RELOC_XTENSA_ASM_EXPAND: bfd_reloc_code_real = 1901;
pub const BFD_RELOC_XTENSA_OP2: bfd_reloc_code_real = 1900;
pub const BFD_RELOC_XTENSA_OP1: bfd_reloc_code_real = 1899;
pub const BFD_RELOC_XTENSA_OP0: bfd_reloc_code_real = 1898;
pub const BFD_RELOC_XTENSA_SLOT14_ALT: bfd_reloc_code_real = 1897;
pub const BFD_RELOC_XTENSA_SLOT13_ALT: bfd_reloc_code_real = 1896;
pub const BFD_RELOC_XTENSA_SLOT12_ALT: bfd_reloc_code_real = 1895;
pub const BFD_RELOC_XTENSA_SLOT11_ALT: bfd_reloc_code_real = 1894;
pub const BFD_RELOC_XTENSA_SLOT10_ALT: bfd_reloc_code_real = 1893;
pub const BFD_RELOC_XTENSA_SLOT9_ALT: bfd_reloc_code_real = 1892;
pub const BFD_RELOC_XTENSA_SLOT8_ALT: bfd_reloc_code_real = 1891;
pub const BFD_RELOC_XTENSA_SLOT7_ALT: bfd_reloc_code_real = 1890;
pub const BFD_RELOC_XTENSA_SLOT6_ALT: bfd_reloc_code_real = 1889;
pub const BFD_RELOC_XTENSA_SLOT5_ALT: bfd_reloc_code_real = 1888;
pub const BFD_RELOC_XTENSA_SLOT4_ALT: bfd_reloc_code_real = 1887;
pub const BFD_RELOC_XTENSA_SLOT3_ALT: bfd_reloc_code_real = 1886;
pub const BFD_RELOC_XTENSA_SLOT2_ALT: bfd_reloc_code_real = 1885;
pub const BFD_RELOC_XTENSA_SLOT1_ALT: bfd_reloc_code_real = 1884;
pub const BFD_RELOC_XTENSA_SLOT0_ALT: bfd_reloc_code_real = 1883;
pub const BFD_RELOC_XTENSA_SLOT14_OP: bfd_reloc_code_real = 1882;
pub const BFD_RELOC_XTENSA_SLOT13_OP: bfd_reloc_code_real = 1881;
pub const BFD_RELOC_XTENSA_SLOT12_OP: bfd_reloc_code_real = 1880;
pub const BFD_RELOC_XTENSA_SLOT11_OP: bfd_reloc_code_real = 1879;
pub const BFD_RELOC_XTENSA_SLOT10_OP: bfd_reloc_code_real = 1878;
pub const BFD_RELOC_XTENSA_SLOT9_OP: bfd_reloc_code_real = 1877;
pub const BFD_RELOC_XTENSA_SLOT8_OP: bfd_reloc_code_real = 1876;
pub const BFD_RELOC_XTENSA_SLOT7_OP: bfd_reloc_code_real = 1875;
pub const BFD_RELOC_XTENSA_SLOT6_OP: bfd_reloc_code_real = 1874;
pub const BFD_RELOC_XTENSA_SLOT5_OP: bfd_reloc_code_real = 1873;
pub const BFD_RELOC_XTENSA_SLOT4_OP: bfd_reloc_code_real = 1872;
pub const BFD_RELOC_XTENSA_SLOT3_OP: bfd_reloc_code_real = 1871;
pub const BFD_RELOC_XTENSA_SLOT2_OP: bfd_reloc_code_real = 1870;
pub const BFD_RELOC_XTENSA_SLOT1_OP: bfd_reloc_code_real = 1869;
pub const BFD_RELOC_XTENSA_SLOT0_OP: bfd_reloc_code_real = 1868;
pub const BFD_RELOC_XTENSA_DIFF32: bfd_reloc_code_real = 1867;
pub const BFD_RELOC_XTENSA_DIFF16: bfd_reloc_code_real = 1866;
pub const BFD_RELOC_XTENSA_DIFF8: bfd_reloc_code_real = 1865;
pub const BFD_RELOC_XTENSA_PLT: bfd_reloc_code_real = 1864;
pub const BFD_RELOC_XTENSA_RELATIVE: bfd_reloc_code_real = 1863;
pub const BFD_RELOC_XTENSA_JMP_SLOT: bfd_reloc_code_real = 1862;
pub const BFD_RELOC_XTENSA_GLOB_DAT: bfd_reloc_code_real = 1861;
pub const BFD_RELOC_XTENSA_RTLD: bfd_reloc_code_real = 1860;
pub const BFD_RELOC_IQ2000_UHI16: bfd_reloc_code_real = 1859;
pub const BFD_RELOC_IQ2000_OFFSET_21: bfd_reloc_code_real = 1858;
pub const BFD_RELOC_IQ2000_OFFSET_16: bfd_reloc_code_real = 1857;
pub const BFD_RELOC_PRU_GNU_DIFF32_PMEM: bfd_reloc_code_real = 1856;
pub const BFD_RELOC_PRU_GNU_DIFF16_PMEM: bfd_reloc_code_real = 1855;
pub const BFD_RELOC_PRU_GNU_DIFF32: bfd_reloc_code_real = 1854;
pub const BFD_RELOC_PRU_GNU_DIFF16: bfd_reloc_code_real = 1853;
pub const BFD_RELOC_PRU_GNU_DIFF8: bfd_reloc_code_real = 1852;
pub const BFD_RELOC_PRU_16_PMEM: bfd_reloc_code_real = 1851;
pub const BFD_RELOC_PRU_32_PMEM: bfd_reloc_code_real = 1850;
pub const BFD_RELOC_PRU_U8_PCREL: bfd_reloc_code_real = 1849;
pub const BFD_RELOC_PRU_S10_PCREL: bfd_reloc_code_real = 1848;
pub const BFD_RELOC_PRU_LDI32: bfd_reloc_code_real = 1847;
pub const BFD_RELOC_PRU_U16_PMEMIMM: bfd_reloc_code_real = 1846;
pub const BFD_RELOC_PRU_U16: bfd_reloc_code_real = 1845;
pub const BFD_RELOC_NIOS2_R2_T1X1I6_2: bfd_reloc_code_real = 1844;
pub const BFD_RELOC_NIOS2_R2_T1X1I6: bfd_reloc_code_real = 1843;
pub const BFD_RELOC_NIOS2_R2_L5I4X1: bfd_reloc_code_real = 1842;
pub const BFD_RELOC_NIOS2_R2_F1I5_2: bfd_reloc_code_real = 1841;
pub const BFD_RELOC_NIOS2_R2_X2L5: bfd_reloc_code_real = 1840;
pub const BFD_RELOC_NIOS2_R2_X1I7_2: bfd_reloc_code_real = 1839;
pub const BFD_RELOC_NIOS2_R2_T2I4_2: bfd_reloc_code_real = 1838;
pub const BFD_RELOC_NIOS2_R2_T2I4_1: bfd_reloc_code_real = 1837;
pub const BFD_RELOC_NIOS2_R2_T2I4: bfd_reloc_code_real = 1836;
pub const BFD_RELOC_NIOS2_R2_T1I7_2: bfd_reloc_code_real = 1835;
pub const BFD_RELOC_NIOS2_R2_T1I7_1_PCREL: bfd_reloc_code_real = 1834;
pub const BFD_RELOC_NIOS2_R2_I10_1_PCREL: bfd_reloc_code_real = 1833;
pub const BFD_RELOC_NIOS2_R2_S12: bfd_reloc_code_real = 1832;
pub const BFD_RELOC_NIOS2_CALL_HA: bfd_reloc_code_real = 1831;
pub const BFD_RELOC_NIOS2_CALL_LO: bfd_reloc_code_real = 1830;
pub const BFD_RELOC_NIOS2_GOT_HA: bfd_reloc_code_real = 1829;
pub const BFD_RELOC_NIOS2_GOT_LO: bfd_reloc_code_real = 1828;
pub const BFD_RELOC_NIOS2_CALL26_NOAT: bfd_reloc_code_real = 1827;
pub const BFD_RELOC_NIOS2_GOTOFF: bfd_reloc_code_real = 1826;
pub const BFD_RELOC_NIOS2_RELATIVE: bfd_reloc_code_real = 1825;
pub const BFD_RELOC_NIOS2_JUMP_SLOT: bfd_reloc_code_real = 1824;
pub const BFD_RELOC_NIOS2_GLOB_DAT: bfd_reloc_code_real = 1823;
pub const BFD_RELOC_NIOS2_COPY: bfd_reloc_code_real = 1822;
pub const BFD_RELOC_NIOS2_TLS_TPREL: bfd_reloc_code_real = 1821;
pub const BFD_RELOC_NIOS2_TLS_DTPREL: bfd_reloc_code_real = 1820;
pub const BFD_RELOC_NIOS2_TLS_DTPMOD: bfd_reloc_code_real = 1819;
pub const BFD_RELOC_NIOS2_TLS_LE16: bfd_reloc_code_real = 1818;
pub const BFD_RELOC_NIOS2_TLS_IE16: bfd_reloc_code_real = 1817;
pub const BFD_RELOC_NIOS2_TLS_LDO16: bfd_reloc_code_real = 1816;
pub const BFD_RELOC_NIOS2_TLS_LDM16: bfd_reloc_code_real = 1815;
pub const BFD_RELOC_NIOS2_TLS_GD16: bfd_reloc_code_real = 1814;
pub const BFD_RELOC_NIOS2_PCREL_HA: bfd_reloc_code_real = 1813;
pub const BFD_RELOC_NIOS2_PCREL_LO: bfd_reloc_code_real = 1812;
pub const BFD_RELOC_NIOS2_GOTOFF_HA: bfd_reloc_code_real = 1811;
pub const BFD_RELOC_NIOS2_GOTOFF_LO: bfd_reloc_code_real = 1810;
pub const BFD_RELOC_NIOS2_CALL16: bfd_reloc_code_real = 1809;
pub const BFD_RELOC_NIOS2_GOT16: bfd_reloc_code_real = 1808;
pub const BFD_RELOC_NIOS2_ALIGN: bfd_reloc_code_real = 1807;
pub const BFD_RELOC_NIOS2_CALLR: bfd_reloc_code_real = 1806;
pub const BFD_RELOC_NIOS2_CJMP: bfd_reloc_code_real = 1805;
pub const BFD_RELOC_NIOS2_UJMP: bfd_reloc_code_real = 1804;
pub const BFD_RELOC_NIOS2_GPREL: bfd_reloc_code_real = 1803;
pub const BFD_RELOC_NIOS2_HIADJ16: bfd_reloc_code_real = 1802;
pub const BFD_RELOC_NIOS2_LO16: bfd_reloc_code_real = 1801;
pub const BFD_RELOC_NIOS2_HI16: bfd_reloc_code_real = 1800;
pub const BFD_RELOC_NIOS2_IMM8: bfd_reloc_code_real = 1799;
pub const BFD_RELOC_NIOS2_IMM6: bfd_reloc_code_real = 1798;
pub const BFD_RELOC_NIOS2_CACHE_OPX: bfd_reloc_code_real = 1797;
pub const BFD_RELOC_NIOS2_IMM5: bfd_reloc_code_real = 1796;
pub const BFD_RELOC_NIOS2_CALL26: bfd_reloc_code_real = 1795;
pub const BFD_RELOC_NIOS2_U16: bfd_reloc_code_real = 1794;
pub const BFD_RELOC_NIOS2_S16: bfd_reloc_code_real = 1793;
pub const BFD_RELOC_MSP430_SUB_ULEB128: bfd_reloc_code_real = 1792;
pub const BFD_RELOC_MSP430_SET_ULEB128: bfd_reloc_code_real = 1791;
pub const BFD_RELOC_MSP430_SYM_DIFF: bfd_reloc_code_real = 1790;
pub const BFD_RELOC_MSP430_PREL31: bfd_reloc_code_real = 1789;
pub const BFD_RELOC_MSP430_ABS_HI16: bfd_reloc_code_real = 1788;
pub const BFD_RELOC_MSP430X_ABS16: bfd_reloc_code_real = 1787;
pub const BFD_RELOC_MSP430X_PCR20_CALL: bfd_reloc_code_real = 1786;
pub const BFD_RELOC_MSP430X_PCR16: bfd_reloc_code_real = 1785;
pub const BFD_RELOC_MSP430X_ABS20_ADR_DST: bfd_reloc_code_real = 1784;
pub const BFD_RELOC_MSP430X_ABS20_ADR_SRC: bfd_reloc_code_real = 1783;
pub const BFD_RELOC_MSP430X_ABS20_EXT_ODST: bfd_reloc_code_real = 1782;
pub const BFD_RELOC_MSP430X_ABS20_EXT_DST: bfd_reloc_code_real = 1781;
pub const BFD_RELOC_MSP430X_ABS20_EXT_SRC: bfd_reloc_code_real = 1780;
pub const BFD_RELOC_MSP430X_PCR20_EXT_ODST: bfd_reloc_code_real = 1779;
pub const BFD_RELOC_MSP430X_PCR20_EXT_DST: bfd_reloc_code_real = 1778;
pub const BFD_RELOC_MSP430X_PCR20_EXT_SRC: bfd_reloc_code_real = 1777;
pub const BFD_RELOC_MSP430_ABS8: bfd_reloc_code_real = 1776;
pub const BFD_RELOC_MSP430_RL_PCREL: bfd_reloc_code_real = 1775;
pub const BFD_RELOC_MSP430_2X_PCREL: bfd_reloc_code_real = 1774;
pub const BFD_RELOC_MSP430_16_BYTE: bfd_reloc_code_real = 1773;
pub const BFD_RELOC_MSP430_16_PCREL_BYTE: bfd_reloc_code_real = 1772;
pub const BFD_RELOC_MSP430_16: bfd_reloc_code_real = 1771;
pub const BFD_RELOC_MSP430_16_PCREL: bfd_reloc_code_real = 1770;
pub const BFD_RELOC_MSP430_10_PCREL: bfd_reloc_code_real = 1769;
pub const BFD_RELOC_MT_PCINSN8: bfd_reloc_code_real = 1768;
pub const BFD_RELOC_MT_GNU_VTENTRY: bfd_reloc_code_real = 1767;
pub const BFD_RELOC_MT_GNU_VTINHERIT: bfd_reloc_code_real = 1766;
pub const BFD_RELOC_MT_LO16: bfd_reloc_code_real = 1765;
pub const BFD_RELOC_MT_HI16: bfd_reloc_code_real = 1764;
pub const BFD_RELOC_MT_PC16: bfd_reloc_code_real = 1763;
pub const BFD_RELOC_VAX_RELATIVE: bfd_reloc_code_real = 1762;
pub const BFD_RELOC_VAX_JMP_SLOT: bfd_reloc_code_real = 1761;
pub const BFD_RELOC_VAX_GLOB_DAT: bfd_reloc_code_real = 1760;
pub const BFD_RELOC_XC16X_SOF: bfd_reloc_code_real = 1759;
pub const BFD_RELOC_XC16X_SEG: bfd_reloc_code_real = 1758;
pub const BFD_RELOC_XC16X_POF: bfd_reloc_code_real = 1757;
pub const BFD_RELOC_XC16X_PAG: bfd_reloc_code_real = 1756;
pub const BFD_RELOC_RELC: bfd_reloc_code_real = 1755;
pub const BFD_RELOC_XSTORMY16_FPTR16: bfd_reloc_code_real = 1754;
pub const BFD_RELOC_XSTORMY16_24: bfd_reloc_code_real = 1753;
pub const BFD_RELOC_XSTORMY16_12: bfd_reloc_code_real = 1752;
pub const BFD_RELOC_XSTORMY16_REL_12: bfd_reloc_code_real = 1751;
pub const BFD_RELOC_H8_DISP32A16: bfd_reloc_code_real = 1750;
pub const BFD_RELOC_H8_DIR32A16: bfd_reloc_code_real = 1749;
pub const BFD_RELOC_H8_DIR24R8: bfd_reloc_code_real = 1748;
pub const BFD_RELOC_H8_DIR24A8: bfd_reloc_code_real = 1747;
pub const BFD_RELOC_H8_DIR16R8: bfd_reloc_code_real = 1746;
pub const BFD_RELOC_H8_DIR16A8: bfd_reloc_code_real = 1745;
pub const BFD_RELOC_OR1K_TLS_DTPMOD: bfd_reloc_code_real = 1744;
pub const BFD_RELOC_OR1K_TLS_DTPOFF: bfd_reloc_code_real = 1743;
pub const BFD_RELOC_OR1K_TLS_TPOFF: bfd_reloc_code_real = 1742;
pub const BFD_RELOC_OR1K_TLS_LE_SLO16: bfd_reloc_code_real = 1741;
pub const BFD_RELOC_OR1K_TLS_LE_LO16: bfd_reloc_code_real = 1740;
pub const BFD_RELOC_OR1K_TLS_LE_AHI16: bfd_reloc_code_real = 1739;
pub const BFD_RELOC_OR1K_TLS_LE_HI16: bfd_reloc_code_real = 1738;
pub const BFD_RELOC_OR1K_TLS_IE_LO13: bfd_reloc_code_real = 1737;
pub const BFD_RELOC_OR1K_TLS_IE_PG21: bfd_reloc_code_real = 1736;
pub const BFD_RELOC_OR1K_TLS_IE_LO16: bfd_reloc_code_real = 1735;
pub const BFD_RELOC_OR1K_TLS_IE_AHI16: bfd_reloc_code_real = 1734;
pub const BFD_RELOC_OR1K_TLS_IE_HI16: bfd_reloc_code_real = 1733;
pub const BFD_RELOC_OR1K_TLS_LDO_LO16: bfd_reloc_code_real = 1732;
pub const BFD_RELOC_OR1K_TLS_LDO_HI16: bfd_reloc_code_real = 1731;
pub const BFD_RELOC_OR1K_TLS_LDM_LO13: bfd_reloc_code_real = 1730;
pub const BFD_RELOC_OR1K_TLS_LDM_PG21: bfd_reloc_code_real = 1729;
pub const BFD_RELOC_OR1K_TLS_LDM_LO16: bfd_reloc_code_real = 1728;
pub const BFD_RELOC_OR1K_TLS_LDM_HI16: bfd_reloc_code_real = 1727;
pub const BFD_RELOC_OR1K_TLS_GD_LO13: bfd_reloc_code_real = 1726;
pub const BFD_RELOC_OR1K_TLS_GD_PG21: bfd_reloc_code_real = 1725;
pub const BFD_RELOC_OR1K_TLS_GD_LO16: bfd_reloc_code_real = 1724;
pub const BFD_RELOC_OR1K_TLS_GD_HI16: bfd_reloc_code_real = 1723;
pub const BFD_RELOC_OR1K_RELATIVE: bfd_reloc_code_real = 1722;
pub const BFD_RELOC_OR1K_JMP_SLOT: bfd_reloc_code_real = 1721;
pub const BFD_RELOC_OR1K_GLOB_DAT: bfd_reloc_code_real = 1720;
pub const BFD_RELOC_OR1K_COPY: bfd_reloc_code_real = 1719;
pub const BFD_RELOC_OR1K_GOTOFF_SLO16: bfd_reloc_code_real = 1718;
pub const BFD_RELOC_OR1K_PLTA26: bfd_reloc_code_real = 1717;
pub const BFD_RELOC_OR1K_PLT26: bfd_reloc_code_real = 1716;
pub const BFD_RELOC_OR1K_GOT_LO13: bfd_reloc_code_real = 1715;
pub const BFD_RELOC_OR1K_GOT_PG21: bfd_reloc_code_real = 1714;
pub const BFD_RELOC_OR1K_GOT16: bfd_reloc_code_real = 1713;
pub const BFD_RELOC_OR1K_GOT_AHI16: bfd_reloc_code_real = 1712;
pub const BFD_RELOC_OR1K_GOTPC_LO16: bfd_reloc_code_real = 1711;
pub const BFD_RELOC_OR1K_GOTPC_HI16: bfd_reloc_code_real = 1710;
pub const BFD_RELOC_OR1K_SLO13: bfd_reloc_code_real = 1709;
pub const BFD_RELOC_OR1K_LO13: bfd_reloc_code_real = 1708;
pub const BFD_RELOC_OR1K_PCREL_PG21: bfd_reloc_code_real = 1707;
pub const BFD_RELOC_OR1K_SLO16: bfd_reloc_code_real = 1706;
pub const BFD_RELOC_OR1K_REL_26: bfd_reloc_code_real = 1705;
pub const BFD_RELOC_CRIS_32_IE: bfd_reloc_code_real = 1704;
pub const BFD_RELOC_CRIS_DTPMOD: bfd_reloc_code_real = 1703;
pub const BFD_RELOC_CRIS_16_TPREL: bfd_reloc_code_real = 1702;
pub const BFD_RELOC_CRIS_32_TPREL: bfd_reloc_code_real = 1701;
pub const BFD_RELOC_CRIS_16_GOT_TPREL: bfd_reloc_code_real = 1700;
pub const BFD_RELOC_CRIS_32_GOT_TPREL: bfd_reloc_code_real = 1699;
pub const BFD_RELOC_CRIS_16_DTPREL: bfd_reloc_code_real = 1698;
pub const BFD_RELOC_CRIS_32_DTPREL: bfd_reloc_code_real = 1697;
pub const BFD_RELOC_CRIS_DTP: bfd_reloc_code_real = 1696;
pub const BFD_RELOC_CRIS_32_GD: bfd_reloc_code_real = 1695;
pub const BFD_RELOC_CRIS_16_GOT_GD: bfd_reloc_code_real = 1694;
pub const BFD_RELOC_CRIS_32_GOT_GD: bfd_reloc_code_real = 1693;
pub const BFD_RELOC_CRIS_32_PLT_PCREL: bfd_reloc_code_real = 1692;
pub const BFD_RELOC_CRIS_32_PLT_GOTREL: bfd_reloc_code_real = 1691;
pub const BFD_RELOC_CRIS_32_GOTREL: bfd_reloc_code_real = 1690;
pub const BFD_RELOC_CRIS_16_GOTPLT: bfd_reloc_code_real = 1689;
pub const BFD_RELOC_CRIS_32_GOTPLT: bfd_reloc_code_real = 1688;
pub const BFD_RELOC_CRIS_16_GOT: bfd_reloc_code_real = 1687;
pub const BFD_RELOC_CRIS_32_GOT: bfd_reloc_code_real = 1686;
pub const BFD_RELOC_CRIS_RELATIVE: bfd_reloc_code_real = 1685;
pub const BFD_RELOC_CRIS_JUMP_SLOT: bfd_reloc_code_real = 1684;
pub const BFD_RELOC_CRIS_GLOB_DAT: bfd_reloc_code_real = 1683;
pub const BFD_RELOC_CRIS_COPY: bfd_reloc_code_real = 1682;
pub const BFD_RELOC_CRIS_UNSIGNED_4: bfd_reloc_code_real = 1681;
pub const BFD_RELOC_CRIS_LAPCQ_OFFSET: bfd_reloc_code_real = 1680;
pub const BFD_RELOC_CRIS_UNSIGNED_16: bfd_reloc_code_real = 1679;
pub const BFD_RELOC_CRIS_SIGNED_16: bfd_reloc_code_real = 1678;
pub const BFD_RELOC_CRIS_UNSIGNED_8: bfd_reloc_code_real = 1677;
pub const BFD_RELOC_CRIS_SIGNED_8: bfd_reloc_code_real = 1676;
pub const BFD_RELOC_CRIS_UNSIGNED_6: bfd_reloc_code_real = 1675;
pub const BFD_RELOC_CRIS_SIGNED_6: bfd_reloc_code_real = 1674;
pub const BFD_RELOC_CRIS_UNSIGNED_5: bfd_reloc_code_real = 1673;
pub const BFD_RELOC_CRIS_BDISP8: bfd_reloc_code_real = 1672;
pub const BFD_RELOC_CRX_SWITCH32: bfd_reloc_code_real = 1671;
pub const BFD_RELOC_CRX_SWITCH16: bfd_reloc_code_real = 1670;
pub const BFD_RELOC_CRX_SWITCH8: bfd_reloc_code_real = 1669;
pub const BFD_RELOC_CRX_IMM32: bfd_reloc_code_real = 1668;
pub const BFD_RELOC_CRX_IMM16: bfd_reloc_code_real = 1667;
pub const BFD_RELOC_CRX_NUM32: bfd_reloc_code_real = 1666;
pub const BFD_RELOC_CRX_NUM16: bfd_reloc_code_real = 1665;
pub const BFD_RELOC_CRX_NUM8: bfd_reloc_code_real = 1664;
pub const BFD_RELOC_CRX_ABS32: bfd_reloc_code_real = 1663;
pub const BFD_RELOC_CRX_ABS16: bfd_reloc_code_real = 1662;
pub const BFD_RELOC_CRX_REGREL32: bfd_reloc_code_real = 1661;
pub const BFD_RELOC_CRX_REGREL28: bfd_reloc_code_real = 1660;
pub const BFD_RELOC_CRX_REGREL22: bfd_reloc_code_real = 1659;
pub const BFD_RELOC_CRX_REGREL12: bfd_reloc_code_real = 1658;
pub const BFD_RELOC_CRX_REL32: bfd_reloc_code_real = 1657;
pub const BFD_RELOC_CRX_REL24: bfd_reloc_code_real = 1656;
pub const BFD_RELOC_CRX_REL16: bfd_reloc_code_real = 1655;
pub const BFD_RELOC_CRX_REL8_CMP: bfd_reloc_code_real = 1654;
pub const BFD_RELOC_CRX_REL8: bfd_reloc_code_real = 1653;
pub const BFD_RELOC_CRX_REL4: bfd_reloc_code_real = 1652;
pub const BFD_RELOC_CR16_GLOB_DAT: bfd_reloc_code_real = 1651;
pub const BFD_RELOC_CR16_GOTC_REGREL20: bfd_reloc_code_real = 1650;
pub const BFD_RELOC_CR16_GOT_REGREL20: bfd_reloc_code_real = 1649;
pub const BFD_RELOC_CR16_SWITCH32: bfd_reloc_code_real = 1648;
pub const BFD_RELOC_CR16_SWITCH16: bfd_reloc_code_real = 1647;
pub const BFD_RELOC_CR16_SWITCH8: bfd_reloc_code_real = 1646;
pub const BFD_RELOC_CR16_DISP24a: bfd_reloc_code_real = 1645;
pub const BFD_RELOC_CR16_DISP24: bfd_reloc_code_real = 1644;
pub const BFD_RELOC_CR16_DISP20: bfd_reloc_code_real = 1643;
pub const BFD_RELOC_CR16_DISP16: bfd_reloc_code_real = 1642;
pub const BFD_RELOC_CR16_DISP8: bfd_reloc_code_real = 1641;
pub const BFD_RELOC_CR16_DISP4: bfd_reloc_code_real = 1640;
pub const BFD_RELOC_CR16_IMM32a: bfd_reloc_code_real = 1639;
pub const BFD_RELOC_CR16_IMM32: bfd_reloc_code_real = 1638;
pub const BFD_RELOC_CR16_IMM24: bfd_reloc_code_real = 1637;
pub const BFD_RELOC_CR16_IMM20: bfd_reloc_code_real = 1636;
pub const BFD_RELOC_CR16_IMM16: bfd_reloc_code_real = 1635;
pub const BFD_RELOC_CR16_IMM8: bfd_reloc_code_real = 1634;
pub const BFD_RELOC_CR16_IMM4: bfd_reloc_code_real = 1633;
pub const BFD_RELOC_CR16_ABS24: bfd_reloc_code_real = 1632;
pub const BFD_RELOC_CR16_ABS20: bfd_reloc_code_real = 1631;
pub const BFD_RELOC_CR16_REGREL20a: bfd_reloc_code_real = 1630;
pub const BFD_RELOC_CR16_REGREL20: bfd_reloc_code_real = 1629;
pub const BFD_RELOC_CR16_REGREL16: bfd_reloc_code_real = 1628;
pub const BFD_RELOC_CR16_REGREL14a: bfd_reloc_code_real = 1627;
pub const BFD_RELOC_CR16_REGREL14: bfd_reloc_code_real = 1626;
pub const BFD_RELOC_CR16_REGREL4a: bfd_reloc_code_real = 1625;
pub const BFD_RELOC_CR16_REGREL4: bfd_reloc_code_real = 1624;
pub const BFD_RELOC_CR16_REGREL0: bfd_reloc_code_real = 1623;
pub const BFD_RELOC_CR16_NUM32a: bfd_reloc_code_real = 1622;
pub const BFD_RELOC_CR16_NUM32: bfd_reloc_code_real = 1621;
pub const BFD_RELOC_CR16_NUM16: bfd_reloc_code_real = 1620;
pub const BFD_RELOC_CR16_NUM8: bfd_reloc_code_real = 1619;
pub const BFD_RELOC_S12Z_15_PCREL: bfd_reloc_code_real = 1618;
pub const BFD_RELOC_M68HC12_HI8XG: bfd_reloc_code_real = 1617;
pub const BFD_RELOC_M68HC12_LO8XG: bfd_reloc_code_real = 1616;
pub const BFD_RELOC_M68HC12_10_PCREL: bfd_reloc_code_real = 1615;
pub const BFD_RELOC_M68HC12_9_PCREL: bfd_reloc_code_real = 1614;
pub const BFD_RELOC_M68HC12_16B: bfd_reloc_code_real = 1613;
pub const BFD_RELOC_M68HC12_9B: bfd_reloc_code_real = 1612;
pub const BFD_RELOC_XGATE_IMM5: bfd_reloc_code_real = 1611;
pub const BFD_RELOC_XGATE_IMM4: bfd_reloc_code_real = 1610;
pub const BFD_RELOC_XGATE_IMM3: bfd_reloc_code_real = 1609;
pub const BFD_RELOC_XGATE_IMM8_HI: bfd_reloc_code_real = 1608;
pub const BFD_RELOC_XGATE_IMM8_LO: bfd_reloc_code_real = 1607;
pub const BFD_RELOC_XGATE_PCREL_10: bfd_reloc_code_real = 1606;
pub const BFD_RELOC_XGATE_PCREL_9: bfd_reloc_code_real = 1605;
pub const BFD_RELOC_XGATE_24: bfd_reloc_code_real = 1604;
pub const BFD_RELOC_XGATE_GPAGE: bfd_reloc_code_real = 1603;
pub const BFD_RELOC_XGATE_LO16: bfd_reloc_code_real = 1602;
pub const BFD_RELOC_XGATE_RL_GROUP: bfd_reloc_code_real = 1601;
pub const BFD_RELOC_XGATE_RL_JUMP: bfd_reloc_code_real = 1600;
pub const BFD_RELOC_M68HC12_5B: bfd_reloc_code_real = 1599;
pub const BFD_RELOC_M68HC11_24: bfd_reloc_code_real = 1598;
pub const BFD_RELOC_M68HC11_PAGE: bfd_reloc_code_real = 1597;
pub const BFD_RELOC_M68HC11_LO16: bfd_reloc_code_real = 1596;
pub const BFD_RELOC_M68HC11_RL_GROUP: bfd_reloc_code_real = 1595;
pub const BFD_RELOC_M68HC11_RL_JUMP: bfd_reloc_code_real = 1594;
pub const BFD_RELOC_M68HC11_3B: bfd_reloc_code_real = 1593;
pub const BFD_RELOC_M68HC11_LO8: bfd_reloc_code_real = 1592;
pub const BFD_RELOC_M68HC11_HI8: bfd_reloc_code_real = 1591;
pub const BFD_RELOC_IA64_LTOFF_DTPREL22: bfd_reloc_code_real = 1590;
pub const BFD_RELOC_IA64_DTPREL64LSB: bfd_reloc_code_real = 1589;
pub const BFD_RELOC_IA64_DTPREL64MSB: bfd_reloc_code_real = 1588;
pub const BFD_RELOC_IA64_DTPREL32LSB: bfd_reloc_code_real = 1587;
pub const BFD_RELOC_IA64_DTPREL32MSB: bfd_reloc_code_real = 1586;
pub const BFD_RELOC_IA64_DTPREL64I: bfd_reloc_code_real = 1585;
pub const BFD_RELOC_IA64_DTPREL22: bfd_reloc_code_real = 1584;
pub const BFD_RELOC_IA64_DTPREL14: bfd_reloc_code_real = 1583;
pub const BFD_RELOC_IA64_LTOFF_DTPMOD22: bfd_reloc_code_real = 1582;
pub const BFD_RELOC_IA64_DTPMOD64LSB: bfd_reloc_code_real = 1581;
pub const BFD_RELOC_IA64_DTPMOD64MSB: bfd_reloc_code_real = 1580;
pub const BFD_RELOC_IA64_LTOFF_TPREL22: bfd_reloc_code_real = 1579;
pub const BFD_RELOC_IA64_TPREL64LSB: bfd_reloc_code_real = 1578;
pub const BFD_RELOC_IA64_TPREL64MSB: bfd_reloc_code_real = 1577;
pub const BFD_RELOC_IA64_TPREL64I: bfd_reloc_code_real = 1576;
pub const BFD_RELOC_IA64_TPREL22: bfd_reloc_code_real = 1575;
pub const BFD_RELOC_IA64_TPREL14: bfd_reloc_code_real = 1574;
pub const BFD_RELOC_IA64_LDXMOV: bfd_reloc_code_real = 1573;
pub const BFD_RELOC_IA64_LTOFF22X: bfd_reloc_code_real = 1572;
pub const BFD_RELOC_IA64_COPY: bfd_reloc_code_real = 1571;
pub const BFD_RELOC_IA64_IPLTLSB: bfd_reloc_code_real = 1570;
pub const BFD_RELOC_IA64_IPLTMSB: bfd_reloc_code_real = 1569;
pub const BFD_RELOC_IA64_LTV64LSB: bfd_reloc_code_real = 1568;
pub const BFD_RELOC_IA64_LTV64MSB: bfd_reloc_code_real = 1567;
pub const BFD_RELOC_IA64_LTV32LSB: bfd_reloc_code_real = 1566;
pub const BFD_RELOC_IA64_LTV32MSB: bfd_reloc_code_real = 1565;
pub const BFD_RELOC_IA64_REL64LSB: bfd_reloc_code_real = 1564;
pub const BFD_RELOC_IA64_REL64MSB: bfd_reloc_code_real = 1563;
pub const BFD_RELOC_IA64_REL32LSB: bfd_reloc_code_real = 1562;
pub const BFD_RELOC_IA64_REL32MSB: bfd_reloc_code_real = 1561;
pub const BFD_RELOC_IA64_SECREL64LSB: bfd_reloc_code_real = 1560;
pub const BFD_RELOC_IA64_SECREL64MSB: bfd_reloc_code_real = 1559;
pub const BFD_RELOC_IA64_SECREL32LSB: bfd_reloc_code_real = 1558;
pub const BFD_RELOC_IA64_SECREL32MSB: bfd_reloc_code_real = 1557;
pub const BFD_RELOC_IA64_SEGREL64LSB: bfd_reloc_code_real = 1556;
pub const BFD_RELOC_IA64_SEGREL64MSB: bfd_reloc_code_real = 1555;
pub const BFD_RELOC_IA64_SEGREL32LSB: bfd_reloc_code_real = 1554;
pub const BFD_RELOC_IA64_SEGREL32MSB: bfd_reloc_code_real = 1553;
pub const BFD_RELOC_IA64_LTOFF_FPTR64LSB: bfd_reloc_code_real = 1552;
pub const BFD_RELOC_IA64_LTOFF_FPTR64MSB: bfd_reloc_code_real = 1551;
pub const BFD_RELOC_IA64_LTOFF_FPTR32LSB: bfd_reloc_code_real = 1550;
pub const BFD_RELOC_IA64_LTOFF_FPTR32MSB: bfd_reloc_code_real = 1549;
pub const BFD_RELOC_IA64_LTOFF_FPTR64I: bfd_reloc_code_real = 1548;
pub const BFD_RELOC_IA64_LTOFF_FPTR22: bfd_reloc_code_real = 1547;
pub const BFD_RELOC_IA64_PCREL64LSB: bfd_reloc_code_real = 1546;
pub const BFD_RELOC_IA64_PCREL64MSB: bfd_reloc_code_real = 1545;
pub const BFD_RELOC_IA64_PCREL32LSB: bfd_reloc_code_real = 1544;
pub const BFD_RELOC_IA64_PCREL32MSB: bfd_reloc_code_real = 1543;
pub const BFD_RELOC_IA64_PCREL64I: bfd_reloc_code_real = 1542;
pub const BFD_RELOC_IA64_PCREL60B: bfd_reloc_code_real = 1541;
pub const BFD_RELOC_IA64_PCREL22: bfd_reloc_code_real = 1540;
pub const BFD_RELOC_IA64_PCREL21F: bfd_reloc_code_real = 1539;
pub const BFD_RELOC_IA64_PCREL21M: bfd_reloc_code_real = 1538;
pub const BFD_RELOC_IA64_PCREL21BI: bfd_reloc_code_real = 1537;
pub const BFD_RELOC_IA64_PCREL21B: bfd_reloc_code_real = 1536;
pub const BFD_RELOC_IA64_FPTR64LSB: bfd_reloc_code_real = 1535;
pub const BFD_RELOC_IA64_FPTR64MSB: bfd_reloc_code_real = 1534;
pub const BFD_RELOC_IA64_FPTR32LSB: bfd_reloc_code_real = 1533;
pub const BFD_RELOC_IA64_FPTR32MSB: bfd_reloc_code_real = 1532;
pub const BFD_RELOC_IA64_FPTR64I: bfd_reloc_code_real = 1531;
pub const BFD_RELOC_IA64_PLTOFF64LSB: bfd_reloc_code_real = 1530;
pub const BFD_RELOC_IA64_PLTOFF64MSB: bfd_reloc_code_real = 1529;
pub const BFD_RELOC_IA64_PLTOFF64I: bfd_reloc_code_real = 1528;
pub const BFD_RELOC_IA64_PLTOFF22: bfd_reloc_code_real = 1527;
pub const BFD_RELOC_IA64_LTOFF64I: bfd_reloc_code_real = 1526;
pub const BFD_RELOC_IA64_LTOFF22: bfd_reloc_code_real = 1525;
pub const BFD_RELOC_IA64_GPREL64LSB: bfd_reloc_code_real = 1524;
pub const BFD_RELOC_IA64_GPREL64MSB: bfd_reloc_code_real = 1523;
pub const BFD_RELOC_IA64_GPREL32LSB: bfd_reloc_code_real = 1522;
pub const BFD_RELOC_IA64_GPREL32MSB: bfd_reloc_code_real = 1521;
pub const BFD_RELOC_IA64_GPREL64I: bfd_reloc_code_real = 1520;
pub const BFD_RELOC_IA64_GPREL22: bfd_reloc_code_real = 1519;
pub const BFD_RELOC_IA64_DIR64LSB: bfd_reloc_code_real = 1518;
pub const BFD_RELOC_IA64_DIR64MSB: bfd_reloc_code_real = 1517;
pub const BFD_RELOC_IA64_DIR32LSB: bfd_reloc_code_real = 1516;
pub const BFD_RELOC_IA64_DIR32MSB: bfd_reloc_code_real = 1515;
pub const BFD_RELOC_IA64_IMM64: bfd_reloc_code_real = 1514;
pub const BFD_RELOC_IA64_IMM22: bfd_reloc_code_real = 1513;
pub const BFD_RELOC_IA64_IMM14: bfd_reloc_code_real = 1512;
pub const BFD_RELOC_VTABLE_ENTRY: bfd_reloc_code_real = 1511;
pub const BFD_RELOC_VTABLE_INHERIT: bfd_reloc_code_real = 1510;
pub const BFD_RELOC_VPE4KMATH_INSN: bfd_reloc_code_real = 1509;
pub const BFD_RELOC_VPE4KMATH_DATA: bfd_reloc_code_real = 1508;
pub const BFD_RELOC_IP2K_FR_OFFSET: bfd_reloc_code_real = 1507;
pub const BFD_RELOC_IP2K_TEXT: bfd_reloc_code_real = 1506;
pub const BFD_RELOC_IP2K_PC_SKIP: bfd_reloc_code_real = 1505;
pub const BFD_RELOC_IP2K_HI8INSN: bfd_reloc_code_real = 1504;
pub const BFD_RELOC_IP2K_LO8INSN: bfd_reloc_code_real = 1503;
pub const BFD_RELOC_IP2K_EX8DATA: bfd_reloc_code_real = 1502;
pub const BFD_RELOC_IP2K_HI8DATA: bfd_reloc_code_real = 1501;
pub const BFD_RELOC_IP2K_LO8DATA: bfd_reloc_code_real = 1500;
pub const BFD_RELOC_IP2K_PAGE3: bfd_reloc_code_real = 1499;
pub const BFD_RELOC_IP2K_ADDR16CJP: bfd_reloc_code_real = 1498;
pub const BFD_RELOC_IP2K_BANK: bfd_reloc_code_real = 1497;
pub const BFD_RELOC_IP2K_FR9: bfd_reloc_code_real = 1496;
pub const BFD_RELOC_SCORE_DUMMY_HI16: bfd_reloc_code_real = 1495;
pub const BFD_RELOC_SCORE_CALL15: bfd_reloc_code_real = 1494;
pub const BFD_RELOC_SCORE_GOT_LO16: bfd_reloc_code_real = 1493;
pub const BFD_RELOC_SCORE_GOT15: bfd_reloc_code_real = 1492;
pub const BFD_RELOC_SCORE_BCMP: bfd_reloc_code_real = 1491;
pub const BFD_RELOC_SCORE16_BRANCH: bfd_reloc_code_real = 1490;
pub const BFD_RELOC_SCORE16_JMP: bfd_reloc_code_real = 1489;
pub const BFD_RELOC_SCORE_IMM32: bfd_reloc_code_real = 1488;
pub const BFD_RELOC_SCORE_IMM30: bfd_reloc_code_real = 1487;
pub const BFD_RELOC_SCORE_BRANCH: bfd_reloc_code_real = 1486;
pub const BFD_RELOC_SCORE_JMP: bfd_reloc_code_real = 1485;
pub const BFD_RELOC_SCORE_DUMMY2: bfd_reloc_code_real = 1484;
pub const BFD_RELOC_SCORE_GPREL15: bfd_reloc_code_real = 1483;
pub const BFD_RELOC_390_IRELATIVE: bfd_reloc_code_real = 1482;
pub const BFD_RELOC_390_TLS_GOTIE20: bfd_reloc_code_real = 1481;
pub const BFD_RELOC_390_GOTPLT20: bfd_reloc_code_real = 1480;
pub const BFD_RELOC_390_GOT20: bfd_reloc_code_real = 1479;
pub const BFD_RELOC_390_20: bfd_reloc_code_real = 1478;
pub const BFD_RELOC_390_TLS_TPOFF: bfd_reloc_code_real = 1477;
pub const BFD_RELOC_390_TLS_DTPOFF: bfd_reloc_code_real = 1476;
pub const BFD_RELOC_390_TLS_DTPMOD: bfd_reloc_code_real = 1475;
pub const BFD_RELOC_390_TLS_LDO64: bfd_reloc_code_real = 1474;
pub const BFD_RELOC_390_TLS_LDO32: bfd_reloc_code_real = 1473;
pub const BFD_RELOC_390_TLS_LE64: bfd_reloc_code_real = 1472;
pub const BFD_RELOC_390_TLS_LE32: bfd_reloc_code_real = 1471;
pub const BFD_RELOC_390_TLS_IEENT: bfd_reloc_code_real = 1470;
pub const BFD_RELOC_390_TLS_IE64: bfd_reloc_code_real = 1469;
pub const BFD_RELOC_390_TLS_IE32: bfd_reloc_code_real = 1468;
pub const BFD_RELOC_390_TLS_LDM64: bfd_reloc_code_real = 1467;
pub const BFD_RELOC_390_TLS_LDM32: bfd_reloc_code_real = 1466;
pub const BFD_RELOC_390_TLS_GOTIE64: bfd_reloc_code_real = 1465;
pub const BFD_RELOC_390_TLS_GOTIE32: bfd_reloc_code_real = 1464;
pub const BFD_RELOC_390_TLS_GOTIE12: bfd_reloc_code_real = 1463;
pub const BFD_RELOC_390_TLS_GD64: bfd_reloc_code_real = 1462;
pub const BFD_RELOC_390_TLS_GD32: bfd_reloc_code_real = 1461;
pub const BFD_RELOC_390_TLS_LDCALL: bfd_reloc_code_real = 1460;
pub const BFD_RELOC_390_TLS_GDCALL: bfd_reloc_code_real = 1459;
pub const BFD_RELOC_390_TLS_LOAD: bfd_reloc_code_real = 1458;
pub const BFD_RELOC_390_PLTOFF64: bfd_reloc_code_real = 1457;
pub const BFD_RELOC_390_PLTOFF32: bfd_reloc_code_real = 1456;
pub const BFD_RELOC_390_PLTOFF16: bfd_reloc_code_real = 1455;
pub const BFD_RELOC_390_GOTPLTENT: bfd_reloc_code_real = 1454;
pub const BFD_RELOC_390_GOTPLT64: bfd_reloc_code_real = 1453;
pub const BFD_RELOC_390_GOTPLT32: bfd_reloc_code_real = 1452;
pub const BFD_RELOC_390_GOTPLT16: bfd_reloc_code_real = 1451;
pub const BFD_RELOC_390_GOTPLT12: bfd_reloc_code_real = 1450;
pub const BFD_RELOC_390_GOTOFF64: bfd_reloc_code_real = 1449;
pub const BFD_RELOC_390_GOTENT: bfd_reloc_code_real = 1448;
pub const BFD_RELOC_390_PLT64: bfd_reloc_code_real = 1447;
pub const BFD_RELOC_390_GOT64: bfd_reloc_code_real = 1446;
pub const BFD_RELOC_390_GOTPCDBL: bfd_reloc_code_real = 1445;
pub const BFD_RELOC_390_PLT32DBL: bfd_reloc_code_real = 1444;
pub const BFD_RELOC_390_PC32DBL: bfd_reloc_code_real = 1443;
pub const BFD_RELOC_390_PLT24DBL: bfd_reloc_code_real = 1442;
pub const BFD_RELOC_390_PC24DBL: bfd_reloc_code_real = 1441;
pub const BFD_RELOC_390_PLT16DBL: bfd_reloc_code_real = 1440;
pub const BFD_RELOC_390_PC16DBL: bfd_reloc_code_real = 1439;
pub const BFD_RELOC_390_PLT12DBL: bfd_reloc_code_real = 1438;
pub const BFD_RELOC_390_PC12DBL: bfd_reloc_code_real = 1437;
pub const BFD_RELOC_390_GOT16: bfd_reloc_code_real = 1436;
pub const BFD_RELOC_390_GOTPC: bfd_reloc_code_real = 1435;
pub const BFD_RELOC_390_RELATIVE: bfd_reloc_code_real = 1434;
pub const BFD_RELOC_390_JMP_SLOT: bfd_reloc_code_real = 1433;
pub const BFD_RELOC_390_GLOB_DAT: bfd_reloc_code_real = 1432;
pub const BFD_RELOC_390_COPY: bfd_reloc_code_real = 1431;
pub const BFD_RELOC_390_PLT32: bfd_reloc_code_real = 1430;
pub const BFD_RELOC_390_GOT12: bfd_reloc_code_real = 1429;
pub const BFD_RELOC_390_12: bfd_reloc_code_real = 1428;
pub const BFD_RELOC_RX_RELAX: bfd_reloc_code_real = 1427;
pub const BFD_RELOC_RX_ABS16UL: bfd_reloc_code_real = 1426;
pub const BFD_RELOC_RX_ABS16UW: bfd_reloc_code_real = 1425;
pub const BFD_RELOC_RX_ABS16U: bfd_reloc_code_real = 1424;
pub const BFD_RELOC_RX_ABS32_REV: bfd_reloc_code_real = 1423;
pub const BFD_RELOC_RX_ABS32: bfd_reloc_code_real = 1422;
pub const BFD_RELOC_RX_ABS16_REV: bfd_reloc_code_real = 1421;
pub const BFD_RELOC_RX_ABS16: bfd_reloc_code_real = 1420;
pub const BFD_RELOC_RX_ABS8: bfd_reloc_code_real = 1419;
pub const BFD_RELOC_RX_OP_NEG: bfd_reloc_code_real = 1418;
pub const BFD_RELOC_RX_OP_SUBTRACT: bfd_reloc_code_real = 1417;
pub const BFD_RELOC_RX_SYM: bfd_reloc_code_real = 1416;
pub const BFD_RELOC_RX_GPRELL: bfd_reloc_code_real = 1415;
pub const BFD_RELOC_RX_GPRELW: bfd_reloc_code_real = 1414;
pub const BFD_RELOC_RX_GPRELB: bfd_reloc_code_real = 1413;
pub const BFD_RELOC_RX_DIFF: bfd_reloc_code_real = 1412;
pub const BFD_RELOC_RX_DIR3U_PCREL: bfd_reloc_code_real = 1411;
pub const BFD_RELOC_RX_24U: bfd_reloc_code_real = 1410;
pub const BFD_RELOC_RX_16U: bfd_reloc_code_real = 1409;
pub const BFD_RELOC_RX_8U: bfd_reloc_code_real = 1408;
pub const BFD_RELOC_RX_32_OP: bfd_reloc_code_real = 1407;
pub const BFD_RELOC_RX_24_OP: bfd_reloc_code_real = 1406;
pub const BFD_RELOC_RX_16_OP: bfd_reloc_code_real = 1405;
pub const BFD_RELOC_RX_NEG32: bfd_reloc_code_real = 1404;
pub const BFD_RELOC_RX_NEG24: bfd_reloc_code_real = 1403;
pub const BFD_RELOC_RX_NEG16: bfd_reloc_code_real = 1402;
pub const BFD_RELOC_RX_NEG8: bfd_reloc_code_real = 1401;
pub const BFD_RELOC_RL78_SADDR: bfd_reloc_code_real = 1400;
pub const BFD_RELOC_RL78_CODE: bfd_reloc_code_real = 1399;
pub const BFD_RELOC_RL78_LO16: bfd_reloc_code_real = 1398;
pub const BFD_RELOC_RL78_HI8: bfd_reloc_code_real = 1397;
pub const BFD_RELOC_RL78_HI16: bfd_reloc_code_real = 1396;
pub const BFD_RELOC_RL78_RELAX: bfd_reloc_code_real = 1395;
pub const BFD_RELOC_RL78_ABS16UL: bfd_reloc_code_real = 1394;
pub const BFD_RELOC_RL78_ABS16UW: bfd_reloc_code_real = 1393;
pub const BFD_RELOC_RL78_ABS16U: bfd_reloc_code_real = 1392;
pub const BFD_RELOC_RL78_ABS32_REV: bfd_reloc_code_real = 1391;
pub const BFD_RELOC_RL78_ABS32: bfd_reloc_code_real = 1390;
pub const BFD_RELOC_RL78_ABS16_REV: bfd_reloc_code_real = 1389;
pub const BFD_RELOC_RL78_ABS16: bfd_reloc_code_real = 1388;
pub const BFD_RELOC_RL78_ABS8: bfd_reloc_code_real = 1387;
pub const BFD_RELOC_RL78_OP_SHRA: bfd_reloc_code_real = 1386;
pub const BFD_RELOC_RL78_OP_AND: bfd_reloc_code_real = 1385;
pub const BFD_RELOC_RL78_OP_NEG: bfd_reloc_code_real = 1384;
pub const BFD_RELOC_RL78_OP_SUBTRACT: bfd_reloc_code_real = 1383;
pub const BFD_RELOC_RL78_SYM: bfd_reloc_code_real = 1382;
pub const BFD_RELOC_RL78_GPRELL: bfd_reloc_code_real = 1381;
pub const BFD_RELOC_RL78_GPRELW: bfd_reloc_code_real = 1380;
pub const BFD_RELOC_RL78_GPRELB: bfd_reloc_code_real = 1379;
pub const BFD_RELOC_RL78_DIFF: bfd_reloc_code_real = 1378;
pub const BFD_RELOC_RL78_DIR3U_PCREL: bfd_reloc_code_real = 1377;
pub const BFD_RELOC_RL78_24U: bfd_reloc_code_real = 1376;
pub const BFD_RELOC_RL78_16U: bfd_reloc_code_real = 1375;
pub const BFD_RELOC_RL78_8U: bfd_reloc_code_real = 1374;
pub const BFD_RELOC_RL78_32_OP: bfd_reloc_code_real = 1373;
pub const BFD_RELOC_RL78_24_OP: bfd_reloc_code_real = 1372;
pub const BFD_RELOC_RL78_16_OP: bfd_reloc_code_real = 1371;
pub const BFD_RELOC_RL78_NEG32: bfd_reloc_code_real = 1370;
pub const BFD_RELOC_RL78_NEG24: bfd_reloc_code_real = 1369;
pub const BFD_RELOC_RL78_NEG16: bfd_reloc_code_real = 1368;
pub const BFD_RELOC_RL78_NEG8: bfd_reloc_code_real = 1367;
pub const BFD_RELOC_RISCV_32_PCREL: bfd_reloc_code_real = 1366;
pub const BFD_RELOC_RISCV_SET32: bfd_reloc_code_real = 1365;
pub const BFD_RELOC_RISCV_SET16: bfd_reloc_code_real = 1364;
pub const BFD_RELOC_RISCV_SET8: bfd_reloc_code_real = 1363;
pub const BFD_RELOC_RISCV_SET6: bfd_reloc_code_real = 1362;
pub const BFD_RELOC_RISCV_SUB6: bfd_reloc_code_real = 1361;
pub const BFD_RELOC_RISCV_CFA: bfd_reloc_code_real = 1360;
pub const BFD_RELOC_RISCV_RELAX: bfd_reloc_code_real = 1359;
pub const BFD_RELOC_RISCV_TPREL_S: bfd_reloc_code_real = 1358;
pub const BFD_RELOC_RISCV_TPREL_I: bfd_reloc_code_real = 1357;
pub const BFD_RELOC_RISCV_GPREL_S: bfd_reloc_code_real = 1356;
pub const BFD_RELOC_RISCV_GPREL_I: bfd_reloc_code_real = 1355;
pub const BFD_RELOC_RISCV_RVC_LUI: bfd_reloc_code_real = 1354;
pub const BFD_RELOC_RISCV_RVC_JUMP: bfd_reloc_code_real = 1353;
pub const BFD_RELOC_RISCV_RVC_BRANCH: bfd_reloc_code_real = 1352;
pub const BFD_RELOC_RISCV_ALIGN: bfd_reloc_code_real = 1351;
pub const BFD_RELOC_RISCV_TLS_TPREL64: bfd_reloc_code_real = 1350;
pub const BFD_RELOC_RISCV_TLS_TPREL32: bfd_reloc_code_real = 1349;
pub const BFD_RELOC_RISCV_TLS_DTPREL64: bfd_reloc_code_real = 1348;
pub const BFD_RELOC_RISCV_TLS_DTPMOD64: bfd_reloc_code_real = 1347;
pub const BFD_RELOC_RISCV_TLS_DTPREL32: bfd_reloc_code_real = 1346;
pub const BFD_RELOC_RISCV_TLS_DTPMOD32: bfd_reloc_code_real = 1345;
pub const BFD_RELOC_RISCV_JMP: bfd_reloc_code_real = 1344;
pub const BFD_RELOC_RISCV_TLS_GD_HI20: bfd_reloc_code_real = 1343;
pub const BFD_RELOC_RISCV_TLS_GOT_HI20: bfd_reloc_code_real = 1342;
pub const BFD_RELOC_RISCV_GOT_HI20: bfd_reloc_code_real = 1341;
pub const BFD_RELOC_RISCV_SUB64: bfd_reloc_code_real = 1340;
pub const BFD_RELOC_RISCV_SUB32: bfd_reloc_code_real = 1339;
pub const BFD_RELOC_RISCV_SUB16: bfd_reloc_code_real = 1338;
pub const BFD_RELOC_RISCV_SUB8: bfd_reloc_code_real = 1337;
pub const BFD_RELOC_RISCV_ADD64: bfd_reloc_code_real = 1336;
pub const BFD_RELOC_RISCV_ADD32: bfd_reloc_code_real = 1335;
pub const BFD_RELOC_RISCV_ADD16: bfd_reloc_code_real = 1334;
pub const BFD_RELOC_RISCV_ADD8: bfd_reloc_code_real = 1333;
pub const BFD_RELOC_RISCV_CALL_PLT: bfd_reloc_code_real = 1332;
pub const BFD_RELOC_RISCV_CALL: bfd_reloc_code_real = 1331;
pub const BFD_RELOC_RISCV_TPREL_ADD: bfd_reloc_code_real = 1330;
pub const BFD_RELOC_RISCV_TPREL_LO12_S: bfd_reloc_code_real = 1329;
pub const BFD_RELOC_RISCV_TPREL_LO12_I: bfd_reloc_code_real = 1328;
pub const BFD_RELOC_RISCV_TPREL_HI20: bfd_reloc_code_real = 1327;
pub const BFD_RELOC_RISCV_GPREL12_S: bfd_reloc_code_real = 1326;
pub const BFD_RELOC_RISCV_GPREL12_I: bfd_reloc_code_real = 1325;
pub const BFD_RELOC_RISCV_LO12_S: bfd_reloc_code_real = 1324;
pub const BFD_RELOC_RISCV_LO12_I: bfd_reloc_code_real = 1323;
pub const BFD_RELOC_RISCV_PCREL_LO12_S: bfd_reloc_code_real = 1322;
pub const BFD_RELOC_RISCV_PCREL_LO12_I: bfd_reloc_code_real = 1321;
pub const BFD_RELOC_RISCV_PCREL_HI20: bfd_reloc_code_real = 1320;
pub const BFD_RELOC_RISCV_HI20: bfd_reloc_code_real = 1319;
pub const BFD_RELOC_AVR_PORT5: bfd_reloc_code_real = 1318;
pub const BFD_RELOC_AVR_PORT6: bfd_reloc_code_real = 1317;
pub const BFD_RELOC_AVR_LDS_STS_16: bfd_reloc_code_real = 1316;
pub const BFD_RELOC_AVR_DIFF32: bfd_reloc_code_real = 1315;
pub const BFD_RELOC_AVR_DIFF16: bfd_reloc_code_real = 1314;
pub const BFD_RELOC_AVR_DIFF8: bfd_reloc_code_real = 1313;
pub const BFD_RELOC_AVR_8_HLO: bfd_reloc_code_real = 1312;
pub const BFD_RELOC_AVR_8_HI: bfd_reloc_code_real = 1311;
pub const BFD_RELOC_AVR_8_LO: bfd_reloc_code_real = 1310;
pub const BFD_RELOC_AVR_6_ADIW: bfd_reloc_code_real = 1309;
pub const BFD_RELOC_AVR_6: bfd_reloc_code_real = 1308;
pub const BFD_RELOC_AVR_LDI: bfd_reloc_code_real = 1307;
pub const BFD_RELOC_AVR_CALL: bfd_reloc_code_real = 1306;
pub const BFD_RELOC_AVR_HH8_LDI_PM_NEG: bfd_reloc_code_real = 1305;
pub const BFD_RELOC_AVR_HI8_LDI_PM_NEG: bfd_reloc_code_real = 1304;
pub const BFD_RELOC_AVR_LO8_LDI_PM_NEG: bfd_reloc_code_real = 1303;
pub const BFD_RELOC_AVR_HH8_LDI_PM: bfd_reloc_code_real = 1302;
pub const BFD_RELOC_AVR_HI8_LDI_GS: bfd_reloc_code_real = 1301;
pub const BFD_RELOC_AVR_HI8_LDI_PM: bfd_reloc_code_real = 1300;
pub const BFD_RELOC_AVR_LO8_LDI_GS: bfd_reloc_code_real = 1299;
pub const BFD_RELOC_AVR_LO8_LDI_PM: bfd_reloc_code_real = 1298;
pub const BFD_RELOC_AVR_MS8_LDI_NEG: bfd_reloc_code_real = 1297;
pub const BFD_RELOC_AVR_HH8_LDI_NEG: bfd_reloc_code_real = 1296;
pub const BFD_RELOC_AVR_HI8_LDI_NEG: bfd_reloc_code_real = 1295;
pub const BFD_RELOC_AVR_LO8_LDI_NEG: bfd_reloc_code_real = 1294;
pub const BFD_RELOC_AVR_MS8_LDI: bfd_reloc_code_real = 1293;
pub const BFD_RELOC_AVR_HH8_LDI: bfd_reloc_code_real = 1292;
pub const BFD_RELOC_AVR_HI8_LDI: bfd_reloc_code_real = 1291;
pub const BFD_RELOC_AVR_LO8_LDI: bfd_reloc_code_real = 1290;
pub const BFD_RELOC_AVR_16_PM: bfd_reloc_code_real = 1289;
pub const BFD_RELOC_AVR_13_PCREL: bfd_reloc_code_real = 1288;
pub const BFD_RELOC_AVR_7_PCREL: bfd_reloc_code_real = 1287;
pub const BFD_RELOC_MMIX_LOCAL: bfd_reloc_code_real = 1286;
pub const BFD_RELOC_MMIX_BASE_PLUS_OFFSET: bfd_reloc_code_real = 1285;
pub const BFD_RELOC_MMIX_REG: bfd_reloc_code_real = 1284;
pub const BFD_RELOC_MMIX_REG_OR_BYTE: bfd_reloc_code_real = 1283;
pub const BFD_RELOC_MMIX_ADDR27: bfd_reloc_code_real = 1282;
pub const BFD_RELOC_MMIX_ADDR19: bfd_reloc_code_real = 1281;
pub const BFD_RELOC_MMIX_JMP_3: bfd_reloc_code_real = 1280;
pub const BFD_RELOC_MMIX_JMP_2: bfd_reloc_code_real = 1279;
pub const BFD_RELOC_MMIX_JMP_1: bfd_reloc_code_real = 1278;
pub const BFD_RELOC_MMIX_JMP: bfd_reloc_code_real = 1277;
pub const BFD_RELOC_MMIX_PUSHJ_STUBBABLE: bfd_reloc_code_real = 1276;
pub const BFD_RELOC_MMIX_PUSHJ_3: bfd_reloc_code_real = 1275;
pub const BFD_RELOC_MMIX_PUSHJ_2: bfd_reloc_code_real = 1274;
pub const BFD_RELOC_MMIX_PUSHJ_1: bfd_reloc_code_real = 1273;
pub const BFD_RELOC_MMIX_PUSHJ: bfd_reloc_code_real = 1272;
pub const BFD_RELOC_MMIX_CBRANCH_3: bfd_reloc_code_real = 1271;
pub const BFD_RELOC_MMIX_CBRANCH_2: bfd_reloc_code_real = 1270;
pub const BFD_RELOC_MMIX_CBRANCH_1: bfd_reloc_code_real = 1269;
pub const BFD_RELOC_MMIX_CBRANCH_J: bfd_reloc_code_real = 1268;
pub const BFD_RELOC_MMIX_CBRANCH: bfd_reloc_code_real = 1267;
pub const BFD_RELOC_MMIX_GETA_3: bfd_reloc_code_real = 1266;
pub const BFD_RELOC_MMIX_GETA_2: bfd_reloc_code_real = 1265;
pub const BFD_RELOC_MMIX_GETA_1: bfd_reloc_code_real = 1264;
pub const BFD_RELOC_MMIX_GETA: bfd_reloc_code_real = 1263;
pub const BFD_RELOC_METAG_TLS_LE_LO16: bfd_reloc_code_real = 1262;
pub const BFD_RELOC_METAG_TLS_LE_HI16: bfd_reloc_code_real = 1261;
pub const BFD_RELOC_METAG_TLS_LE: bfd_reloc_code_real = 1260;
pub const BFD_RELOC_METAG_TLS_DTPOFF: bfd_reloc_code_real = 1259;
pub const BFD_RELOC_METAG_TLS_DTPMOD: bfd_reloc_code_real = 1258;
pub const BFD_RELOC_METAG_TLS_TPOFF: bfd_reloc_code_real = 1257;
pub const BFD_RELOC_METAG_TLS_IENONPIC_LO16: bfd_reloc_code_real = 1256;
pub const BFD_RELOC_METAG_TLS_IENONPIC_HI16: bfd_reloc_code_real = 1255;
pub const BFD_RELOC_METAG_TLS_IENONPIC: bfd_reloc_code_real = 1254;
pub const BFD_RELOC_METAG_TLS_IE: bfd_reloc_code_real = 1253;
pub const BFD_RELOC_METAG_TLS_LDO: bfd_reloc_code_real = 1252;
pub const BFD_RELOC_METAG_TLS_LDO_LO16: bfd_reloc_code_real = 1251;
pub const BFD_RELOC_METAG_TLS_LDO_HI16: bfd_reloc_code_real = 1250;
pub const BFD_RELOC_METAG_TLS_LDM: bfd_reloc_code_real = 1249;
pub const BFD_RELOC_METAG_TLS_GD: bfd_reloc_code_real = 1248;
pub const BFD_RELOC_METAG_GLOB_DAT: bfd_reloc_code_real = 1247;
pub const BFD_RELOC_METAG_RELATIVE: bfd_reloc_code_real = 1246;
pub const BFD_RELOC_METAG_JMP_SLOT: bfd_reloc_code_real = 1245;
pub const BFD_RELOC_METAG_COPY: bfd_reloc_code_real = 1244;
pub const BFD_RELOC_METAG_PLT: bfd_reloc_code_real = 1243;
pub const BFD_RELOC_METAG_GOTOFF: bfd_reloc_code_real = 1242;
pub const BFD_RELOC_METAG_RELBRANCH_PLT: bfd_reloc_code_real = 1241;
pub const BFD_RELOC_METAG_LO16_PLT: bfd_reloc_code_real = 1240;
pub const BFD_RELOC_METAG_HI16_PLT: bfd_reloc_code_real = 1239;
pub const BFD_RELOC_METAG_LO16_GOTPC: bfd_reloc_code_real = 1238;
pub const BFD_RELOC_METAG_HI16_GOTPC: bfd_reloc_code_real = 1237;
pub const BFD_RELOC_METAG_GETSET_GOT: bfd_reloc_code_real = 1236;
pub const BFD_RELOC_METAG_GETSET_GOTOFF: bfd_reloc_code_real = 1235;
pub const BFD_RELOC_METAG_LO16_GOTOFF: bfd_reloc_code_real = 1234;
pub const BFD_RELOC_METAG_HI16_GOTOFF: bfd_reloc_code_real = 1233;
pub const BFD_RELOC_METAG_REL16: bfd_reloc_code_real = 1232;
pub const BFD_RELOC_METAG_REL8: bfd_reloc_code_real = 1231;
pub const BFD_RELOC_METAG_LOOG: bfd_reloc_code_real = 1230;
pub const BFD_RELOC_METAG_HIOG: bfd_reloc_code_real = 1229;
pub const BFD_RELOC_METAG_GETSETOFF: bfd_reloc_code_real = 1228;
pub const BFD_RELOC_METAG_RELBRANCH: bfd_reloc_code_real = 1227;
pub const BFD_RELOC_METAG_LOADDR16: bfd_reloc_code_real = 1226;
pub const BFD_RELOC_METAG_HIADDR16: bfd_reloc_code_real = 1225;
pub const BFD_RELOC_MEP_GNU_VTENTRY: bfd_reloc_code_real = 1224;
pub const BFD_RELOC_MEP_GNU_VTINHERIT: bfd_reloc_code_real = 1223;
pub const BFD_RELOC_MEP_ADDR24A4: bfd_reloc_code_real = 1222;
pub const BFD_RELOC_MEP_UIMM24: bfd_reloc_code_real = 1221;
pub const BFD_RELOC_MEP_TPREL7A4: bfd_reloc_code_real = 1220;
pub const BFD_RELOC_MEP_TPREL7A2: bfd_reloc_code_real = 1219;
pub const BFD_RELOC_MEP_TPREL7: bfd_reloc_code_real = 1218;
pub const BFD_RELOC_MEP_TPREL: bfd_reloc_code_real = 1217;
pub const BFD_RELOC_MEP_GPREL: bfd_reloc_code_real = 1216;
pub const BFD_RELOC_MEP_HI16S: bfd_reloc_code_real = 1215;
pub const BFD_RELOC_MEP_HI16U: bfd_reloc_code_real = 1214;
pub const BFD_RELOC_MEP_LOW16: bfd_reloc_code_real = 1213;
pub const BFD_RELOC_MEP_PCABS24A2: bfd_reloc_code_real = 1212;
pub const BFD_RELOC_MEP_PCREL24A2: bfd_reloc_code_real = 1211;
pub const BFD_RELOC_MEP_PCREL17A2: bfd_reloc_code_real = 1210;
pub const BFD_RELOC_MEP_PCREL12A2: bfd_reloc_code_real = 1209;
pub const BFD_RELOC_MEP_PCREL8A2: bfd_reloc_code_real = 1208;
pub const BFD_RELOC_MEP_32: bfd_reloc_code_real = 1207;
pub const BFD_RELOC_MEP_16: bfd_reloc_code_real = 1206;
pub const BFD_RELOC_MEP_8: bfd_reloc_code_real = 1205;
pub const BFD_RELOC_MCORE_RVA: bfd_reloc_code_real = 1204;
pub const BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2: bfd_reloc_code_real = 1203;
pub const BFD_RELOC_MCORE_PCREL_32: bfd_reloc_code_real = 1202;
pub const BFD_RELOC_MCORE_PCREL_IMM4BY2: bfd_reloc_code_real = 1201;
pub const BFD_RELOC_MCORE_PCREL_IMM11BY2: bfd_reloc_code_real = 1200;
pub const BFD_RELOC_MCORE_PCREL_IMM8BY4: bfd_reloc_code_real = 1199;
pub const BFD_RELOC_FR30_12_PCREL: bfd_reloc_code_real = 1198;
pub const BFD_RELOC_FR30_9_PCREL: bfd_reloc_code_real = 1197;
pub const BFD_RELOC_FR30_10_IN_8: bfd_reloc_code_real = 1196;
pub const BFD_RELOC_FR30_9_IN_8: bfd_reloc_code_real = 1195;
pub const BFD_RELOC_FR30_8_IN_8: bfd_reloc_code_real = 1194;
pub const BFD_RELOC_FR30_6_IN_4: bfd_reloc_code_real = 1193;
pub const BFD_RELOC_FR30_20: bfd_reloc_code_real = 1192;
pub const BFD_RELOC_FR30_48: bfd_reloc_code_real = 1191;
pub const BFD_RELOC_C6000_NOCMP: bfd_reloc_code_real = 1190;
pub const BFD_RELOC_C6000_FPHEAD: bfd_reloc_code_real = 1189;
pub const BFD_RELOC_C6000_ALIGN: bfd_reloc_code_real = 1188;
pub const BFD_RELOC_C6000_PCR_L16: bfd_reloc_code_real = 1187;
pub const BFD_RELOC_C6000_PCR_H16: bfd_reloc_code_real = 1186;
pub const BFD_RELOC_C6000_EHTYPE: bfd_reloc_code_real = 1185;
pub const BFD_RELOC_C6000_JUMP_SLOT: bfd_reloc_code_real = 1184;
pub const BFD_RELOC_C6000_COPY: bfd_reloc_code_real = 1183;
pub const BFD_RELOC_C6000_PREL31: bfd_reloc_code_real = 1182;
pub const BFD_RELOC_C6000_DSBT_INDEX: bfd_reloc_code_real = 1181;
pub const BFD_RELOC_C6000_SBR_GOT_H16_W: bfd_reloc_code_real = 1180;
pub const BFD_RELOC_C6000_SBR_GOT_L16_W: bfd_reloc_code_real = 1179;
pub const BFD_RELOC_C6000_SBR_GOT_U15_W: bfd_reloc_code_real = 1178;
pub const BFD_RELOC_C6000_SBR_H16_W: bfd_reloc_code_real = 1177;
pub const BFD_RELOC_C6000_SBR_H16_H: bfd_reloc_code_real = 1176;
pub const BFD_RELOC_C6000_SBR_H16_B: bfd_reloc_code_real = 1175;
pub const BFD_RELOC_C6000_SBR_L16_W: bfd_reloc_code_real = 1174;
pub const BFD_RELOC_C6000_SBR_L16_H: bfd_reloc_code_real = 1173;
pub const BFD_RELOC_C6000_SBR_L16_B: bfd_reloc_code_real = 1172;
pub const BFD_RELOC_C6000_SBR_S16: bfd_reloc_code_real = 1171;
pub const BFD_RELOC_C6000_SBR_U15_W: bfd_reloc_code_real = 1170;
pub const BFD_RELOC_C6000_SBR_U15_H: bfd_reloc_code_real = 1169;
pub const BFD_RELOC_C6000_SBR_U15_B: bfd_reloc_code_real = 1168;
pub const BFD_RELOC_C6000_ABS_H16: bfd_reloc_code_real = 1167;
pub const BFD_RELOC_C6000_ABS_L16: bfd_reloc_code_real = 1166;
pub const BFD_RELOC_C6000_ABS_S16: bfd_reloc_code_real = 1165;
pub const BFD_RELOC_C6000_PCR_S7: bfd_reloc_code_real = 1164;
pub const BFD_RELOC_C6000_PCR_S10: bfd_reloc_code_real = 1163;
pub const BFD_RELOC_C6000_PCR_S12: bfd_reloc_code_real = 1162;
pub const BFD_RELOC_C6000_PCR_S21: bfd_reloc_code_real = 1161;
pub const BFD_RELOC_TIC54X_MS7_OF_23: bfd_reloc_code_real = 1160;
pub const BFD_RELOC_TIC54X_16_OF_23: bfd_reloc_code_real = 1159;
pub const BFD_RELOC_TIC54X_23: bfd_reloc_code_real = 1158;
pub const BFD_RELOC_TIC54X_PARTMS9: bfd_reloc_code_real = 1157;
pub const BFD_RELOC_TIC54X_PARTLS7: bfd_reloc_code_real = 1156;
pub const BFD_RELOC_TIC30_LDP: bfd_reloc_code_real = 1155;
pub const BFD_RELOC_V850_DATA: bfd_reloc_code_real = 1154;
pub const BFD_RELOC_V850_CODE: bfd_reloc_code_real = 1153;
pub const BFD_RELOC_V850_32_GOTOFF: bfd_reloc_code_real = 1152;
pub const BFD_RELOC_V850_16_GOTOFF: bfd_reloc_code_real = 1151;
pub const BFD_RELOC_V850_RELATIVE: bfd_reloc_code_real = 1150;
pub const BFD_RELOC_V850_JMP_SLOT: bfd_reloc_code_real = 1149;
pub const BFD_RELOC_V850_GLOB_DAT: bfd_reloc_code_real = 1148;
pub const BFD_RELOC_V850_COPY: bfd_reloc_code_real = 1147;
pub const BFD_RELOC_V850_32_PLT_PCREL: bfd_reloc_code_real = 1146;
pub const BFD_RELOC_V850_22_PLT_PCREL: bfd_reloc_code_real = 1145;
pub const BFD_RELOC_V850_32_GOT: bfd_reloc_code_real = 1144;
pub const BFD_RELOC_V850_16_GOT: bfd_reloc_code_real = 1143;
pub const BFD_RELOC_V850_32_GOTPCREL: bfd_reloc_code_real = 1142;
pub const BFD_RELOC_V850_CALLT_15_16_OFFSET: bfd_reloc_code_real = 1141;
pub const BFD_RELOC_V850_LO16_S1: bfd_reloc_code_real = 1140;
pub const BFD_RELOC_V850_16_S1: bfd_reloc_code_real = 1139;
pub const BFD_RELOC_V850_16_SPLIT_OFFSET: bfd_reloc_code_real = 1138;
pub const BFD_RELOC_V850_32_ABS: bfd_reloc_code_real = 1137;
pub const BFD_RELOC_V850_32_PCREL: bfd_reloc_code_real = 1136;
pub const BFD_RELOC_V850_23: bfd_reloc_code_real = 1135;
pub const BFD_RELOC_V850_17_PCREL: bfd_reloc_code_real = 1134;
pub const BFD_RELOC_V850_16_PCREL: bfd_reloc_code_real = 1133;
pub const BFD_RELOC_V850_LO16_SPLIT_OFFSET: bfd_reloc_code_real = 1132;
pub const BFD_RELOC_V850_ALIGN: bfd_reloc_code_real = 1131;
pub const BFD_RELOC_V850_LONGJUMP: bfd_reloc_code_real = 1130;
pub const BFD_RELOC_V850_LONGCALL: bfd_reloc_code_real = 1129;
pub const BFD_RELOC_V850_CALLT_16_16_OFFSET: bfd_reloc_code_real = 1128;
pub const BFD_RELOC_V850_CALLT_6_7_OFFSET: bfd_reloc_code_real = 1127;
pub const BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET: bfd_reloc_code_real = 1126;
pub const BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET: bfd_reloc_code_real = 1125;
pub const BFD_RELOC_V850_TDA_4_4_OFFSET: bfd_reloc_code_real = 1124;
pub const BFD_RELOC_V850_TDA_4_5_OFFSET: bfd_reloc_code_real = 1123;
pub const BFD_RELOC_V850_TDA_16_16_OFFSET: bfd_reloc_code_real = 1122;
pub const BFD_RELOC_V850_TDA_7_7_OFFSET: bfd_reloc_code_real = 1121;
pub const BFD_RELOC_V850_TDA_7_8_OFFSET: bfd_reloc_code_real = 1120;
pub const BFD_RELOC_V850_TDA_6_8_OFFSET: bfd_reloc_code_real = 1119;
pub const BFD_RELOC_V850_ZDA_15_16_OFFSET: bfd_reloc_code_real = 1118;
pub const BFD_RELOC_V850_ZDA_16_16_OFFSET: bfd_reloc_code_real = 1117;
pub const BFD_RELOC_V850_SDA_15_16_OFFSET: bfd_reloc_code_real = 1116;
pub const BFD_RELOC_V850_SDA_16_16_OFFSET: bfd_reloc_code_real = 1115;
pub const BFD_RELOC_V850_22_PCREL: bfd_reloc_code_real = 1114;
pub const BFD_RELOC_V850_9_PCREL: bfd_reloc_code_real = 1113;
pub const BFD_RELOC_NDS32_LSI: bfd_reloc_code_real = 1112;
pub const BFD_RELOC_NDS32_GROUP: bfd_reloc_code_real = 1111;
pub const BFD_RELOC_NDS32_REMOVE: bfd_reloc_code_real = 1110;
pub const BFD_RELOC_NDS32_TLS_DESC_MEM: bfd_reloc_code_real = 1109;
pub const BFD_RELOC_NDS32_TLS_DESC_CALL: bfd_reloc_code_real = 1108;
pub const BFD_RELOC_NDS32_TLS_DESC_FUNC: bfd_reloc_code_real = 1107;
pub const BFD_RELOC_NDS32_TLS_DESC_ADD: bfd_reloc_code_real = 1106;
pub const BFD_RELOC_NDS32_TLS_DESC_SDA17S2: bfd_reloc_code_real = 1105;
pub const BFD_RELOC_NDS32_TLS_DESC_20: bfd_reloc_code_real = 1104;
pub const BFD_RELOC_NDS32_TLS_DESC_LO12: bfd_reloc_code_real = 1103;
pub const BFD_RELOC_NDS32_TLS_DESC_HI20: bfd_reloc_code_real = 1102;
pub const BFD_RELOC_NDS32_TLS_DESC: bfd_reloc_code_real = 1101;
pub const BFD_RELOC_NDS32_TLS_IEGP_LW: bfd_reloc_code_real = 1100;
pub const BFD_RELOC_NDS32_TLS_IEGP_LO12S2: bfd_reloc_code_real = 1099;
pub const BFD_RELOC_NDS32_TLS_IEGP_LO12: bfd_reloc_code_real = 1098;
pub const BFD_RELOC_NDS32_TLS_IEGP_HI20: bfd_reloc_code_real = 1097;
pub const BFD_RELOC_NDS32_TLS_IE_LO12S2: bfd_reloc_code_real = 1096;
pub const BFD_RELOC_NDS32_TLS_IE_LO12: bfd_reloc_code_real = 1095;
pub const BFD_RELOC_NDS32_TLS_IE_HI20: bfd_reloc_code_real = 1094;
pub const BFD_RELOC_NDS32_TLS_LE_LS: bfd_reloc_code_real = 1093;
pub const BFD_RELOC_NDS32_TLS_LE_ADD: bfd_reloc_code_real = 1092;
pub const BFD_RELOC_NDS32_TLS_LE_15S2: bfd_reloc_code_real = 1091;
pub const BFD_RELOC_NDS32_TLS_LE_15S1: bfd_reloc_code_real = 1090;
pub const BFD_RELOC_NDS32_TLS_LE_15S0: bfd_reloc_code_real = 1089;
pub const BFD_RELOC_NDS32_TLS_LE_20: bfd_reloc_code_real = 1088;
pub const BFD_RELOC_NDS32_TLS_LE_LO12: bfd_reloc_code_real = 1087;
pub const BFD_RELOC_NDS32_TLS_LE_HI20: bfd_reloc_code_real = 1086;
pub const BFD_RELOC_NDS32_GOTTPOFF: bfd_reloc_code_real = 1085;
pub const BFD_RELOC_NDS32_TPOFF: bfd_reloc_code_real = 1084;
pub const BFD_RELOC_NDS32_10IFCU_PCREL: bfd_reloc_code_real = 1083;
pub const BFD_RELOC_NDS32_17IFC_PCREL: bfd_reloc_code_real = 1082;
pub const BFD_RELOC_NDS32_TRAN: bfd_reloc_code_real = 1081;
pub const BFD_RELOC_NDS32_DATA: bfd_reloc_code_real = 1080;
pub const BFD_RELOC_NDS32_25_ABS: bfd_reloc_code_real = 1079;
pub const BFD_RELOC_NDS32_EMPTY: bfd_reloc_code_real = 1078;
pub const BFD_RELOC_NDS32_DIFF_ULEB128: bfd_reloc_code_real = 1077;
pub const BFD_RELOC_NDS32_DIFF32: bfd_reloc_code_real = 1076;
pub const BFD_RELOC_NDS32_DIFF16: bfd_reloc_code_real = 1075;
pub const BFD_RELOC_NDS32_DIFF8: bfd_reloc_code_real = 1074;
pub const BFD_RELOC_NDS32_SUBTRAHEND: bfd_reloc_code_real = 1073;
pub const BFD_RELOC_NDS32_MINUEND: bfd_reloc_code_real = 1072;
pub const BFD_RELOC_NDS32_RELAX_REGION_END: bfd_reloc_code_real = 1071;
pub const BFD_RELOC_NDS32_RELAX_REGION_BEGIN: bfd_reloc_code_real = 1070;
pub const BFD_RELOC_NDS32_PLTBLOCK: bfd_reloc_code_real = 1069;
pub const BFD_RELOC_NDS32_PTR_RESOLVED: bfd_reloc_code_real = 1068;
pub const BFD_RELOC_NDS32_PTR_COUNT: bfd_reloc_code_real = 1067;
pub const BFD_RELOC_NDS32_PTR: bfd_reloc_code_real = 1066;
pub const BFD_RELOC_NDS32_MULCALL_SUFF: bfd_reloc_code_real = 1065;
pub const BFD_RELOC_NDS32_PLT_GOT_SUFF: bfd_reloc_code_real = 1064;
pub const BFD_RELOC_NDS32_GOTOFF_SUFF: bfd_reloc_code_real = 1063;
pub const BFD_RELOC_NDS32_GOT_SUFF: bfd_reloc_code_real = 1062;
pub const BFD_RELOC_NDS32_RELAX_ENTRY: bfd_reloc_code_real = 1061;
pub const BFD_RELOC_NDS32_SDA_FP7U2_RELA: bfd_reloc_code_real = 1060;
pub const BFD_RELOC_NDS32_10_UPCREL: bfd_reloc_code_real = 1059;
pub const BFD_RELOC_NDS32_5: bfd_reloc_code_real = 1058;
pub const BFD_RELOC_NDS32_GOT17S2: bfd_reloc_code_real = 1057;
pub const BFD_RELOC_NDS32_GOT15S2: bfd_reloc_code_real = 1056;
pub const BFD_RELOC_NDS32_GOTOFF_LO19: bfd_reloc_code_real = 1055;
pub const BFD_RELOC_NDS32_GOTOFF_LO15: bfd_reloc_code_real = 1054;
pub const BFD_RELOC_NDS32_GOT_LO19: bfd_reloc_code_real = 1053;
pub const BFD_RELOC_NDS32_GOT_LO15: bfd_reloc_code_real = 1052;
pub const BFD_RELOC_NDS32_PLT_GOTREL_LO19: bfd_reloc_code_real = 1051;
pub const BFD_RELOC_NDS32_PLT_GOTREL_LO15: bfd_reloc_code_real = 1050;
pub const BFD_RELOC_NDS32_PLT_GOTREL_LO20: bfd_reloc_code_real = 1049;
pub const BFD_RELOC_NDS32_UPDATE_TA: bfd_reloc_code_real = 1048;
pub const BFD_RELOC_NDS32_DWARF2_LEB: bfd_reloc_code_real = 1047;
pub const BFD_RELOC_NDS32_DWARF2_OP2: bfd_reloc_code_real = 1046;
pub const BFD_RELOC_NDS32_DWARF2_OP1: bfd_reloc_code_real = 1045;
pub const BFD_RELOC_NDS32_LO12S2_SP: bfd_reloc_code_real = 1044;
pub const BFD_RELOC_NDS32_LO12S2_DP: bfd_reloc_code_real = 1043;
pub const BFD_RELOC_NDS32_SDA12S2_SP: bfd_reloc_code_real = 1042;
pub const BFD_RELOC_NDS32_SDA12S2_DP: bfd_reloc_code_real = 1041;
pub const BFD_RELOC_NDS32_PLT_GOTREL_LO12: bfd_reloc_code_real = 1040;
pub const BFD_RELOC_NDS32_PLT_GOTREL_HI20: bfd_reloc_code_real = 1039;
pub const BFD_RELOC_NDS32_PLTREL_LO12: bfd_reloc_code_real = 1038;
pub const BFD_RELOC_NDS32_PLTREL_HI20: bfd_reloc_code_real = 1037;
pub const BFD_RELOC_NDS32_LONGJUMP7: bfd_reloc_code_real = 1036;
pub const BFD_RELOC_NDS32_LONGJUMP6: bfd_reloc_code_real = 1035;
pub const BFD_RELOC_NDS32_LONGJUMP5: bfd_reloc_code_real = 1034;
pub const BFD_RELOC_NDS32_LONGJUMP4: bfd_reloc_code_real = 1033;
pub const BFD_RELOC_NDS32_LONGCALL6: bfd_reloc_code_real = 1032;
pub const BFD_RELOC_NDS32_LONGCALL5: bfd_reloc_code_real = 1031;
pub const BFD_RELOC_NDS32_LONGCALL4: bfd_reloc_code_real = 1030;
pub const BFD_RELOC_NDS32_25_FIXED: bfd_reloc_code_real = 1029;
pub const BFD_RELOC_NDS32_17_FIXED: bfd_reloc_code_real = 1028;
pub const BFD_RELOC_NDS32_15_FIXED: bfd_reloc_code_real = 1027;
pub const BFD_RELOC_NDS32_9_FIXED: bfd_reloc_code_real = 1026;
pub const BFD_RELOC_NDS32_LOADSTORE: bfd_reloc_code_real = 1025;
pub const BFD_RELOC_NDS32_LONGJUMP3: bfd_reloc_code_real = 1024;
pub const BFD_RELOC_NDS32_LONGJUMP2: bfd_reloc_code_real = 1023;
pub const BFD_RELOC_NDS32_LONGJUMP1: bfd_reloc_code_real = 1022;
pub const BFD_RELOC_NDS32_LONGCALL3: bfd_reloc_code_real = 1021;
pub const BFD_RELOC_NDS32_LONGCALL2: bfd_reloc_code_real = 1020;
pub const BFD_RELOC_NDS32_LONGCALL1: bfd_reloc_code_real = 1019;
pub const BFD_RELOC_NDS32_LABEL: bfd_reloc_code_real = 1018;
pub const BFD_RELOC_NDS32_INSN16: bfd_reloc_code_real = 1017;
pub const BFD_RELOC_NDS32_GOTPC_LO12: bfd_reloc_code_real = 1016;
pub const BFD_RELOC_NDS32_GOTPC_HI20: bfd_reloc_code_real = 1015;
pub const BFD_RELOC_NDS32_GOT_LO12: bfd_reloc_code_real = 1014;
pub const BFD_RELOC_NDS32_GOT_HI20: bfd_reloc_code_real = 1013;
pub const BFD_RELOC_NDS32_GOTPC20: bfd_reloc_code_real = 1012;
pub const BFD_RELOC_NDS32_GOTOFF_LO12: bfd_reloc_code_real = 1011;
pub const BFD_RELOC_NDS32_GOTOFF_HI20: bfd_reloc_code_real = 1010;
pub const BFD_RELOC_NDS32_GOTOFF: bfd_reloc_code_real = 1009;
pub const BFD_RELOC_NDS32_RELATIVE: bfd_reloc_code_real = 1008;
pub const BFD_RELOC_NDS32_JMP_SLOT: bfd_reloc_code_real = 1007;
pub const BFD_RELOC_NDS32_GLOB_DAT: bfd_reloc_code_real = 1006;
pub const BFD_RELOC_NDS32_COPY: bfd_reloc_code_real = 1005;
pub const BFD_RELOC_NDS32_25_PLTREL: bfd_reloc_code_real = 1004;
pub const BFD_RELOC_NDS32_9_PLTREL: bfd_reloc_code_real = 1003;
pub const BFD_RELOC_NDS32_GOT20: bfd_reloc_code_real = 1002;
pub const BFD_RELOC_NDS32_SDA19S0: bfd_reloc_code_real = 1001;
pub const BFD_RELOC_NDS32_SDA18S1: bfd_reloc_code_real = 1000;
pub const BFD_RELOC_NDS32_SDA17S2: bfd_reloc_code_real = 999;
pub const BFD_RELOC_NDS32_SDA16S3: bfd_reloc_code_real = 998;
pub const BFD_RELOC_NDS32_SDA15S0: bfd_reloc_code_real = 997;
pub const BFD_RELOC_NDS32_SDA15S1: bfd_reloc_code_real = 996;
pub const BFD_RELOC_NDS32_SDA15S2: bfd_reloc_code_real = 995;
pub const BFD_RELOC_NDS32_SDA15S3: bfd_reloc_code_real = 994;
pub const BFD_RELOC_NDS32_LO12S0_ORI: bfd_reloc_code_real = 993;
pub const BFD_RELOC_NDS32_LO12S0: bfd_reloc_code_real = 992;
pub const BFD_RELOC_NDS32_LO12S1: bfd_reloc_code_real = 991;
pub const BFD_RELOC_NDS32_LO12S2: bfd_reloc_code_real = 990;
pub const BFD_RELOC_NDS32_LO12S3: bfd_reloc_code_real = 989;
pub const BFD_RELOC_NDS32_HI20: bfd_reloc_code_real = 988;
pub const BFD_RELOC_NDS32_25_PCREL: bfd_reloc_code_real = 987;
pub const BFD_RELOC_NDS32_17_PCREL: bfd_reloc_code_real = 986;
pub const BFD_RELOC_NDS32_15_PCREL: bfd_reloc_code_real = 985;
pub const BFD_RELOC_NDS32_WORD_9_PCREL: bfd_reloc_code_real = 984;
pub const BFD_RELOC_NDS32_9_PCREL: bfd_reloc_code_real = 983;
pub const BFD_RELOC_NDS32_20: bfd_reloc_code_real = 982;
pub const BFD_RELOC_M32R_GOTPC_LO: bfd_reloc_code_real = 981;
pub const BFD_RELOC_M32R_GOTPC_HI_SLO: bfd_reloc_code_real = 980;
pub const BFD_RELOC_M32R_GOTPC_HI_ULO: bfd_reloc_code_real = 979;
pub const BFD_RELOC_M32R_GOT16_LO: bfd_reloc_code_real = 978;
pub const BFD_RELOC_M32R_GOT16_HI_SLO: bfd_reloc_code_real = 977;
pub const BFD_RELOC_M32R_GOT16_HI_ULO: bfd_reloc_code_real = 976;
pub const BFD_RELOC_M32R_GOTPC24: bfd_reloc_code_real = 975;
pub const BFD_RELOC_M32R_GOTOFF_LO: bfd_reloc_code_real = 974;
pub const BFD_RELOC_M32R_GOTOFF_HI_SLO: bfd_reloc_code_real = 973;
pub const BFD_RELOC_M32R_GOTOFF_HI_ULO: bfd_reloc_code_real = 972;
pub const BFD_RELOC_M32R_GOTOFF: bfd_reloc_code_real = 971;
pub const BFD_RELOC_M32R_RELATIVE: bfd_reloc_code_real = 970;
pub const BFD_RELOC_M32R_JMP_SLOT: bfd_reloc_code_real = 969;
pub const BFD_RELOC_M32R_GLOB_DAT: bfd_reloc_code_real = 968;
pub const BFD_RELOC_M32R_COPY: bfd_reloc_code_real = 967;
pub const BFD_RELOC_M32R_26_PLTREL: bfd_reloc_code_real = 966;
pub const BFD_RELOC_M32R_GOT24: bfd_reloc_code_real = 965;
pub const BFD_RELOC_M32R_SDA16: bfd_reloc_code_real = 964;
pub const BFD_RELOC_M32R_LO16: bfd_reloc_code_real = 963;
pub const BFD_RELOC_M32R_HI16_SLO: bfd_reloc_code_real = 962;
pub const BFD_RELOC_M32R_HI16_ULO: bfd_reloc_code_real = 961;
pub const BFD_RELOC_M32R_26_PCREL: bfd_reloc_code_real = 960;
pub const BFD_RELOC_M32R_18_PCREL: bfd_reloc_code_real = 959;
pub const BFD_RELOC_M32R_10_PCREL: bfd_reloc_code_real = 958;
pub const BFD_RELOC_M32R_24: bfd_reloc_code_real = 957;
pub const BFD_RELOC_M32C_RL_2ADDR: bfd_reloc_code_real = 956;
pub const BFD_RELOC_M32C_RL_1ADDR: bfd_reloc_code_real = 955;
pub const BFD_RELOC_M32C_RL_JUMP: bfd_reloc_code_real = 954;
pub const BFD_RELOC_M32C_HI8: bfd_reloc_code_real = 953;
pub const BFD_RELOC_DLX_JMP26: bfd_reloc_code_real = 952;
pub const BFD_RELOC_DLX_LO16: bfd_reloc_code_real = 951;
pub const BFD_RELOC_DLX_HI16_S: bfd_reloc_code_real = 950;
pub const BFD_RELOC_D30V_32_PCREL: bfd_reloc_code_real = 949;
pub const BFD_RELOC_D30V_32: bfd_reloc_code_real = 948;
pub const BFD_RELOC_D30V_21_PCREL_R: bfd_reloc_code_real = 947;
pub const BFD_RELOC_D30V_21_PCREL: bfd_reloc_code_real = 946;
pub const BFD_RELOC_D30V_21: bfd_reloc_code_real = 945;
pub const BFD_RELOC_D30V_15_PCREL_R: bfd_reloc_code_real = 944;
pub const BFD_RELOC_D30V_15_PCREL: bfd_reloc_code_real = 943;
pub const BFD_RELOC_D30V_15: bfd_reloc_code_real = 942;
pub const BFD_RELOC_D30V_9_PCREL_R: bfd_reloc_code_real = 941;
pub const BFD_RELOC_D30V_9_PCREL: bfd_reloc_code_real = 940;
pub const BFD_RELOC_D30V_6: bfd_reloc_code_real = 939;
pub const BFD_RELOC_D10V_18_PCREL: bfd_reloc_code_real = 938;
pub const BFD_RELOC_D10V_18: bfd_reloc_code_real = 937;
pub const BFD_RELOC_D10V_10_PCREL_L: bfd_reloc_code_real = 936;
pub const BFD_RELOC_D10V_10_PCREL_R: bfd_reloc_code_real = 935;
pub const BFD_ARELOC_BFIN_ADDR: bfd_reloc_code_real = 934;
pub const BFD_ARELOC_BFIN_HWPAGE: bfd_reloc_code_real = 933;
pub const BFD_ARELOC_BFIN_PAGE: bfd_reloc_code_real = 932;
pub const BFD_ARELOC_BFIN_COMP: bfd_reloc_code_real = 931;
pub const BFD_ARELOC_BFIN_NEG: bfd_reloc_code_real = 930;
pub const BFD_ARELOC_BFIN_LEN: bfd_reloc_code_real = 929;
pub const BFD_ARELOC_BFIN_LOR: bfd_reloc_code_real = 928;
pub const BFD_ARELOC_BFIN_LAND: bfd_reloc_code_real = 927;
pub const BFD_ARELOC_BFIN_XOR: bfd_reloc_code_real = 926;
pub const BFD_ARELOC_BFIN_OR: bfd_reloc_code_real = 925;
pub const BFD_ARELOC_BFIN_AND: bfd_reloc_code_real = 924;
pub const BFD_ARELOC_BFIN_RSHIFT: bfd_reloc_code_real = 923;
pub const BFD_ARELOC_BFIN_LSHIFT: bfd_reloc_code_real = 922;
pub const BFD_ARELOC_BFIN_MOD: bfd_reloc_code_real = 921;
pub const BFD_ARELOC_BFIN_DIV: bfd_reloc_code_real = 920;
pub const BFD_ARELOC_BFIN_MULT: bfd_reloc_code_real = 919;
pub const BFD_ARELOC_BFIN_SUB: bfd_reloc_code_real = 918;
pub const BFD_ARELOC_BFIN_ADD: bfd_reloc_code_real = 917;
pub const BFD_ARELOC_BFIN_CONST: bfd_reloc_code_real = 916;
pub const BFD_ARELOC_BFIN_PUSH: bfd_reloc_code_real = 915;
pub const BFD_RELOC_BFIN_PLTPC: bfd_reloc_code_real = 914;
pub const BFD_RELOC_BFIN_GOT: bfd_reloc_code_real = 913;
pub const BFD_RELOC_BFIN_GOTOFFLO: bfd_reloc_code_real = 912;
pub const BFD_RELOC_BFIN_GOTOFFHI: bfd_reloc_code_real = 911;
pub const BFD_RELOC_BFIN_GOTOFF17M4: bfd_reloc_code_real = 910;
pub const BFD_RELOC_BFIN_FUNCDESC_GOTOFFLO: bfd_reloc_code_real = 909;
pub const BFD_RELOC_BFIN_FUNCDESC_GOTOFFHI: bfd_reloc_code_real = 908;
pub const BFD_RELOC_BFIN_FUNCDESC_GOTOFF17M4: bfd_reloc_code_real = 907;
pub const BFD_RELOC_BFIN_FUNCDESC_VALUE: bfd_reloc_code_real = 906;
pub const BFD_RELOC_BFIN_FUNCDESC_GOTLO: bfd_reloc_code_real = 905;
pub const BFD_RELOC_BFIN_FUNCDESC_GOTHI: bfd_reloc_code_real = 904;
pub const BFD_RELOC_BFIN_FUNCDESC_GOT17M4: bfd_reloc_code_real = 903;
pub const BFD_RELOC_BFIN_FUNCDESC: bfd_reloc_code_real = 902;
pub const BFD_RELOC_BFIN_GOTLO: bfd_reloc_code_real = 901;
pub const BFD_RELOC_BFIN_GOTHI: bfd_reloc_code_real = 900;
pub const BFD_RELOC_BFIN_GOT17M4: bfd_reloc_code_real = 899;
pub const BFD_RELOC_BFIN_24_PCREL_JUMP_L: bfd_reloc_code_real = 898;
pub const BFD_RELOC_BFIN_24_PCREL_CALL_X: bfd_reloc_code_real = 897;
pub const BFD_RELOC_BFIN_12_PCREL_JUMP_S: bfd_reloc_code_real = 896;
pub const BFD_RELOC_BFIN_12_PCREL_JUMP: bfd_reloc_code_real = 895;
pub const BFD_RELOC_BFIN_11_PCREL: bfd_reloc_code_real = 894;
pub const BFD_RELOC_BFIN_10_PCREL: bfd_reloc_code_real = 893;
pub const BFD_RELOC_BFIN_16_LOW: bfd_reloc_code_real = 892;
pub const BFD_RELOC_BFIN_5_PCREL: bfd_reloc_code_real = 891;
pub const BFD_RELOC_BFIN_4_PCREL: bfd_reloc_code_real = 890;
pub const BFD_RELOC_BFIN_16_HIGH: bfd_reloc_code_real = 889;
pub const BFD_RELOC_BFIN_16_IMM: bfd_reloc_code_real = 888;
pub const BFD_RELOC_ARC_JLI_SECTOFF: bfd_reloc_code_real = 887;
pub const BFD_RELOC_ARC_NPS_CMEM16: bfd_reloc_code_real = 886;
pub const BFD_RELOC_ARC_S21H_PCREL_PLT: bfd_reloc_code_real = 885;
pub const BFD_RELOC_ARC_S25W_PCREL_PLT: bfd_reloc_code_real = 884;
pub const BFD_RELOC_ARC_TLS_LE_32: bfd_reloc_code_real = 883;
pub const BFD_RELOC_ARC_TLS_LE_S9: bfd_reloc_code_real = 882;
pub const BFD_RELOC_ARC_TLS_DTPOFF_S9: bfd_reloc_code_real = 881;
pub const BFD_RELOC_ARC_TLS_DTPOFF: bfd_reloc_code_real = 880;
pub const BFD_RELOC_ARC_TLS_IE_GOT: bfd_reloc_code_real = 879;
pub const BFD_RELOC_ARC_TLS_GD_CALL: bfd_reloc_code_real = 878;
pub const BFD_RELOC_ARC_TLS_GD_LD: bfd_reloc_code_real = 877;
pub const BFD_RELOC_ARC_TLS_GD_GOT: bfd_reloc_code_real = 876;
pub const BFD_RELOC_ARC_TLS_TPOFF: bfd_reloc_code_real = 875;
pub const BFD_RELOC_ARC_TLS_DTPMOD: bfd_reloc_code_real = 874;
pub const BFD_RELOC_ARC_S25H_PCREL_PLT: bfd_reloc_code_real = 873;
pub const BFD_RELOC_ARC_S21W_PCREL_PLT: bfd_reloc_code_real = 872;
pub const BFD_RELOC_ARC_GOTPC: bfd_reloc_code_real = 871;
pub const BFD_RELOC_ARC_GOTOFF: bfd_reloc_code_real = 870;
pub const BFD_RELOC_ARC_RELATIVE: bfd_reloc_code_real = 869;
pub const BFD_RELOC_ARC_JMP_SLOT: bfd_reloc_code_real = 868;
pub const BFD_RELOC_ARC_GLOB_DAT: bfd_reloc_code_real = 867;
pub const BFD_RELOC_ARC_COPY: bfd_reloc_code_real = 866;
pub const BFD_RELOC_ARC_PLT32: bfd_reloc_code_real = 865;
pub const BFD_RELOC_ARC_GOTPC32: bfd_reloc_code_real = 864;
pub const BFD_RELOC_ARC_GOT32: bfd_reloc_code_real = 863;
pub const BFD_RELOC_ARC_PC32: bfd_reloc_code_real = 862;
pub const BFD_RELOC_ARC_32_PCREL: bfd_reloc_code_real = 861;
pub const BFD_RELOC_ARC_SDA16_ST2: bfd_reloc_code_real = 860;
pub const BFD_RELOC_ARC_SDA_12: bfd_reloc_code_real = 859;
pub const BFD_RELOC_ARC_SECTOFF_2: bfd_reloc_code_real = 858;
pub const BFD_RELOC_ARC_SECTOFF_1: bfd_reloc_code_real = 857;
pub const BFD_RELOC_ARC_SECTOFF_ME_2: bfd_reloc_code_real = 856;
pub const BFD_RELOC_ARC_SECTOFF_ME_1: bfd_reloc_code_real = 855;
pub const BFD_RELOC_AC_SECTOFF_S9_2: bfd_reloc_code_real = 854;
pub const BFD_RELOC_AC_SECTOFF_S9_1: bfd_reloc_code_real = 853;
pub const BFD_RELOC_AC_SECTOFF_S9: bfd_reloc_code_real = 852;
pub const BFD_RELOC_AC_SECTOFF_U8_2: bfd_reloc_code_real = 851;
pub const BFD_RELOC_AC_SECTOFF_U8_1: bfd_reloc_code_real = 850;
pub const BFD_RELOC_AC_SECTOFF_U8: bfd_reloc_code_real = 849;
pub const BFD_RELOC_ARC_W_ME: bfd_reloc_code_real = 848;
pub const BFD_RELOC_ARC_SDA32_ME: bfd_reloc_code_real = 847;
pub const BFD_RELOC_ARC_SECTOFF_ME: bfd_reloc_code_real = 846;
pub const BFD_RELOC_ARC_N32_ME: bfd_reloc_code_real = 845;
pub const BFD_RELOC_ARC_32_ME_S: bfd_reloc_code_real = 844;
pub const BFD_RELOC_ARC_32_ME: bfd_reloc_code_real = 843;
pub const BFD_RELOC_ARC_W: bfd_reloc_code_real = 842;
pub const BFD_RELOC_ARC_S13_PCREL: bfd_reloc_code_real = 841;
pub const BFD_RELOC_ARC_SDA16_LD2: bfd_reloc_code_real = 840;
pub const BFD_RELOC_ARC_SDA16_LD1: bfd_reloc_code_real = 839;
pub const BFD_RELOC_ARC_SDA16_LD: bfd_reloc_code_real = 838;
pub const BFD_RELOC_ARC_SDA_LDST2: bfd_reloc_code_real = 837;
pub const BFD_RELOC_ARC_SDA_LDST1: bfd_reloc_code_real = 836;
pub const BFD_RELOC_ARC_SDA_LDST: bfd_reloc_code_real = 835;
pub const BFD_RELOC_ARC_SDA32: bfd_reloc_code_real = 834;
pub const BFD_RELOC_ARC_S25W_PCREL: bfd_reloc_code_real = 833;
pub const BFD_RELOC_ARC_S25H_PCREL: bfd_reloc_code_real = 832;
pub const BFD_RELOC_ARC_S21W_PCREL: bfd_reloc_code_real = 831;
pub const BFD_RELOC_ARC_S21H_PCREL: bfd_reloc_code_real = 830;
pub const BFD_RELOC_ARC_SECTOFF: bfd_reloc_code_real = 829;
pub const BFD_RELOC_ARC_SDA: bfd_reloc_code_real = 828;
pub const BFD_RELOC_ARC_N32: bfd_reloc_code_real = 827;
pub const BFD_RELOC_ARC_N24: bfd_reloc_code_real = 826;
pub const BFD_RELOC_ARC_N16: bfd_reloc_code_real = 825;
pub const BFD_RELOC_ARC_N8: bfd_reloc_code_real = 824;
pub const BFD_RELOC_ARC_32: bfd_reloc_code_real = 823;
pub const BFD_RELOC_ARC_24: bfd_reloc_code_real = 822;
pub const BFD_RELOC_ARC_16: bfd_reloc_code_real = 821;
pub const BFD_RELOC_ARC_8: bfd_reloc_code_real = 820;
pub const BFD_RELOC_ARC_NONE: bfd_reloc_code_real = 819;
pub const BFD_RELOC_SH_FUNCDESC: bfd_reloc_code_real = 818;
pub const BFD_RELOC_SH_GOTOFFFUNCDESC20: bfd_reloc_code_real = 817;
pub const BFD_RELOC_SH_GOTOFFFUNCDESC: bfd_reloc_code_real = 816;
pub const BFD_RELOC_SH_GOTFUNCDESC20: bfd_reloc_code_real = 815;
pub const BFD_RELOC_SH_GOTFUNCDESC: bfd_reloc_code_real = 814;
pub const BFD_RELOC_SH_GOTOFF20: bfd_reloc_code_real = 813;
pub const BFD_RELOC_SH_GOT20: bfd_reloc_code_real = 812;
pub const BFD_RELOC_SH_TLS_TPOFF32: bfd_reloc_code_real = 811;
pub const BFD_RELOC_SH_TLS_DTPOFF32: bfd_reloc_code_real = 810;
pub const BFD_RELOC_SH_TLS_DTPMOD32: bfd_reloc_code_real = 809;
pub const BFD_RELOC_SH_TLS_LE_32: bfd_reloc_code_real = 808;
pub const BFD_RELOC_SH_TLS_IE_32: bfd_reloc_code_real = 807;
pub const BFD_RELOC_SH_TLS_LDO_32: bfd_reloc_code_real = 806;
pub const BFD_RELOC_SH_TLS_LD_32: bfd_reloc_code_real = 805;
pub const BFD_RELOC_SH_TLS_GD_32: bfd_reloc_code_real = 804;
pub const BFD_RELOC_SH_PT_16: bfd_reloc_code_real = 803;
pub const BFD_RELOC_SH_IMM_HI16_PCREL: bfd_reloc_code_real = 802;
pub const BFD_RELOC_SH_IMM_HI16: bfd_reloc_code_real = 801;
pub const BFD_RELOC_SH_IMM_MEDHI16_PCREL: bfd_reloc_code_real = 800;
pub const BFD_RELOC_SH_IMM_MEDHI16: bfd_reloc_code_real = 799;
pub const BFD_RELOC_SH_IMM_MEDLOW16_PCREL: bfd_reloc_code_real = 798;
pub const BFD_RELOC_SH_IMM_MEDLOW16: bfd_reloc_code_real = 797;
pub const BFD_RELOC_SH_IMM_LOW16_PCREL: bfd_reloc_code_real = 796;
pub const BFD_RELOC_SH_IMM_LOW16: bfd_reloc_code_real = 795;
pub const BFD_RELOC_SH_IMMU16: bfd_reloc_code_real = 794;
pub const BFD_RELOC_SH_IMMS16: bfd_reloc_code_real = 793;
pub const BFD_RELOC_SH_IMMS10BY8: bfd_reloc_code_real = 792;
pub const BFD_RELOC_SH_IMMS10BY4: bfd_reloc_code_real = 791;
pub const BFD_RELOC_SH_IMMS10BY2: bfd_reloc_code_real = 790;
pub const BFD_RELOC_SH_IMMS10: bfd_reloc_code_real = 789;
pub const BFD_RELOC_SH_IMMU6: bfd_reloc_code_real = 788;
pub const BFD_RELOC_SH_IMMS6BY32: bfd_reloc_code_real = 787;
pub const BFD_RELOC_SH_IMMS6: bfd_reloc_code_real = 786;
pub const BFD_RELOC_SH_IMMU5: bfd_reloc_code_real = 785;
pub const BFD_RELOC_SH_SHMEDIA_CODE: bfd_reloc_code_real = 784;
pub const BFD_RELOC_SH_GOTPLT32: bfd_reloc_code_real = 783;
pub const BFD_RELOC_SH_GOTPLT10BY8: bfd_reloc_code_real = 782;
pub const BFD_RELOC_SH_GOTPLT10BY4: bfd_reloc_code_real = 781;
pub const BFD_RELOC_SH_GOT10BY8: bfd_reloc_code_real = 780;
pub const BFD_RELOC_SH_GOT10BY4: bfd_reloc_code_real = 779;
pub const BFD_RELOC_SH_RELATIVE64: bfd_reloc_code_real = 778;
pub const BFD_RELOC_SH_JMP_SLOT64: bfd_reloc_code_real = 777;
pub const BFD_RELOC_SH_GLOB_DAT64: bfd_reloc_code_real = 776;
pub const BFD_RELOC_SH_COPY64: bfd_reloc_code_real = 775;
pub const BFD_RELOC_SH_GOTPC_HI16: bfd_reloc_code_real = 774;
pub const BFD_RELOC_SH_GOTPC_MEDHI16: bfd_reloc_code_real = 773;
pub const BFD_RELOC_SH_GOTPC_MEDLOW16: bfd_reloc_code_real = 772;
pub const BFD_RELOC_SH_GOTPC_LOW16: bfd_reloc_code_real = 771;
pub const BFD_RELOC_SH_GOTOFF_HI16: bfd_reloc_code_real = 770;
pub const BFD_RELOC_SH_GOTOFF_MEDHI16: bfd_reloc_code_real = 769;
pub const BFD_RELOC_SH_GOTOFF_MEDLOW16: bfd_reloc_code_real = 768;
pub const BFD_RELOC_SH_GOTOFF_LOW16: bfd_reloc_code_real = 767;
pub const BFD_RELOC_SH_PLT_HI16: bfd_reloc_code_real = 766;
pub const BFD_RELOC_SH_PLT_MEDHI16: bfd_reloc_code_real = 765;
pub const BFD_RELOC_SH_PLT_MEDLOW16: bfd_reloc_code_real = 764;
pub const BFD_RELOC_SH_PLT_LOW16: bfd_reloc_code_real = 763;
pub const BFD_RELOC_SH_GOTPLT_HI16: bfd_reloc_code_real = 762;
pub const BFD_RELOC_SH_GOTPLT_MEDHI16: bfd_reloc_code_real = 761;
pub const BFD_RELOC_SH_GOTPLT_MEDLOW16: bfd_reloc_code_real = 760;
pub const BFD_RELOC_SH_GOTPLT_LOW16: bfd_reloc_code_real = 759;
pub const BFD_RELOC_SH_GOT_HI16: bfd_reloc_code_real = 758;
pub const BFD_RELOC_SH_GOT_MEDHI16: bfd_reloc_code_real = 757;
pub const BFD_RELOC_SH_GOT_MEDLOW16: bfd_reloc_code_real = 756;
pub const BFD_RELOC_SH_GOT_LOW16: bfd_reloc_code_real = 755;
pub const BFD_RELOC_SH_GOTPC: bfd_reloc_code_real = 754;
pub const BFD_RELOC_SH_RELATIVE: bfd_reloc_code_real = 753;
pub const BFD_RELOC_SH_JMP_SLOT: bfd_reloc_code_real = 752;
pub const BFD_RELOC_SH_GLOB_DAT: bfd_reloc_code_real = 751;
pub const BFD_RELOC_SH_COPY: bfd_reloc_code_real = 750;
pub const BFD_RELOC_SH_LOOP_END: bfd_reloc_code_real = 749;
pub const BFD_RELOC_SH_LOOP_START: bfd_reloc_code_real = 748;
pub const BFD_RELOC_SH_LABEL: bfd_reloc_code_real = 747;
pub const BFD_RELOC_SH_DATA: bfd_reloc_code_real = 746;
pub const BFD_RELOC_SH_CODE: bfd_reloc_code_real = 745;
pub const BFD_RELOC_SH_ALIGN: bfd_reloc_code_real = 744;
pub const BFD_RELOC_SH_COUNT: bfd_reloc_code_real = 743;
pub const BFD_RELOC_SH_USES: bfd_reloc_code_real = 742;
pub const BFD_RELOC_SH_SWITCH32: bfd_reloc_code_real = 741;
pub const BFD_RELOC_SH_SWITCH16: bfd_reloc_code_real = 740;
pub const BFD_RELOC_SH_PCRELIMM8BY4: bfd_reloc_code_real = 739;
pub const BFD_RELOC_SH_PCRELIMM8BY2: bfd_reloc_code_real = 738;
pub const BFD_RELOC_SH_IMM8BY4: bfd_reloc_code_real = 737;
pub const BFD_RELOC_SH_IMM8BY2: bfd_reloc_code_real = 736;
pub const BFD_RELOC_SH_IMM8: bfd_reloc_code_real = 735;
pub const BFD_RELOC_SH_IMM4BY4: bfd_reloc_code_real = 734;
pub const BFD_RELOC_SH_IMM4BY2: bfd_reloc_code_real = 733;
pub const BFD_RELOC_SH_IMM4: bfd_reloc_code_real = 732;
pub const BFD_RELOC_SH_DISP20BY8: bfd_reloc_code_real = 731;
pub const BFD_RELOC_SH_DISP20: bfd_reloc_code_real = 730;
pub const BFD_RELOC_SH_DISP12BY8: bfd_reloc_code_real = 729;
pub const BFD_RELOC_SH_DISP12BY4: bfd_reloc_code_real = 728;
pub const BFD_RELOC_SH_DISP12BY2: bfd_reloc_code_real = 727;
pub const BFD_RELOC_SH_DISP12: bfd_reloc_code_real = 726;
pub const BFD_RELOC_SH_IMM3U: bfd_reloc_code_real = 725;
pub const BFD_RELOC_SH_IMM3: bfd_reloc_code_real = 724;
pub const BFD_RELOC_SH_PCDISP12BY2: bfd_reloc_code_real = 723;
pub const BFD_RELOC_SH_PCDISP8BY2: bfd_reloc_code_real = 722;
pub const BFD_RELOC_ARM_THUMB_SHIFT: bfd_reloc_code_real = 721;
pub const BFD_RELOC_ARM_THUMB_IMM: bfd_reloc_code_real = 720;
pub const BFD_RELOC_ARM_THUMB_ADD: bfd_reloc_code_real = 719;
pub const BFD_RELOC_ARM_HWLITERAL: bfd_reloc_code_real = 718;
pub const BFD_RELOC_ARM_T32_OFFSET_IMM: bfd_reloc_code_real = 717;
pub const BFD_RELOC_ARM_T32_OFFSET_U8: bfd_reloc_code_real = 716;
pub const BFD_RELOC_ARM_OFFSET_IMM8: bfd_reloc_code_real = 715;
pub const BFD_RELOC_ARM_IN_POOL: bfd_reloc_code_real = 714;
pub const BFD_RELOC_ARM_LITERAL: bfd_reloc_code_real = 713;
pub const BFD_RELOC_ARM_LDR_IMM: bfd_reloc_code_real = 712;
pub const BFD_RELOC_ARM_ADR_IMM: bfd_reloc_code_real = 711;
pub const BFD_RELOC_ARM_T32_VLDR_VSTR_OFF_IMM: bfd_reloc_code_real = 710;
pub const BFD_RELOC_ARM_T32_CP_OFF_IMM_S2: bfd_reloc_code_real = 709;
pub const BFD_RELOC_ARM_T32_CP_OFF_IMM: bfd_reloc_code_real = 708;
pub const BFD_RELOC_ARM_CP_OFF_IMM_S2: bfd_reloc_code_real = 707;
pub const BFD_RELOC_ARM_CP_OFF_IMM: bfd_reloc_code_real = 706;
pub const BFD_RELOC_ARM_MULTI: bfd_reloc_code_real = 705;
pub const BFD_RELOC_ARM_SWI: bfd_reloc_code_real = 704;
pub const BFD_RELOC_ARM_HVC: bfd_reloc_code_real = 703;
pub const BFD_RELOC_ARM_SMC: bfd_reloc_code_real = 702;
pub const BFD_RELOC_ARM_SHIFT_IMM: bfd_reloc_code_real = 701;
pub const BFD_RELOC_ARM_T32_ADD_PC12: bfd_reloc_code_real = 700;
pub const BFD_RELOC_ARM_T32_IMM12: bfd_reloc_code_real = 699;
pub const BFD_RELOC_ARM_T32_ADD_IMM: bfd_reloc_code_real = 698;
pub const BFD_RELOC_ARM_T32_IMMEDIATE: bfd_reloc_code_real = 697;
pub const BFD_RELOC_ARM_ADRL_IMMEDIATE: bfd_reloc_code_real = 696;
pub const BFD_RELOC_ARM_IMMEDIATE: bfd_reloc_code_real = 695;
pub const BFD_RELOC_ARM_THUMB_ALU_ABS_G3_NC: bfd_reloc_code_real = 694;
pub const BFD_RELOC_ARM_THUMB_ALU_ABS_G2_NC: bfd_reloc_code_real = 693;
pub const BFD_RELOC_ARM_THUMB_ALU_ABS_G1_NC: bfd_reloc_code_real = 692;
pub const BFD_RELOC_ARM_THUMB_ALU_ABS_G0_NC: bfd_reloc_code_real = 691;
pub const BFD_RELOC_ARM_IRELATIVE: bfd_reloc_code_real = 690;
pub const BFD_RELOC_ARM_V4BX: bfd_reloc_code_real = 689;
pub const BFD_RELOC_ARM_LDC_SB_G2: bfd_reloc_code_real = 688;
pub const BFD_RELOC_ARM_LDC_SB_G1: bfd_reloc_code_real = 687;
pub const BFD_RELOC_ARM_LDC_SB_G0: bfd_reloc_code_real = 686;
pub const BFD_RELOC_ARM_LDRS_SB_G2: bfd_reloc_code_real = 685;
pub const BFD_RELOC_ARM_LDRS_SB_G1: bfd_reloc_code_real = 684;
pub const BFD_RELOC_ARM_LDRS_SB_G0: bfd_reloc_code_real = 683;
pub const BFD_RELOC_ARM_LDR_SB_G2: bfd_reloc_code_real = 682;
pub const BFD_RELOC_ARM_LDR_SB_G1: bfd_reloc_code_real = 681;
pub const BFD_RELOC_ARM_LDR_SB_G0: bfd_reloc_code_real = 680;
pub const BFD_RELOC_ARM_ALU_SB_G2: bfd_reloc_code_real = 679;
pub const BFD_RELOC_ARM_ALU_SB_G1: bfd_reloc_code_real = 678;
pub const BFD_RELOC_ARM_ALU_SB_G1_NC: bfd_reloc_code_real = 677;
pub const BFD_RELOC_ARM_ALU_SB_G0: bfd_reloc_code_real = 676;
pub const BFD_RELOC_ARM_ALU_SB_G0_NC: bfd_reloc_code_real = 675;
pub const BFD_RELOC_ARM_LDC_PC_G2: bfd_reloc_code_real = 674;
pub const BFD_RELOC_ARM_LDC_PC_G1: bfd_reloc_code_real = 673;
pub const BFD_RELOC_ARM_LDC_PC_G0: bfd_reloc_code_real = 672;
pub const BFD_RELOC_ARM_LDRS_PC_G2: bfd_reloc_code_real = 671;
pub const BFD_RELOC_ARM_LDRS_PC_G1: bfd_reloc_code_real = 670;
pub const BFD_RELOC_ARM_LDRS_PC_G0: bfd_reloc_code_real = 669;
pub const BFD_RELOC_ARM_LDR_PC_G2: bfd_reloc_code_real = 668;
pub const BFD_RELOC_ARM_LDR_PC_G1: bfd_reloc_code_real = 667;
pub const BFD_RELOC_ARM_LDR_PC_G0: bfd_reloc_code_real = 666;
pub const BFD_RELOC_ARM_ALU_PC_G2: bfd_reloc_code_real = 665;
pub const BFD_RELOC_ARM_ALU_PC_G1: bfd_reloc_code_real = 664;
pub const BFD_RELOC_ARM_ALU_PC_G1_NC: bfd_reloc_code_real = 663;
pub const BFD_RELOC_ARM_ALU_PC_G0: bfd_reloc_code_real = 662;
pub const BFD_RELOC_ARM_ALU_PC_G0_NC: bfd_reloc_code_real = 661;
pub const BFD_RELOC_ARM_TLS_DESC: bfd_reloc_code_real = 660;
pub const BFD_RELOC_ARM_THM_TLS_DESCSEQ: bfd_reloc_code_real = 659;
pub const BFD_RELOC_ARM_TLS_DESCSEQ: bfd_reloc_code_real = 658;
pub const BFD_RELOC_ARM_THM_TLS_CALL: bfd_reloc_code_real = 657;
pub const BFD_RELOC_ARM_TLS_CALL: bfd_reloc_code_real = 656;
pub const BFD_RELOC_ARM_TLS_GOTDESC: bfd_reloc_code_real = 655;
pub const BFD_RELOC_ARM_TLS_LE32: bfd_reloc_code_real = 654;
pub const BFD_RELOC_ARM_TLS_IE32: bfd_reloc_code_real = 653;
pub const BFD_RELOC_ARM_TLS_TPOFF32: bfd_reloc_code_real = 652;
pub const BFD_RELOC_ARM_TLS_DTPMOD32: bfd_reloc_code_real = 651;
pub const BFD_RELOC_ARM_TLS_DTPOFF32: bfd_reloc_code_real = 650;
pub const BFD_RELOC_ARM_TLS_LDM32: bfd_reloc_code_real = 649;
pub const BFD_RELOC_ARM_TLS_LDO32: bfd_reloc_code_real = 648;
pub const BFD_RELOC_ARM_TLS_GD32: bfd_reloc_code_real = 647;
pub const BFD_RELOC_ARM_GOT_PREL: bfd_reloc_code_real = 646;
pub const BFD_RELOC_ARM_GOTPC: bfd_reloc_code_real = 645;
pub const BFD_RELOC_ARM_GOTOFF: bfd_reloc_code_real = 644;
pub const BFD_RELOC_ARM_RELATIVE: bfd_reloc_code_real = 643;
pub const BFD_RELOC_ARM_PLT32: bfd_reloc_code_real = 642;
pub const BFD_RELOC_ARM_GOT32: bfd_reloc_code_real = 641;
pub const BFD_RELOC_ARM_GLOB_DAT: bfd_reloc_code_real = 640;
pub const BFD_RELOC_ARM_JUMP_SLOT: bfd_reloc_code_real = 639;
pub const BFD_RELOC_ARM_TLS_IE32_FDPIC: bfd_reloc_code_real = 638;
pub const BFD_RELOC_ARM_TLS_LDM32_FDPIC: bfd_reloc_code_real = 637;
pub const BFD_RELOC_ARM_TLS_GD32_FDPIC: bfd_reloc_code_real = 636;
pub const BFD_RELOC_ARM_FUNCDESC_VALUE: bfd_reloc_code_real = 635;
pub const BFD_RELOC_ARM_FUNCDESC: bfd_reloc_code_real = 634;
pub const BFD_RELOC_ARM_GOTOFFFUNCDESC: bfd_reloc_code_real = 633;
pub const BFD_RELOC_ARM_GOTFUNCDESC: bfd_reloc_code_real = 632;
pub const BFD_RELOC_ARM_THUMB_MOVT_PCREL: bfd_reloc_code_real = 631;
pub const BFD_RELOC_ARM_THUMB_MOVW_PCREL: bfd_reloc_code_real = 630;
pub const BFD_RELOC_ARM_THUMB_MOVT: bfd_reloc_code_real = 629;
pub const BFD_RELOC_ARM_THUMB_MOVW: bfd_reloc_code_real = 628;
pub const BFD_RELOC_ARM_MOVT_PCREL: bfd_reloc_code_real = 627;
pub const BFD_RELOC_ARM_MOVW_PCREL: bfd_reloc_code_real = 626;
pub const BFD_RELOC_ARM_MOVT: bfd_reloc_code_real = 625;
pub const BFD_RELOC_ARM_MOVW: bfd_reloc_code_real = 624;
pub const BFD_RELOC_ARM_PREL31: bfd_reloc_code_real = 623;
pub const BFD_RELOC_ARM_TARGET2: bfd_reloc_code_real = 622;
pub const BFD_RELOC_ARM_SBREL32: bfd_reloc_code_real = 621;
pub const BFD_RELOC_ARM_ROSEGREL32: bfd_reloc_code_real = 620;
pub const BFD_RELOC_ARM_TARGET1: bfd_reloc_code_real = 619;
pub const BFD_RELOC_ARM_THUMB_OFFSET: bfd_reloc_code_real = 618;
pub const BFD_RELOC_ARM_OFFSET_IMM: bfd_reloc_code_real = 617;
pub const BFD_RELOC_THUMB_PCREL_BRANCH25: bfd_reloc_code_real = 616;
pub const BFD_RELOC_THUMB_PCREL_BRANCH23: bfd_reloc_code_real = 615;
pub const BFD_RELOC_THUMB_PCREL_BRANCH20: bfd_reloc_code_real = 614;
pub const BFD_RELOC_THUMB_PCREL_BRANCH12: bfd_reloc_code_real = 613;
pub const BFD_RELOC_THUMB_PCREL_BRANCH9: bfd_reloc_code_real = 612;
pub const BFD_RELOC_THUMB_PCREL_BRANCH7: bfd_reloc_code_real = 611;
pub const BFD_RELOC_ARM_THUMB_LOOP12: bfd_reloc_code_real = 610;
pub const BFD_RELOC_ARM_THUMB_BF19: bfd_reloc_code_real = 609;
pub const BFD_RELOC_ARM_THUMB_BF13: bfd_reloc_code_real = 608;
pub const BFD_RELOC_ARM_THUMB_BF17: bfd_reloc_code_real = 607;
pub const BFD_RELOC_THUMB_PCREL_BFCSEL: bfd_reloc_code_real = 606;
pub const BFD_RELOC_THUMB_PCREL_BRANCH5: bfd_reloc_code_real = 605;
pub const BFD_RELOC_ARM_PCREL_JUMP: bfd_reloc_code_real = 604;
pub const BFD_RELOC_ARM_PCREL_CALL: bfd_reloc_code_real = 603;
pub const BFD_RELOC_THUMB_PCREL_BLX: bfd_reloc_code_real = 602;
pub const BFD_RELOC_ARM_PCREL_BLX: bfd_reloc_code_real = 601;
pub const BFD_RELOC_ARM_PCREL_BRANCH: bfd_reloc_code_real = 600;
pub const BFD_RELOC_CTOR: bfd_reloc_code_real = 599;
pub const BFD_RELOC_I370_D12: bfd_reloc_code_real = 598;
pub const BFD_RELOC_PPC64_TLS_PCREL: bfd_reloc_code_real = 597;
pub const BFD_RELOC_PPC64_GOT_DTPREL_PCREL34: bfd_reloc_code_real = 596;
pub const BFD_RELOC_PPC64_GOT_TPREL_PCREL34: bfd_reloc_code_real = 595;
pub const BFD_RELOC_PPC64_GOT_TLSLD_PCREL34: bfd_reloc_code_real = 594;
pub const BFD_RELOC_PPC64_GOT_TLSGD_PCREL34: bfd_reloc_code_real = 593;
pub const BFD_RELOC_PPC64_DTPREL34: bfd_reloc_code_real = 592;
pub const BFD_RELOC_PPC64_TPREL34: bfd_reloc_code_real = 591;
pub const BFD_RELOC_PPC64_DTPREL16_HIGHESTA: bfd_reloc_code_real = 590;
pub const BFD_RELOC_PPC64_DTPREL16_HIGHEST: bfd_reloc_code_real = 589;
pub const BFD_RELOC_PPC64_DTPREL16_HIGHERA: bfd_reloc_code_real = 588;
pub const BFD_RELOC_PPC64_DTPREL16_HIGHER: bfd_reloc_code_real = 587;
pub const BFD_RELOC_PPC64_DTPREL16_HIGHA: bfd_reloc_code_real = 586;
pub const BFD_RELOC_PPC64_DTPREL16_HIGH: bfd_reloc_code_real = 585;
pub const BFD_RELOC_PPC64_DTPREL16_LO_DS: bfd_reloc_code_real = 584;
pub const BFD_RELOC_PPC64_DTPREL16_DS: bfd_reloc_code_real = 583;
pub const BFD_RELOC_PPC64_TPREL16_HIGHESTA: bfd_reloc_code_real = 582;
pub const BFD_RELOC_PPC64_TPREL16_HIGHEST: bfd_reloc_code_real = 581;
pub const BFD_RELOC_PPC64_TPREL16_HIGHERA: bfd_reloc_code_real = 580;
pub const BFD_RELOC_PPC64_TPREL16_HIGHER: bfd_reloc_code_real = 579;
pub const BFD_RELOC_PPC64_TPREL16_HIGHA: bfd_reloc_code_real = 578;
pub const BFD_RELOC_PPC64_TPREL16_HIGH: bfd_reloc_code_real = 577;
pub const BFD_RELOC_PPC64_TPREL16_LO_DS: bfd_reloc_code_real = 576;
pub const BFD_RELOC_PPC64_TPREL16_DS: bfd_reloc_code_real = 575;
pub const BFD_RELOC_PPC64_TLSML: bfd_reloc_code_real = 574;
pub const BFD_RELOC_PPC64_TLSM: bfd_reloc_code_real = 573;
pub const BFD_RELOC_PPC64_TLSIE: bfd_reloc_code_real = 572;
pub const BFD_RELOC_PPC64_TLSLE: bfd_reloc_code_real = 571;
pub const BFD_RELOC_PPC64_TLSLD: bfd_reloc_code_real = 570;
pub const BFD_RELOC_PPC64_TLSGD: bfd_reloc_code_real = 569;
pub const BFD_RELOC_PPC_GOT_DTPREL16_HA: bfd_reloc_code_real = 568;
pub const BFD_RELOC_PPC_GOT_DTPREL16_HI: bfd_reloc_code_real = 567;
pub const BFD_RELOC_PPC_GOT_DTPREL16_LO: bfd_reloc_code_real = 566;
pub const BFD_RELOC_PPC_GOT_DTPREL16: bfd_reloc_code_real = 565;
pub const BFD_RELOC_PPC_GOT_TPREL16_HA: bfd_reloc_code_real = 564;
pub const BFD_RELOC_PPC_GOT_TPREL16_HI: bfd_reloc_code_real = 563;
pub const BFD_RELOC_PPC_GOT_TPREL16_LO: bfd_reloc_code_real = 562;
pub const BFD_RELOC_PPC_GOT_TPREL16: bfd_reloc_code_real = 561;
pub const BFD_RELOC_PPC_GOT_TLSLD16_HA: bfd_reloc_code_real = 560;
pub const BFD_RELOC_PPC_GOT_TLSLD16_HI: bfd_reloc_code_real = 559;
pub const BFD_RELOC_PPC_GOT_TLSLD16_LO: bfd_reloc_code_real = 558;
pub const BFD_RELOC_PPC_GOT_TLSLD16: bfd_reloc_code_real = 557;
pub const BFD_RELOC_PPC_GOT_TLSGD16_HA: bfd_reloc_code_real = 556;
pub const BFD_RELOC_PPC_GOT_TLSGD16_HI: bfd_reloc_code_real = 555;
pub const BFD_RELOC_PPC_GOT_TLSGD16_LO: bfd_reloc_code_real = 554;
pub const BFD_RELOC_PPC_GOT_TLSGD16: bfd_reloc_code_real = 553;
pub const BFD_RELOC_PPC_DTPREL: bfd_reloc_code_real = 552;
pub const BFD_RELOC_PPC_DTPREL16_HA: bfd_reloc_code_real = 551;
pub const BFD_RELOC_PPC_DTPREL16_HI: bfd_reloc_code_real = 550;
pub const BFD_RELOC_PPC_DTPREL16_LO: bfd_reloc_code_real = 549;
pub const BFD_RELOC_PPC_DTPREL16: bfd_reloc_code_real = 548;
pub const BFD_RELOC_PPC_TPREL: bfd_reloc_code_real = 547;
pub const BFD_RELOC_PPC_TPREL16_HA: bfd_reloc_code_real = 546;
pub const BFD_RELOC_PPC_TPREL16_HI: bfd_reloc_code_real = 545;
pub const BFD_RELOC_PPC_TPREL16_LO: bfd_reloc_code_real = 544;
pub const BFD_RELOC_PPC_TPREL16: bfd_reloc_code_real = 543;
pub const BFD_RELOC_PPC_DTPMOD: bfd_reloc_code_real = 542;
pub const BFD_RELOC_PPC_TLSML: bfd_reloc_code_real = 541;
pub const BFD_RELOC_PPC_TLSM: bfd_reloc_code_real = 540;
pub const BFD_RELOC_PPC_TLSIE: bfd_reloc_code_real = 539;
pub const BFD_RELOC_PPC_TLSLE: bfd_reloc_code_real = 538;
pub const BFD_RELOC_PPC_TLSLD: bfd_reloc_code_real = 537;
pub const BFD_RELOC_PPC_TLSGD: bfd_reloc_code_real = 536;
pub const BFD_RELOC_PPC_TLS: bfd_reloc_code_real = 535;
pub const BFD_RELOC_PPC64_PCREL28: bfd_reloc_code_real = 534;
pub const BFD_RELOC_PPC64_D28: bfd_reloc_code_real = 533;
pub const BFD_RELOC_PPC64_REL16_HIGHESTA34: bfd_reloc_code_real = 532;
pub const BFD_RELOC_PPC64_REL16_HIGHEST34: bfd_reloc_code_real = 531;
pub const BFD_RELOC_PPC64_REL16_HIGHERA34: bfd_reloc_code_real = 530;
pub const BFD_RELOC_PPC64_REL16_HIGHER34: bfd_reloc_code_real = 529;
pub const BFD_RELOC_PPC64_ADDR16_HIGHESTA34: bfd_reloc_code_real = 528;
pub const BFD_RELOC_PPC64_ADDR16_HIGHEST34: bfd_reloc_code_real = 527;
pub const BFD_RELOC_PPC64_ADDR16_HIGHERA34: bfd_reloc_code_real = 526;
pub const BFD_RELOC_PPC64_ADDR16_HIGHER34: bfd_reloc_code_real = 525;
pub const BFD_RELOC_PPC64_PLT_PCREL34: bfd_reloc_code_real = 524;
pub const BFD_RELOC_PPC64_GOT_PCREL34: bfd_reloc_code_real = 523;
pub const BFD_RELOC_PPC64_PCREL34: bfd_reloc_code_real = 522;
pub const BFD_RELOC_PPC64_D34_HA30: bfd_reloc_code_real = 521;
pub const BFD_RELOC_PPC64_D34_HI30: bfd_reloc_code_real = 520;
pub const BFD_RELOC_PPC64_D34_LO: bfd_reloc_code_real = 519;
pub const BFD_RELOC_PPC64_D34: bfd_reloc_code_real = 518;
pub const BFD_RELOC_PPC64_REL24_NOTOC: bfd_reloc_code_real = 517;
pub const BFD_RELOC_PPC64_ENTRY: bfd_reloc_code_real = 516;
pub const BFD_RELOC_PPC64_ADDR64_LOCAL: bfd_reloc_code_real = 515;
pub const BFD_RELOC_PPC64_REL16_HIGHESTA: bfd_reloc_code_real = 514;
pub const BFD_RELOC_PPC64_REL16_HIGHEST: bfd_reloc_code_real = 513;
pub const BFD_RELOC_PPC64_REL16_HIGHERA: bfd_reloc_code_real = 512;
pub const BFD_RELOC_PPC64_REL16_HIGHER: bfd_reloc_code_real = 511;
pub const BFD_RELOC_PPC64_REL16_HIGHA: bfd_reloc_code_real = 510;
pub const BFD_RELOC_PPC64_REL16_HIGH: bfd_reloc_code_real = 509;
pub const BFD_RELOC_PPC64_ADDR16_HIGHA: bfd_reloc_code_real = 508;
pub const BFD_RELOC_PPC64_ADDR16_HIGH: bfd_reloc_code_real = 507;
pub const BFD_RELOC_PPC64_PLTGOT16_LO_DS: bfd_reloc_code_real = 506;
pub const BFD_RELOC_PPC64_PLTGOT16_DS: bfd_reloc_code_real = 505;
pub const BFD_RELOC_PPC64_TOC16_LO_DS: bfd_reloc_code_real = 504;
pub const BFD_RELOC_PPC64_TOC16_DS: bfd_reloc_code_real = 503;
pub const BFD_RELOC_PPC64_SECTOFF_LO_DS: bfd_reloc_code_real = 502;
pub const BFD_RELOC_PPC64_SECTOFF_DS: bfd_reloc_code_real = 501;
pub const BFD_RELOC_PPC64_PLT16_LO_DS: bfd_reloc_code_real = 500;
pub const BFD_RELOC_PPC64_GOT16_LO_DS: bfd_reloc_code_real = 499;
pub const BFD_RELOC_PPC64_GOT16_DS: bfd_reloc_code_real = 498;
pub const BFD_RELOC_PPC64_ADDR16_LO_DS: bfd_reloc_code_real = 497;
pub const BFD_RELOC_PPC64_ADDR16_DS: bfd_reloc_code_real = 496;
pub const BFD_RELOC_PPC64_PLTGOT16_HA: bfd_reloc_code_real = 495;
pub const BFD_RELOC_PPC64_PLTGOT16_HI: bfd_reloc_code_real = 494;
pub const BFD_RELOC_PPC64_PLTGOT16_LO: bfd_reloc_code_real = 493;
pub const BFD_RELOC_PPC64_PLTGOT16: bfd_reloc_code_real = 492;
pub const BFD_RELOC_PPC64_TOC: bfd_reloc_code_real = 491;
pub const BFD_RELOC_PPC64_TOC16_HA: bfd_reloc_code_real = 490;
pub const BFD_RELOC_PPC64_TOC16_HI: bfd_reloc_code_real = 489;
pub const BFD_RELOC_PPC64_TOC16_LO: bfd_reloc_code_real = 488;
pub const BFD_RELOC_PPC64_HIGHEST_S: bfd_reloc_code_real = 487;
pub const BFD_RELOC_PPC64_HIGHEST: bfd_reloc_code_real = 486;
pub const BFD_RELOC_PPC64_HIGHER_S: bfd_reloc_code_real = 485;
pub const BFD_RELOC_PPC64_HIGHER: bfd_reloc_code_real = 484;
pub const BFD_RELOC_PPC_NEG: bfd_reloc_code_real = 483;
pub const BFD_RELOC_PPC_REL16DX_HA: bfd_reloc_code_real = 482;
pub const BFD_RELOC_PPC_16DX_HA: bfd_reloc_code_real = 481;
pub const BFD_RELOC_PPC_VLE_SDAREL_HA16D: bfd_reloc_code_real = 480;
pub const BFD_RELOC_PPC_VLE_SDAREL_HA16A: bfd_reloc_code_real = 479;
pub const BFD_RELOC_PPC_VLE_SDAREL_HI16D: bfd_reloc_code_real = 478;
pub const BFD_RELOC_PPC_VLE_SDAREL_HI16A: bfd_reloc_code_real = 477;
pub const BFD_RELOC_PPC_VLE_SDAREL_LO16D: bfd_reloc_code_real = 476;
pub const BFD_RELOC_PPC_VLE_SDAREL_LO16A: bfd_reloc_code_real = 475;
pub const BFD_RELOC_PPC_VLE_SDA21_LO: bfd_reloc_code_real = 474;
pub const BFD_RELOC_PPC_VLE_SDA21: bfd_reloc_code_real = 473;
pub const BFD_RELOC_PPC_VLE_HA16D: bfd_reloc_code_real = 472;
pub const BFD_RELOC_PPC_VLE_HA16A: bfd_reloc_code_real = 471;
pub const BFD_RELOC_PPC_VLE_HI16D: bfd_reloc_code_real = 470;
pub const BFD_RELOC_PPC_VLE_HI16A: bfd_reloc_code_real = 469;
pub const BFD_RELOC_PPC_VLE_LO16D: bfd_reloc_code_real = 468;
pub const BFD_RELOC_PPC_VLE_LO16A: bfd_reloc_code_real = 467;
pub const BFD_RELOC_PPC_VLE_REL24: bfd_reloc_code_real = 466;
pub const BFD_RELOC_PPC_VLE_REL15: bfd_reloc_code_real = 465;
pub const BFD_RELOC_PPC_VLE_REL8: bfd_reloc_code_real = 464;
pub const BFD_RELOC_PPC_EMB_RELSDA: bfd_reloc_code_real = 463;
pub const BFD_RELOC_PPC_EMB_BIT_FLD: bfd_reloc_code_real = 462;
pub const BFD_RELOC_PPC_EMB_RELST_HA: bfd_reloc_code_real = 461;
pub const BFD_RELOC_PPC_EMB_RELST_HI: bfd_reloc_code_real = 460;
pub const BFD_RELOC_PPC_EMB_RELST_LO: bfd_reloc_code_real = 459;
pub const BFD_RELOC_PPC_EMB_RELSEC16: bfd_reloc_code_real = 458;
pub const BFD_RELOC_PPC_EMB_MRKREF: bfd_reloc_code_real = 457;
pub const BFD_RELOC_PPC_EMB_SDA21: bfd_reloc_code_real = 456;
pub const BFD_RELOC_PPC_EMB_SDA2REL: bfd_reloc_code_real = 455;
pub const BFD_RELOC_PPC_EMB_SDA2I16: bfd_reloc_code_real = 454;
pub const BFD_RELOC_PPC_EMB_SDAI16: bfd_reloc_code_real = 453;
pub const BFD_RELOC_PPC_EMB_NADDR16_HA: bfd_reloc_code_real = 452;
pub const BFD_RELOC_PPC_EMB_NADDR16_HI: bfd_reloc_code_real = 451;
pub const BFD_RELOC_PPC_EMB_NADDR16_LO: bfd_reloc_code_real = 450;
pub const BFD_RELOC_PPC_EMB_NADDR16: bfd_reloc_code_real = 449;
pub const BFD_RELOC_PPC_EMB_NADDR32: bfd_reloc_code_real = 448;
pub const BFD_RELOC_PPC_LOCAL24PC: bfd_reloc_code_real = 447;
pub const BFD_RELOC_PPC_RELATIVE: bfd_reloc_code_real = 446;
pub const BFD_RELOC_PPC_JMP_SLOT: bfd_reloc_code_real = 445;
pub const BFD_RELOC_PPC_GLOB_DAT: bfd_reloc_code_real = 444;
pub const BFD_RELOC_PPC_COPY: bfd_reloc_code_real = 443;
pub const BFD_RELOC_PPC_BA16_BRNTAKEN: bfd_reloc_code_real = 442;
pub const BFD_RELOC_PPC_BA16_BRTAKEN: bfd_reloc_code_real = 441;
pub const BFD_RELOC_PPC_BA16: bfd_reloc_code_real = 440;
pub const BFD_RELOC_PPC_B16_BRNTAKEN: bfd_reloc_code_real = 439;
pub const BFD_RELOC_PPC_B16_BRTAKEN: bfd_reloc_code_real = 438;
pub const BFD_RELOC_PPC_B16: bfd_reloc_code_real = 437;
pub const BFD_RELOC_PPC_TOC16_HI: bfd_reloc_code_real = 436;
pub const BFD_RELOC_PPC_TOC16_LO: bfd_reloc_code_real = 435;
pub const BFD_RELOC_PPC_TOC16: bfd_reloc_code_real = 434;
pub const BFD_RELOC_PPC_BA26: bfd_reloc_code_real = 433;
pub const BFD_RELOC_PPC_B26: bfd_reloc_code_real = 432;
pub const BFD_RELOC_PJ_CODE_REL32: bfd_reloc_code_real = 431;
pub const BFD_RELOC_PJ_CODE_REL16: bfd_reloc_code_real = 430;
pub const BFD_RELOC_PJ_CODE_DIR32: bfd_reloc_code_real = 429;
pub const BFD_RELOC_PJ_CODE_DIR16: bfd_reloc_code_real = 428;
pub const BFD_RELOC_PJ_CODE_LO16: bfd_reloc_code_real = 427;
pub const BFD_RELOC_PJ_CODE_HI16: bfd_reloc_code_real = 426;
pub const BFD_RELOC_PDP11_DISP_6_PCREL: bfd_reloc_code_real = 425;
pub const BFD_RELOC_PDP11_DISP_8_PCREL: bfd_reloc_code_real = 424;
pub const BFD_RELOC_NS32K_DISP_32_PCREL: bfd_reloc_code_real = 423;
pub const BFD_RELOC_NS32K_DISP_16_PCREL: bfd_reloc_code_real = 422;
pub const BFD_RELOC_NS32K_DISP_8_PCREL: bfd_reloc_code_real = 421;
pub const BFD_RELOC_NS32K_DISP_32: bfd_reloc_code_real = 420;
pub const BFD_RELOC_NS32K_DISP_16: bfd_reloc_code_real = 419;
pub const BFD_RELOC_NS32K_DISP_8: bfd_reloc_code_real = 418;
pub const BFD_RELOC_NS32K_IMM_32_PCREL: bfd_reloc_code_real = 417;
pub const BFD_RELOC_NS32K_IMM_16_PCREL: bfd_reloc_code_real = 416;
pub const BFD_RELOC_NS32K_IMM_8_PCREL: bfd_reloc_code_real = 415;
pub const BFD_RELOC_NS32K_IMM_32: bfd_reloc_code_real = 414;
pub const BFD_RELOC_NS32K_IMM_16: bfd_reloc_code_real = 413;
pub const BFD_RELOC_NS32K_IMM_8: bfd_reloc_code_real = 412;
pub const BFD_RELOC_X86_64_REX_GOTPCRELX: bfd_reloc_code_real = 411;
pub const BFD_RELOC_X86_64_GOTPCRELX: bfd_reloc_code_real = 410;
pub const BFD_RELOC_X86_64_PLT32_BND: bfd_reloc_code_real = 409;
pub const BFD_RELOC_X86_64_PC32_BND: bfd_reloc_code_real = 408;
pub const BFD_RELOC_X86_64_IRELATIVE: bfd_reloc_code_real = 407;
pub const BFD_RELOC_X86_64_TLSDESC: bfd_reloc_code_real = 406;
pub const BFD_RELOC_X86_64_TLSDESC_CALL: bfd_reloc_code_real = 405;
pub const BFD_RELOC_X86_64_GOTPC32_TLSDESC: bfd_reloc_code_real = 404;
pub const BFD_RELOC_X86_64_PLTOFF64: bfd_reloc_code_real = 403;
pub const BFD_RELOC_X86_64_GOTPLT64: bfd_reloc_code_real = 402;
pub const BFD_RELOC_X86_64_GOTPC64: bfd_reloc_code_real = 401;
pub const BFD_RELOC_X86_64_GOTPCREL64: bfd_reloc_code_real = 400;
pub const BFD_RELOC_X86_64_GOT64: bfd_reloc_code_real = 399;
pub const BFD_RELOC_X86_64_GOTPC32: bfd_reloc_code_real = 398;
pub const BFD_RELOC_X86_64_GOTOFF64: bfd_reloc_code_real = 397;
pub const BFD_RELOC_X86_64_TPOFF32: bfd_reloc_code_real = 396;
pub const BFD_RELOC_X86_64_GOTTPOFF: bfd_reloc_code_real = 395;
pub const BFD_RELOC_X86_64_DTPOFF32: bfd_reloc_code_real = 394;
pub const BFD_RELOC_X86_64_TLSLD: bfd_reloc_code_real = 393;
pub const BFD_RELOC_X86_64_TLSGD: bfd_reloc_code_real = 392;
pub const BFD_RELOC_X86_64_TPOFF64: bfd_reloc_code_real = 391;
pub const BFD_RELOC_X86_64_DTPOFF64: bfd_reloc_code_real = 390;
pub const BFD_RELOC_X86_64_DTPMOD64: bfd_reloc_code_real = 389;
pub const BFD_RELOC_X86_64_32S: bfd_reloc_code_real = 388;
pub const BFD_RELOC_X86_64_GOTPCREL: bfd_reloc_code_real = 387;
pub const BFD_RELOC_X86_64_RELATIVE: bfd_reloc_code_real = 386;
pub const BFD_RELOC_X86_64_JUMP_SLOT: bfd_reloc_code_real = 385;
pub const BFD_RELOC_X86_64_GLOB_DAT: bfd_reloc_code_real = 384;
pub const BFD_RELOC_X86_64_COPY: bfd_reloc_code_real = 383;
pub const BFD_RELOC_X86_64_PLT32: bfd_reloc_code_real = 382;
pub const BFD_RELOC_X86_64_GOT32: bfd_reloc_code_real = 381;
pub const BFD_RELOC_386_GOT32X: bfd_reloc_code_real = 380;
pub const BFD_RELOC_386_IRELATIVE: bfd_reloc_code_real = 379;
pub const BFD_RELOC_386_TLS_DESC: bfd_reloc_code_real = 378;
pub const BFD_RELOC_386_TLS_DESC_CALL: bfd_reloc_code_real = 377;
pub const BFD_RELOC_386_TLS_GOTDESC: bfd_reloc_code_real = 376;
pub const BFD_RELOC_386_TLS_TPOFF32: bfd_reloc_code_real = 375;
pub const BFD_RELOC_386_TLS_DTPOFF32: bfd_reloc_code_real = 374;
pub const BFD_RELOC_386_TLS_DTPMOD32: bfd_reloc_code_real = 373;
pub const BFD_RELOC_386_TLS_LE_32: bfd_reloc_code_real = 372;
pub const BFD_RELOC_386_TLS_IE_32: bfd_reloc_code_real = 371;
pub const BFD_RELOC_386_TLS_LDO_32: bfd_reloc_code_real = 370;
pub const BFD_RELOC_386_TLS_LDM: bfd_reloc_code_real = 369;
pub const BFD_RELOC_386_TLS_GD: bfd_reloc_code_real = 368;
pub const BFD_RELOC_386_TLS_LE: bfd_reloc_code_real = 367;
pub const BFD_RELOC_386_TLS_GOTIE: bfd_reloc_code_real = 366;
pub const BFD_RELOC_386_TLS_IE: bfd_reloc_code_real = 365;
pub const BFD_RELOC_386_TLS_TPOFF: bfd_reloc_code_real = 364;
pub const BFD_RELOC_386_GOTPC: bfd_reloc_code_real = 363;
pub const BFD_RELOC_386_GOTOFF: bfd_reloc_code_real = 362;
pub const BFD_RELOC_386_RELATIVE: bfd_reloc_code_real = 361;
pub const BFD_RELOC_386_JUMP_SLOT: bfd_reloc_code_real = 360;
pub const BFD_RELOC_386_GLOB_DAT: bfd_reloc_code_real = 359;
pub const BFD_RELOC_386_COPY: bfd_reloc_code_real = 358;
pub const BFD_RELOC_386_PLT32: bfd_reloc_code_real = 357;
pub const BFD_RELOC_386_GOT32: bfd_reloc_code_real = 356;
pub const BFD_RELOC_MN10300_16_PCREL: bfd_reloc_code_real = 355;
pub const BFD_RELOC_MN10300_32_PCREL: bfd_reloc_code_real = 354;
pub const BFD_RELOC_MN10300_TLS_TPOFF: bfd_reloc_code_real = 353;
pub const BFD_RELOC_MN10300_TLS_DTPOFF: bfd_reloc_code_real = 352;
pub const BFD_RELOC_MN10300_TLS_DTPMOD: bfd_reloc_code_real = 351;
pub const BFD_RELOC_MN10300_TLS_LE: bfd_reloc_code_real = 350;
pub const BFD_RELOC_MN10300_TLS_IE: bfd_reloc_code_real = 349;
pub const BFD_RELOC_MN10300_TLS_GOTIE: bfd_reloc_code_real = 348;
pub const BFD_RELOC_MN10300_TLS_LDO: bfd_reloc_code_real = 347;
pub const BFD_RELOC_MN10300_TLS_LD: bfd_reloc_code_real = 346;
pub const BFD_RELOC_MN10300_TLS_GD: bfd_reloc_code_real = 345;
pub const BFD_RELOC_MN10300_ALIGN: bfd_reloc_code_real = 344;
pub const BFD_RELOC_MN10300_SYM_DIFF: bfd_reloc_code_real = 343;
pub const BFD_RELOC_MN10300_RELATIVE: bfd_reloc_code_real = 342;
pub const BFD_RELOC_MN10300_JMP_SLOT: bfd_reloc_code_real = 341;
pub const BFD_RELOC_MN10300_GLOB_DAT: bfd_reloc_code_real = 340;
pub const BFD_RELOC_MN10300_COPY: bfd_reloc_code_real = 339;
pub const BFD_RELOC_MN10300_GOT16: bfd_reloc_code_real = 338;
pub const BFD_RELOC_MN10300_GOT24: bfd_reloc_code_real = 337;
pub const BFD_RELOC_MN10300_GOT32: bfd_reloc_code_real = 336;
pub const BFD_RELOC_MN10300_GOTOFF24: bfd_reloc_code_real = 335;
pub const BFD_RELOC_FRV_TLSMOFF: bfd_reloc_code_real = 334;
pub const BFD_RELOC_FRV_TLSOFF_RELAX: bfd_reloc_code_real = 333;
pub const BFD_RELOC_FRV_GETTLSOFF_RELAX: bfd_reloc_code_real = 332;
pub const BFD_RELOC_FRV_TLSDESC_RELAX: bfd_reloc_code_real = 331;
pub const BFD_RELOC_FRV_TLSOFF: bfd_reloc_code_real = 330;
pub const BFD_RELOC_FRV_GOTTLSOFFLO: bfd_reloc_code_real = 329;
pub const BFD_RELOC_FRV_GOTTLSOFFHI: bfd_reloc_code_real = 328;
pub const BFD_RELOC_FRV_GOTTLSOFF12: bfd_reloc_code_real = 327;
pub const BFD_RELOC_FRV_TLSMOFFLO: bfd_reloc_code_real = 326;
pub const BFD_RELOC_FRV_TLSMOFFHI: bfd_reloc_code_real = 325;
pub const BFD_RELOC_FRV_TLSMOFF12: bfd_reloc_code_real = 324;
pub const BFD_RELOC_FRV_GOTTLSDESCLO: bfd_reloc_code_real = 323;
pub const BFD_RELOC_FRV_GOTTLSDESCHI: bfd_reloc_code_real = 322;
pub const BFD_RELOC_FRV_GOTTLSDESC12: bfd_reloc_code_real = 321;
pub const BFD_RELOC_FRV_TLSDESC_VALUE: bfd_reloc_code_real = 320;
pub const BFD_RELOC_FRV_GETTLSOFF: bfd_reloc_code_real = 319;
pub const BFD_RELOC_FRV_GOTOFFLO: bfd_reloc_code_real = 318;
pub const BFD_RELOC_FRV_GOTOFFHI: bfd_reloc_code_real = 317;
pub const BFD_RELOC_FRV_GOTOFF12: bfd_reloc_code_real = 316;
pub const BFD_RELOC_FRV_FUNCDESC_GOTOFFLO: bfd_reloc_code_real = 315;
pub const BFD_RELOC_FRV_FUNCDESC_GOTOFFHI: bfd_reloc_code_real = 314;
pub const BFD_RELOC_FRV_FUNCDESC_GOTOFF12: bfd_reloc_code_real = 313;
pub const BFD_RELOC_FRV_FUNCDESC_VALUE: bfd_reloc_code_real = 312;
pub const BFD_RELOC_FRV_FUNCDESC_GOTLO: bfd_reloc_code_real = 311;
pub const BFD_RELOC_FRV_FUNCDESC_GOTHI: bfd_reloc_code_real = 310;
pub const BFD_RELOC_FRV_FUNCDESC_GOT12: bfd_reloc_code_real = 309;
pub const BFD_RELOC_FRV_FUNCDESC: bfd_reloc_code_real = 308;
pub const BFD_RELOC_FRV_GOTLO: bfd_reloc_code_real = 307;
pub const BFD_RELOC_FRV_GOTHI: bfd_reloc_code_real = 306;
pub const BFD_RELOC_FRV_GOT12: bfd_reloc_code_real = 305;
pub const BFD_RELOC_FRV_GPRELLO: bfd_reloc_code_real = 304;
pub const BFD_RELOC_FRV_GPRELHI: bfd_reloc_code_real = 303;
pub const BFD_RELOC_FRV_GPREL32: bfd_reloc_code_real = 302;
pub const BFD_RELOC_FRV_GPRELU12: bfd_reloc_code_real = 301;
pub const BFD_RELOC_FRV_GPREL12: bfd_reloc_code_real = 300;
pub const BFD_RELOC_FRV_HI16: bfd_reloc_code_real = 299;
pub const BFD_RELOC_FRV_LO16: bfd_reloc_code_real = 298;
pub const BFD_RELOC_FRV_LABEL24: bfd_reloc_code_real = 297;
pub const BFD_RELOC_FRV_LABEL16: bfd_reloc_code_real = 296;
pub const BFD_RELOC_FT32_DIFF32: bfd_reloc_code_real = 295;
pub const BFD_RELOC_FT32_15: bfd_reloc_code_real = 294;
pub const BFD_RELOC_FT32_SC1: bfd_reloc_code_real = 293;
pub const BFD_RELOC_FT32_SC0: bfd_reloc_code_real = 292;
pub const BFD_RELOC_FT32_RELAX: bfd_reloc_code_real = 291;
pub const BFD_RELOC_FT32_18: bfd_reloc_code_real = 290;
pub const BFD_RELOC_FT32_17: bfd_reloc_code_real = 289;
pub const BFD_RELOC_FT32_20: bfd_reloc_code_real = 288;
pub const BFD_RELOC_FT32_10: bfd_reloc_code_real = 287;
pub const BFD_RELOC_MOXIE_10_PCREL: bfd_reloc_code_real = 286;
pub const BFD_RELOC_MIPS_JUMP_SLOT: bfd_reloc_code_real = 285;
pub const BFD_RELOC_MIPS_COPY: bfd_reloc_code_real = 284;
pub const BFD_RELOC_MIPS_EH: bfd_reloc_code_real = 283;
pub const BFD_RELOC_MICROMIPS_TLS_TPREL_LO16: bfd_reloc_code_real = 282;
pub const BFD_RELOC_MIPS_TLS_TPREL_LO16: bfd_reloc_code_real = 281;
pub const BFD_RELOC_MICROMIPS_TLS_TPREL_HI16: bfd_reloc_code_real = 280;
pub const BFD_RELOC_MIPS_TLS_TPREL_HI16: bfd_reloc_code_real = 279;
pub const BFD_RELOC_MIPS_TLS_TPREL64: bfd_reloc_code_real = 278;
pub const BFD_RELOC_MIPS_TLS_TPREL32: bfd_reloc_code_real = 277;
pub const BFD_RELOC_MICROMIPS_TLS_GOTTPREL: bfd_reloc_code_real = 276;
pub const BFD_RELOC_MIPS_TLS_GOTTPREL: bfd_reloc_code_real = 275;
pub const BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16: bfd_reloc_code_real = 274;
pub const BFD_RELOC_MIPS_TLS_DTPREL_LO16: bfd_reloc_code_real = 273;
pub const BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16: bfd_reloc_code_real = 272;
pub const BFD_RELOC_MIPS_TLS_DTPREL_HI16: bfd_reloc_code_real = 271;
pub const BFD_RELOC_MICROMIPS_TLS_LDM: bfd_reloc_code_real = 270;
pub const BFD_RELOC_MIPS_TLS_LDM: bfd_reloc_code_real = 269;
pub const BFD_RELOC_MICROMIPS_TLS_GD: bfd_reloc_code_real = 268;
pub const BFD_RELOC_MIPS_TLS_GD: bfd_reloc_code_real = 267;
pub const BFD_RELOC_MIPS_TLS_DTPREL64: bfd_reloc_code_real = 266;
pub const BFD_RELOC_MIPS_TLS_DTPMOD64: bfd_reloc_code_real = 265;
pub const BFD_RELOC_MIPS_TLS_DTPREL32: bfd_reloc_code_real = 264;
pub const BFD_RELOC_MIPS_TLS_DTPMOD32: bfd_reloc_code_real = 263;
pub const BFD_RELOC_MICROMIPS_JALR: bfd_reloc_code_real = 262;
pub const BFD_RELOC_MIPS_JALR: bfd_reloc_code_real = 261;
pub const BFD_RELOC_MIPS_RELGOT: bfd_reloc_code_real = 260;
pub const BFD_RELOC_MIPS_REL16: bfd_reloc_code_real = 259;
pub const BFD_RELOC_MICROMIPS_SCN_DISP: bfd_reloc_code_real = 258;
pub const BFD_RELOC_MIPS_SCN_DISP: bfd_reloc_code_real = 257;
pub const BFD_RELOC_MICROMIPS_HIGHER: bfd_reloc_code_real = 256;
pub const BFD_RELOC_MIPS_HIGHER: bfd_reloc_code_real = 255;
pub const BFD_RELOC_MICROMIPS_HIGHEST: bfd_reloc_code_real = 254;
pub const BFD_RELOC_MIPS_HIGHEST: bfd_reloc_code_real = 253;
pub const BFD_RELOC_MIPS_DELETE: bfd_reloc_code_real = 252;
pub const BFD_RELOC_MIPS_INSERT_B: bfd_reloc_code_real = 251;
pub const BFD_RELOC_MIPS_INSERT_A: bfd_reloc_code_real = 250;
pub const BFD_RELOC_MIPS_SHIFT6: bfd_reloc_code_real = 249;
pub const BFD_RELOC_MIPS_SHIFT5: bfd_reloc_code_real = 248;
pub const BFD_RELOC_MICROMIPS_GOT_DISP: bfd_reloc_code_real = 247;
pub const BFD_RELOC_MIPS_GOT_DISP: bfd_reloc_code_real = 246;
pub const BFD_RELOC_MICROMIPS_GOT_OFST: bfd_reloc_code_real = 245;
pub const BFD_RELOC_MIPS_GOT_OFST: bfd_reloc_code_real = 244;
pub const BFD_RELOC_MICROMIPS_GOT_PAGE: bfd_reloc_code_real = 243;
pub const BFD_RELOC_MIPS_GOT_PAGE: bfd_reloc_code_real = 242;
pub const BFD_RELOC_MICROMIPS_SUB: bfd_reloc_code_real = 241;
pub const BFD_RELOC_MIPS_SUB: bfd_reloc_code_real = 240;
pub const BFD_RELOC_MICROMIPS_CALL_LO16: bfd_reloc_code_real = 239;
pub const BFD_RELOC_MIPS_CALL_LO16: bfd_reloc_code_real = 238;
pub const BFD_RELOC_MICROMIPS_CALL_HI16: bfd_reloc_code_real = 237;
pub const BFD_RELOC_MIPS_CALL_HI16: bfd_reloc_code_real = 236;
pub const BFD_RELOC_MICROMIPS_GOT_LO16: bfd_reloc_code_real = 235;
pub const BFD_RELOC_MIPS_GOT_LO16: bfd_reloc_code_real = 234;
pub const BFD_RELOC_MICROMIPS_GOT_HI16: bfd_reloc_code_real = 233;
pub const BFD_RELOC_MIPS_GOT_HI16: bfd_reloc_code_real = 232;
pub const BFD_RELOC_MICROMIPS_CALL16: bfd_reloc_code_real = 231;
pub const BFD_RELOC_MIPS_CALL16: bfd_reloc_code_real = 230;
pub const BFD_RELOC_MICROMIPS_GOT16: bfd_reloc_code_real = 229;
pub const BFD_RELOC_MIPS_GOT16: bfd_reloc_code_real = 228;
pub const BFD_RELOC_MICROMIPS_LO16: bfd_reloc_code_real = 227;
pub const BFD_RELOC_MICROMIPS_HI16_S: bfd_reloc_code_real = 226;
pub const BFD_RELOC_MICROMIPS_HI16: bfd_reloc_code_real = 225;
pub const BFD_RELOC_MICROMIPS_GPREL16: bfd_reloc_code_real = 224;
pub const BFD_RELOC_MIPS_19_PCREL_S2: bfd_reloc_code_real = 223;
pub const BFD_RELOC_MIPS_18_PCREL_S3: bfd_reloc_code_real = 222;
pub const BFD_RELOC_MIPS_26_PCREL_S2: bfd_reloc_code_real = 221;
pub const BFD_RELOC_MIPS_21_PCREL_S2: bfd_reloc_code_real = 220;
pub const BFD_RELOC_MIPS16_16_PCREL_S1: bfd_reloc_code_real = 219;
pub const BFD_RELOC_MICROMIPS_16_PCREL_S1: bfd_reloc_code_real = 218;
pub const BFD_RELOC_MICROMIPS_10_PCREL_S1: bfd_reloc_code_real = 217;
pub const BFD_RELOC_MICROMIPS_7_PCREL_S1: bfd_reloc_code_real = 216;
pub const BFD_RELOC_MICROMIPS_LITERAL: bfd_reloc_code_real = 215;
pub const BFD_RELOC_MIPS_LITERAL: bfd_reloc_code_real = 214;
pub const BFD_RELOC_MIPS16_TLS_TPREL_LO16: bfd_reloc_code_real = 213;
pub const BFD_RELOC_MIPS16_TLS_TPREL_HI16: bfd_reloc_code_real = 212;
pub const BFD_RELOC_MIPS16_TLS_GOTTPREL: bfd_reloc_code_real = 211;
pub const BFD_RELOC_MIPS16_TLS_DTPREL_LO16: bfd_reloc_code_real = 210;
pub const BFD_RELOC_MIPS16_TLS_DTPREL_HI16: bfd_reloc_code_real = 209;
pub const BFD_RELOC_MIPS16_TLS_LDM: bfd_reloc_code_real = 208;
pub const BFD_RELOC_MIPS16_TLS_GD: bfd_reloc_code_real = 207;
pub const BFD_RELOC_MIPS16_LO16: bfd_reloc_code_real = 206;
pub const BFD_RELOC_MIPS16_HI16_S: bfd_reloc_code_real = 205;
pub const BFD_RELOC_MIPS16_HI16: bfd_reloc_code_real = 204;
pub const BFD_RELOC_MIPS16_CALL16: bfd_reloc_code_real = 203;
pub const BFD_RELOC_MIPS16_GOT16: bfd_reloc_code_real = 202;
pub const BFD_RELOC_LO16_PCREL: bfd_reloc_code_real = 201;
pub const BFD_RELOC_HI16_S_PCREL: bfd_reloc_code_real = 200;
pub const BFD_RELOC_HI16_PCREL: bfd_reloc_code_real = 199;
pub const BFD_RELOC_LO16: bfd_reloc_code_real = 198;
pub const BFD_RELOC_HI16_S: bfd_reloc_code_real = 197;
pub const BFD_RELOC_HI16: bfd_reloc_code_real = 196;
pub const BFD_RELOC_MIPS16_GPREL: bfd_reloc_code_real = 195;
pub const BFD_RELOC_MIPS16_JMP: bfd_reloc_code_real = 194;
pub const BFD_RELOC_MICROMIPS_JMP: bfd_reloc_code_real = 193;
pub const BFD_RELOC_MIPS_JMP: bfd_reloc_code_real = 192;
pub const BFD_RELOC_ALPHA_TPREL16: bfd_reloc_code_real = 191;
pub const BFD_RELOC_ALPHA_TPREL_LO16: bfd_reloc_code_real = 190;
pub const BFD_RELOC_ALPHA_TPREL_HI16: bfd_reloc_code_real = 189;
pub const BFD_RELOC_ALPHA_TPREL64: bfd_reloc_code_real = 188;
pub const BFD_RELOC_ALPHA_GOTTPREL16: bfd_reloc_code_real = 187;
pub const BFD_RELOC_ALPHA_DTPREL16: bfd_reloc_code_real = 186;
pub const BFD_RELOC_ALPHA_DTPREL_LO16: bfd_reloc_code_real = 185;
pub const BFD_RELOC_ALPHA_DTPREL_HI16: bfd_reloc_code_real = 184;
pub const BFD_RELOC_ALPHA_DTPREL64: bfd_reloc_code_real = 183;
pub const BFD_RELOC_ALPHA_GOTDTPREL16: bfd_reloc_code_real = 182;
pub const BFD_RELOC_ALPHA_DTPMOD64: bfd_reloc_code_real = 181;
pub const BFD_RELOC_ALPHA_TLSLDM: bfd_reloc_code_real = 180;
pub const BFD_RELOC_ALPHA_TLSGD: bfd_reloc_code_real = 179;
pub const BFD_RELOC_ALPHA_BOH: bfd_reloc_code_real = 178;
pub const BFD_RELOC_ALPHA_LDA: bfd_reloc_code_real = 177;
pub const BFD_RELOC_ALPHA_BSR: bfd_reloc_code_real = 176;
pub const BFD_RELOC_ALPHA_NOP: bfd_reloc_code_real = 175;
pub const BFD_RELOC_ALPHA_BRSGP: bfd_reloc_code_real = 174;
pub const BFD_RELOC_ALPHA_GPREL_LO16: bfd_reloc_code_real = 173;
pub const BFD_RELOC_ALPHA_GPREL_HI16: bfd_reloc_code_real = 172;
pub const BFD_RELOC_ALPHA_CODEADDR: bfd_reloc_code_real = 171;
pub const BFD_RELOC_ALPHA_LINKAGE: bfd_reloc_code_real = 170;
pub const BFD_RELOC_ALPHA_HINT: bfd_reloc_code_real = 169;
pub const BFD_RELOC_ALPHA_LITUSE: bfd_reloc_code_real = 168;
pub const BFD_RELOC_ALPHA_ELF_LITERAL: bfd_reloc_code_real = 167;
pub const BFD_RELOC_ALPHA_LITERAL: bfd_reloc_code_real = 166;
pub const BFD_RELOC_ALPHA_GPDISP: bfd_reloc_code_real = 165;
pub const BFD_RELOC_ALPHA_GPDISP_LO16: bfd_reloc_code_real = 164;
pub const BFD_RELOC_ALPHA_GPDISP_HI16: bfd_reloc_code_real = 163;
pub const BFD_RELOC_SPU_ADD_PIC: bfd_reloc_code_real = 162;
pub const BFD_RELOC_SPU_PPU64: bfd_reloc_code_real = 161;
pub const BFD_RELOC_SPU_PPU32: bfd_reloc_code_real = 160;
pub const BFD_RELOC_SPU_HI16: bfd_reloc_code_real = 159;
pub const BFD_RELOC_SPU_LO16: bfd_reloc_code_real = 158;
pub const BFD_RELOC_SPU_PCREL16: bfd_reloc_code_real = 157;
pub const BFD_RELOC_SPU_PCREL9b: bfd_reloc_code_real = 156;
pub const BFD_RELOC_SPU_PCREL9a: bfd_reloc_code_real = 155;
pub const BFD_RELOC_SPU_IMM18: bfd_reloc_code_real = 154;
pub const BFD_RELOC_SPU_IMM16W: bfd_reloc_code_real = 153;
pub const BFD_RELOC_SPU_IMM16: bfd_reloc_code_real = 152;
pub const BFD_RELOC_SPU_IMM10W: bfd_reloc_code_real = 151;
pub const BFD_RELOC_SPU_IMM10: bfd_reloc_code_real = 150;
pub const BFD_RELOC_SPU_IMM8: bfd_reloc_code_real = 149;
pub const BFD_RELOC_SPU_IMM7: bfd_reloc_code_real = 148;
pub const BFD_RELOC_SPARC_TLS_TPOFF64: bfd_reloc_code_real = 147;
pub const BFD_RELOC_SPARC_TLS_TPOFF32: bfd_reloc_code_real = 146;
pub const BFD_RELOC_SPARC_TLS_DTPOFF64: bfd_reloc_code_real = 145;
pub const BFD_RELOC_SPARC_TLS_DTPOFF32: bfd_reloc_code_real = 144;
pub const BFD_RELOC_SPARC_TLS_DTPMOD64: bfd_reloc_code_real = 143;
pub const BFD_RELOC_SPARC_TLS_DTPMOD32: bfd_reloc_code_real = 142;
pub const BFD_RELOC_SPARC_TLS_LE_LOX10: bfd_reloc_code_real = 141;
pub const BFD_RELOC_SPARC_TLS_LE_HIX22: bfd_reloc_code_real = 140;
pub const BFD_RELOC_SPARC_TLS_IE_ADD: bfd_reloc_code_real = 139;
pub const BFD_RELOC_SPARC_TLS_IE_LDX: bfd_reloc_code_real = 138;
pub const BFD_RELOC_SPARC_TLS_IE_LD: bfd_reloc_code_real = 137;
pub const BFD_RELOC_SPARC_TLS_IE_LO10: bfd_reloc_code_real = 136;
pub const BFD_RELOC_SPARC_TLS_IE_HI22: bfd_reloc_code_real = 135;
pub const BFD_RELOC_SPARC_TLS_LDO_ADD: bfd_reloc_code_real = 134;
pub const BFD_RELOC_SPARC_TLS_LDO_LOX10: bfd_reloc_code_real = 133;
pub const BFD_RELOC_SPARC_TLS_LDO_HIX22: bfd_reloc_code_real = 132;
pub const BFD_RELOC_SPARC_TLS_LDM_CALL: bfd_reloc_code_real = 131;
pub const BFD_RELOC_SPARC_TLS_LDM_ADD: bfd_reloc_code_real = 130;
pub const BFD_RELOC_SPARC_TLS_LDM_LO10: bfd_reloc_code_real = 129;
pub const BFD_RELOC_SPARC_TLS_LDM_HI22: bfd_reloc_code_real = 128;
pub const BFD_RELOC_SPARC_TLS_GD_CALL: bfd_reloc_code_real = 127;
pub const BFD_RELOC_SPARC_TLS_GD_ADD: bfd_reloc_code_real = 126;
pub const BFD_RELOC_SPARC_TLS_GD_LO10: bfd_reloc_code_real = 125;
pub const BFD_RELOC_SPARC_TLS_GD_HI22: bfd_reloc_code_real = 124;
pub const BFD_RELOC_SPARC_REV32: bfd_reloc_code_real = 123;
pub const BFD_RELOC_SPARC_WDISP10: bfd_reloc_code_real = 122;
pub const BFD_RELOC_SPARC_SIZE64: bfd_reloc_code_real = 121;
pub const BFD_RELOC_SPARC_SIZE32: bfd_reloc_code_real = 120;
pub const BFD_RELOC_SPARC_H34: bfd_reloc_code_real = 119;
pub const BFD_RELOC_SPARC_REGISTER: bfd_reloc_code_real = 118;
pub const BFD_RELOC_SPARC_L44: bfd_reloc_code_real = 117;
pub const BFD_RELOC_SPARC_M44: bfd_reloc_code_real = 116;
pub const BFD_RELOC_SPARC_H44: bfd_reloc_code_real = 115;
pub const BFD_RELOC_SPARC_LOX10: bfd_reloc_code_real = 114;
pub const BFD_RELOC_SPARC_HIX22: bfd_reloc_code_real = 113;
pub const BFD_RELOC_SPARC_PLT64: bfd_reloc_code_real = 112;
pub const BFD_RELOC_SPARC_PLT32: bfd_reloc_code_real = 111;
pub const BFD_RELOC_SPARC_5: bfd_reloc_code_real = 110;
pub const BFD_RELOC_SPARC_6: bfd_reloc_code_real = 109;
pub const BFD_RELOC_SPARC_7: bfd_reloc_code_real = 108;
pub const BFD_RELOC_SPARC_WDISP19: bfd_reloc_code_real = 107;
pub const BFD_RELOC_SPARC_WDISP16: bfd_reloc_code_real = 106;
pub const BFD_RELOC_SPARC_PC_LM22: bfd_reloc_code_real = 105;
pub const BFD_RELOC_SPARC_PC_HM10: bfd_reloc_code_real = 104;
pub const BFD_RELOC_SPARC_PC_HH22: bfd_reloc_code_real = 103;
pub const BFD_RELOC_SPARC_LM22: bfd_reloc_code_real = 102;
pub const BFD_RELOC_SPARC_HM10: bfd_reloc_code_real = 101;
pub const BFD_RELOC_SPARC_HH22: bfd_reloc_code_real = 100;
pub const BFD_RELOC_SPARC_OLO10: bfd_reloc_code_real = 99;
pub const BFD_RELOC_SPARC_11: bfd_reloc_code_real = 98;
pub const BFD_RELOC_SPARC_10: bfd_reloc_code_real = 97;
pub const BFD_RELOC_SPARC_BASE22: bfd_reloc_code_real = 96;
pub const BFD_RELOC_SPARC_BASE13: bfd_reloc_code_real = 95;
pub const BFD_RELOC_SPARC_IRELATIVE: bfd_reloc_code_real = 94;
pub const BFD_RELOC_SPARC_JMP_IREL: bfd_reloc_code_real = 93;
pub const BFD_RELOC_SPARC_GOTDATA_OP: bfd_reloc_code_real = 92;
pub const BFD_RELOC_SPARC_GOTDATA_OP_LOX10: bfd_reloc_code_real = 91;
pub const BFD_RELOC_SPARC_GOTDATA_OP_HIX22: bfd_reloc_code_real = 90;
pub const BFD_RELOC_SPARC_GOTDATA_LOX10: bfd_reloc_code_real = 89;
pub const BFD_RELOC_SPARC_GOTDATA_HIX22: bfd_reloc_code_real = 88;
pub const BFD_RELOC_SPARC_UA64: bfd_reloc_code_real = 87;
pub const BFD_RELOC_SPARC_UA32: bfd_reloc_code_real = 86;
pub const BFD_RELOC_SPARC_UA16: bfd_reloc_code_real = 85;
pub const BFD_RELOC_SPARC_RELATIVE: bfd_reloc_code_real = 84;
pub const BFD_RELOC_SPARC_JMP_SLOT: bfd_reloc_code_real = 83;
pub const BFD_RELOC_SPARC_GLOB_DAT: bfd_reloc_code_real = 82;
pub const BFD_RELOC_SPARC_COPY: bfd_reloc_code_real = 81;
pub const BFD_RELOC_SPARC_WPLT30: bfd_reloc_code_real = 80;
pub const BFD_RELOC_SPARC_PC22: bfd_reloc_code_real = 79;
pub const BFD_RELOC_SPARC_PC10: bfd_reloc_code_real = 78;
pub const BFD_RELOC_SPARC_GOT22: bfd_reloc_code_real = 77;
pub const BFD_RELOC_SPARC_GOT13: bfd_reloc_code_real = 76;
pub const BFD_RELOC_SPARC_GOT10: bfd_reloc_code_real = 75;
pub const BFD_RELOC_SPARC13: bfd_reloc_code_real = 74;
pub const BFD_RELOC_SPARC22: bfd_reloc_code_real = 73;
pub const BFD_RELOC_SPARC_WDISP22: bfd_reloc_code_real = 72;
pub const BFD_RELOC_NONE: bfd_reloc_code_real = 71;
pub const BFD_RELOC_GPREL32: bfd_reloc_code_real = 70;
pub const BFD_RELOC_GPREL16: bfd_reloc_code_real = 69;
pub const BFD_RELOC_LO10: bfd_reloc_code_real = 68;
pub const BFD_RELOC_HI22: bfd_reloc_code_real = 67;
pub const BFD_RELOC_23_PCREL_S2: bfd_reloc_code_real = 66;
pub const BFD_RELOC_16_PCREL_S2: bfd_reloc_code_real = 65;
pub const BFD_RELOC_32_PCREL_S2: bfd_reloc_code_real = 64;
pub const BFD_RELOC_8_FFnn: bfd_reloc_code_real = 63;
pub const BFD_RELOC_RVA: bfd_reloc_code_real = 62;
pub const BFD_RELOC_8_BASEREL: bfd_reloc_code_real = 61;
pub const BFD_RELOC_HI16_S_BASEREL: bfd_reloc_code_real = 60;
pub const BFD_RELOC_HI16_BASEREL: bfd_reloc_code_real = 59;
pub const BFD_RELOC_LO16_BASEREL: bfd_reloc_code_real = 58;
pub const BFD_RELOC_16_BASEREL: bfd_reloc_code_real = 57;
pub const BFD_RELOC_32_BASEREL: bfd_reloc_code_real = 56;
pub const BFD_RELOC_68K_TLS_LE8: bfd_reloc_code_real = 55;
pub const BFD_RELOC_68K_TLS_LE16: bfd_reloc_code_real = 54;
pub const BFD_RELOC_68K_TLS_LE32: bfd_reloc_code_real = 53;
pub const BFD_RELOC_68K_TLS_IE8: bfd_reloc_code_real = 52;
pub const BFD_RELOC_68K_TLS_IE16: bfd_reloc_code_real = 51;
pub const BFD_RELOC_68K_TLS_IE32: bfd_reloc_code_real = 50;
pub const BFD_RELOC_68K_TLS_LDO8: bfd_reloc_code_real = 49;
pub const BFD_RELOC_68K_TLS_LDO16: bfd_reloc_code_real = 48;
pub const BFD_RELOC_68K_TLS_LDO32: bfd_reloc_code_real = 47;
pub const BFD_RELOC_68K_TLS_LDM8: bfd_reloc_code_real = 46;
pub const BFD_RELOC_68K_TLS_LDM16: bfd_reloc_code_real = 45;
pub const BFD_RELOC_68K_TLS_LDM32: bfd_reloc_code_real = 44;
pub const BFD_RELOC_68K_TLS_GD8: bfd_reloc_code_real = 43;
pub const BFD_RELOC_68K_TLS_GD16: bfd_reloc_code_real = 42;
pub const BFD_RELOC_68K_TLS_GD32: bfd_reloc_code_real = 41;
pub const BFD_RELOC_68K_RELATIVE: bfd_reloc_code_real = 40;
pub const BFD_RELOC_68K_JMP_SLOT: bfd_reloc_code_real = 39;
pub const BFD_RELOC_68K_GLOB_DAT: bfd_reloc_code_real = 38;
pub const BFD_RELOC_SIZE64: bfd_reloc_code_real = 37;
pub const BFD_RELOC_SIZE32: bfd_reloc_code_real = 36;
pub const BFD_RELOC_8_PLTOFF: bfd_reloc_code_real = 35;
pub const BFD_RELOC_HI16_S_PLTOFF: bfd_reloc_code_real = 34;
pub const BFD_RELOC_HI16_PLTOFF: bfd_reloc_code_real = 33;
pub const BFD_RELOC_LO16_PLTOFF: bfd_reloc_code_real = 32;
pub const BFD_RELOC_16_PLTOFF: bfd_reloc_code_real = 31;
pub const BFD_RELOC_32_PLTOFF: bfd_reloc_code_real = 30;
pub const BFD_RELOC_64_PLTOFF: bfd_reloc_code_real = 29;
pub const BFD_RELOC_8_PLT_PCREL: bfd_reloc_code_real = 28;
pub const BFD_RELOC_16_PLT_PCREL: bfd_reloc_code_real = 27;
pub const BFD_RELOC_24_PLT_PCREL: bfd_reloc_code_real = 26;
pub const BFD_RELOC_32_PLT_PCREL: bfd_reloc_code_real = 25;
pub const BFD_RELOC_64_PLT_PCREL: bfd_reloc_code_real = 24;
pub const BFD_RELOC_8_GOTOFF: bfd_reloc_code_real = 23;
pub const BFD_RELOC_HI16_S_GOTOFF: bfd_reloc_code_real = 22;
pub const BFD_RELOC_HI16_GOTOFF: bfd_reloc_code_real = 21;
pub const BFD_RELOC_LO16_GOTOFF: bfd_reloc_code_real = 20;
pub const BFD_RELOC_16_GOTOFF: bfd_reloc_code_real = 19;
pub const BFD_RELOC_32_GOTOFF: bfd_reloc_code_real = 18;
pub const BFD_RELOC_8_GOT_PCREL: bfd_reloc_code_real = 17;
pub const BFD_RELOC_16_GOT_PCREL: bfd_reloc_code_real = 16;
pub const BFD_RELOC_32_GOT_PCREL: bfd_reloc_code_real = 15;
pub const BFD_RELOC_32_SECREL: bfd_reloc_code_real = 14;
pub const BFD_RELOC_8_PCREL: bfd_reloc_code_real = 13;
pub const BFD_RELOC_12_PCREL: bfd_reloc_code_real = 12;
pub const BFD_RELOC_16_PCREL: bfd_reloc_code_real = 11;
pub const BFD_RELOC_24_PCREL: bfd_reloc_code_real = 10;
pub const BFD_RELOC_32_PCREL: bfd_reloc_code_real = 9;
pub const BFD_RELOC_64_PCREL: bfd_reloc_code_real = 8;
pub const BFD_RELOC_8: bfd_reloc_code_real = 7;
pub const BFD_RELOC_14: bfd_reloc_code_real = 6;
pub const BFD_RELOC_16: bfd_reloc_code_real = 5;
pub const BFD_RELOC_24: bfd_reloc_code_real = 4;
pub const BFD_RELOC_26: bfd_reloc_code_real = 3;
pub const BFD_RELOC_32: bfd_reloc_code_real = 2;
pub const BFD_RELOC_64: bfd_reloc_code_real = 1;
pub const _dummy_first_bfd_reloc_code_real: bfd_reloc_code_real = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub size: libc::c_uint,
    pub contents: *mut bfd_byte,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub section: *mut asection,
}
pub type bfd_link_order_type = libc::c_uint;
pub const bfd_symbol_reloc_link_order: bfd_link_order_type = 4;
pub const bfd_section_reloc_link_order: bfd_link_order_type = 3;
pub const bfd_data_link_order: bfd_link_order_type = 2;
pub const bfd_indirect_link_order: bfd_link_order_type = 1;
pub const bfd_undefined_link_order: bfd_link_order_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_symbol {
    pub the_bfd: *mut bfd,
    pub name: *const libc::c_char,
    pub value: symvalue,
    pub flags: flagword,
    pub section: *mut bfd_section,
    pub udata: C2RustUnnamed_9,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_9 {
    pub p: *mut libc::c_void,
    pub i: bfd_vma,
}
pub type flagword = libc::c_uint;
pub type symvalue = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct relent_chain {
    pub relent: arelent,
    pub next: *mut relent_chain,
}
pub type arelent = reloc_cache_entry;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct reloc_cache_entry {
    pub sym_ptr_ptr: *mut *mut bfd_symbol,
    pub address: bfd_size_type,
    pub addend: bfd_vma,
    pub howto: *const reloc_howto_type,
}
pub type reloc_howto_type = reloc_howto_struct;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct reloc_howto_struct {
    pub type_0: libc::c_uint,
    #[bitfield(name = "size", ty = "libc::c_uint", bits = "0..=2")]
    #[bitfield(name = "bitsize", ty = "libc::c_uint", bits = "3..=9")]
    #[bitfield(name = "rightshift", ty = "libc::c_uint", bits = "10..=15")]
    #[bitfield(name = "bitpos", ty = "libc::c_uint", bits = "16..=21")]
    #[bitfield(name = "complain_on_overflow", ty = "complain_overflow", bits = "22..=23")]
    #[bitfield(name = "negate", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "pc_relative", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "partial_inplace", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "pcrel_offset", ty = "libc::c_uint", bits = "27..=27")]
    pub size_bitsize_rightshift_bitpos_complain_on_overflow_negate_pc_relative_partial_inplace_pcrel_offset: [u8; 4],
    pub src_mask: bfd_vma,
    pub dst_mask: bfd_vma,
    pub special_function: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut arelent,
            *mut bfd_symbol,
            *mut libc::c_void,
            *mut asection,
            *mut bfd,
            *mut *mut libc::c_char,
        ) -> bfd_reloc_status_type,
    >,
    pub name: *const libc::c_char,
}
pub type bfd_reloc_status_type = bfd_reloc_status;
pub type bfd_reloc_status = libc::c_uint;
pub const bfd_reloc_dangerous: bfd_reloc_status = 9;
pub const bfd_reloc_undefined: bfd_reloc_status = 8;
pub const bfd_reloc_other: bfd_reloc_status = 7;
pub const bfd_reloc_notsupported: bfd_reloc_status = 6;
pub const bfd_reloc_continue: bfd_reloc_status = 5;
pub const bfd_reloc_outofrange: bfd_reloc_status = 4;
pub const bfd_reloc_overflow: bfd_reloc_status = 3;
pub const bfd_reloc_ok: bfd_reloc_status = 2;
pub type complain_overflow = libc::c_uint;
pub const complain_overflow_unsigned: complain_overflow = 3;
pub const complain_overflow_signed: complain_overflow = 2;
pub const complain_overflow_bitfield: complain_overflow = 1;
pub const complain_overflow_dont: complain_overflow = 0;
pub type file_ptr = libc::c_long;
pub type alent = lineno_cache_entry;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct lineno_cache_entry {
    pub line_number: libc::c_uint,
    pub u: C2RustUnnamed_10,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_10 {
    pub sym: *mut bfd_symbol,
    pub offset: bfd_vma,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct relax_table {
    pub addr: bfd_vma,
    pub size: libc::c_int,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd_hash_table {
    pub table: *mut *mut bfd_hash_entry,
    pub newfunc: Option::<
        unsafe extern "C" fn(
            *mut bfd_hash_entry,
            *mut bfd_hash_table,
            *const libc::c_char,
        ) -> *mut bfd_hash_entry,
    >,
    pub memory: *mut libc::c_void,
    pub size: libc::c_uint,
    pub count: libc::c_uint,
    pub entsize: libc::c_uint,
    #[bitfield(name = "frozen", ty = "libc::c_uint", bits = "0..=0")]
    pub frozen: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_hash_entry {
    pub next: *mut bfd_hash_entry,
    pub string: *const libc::c_char,
    pub hash: libc::c_ulong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_link_hash_table {
    pub table: bfd_hash_table,
    pub undefs: *mut bfd_link_hash_entry,
    pub undefs_tail: *mut bfd_link_hash_entry,
    pub hash_table_free: Option::<unsafe extern "C" fn(*mut bfd) -> ()>,
    pub type_0: bfd_link_hash_table_type,
}
pub type bfd_link_hash_table_type = libc::c_uint;
pub const bfd_link_elf_hash_table: bfd_link_hash_table_type = 1;
pub const bfd_link_generic_hash_table: bfd_link_hash_table_type = 0;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct bfd_link_hash_entry {
    pub root: bfd_hash_entry,
    #[bitfield(name = "type_0", ty = "bfd_link_hash_type", bits = "0..=7")]
    #[bitfield(name = "non_ir_ref_regular", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "non_ir_ref_dynamic", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "linker_def", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "ldscript_def", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "rel_from_abs", ty = "libc::c_uint", bits = "12..=12")]
    pub type_0_non_ir_ref_regular_non_ir_ref_dynamic_linker_def_ldscript_def_rel_from_abs: [u8; 2],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 6],
    pub u: C2RustUnnamed_11,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_11 {
    pub undef: C2RustUnnamed_15,
    pub def: C2RustUnnamed_14,
    pub i: C2RustUnnamed_13,
    pub c: C2RustUnnamed_12,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub next: *mut bfd_link_hash_entry,
    pub p: *mut bfd_link_hash_common_entry,
    pub size: bfd_size_type,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_link_hash_common_entry {
    pub alignment_power: libc::c_uint,
    pub section: *mut asection,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub next: *mut bfd_link_hash_entry,
    pub link: *mut bfd_link_hash_entry,
    pub warning: *const libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub next: *mut bfd_link_hash_entry,
    pub section: *mut asection,
    pub value: bfd_vma,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub next: *mut bfd_link_hash_entry,
    pub abfd: *mut bfd,
}
pub type bfd_link_hash_type = libc::c_uint;
pub const bfd_link_hash_warning: bfd_link_hash_type = 7;
pub const bfd_link_hash_indirect: bfd_link_hash_type = 6;
pub const bfd_link_hash_common: bfd_link_hash_type = 5;
pub const bfd_link_hash_defweak: bfd_link_hash_type = 4;
pub const bfd_link_hash_defined: bfd_link_hash_type = 3;
pub const bfd_link_hash_undefweak: bfd_link_hash_type = 2;
pub const bfd_link_hash_undefined: bfd_link_hash_type = 1;
pub const bfd_link_hash_new: bfd_link_hash_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_link_callbacks {
    pub add_archive_element: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd,
            *const libc::c_char,
            *mut *mut bfd,
        ) -> bool,
    >,
    pub multiple_definition: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub multiple_common: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
            *mut bfd,
            bfd_link_hash_type,
            bfd_vma,
        ) -> (),
    >,
    pub add_to_set: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
            bfd_reloc_code_real_type,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub constructor: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            bool,
            *const libc::c_char,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub warning: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *const libc::c_char,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub undefined_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *mut bfd,
            *mut asection,
            bfd_vma,
            bool,
        ) -> (),
    >,
    pub reloc_overflow: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
            *const libc::c_char,
            *const libc::c_char,
            bfd_vma,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub reloc_dangerous: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub unattached_reloc: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *mut bfd,
            *mut asection,
            bfd_vma,
        ) -> (),
    >,
    pub notice: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
            *mut bfd_link_hash_entry,
            *mut bfd,
            *mut asection,
            bfd_vma,
            flagword,
        ) -> bool,
    >,
    pub einfo: Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()>,
    pub info: Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()>,
    pub minfo: Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()>,
    pub override_segment_assignment: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd,
            *mut asection,
            *mut asection,
            bool,
        ) -> bool,
    >,
    pub examine_strtab: Option::<unsafe extern "C" fn(*mut elf_strtab_hash) -> ()>,
    pub ctf_new_symbol: Option::<
        unsafe extern "C" fn(libc::c_int, *mut elf_internal_sym) -> (),
    >,
    pub ctf_new_dynsym: Option::<
        unsafe extern "C" fn(libc::c_int, *mut elf_internal_sym) -> (),
    >,
    pub emit_ctf: Option::<unsafe extern "C" fn() -> ()>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_sym {
    pub st_value: bfd_vma,
    pub st_size: bfd_vma,
    pub st_name: libc::c_ulong,
    pub st_info: libc::c_uchar,
    pub st_other: libc::c_uchar,
    pub st_target_internal: libc::c_uchar,
    pub st_shndx: libc::c_uint,
}
pub type bfd_signed_vma = libc::c_long;
pub type compressed_debug_section_type = libc::c_uint;
pub const COMPRESS_DEBUG_GABI_ZLIB: compressed_debug_section_type = 5;
pub const COMPRESS_DEBUG_GNU_ZLIB: compressed_debug_section_type = 3;
pub const COMPRESS_DEBUG: compressed_debug_section_type = 1;
pub const COMPRESS_DEBUG_NONE: compressed_debug_section_type = 0;
pub type textrel_check_method = libc::c_uint;
pub const textrel_check_error: textrel_check_method = 2;
pub const textrel_check_warning: textrel_check_method = 1;
pub const textrel_check_none: textrel_check_method = 0;
pub type report_method = libc::c_uint;
pub const RM_DIAGNOSE: report_method = 2;
pub const RM_IGNORE: report_method = 1;
pub const RM_NOT_YET_SET: report_method = 0;
pub type bfd_link_common_skip_ar_symbols = libc::c_uint;
pub const bfd_link_common_skip_all: bfd_link_common_skip_ar_symbols = 3;
pub const bfd_link_common_skip_data: bfd_link_common_skip_ar_symbols = 2;
pub const bfd_link_common_skip_text: bfd_link_common_skip_ar_symbols = 1;
pub const bfd_link_common_skip_none: bfd_link_common_skip_ar_symbols = 0;
pub type bfd_link_elf_stt_common = libc::c_uint;
pub const no_elf_stt_common: bfd_link_elf_stt_common = 2;
pub const elf_stt_common: bfd_link_elf_stt_common = 1;
pub const unchanged: bfd_link_elf_stt_common = 0;
pub type bfd_link_discard = libc::c_uint;
pub const discard_all: bfd_link_discard = 3;
pub const discard_l: bfd_link_discard = 2;
pub const discard_none: bfd_link_discard = 1;
pub const discard_sec_merge: bfd_link_discard = 0;
pub type bfd_link_strip = libc::c_uint;
pub const strip_all: bfd_link_strip = 3;
pub const strip_some: bfd_link_strip = 2;
pub const strip_debugger: bfd_link_strip = 1;
pub const strip_none: bfd_link_strip = 0;
pub type output_type = libc::c_uint;
pub const type_dll: output_type = 3;
pub const type_relocatable: output_type = 2;
pub const type_pie: output_type = 1;
pub const type_pde: output_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_16 {
    pub after_write_object_contents: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub style: *const libc::c_char,
    pub sec: *mut asection,
}
pub type asymbol = bfd_symbol;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct elf_segment_map {
    pub next: *mut elf_segment_map,
    pub p_type: libc::c_ulong,
    pub p_flags: libc::c_ulong,
    pub p_paddr: bfd_vma,
    pub p_vaddr_offset: bfd_vma,
    pub p_align: bfd_vma,
    pub p_size: bfd_vma,
    #[bitfield(name = "p_flags_valid", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "p_paddr_valid", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "p_align_valid", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "p_size_valid", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "includes_filehdr", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "includes_phdrs", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "no_sort_lma", ty = "libc::c_uint", bits = "6..=6")]
    pub p_flags_valid_p_paddr_valid_p_align_valid_p_size_valid_includes_filehdr_includes_phdrs_no_sort_lma: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 3],
    pub idx: libc::c_uint,
    pub count: libc::c_uint,
    pub sections: [*mut asection; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct core_elf_obj_tdata {
    pub signal: libc::c_int,
    pub pid: libc::c_int,
    pub lwpid: libc::c_int,
    pub program: *mut libc::c_char,
    pub command: *mut libc::c_char,
}
pub type elf_gnu_osabi = libc::c_uint;
pub const elf_gnu_osabi_retain: elf_gnu_osabi = 8;
pub const elf_gnu_osabi_unique: elf_gnu_osabi = 4;
pub const elf_gnu_osabi_ifunc: elf_gnu_osabi = 2;
pub const elf_gnu_osabi_mbind: elf_gnu_osabi = 1;
pub type dynamic_lib_link_class = libc::c_uint;
pub const DYN_NO_NEEDED: dynamic_lib_link_class = 8;
pub const DYN_NO_ADD_NEEDED: dynamic_lib_link_class = 4;
pub const DYN_DT_NEEDED: dynamic_lib_link_class = 2;
pub const DYN_AS_NEEDED: dynamic_lib_link_class = 1;
pub const DYN_NORMAL: dynamic_lib_link_class = 0;
pub type elf_target_id = libc::c_uint;
pub const GENERIC_ELF_DATA: elf_target_id = 38;
pub const RISCV_ELF_DATA: elf_target_id = 37;
pub const TILEPRO_ELF_DATA: elf_target_id = 36;
pub const TILEGX_ELF_DATA: elf_target_id = 35;
pub const XTENSA_ELF_DATA: elf_target_id = 34;
pub const X86_64_ELF_DATA: elf_target_id = 33;
pub const TIC6X_ELF_DATA: elf_target_id = 32;
pub const SPU_ELF_DATA: elf_target_id = 31;
pub const SPARC_ELF_DATA: elf_target_id = 30;
pub const SH_ELF_DATA: elf_target_id = 29;
pub const S390_ELF_DATA: elf_target_id = 28;
pub const PRU_ELF_DATA: elf_target_id = 27;
pub const PPC64_ELF_DATA: elf_target_id = 26;
pub const PPC32_ELF_DATA: elf_target_id = 25;
pub const OR1K_ELF_DATA: elf_target_id = 24;
pub const NIOS2_ELF_DATA: elf_target_id = 23;
pub const NDS32_ELF_DATA: elf_target_id = 22;
pub const MN10300_ELF_DATA: elf_target_id = 21;
pub const MIPS_ELF_DATA: elf_target_id = 20;
pub const MICROBLAZE_ELF_DATA: elf_target_id = 19;
pub const METAG_ELF_DATA: elf_target_id = 18;
pub const M68K_ELF_DATA: elf_target_id = 17;
pub const M68HC11_ELF_DATA: elf_target_id = 16;
pub const M32R_ELF_DATA: elf_target_id = 15;
pub const LM32_ELF_DATA: elf_target_id = 14;
pub const IA64_ELF_DATA: elf_target_id = 13;
pub const I386_ELF_DATA: elf_target_id = 12;
pub const HPPA64_ELF_DATA: elf_target_id = 11;
pub const HPPA32_ELF_DATA: elf_target_id = 10;
pub const FRV_ELF_DATA: elf_target_id = 9;
pub const CSKY_ELF_DATA: elf_target_id = 8;
pub const CRIS_ELF_DATA: elf_target_id = 7;
pub const BFIN_ELF_DATA: elf_target_id = 6;
pub const AVR_ELF_DATA: elf_target_id = 5;
pub const ARM_ELF_DATA: elf_target_id = 4;
pub const ARC_ELF_DATA: elf_target_id = 3;
pub const ALPHA_ELF_DATA: elf_target_id = 2;
pub const AARCH64_ELF_DATA: elf_target_id = 1;
pub type Elf_Internal_Shdr = elf_internal_shdr;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_shdr {
    pub sh_name: libc::c_uint,
    pub sh_type: libc::c_uint,
    pub sh_flags: bfd_vma,
    pub sh_addr: bfd_vma,
    pub sh_offset: file_ptr,
    pub sh_size: bfd_size_type,
    pub sh_link: libc::c_uint,
    pub sh_info: libc::c_uint,
    pub sh_addralign: bfd_vma,
    pub sh_entsize: bfd_size_type,
    pub bfd_section: *mut asection,
    pub contents: *mut libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sdt_note {
    pub next: *mut sdt_note,
    pub size: bfd_size_type,
    pub data: [bfd_byte; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct obj_attribute_list {
    pub next: *mut obj_attribute_list,
    pub tag: libc::c_uint,
    pub attr: obj_attribute,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct obj_attribute {
    pub type_0: libc::c_int,
    pub i: libc::c_uint,
    pub s: *mut libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_property_list {
    pub next: *mut elf_property_list,
    pub property: elf_property,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_property {
    pub pr_type: libc::c_uint,
    pub pr_datasz: libc::c_uint,
    pub u: C2RustUnnamed_17,
    pub pr_kind: elf_property_kind,
}
pub type elf_property_kind = libc::c_uint;
pub const property_number: elf_property_kind = 4;
pub const property_remove: elf_property_kind = 3;
pub const property_corrupt: elf_property_kind = 2;
pub const property_ignored: elf_property_kind = 1;
pub const property_unknown: elf_property_kind = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_17 {
    pub number: bfd_vma,
}
pub type Elf_Internal_Verneed = elf_internal_verneed;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_verneed {
    pub vn_version: libc::c_ushort,
    pub vn_cnt: libc::c_ushort,
    pub vn_file: libc::c_ulong,
    pub vn_aux: libc::c_ulong,
    pub vn_next: libc::c_ulong,
    pub vn_bfd: *mut bfd,
    pub vn_filename: *const libc::c_char,
    pub vn_auxptr: *mut elf_internal_vernaux,
    pub vn_nextref: *mut elf_internal_verneed,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_vernaux {
    pub vna_hash: libc::c_ulong,
    pub vna_flags: libc::c_ushort,
    pub vna_other: libc::c_ushort,
    pub vna_name: libc::c_ulong,
    pub vna_next: libc::c_ulong,
    pub vna_nodename: *const libc::c_char,
    pub vna_nextptr: *mut elf_internal_vernaux,
}
pub type Elf_Internal_Verdef = elf_internal_verdef;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_verdef {
    pub vd_version: libc::c_ushort,
    pub vd_flags: libc::c_ushort,
    pub vd_ndx: libc::c_ushort,
    pub vd_cnt: libc::c_ushort,
    pub vd_hash: libc::c_ulong,
    pub vd_aux: libc::c_ulong,
    pub vd_next: libc::c_ulong,
    pub vd_bfd: *mut bfd,
    pub vd_nodename: *const libc::c_char,
    pub vd_nextdef: *mut elf_internal_verdef,
    pub vd_auxptr: *mut elf_internal_verdaux,
    pub vd_exp_refno: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_verdaux {
    pub vda_name: libc::c_ulong,
    pub vda_next: libc::c_ulong,
    pub vda_nodename: *const libc::c_char,
    pub vda_nextptr: *mut elf_internal_verdaux,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_18 {
    pub refcounts: *mut bfd_signed_vma,
    pub offsets: *mut bfd_vma,
    pub ents: *mut *mut got_entry,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct elf_link_hash_entry {
    pub root: bfd_link_hash_entry,
    pub indx: libc::c_long,
    pub dynindx: libc::c_long,
    pub got: gotplt_union,
    pub plt: gotplt_union,
    pub size: bfd_size_type,
    pub dyn_relocs: *mut elf_dyn_relocs,
    #[bitfield(name = "type_0", ty = "libc::c_uint", bits = "0..=7")]
    #[bitfield(name = "other", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "target_internal", ty = "libc::c_uint", bits = "16..=23")]
    #[bitfield(name = "ref_regular", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "def_regular", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "ref_dynamic", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "def_dynamic", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "ref_regular_nonweak", ty = "libc::c_uint", bits = "28..=28")]
    #[bitfield(name = "ref_ir_nonweak", ty = "libc::c_uint", bits = "29..=29")]
    #[bitfield(name = "dynamic_adjusted", ty = "libc::c_uint", bits = "30..=30")]
    #[bitfield(name = "needs_copy", ty = "libc::c_uint", bits = "31..=31")]
    #[bitfield(name = "needs_plt", ty = "libc::c_uint", bits = "32..=32")]
    #[bitfield(name = "non_elf", ty = "libc::c_uint", bits = "33..=33")]
    #[bitfield(name = "versioned", ty = "elf_symbol_version", bits = "34..=35")]
    #[bitfield(name = "forced_local", ty = "libc::c_uint", bits = "36..=36")]
    #[bitfield(name = "dynamic", ty = "libc::c_uint", bits = "37..=37")]
    #[bitfield(name = "mark", ty = "libc::c_uint", bits = "38..=38")]
    #[bitfield(name = "non_got_ref", ty = "libc::c_uint", bits = "39..=39")]
    #[bitfield(name = "dynamic_def", ty = "libc::c_uint", bits = "40..=40")]
    #[bitfield(name = "ref_dynamic_nonweak", ty = "libc::c_uint", bits = "41..=41")]
    #[bitfield(name = "pointer_equality_needed", ty = "libc::c_uint", bits = "42..=42")]
    #[bitfield(name = "unique_global", ty = "libc::c_uint", bits = "43..=43")]
    #[bitfield(name = "protected_def", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "start_stop", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "is_weakalias", ty = "libc::c_uint", bits = "46..=46")]
    pub type_0_other_target_internal_ref_regular_def_regular_ref_dynamic_def_dynamic_ref_regular_nonweak_ref_ir_nonweak_dynamic_adjusted_needs_copy_needs_plt_non_elf_versioned_forced_local_dynamic_mark_non_got_ref_dynamic_def_ref_dynamic_nonweak_pointer_equality_needed_unique_global_protected_def_start_stop_is_weakalias: [u8; 6],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 2],
    pub dynstr_index: libc::c_ulong,
    pub u: C2RustUnnamed_21,
    pub verinfo: C2RustUnnamed_20,
    pub u2: C2RustUnnamed_19,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_19 {
    pub start_stop_section: *mut asection,
    pub vtable: *mut elf_link_virtual_table_entry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_link_virtual_table_entry {
    pub size: size_t,
    pub used: *mut bool,
    pub parent: *mut elf_link_hash_entry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_20 {
    pub verdef: *mut Elf_Internal_Verdef,
    pub vertree: *mut bfd_elf_version_tree,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_21 {
    pub alias: *mut elf_link_hash_entry,
    pub elf_hash_value: libc::c_ulong,
}
pub type elf_symbol_version = libc::c_uint;
pub const versioned_hidden: elf_symbol_version = 3;
pub const versioned: elf_symbol_version = 2;
pub const unversioned: elf_symbol_version = 1;
pub const unknown: elf_symbol_version = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_dyn_relocs {
    pub next: *mut elf_dyn_relocs,
    pub sec: *mut asection,
    pub count: bfd_size_type,
    pub pc_count: bfd_size_type,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union gotplt_union {
    pub refcount: bfd_signed_vma,
    pub offset: bfd_vma,
    pub glist: *mut got_entry,
    pub plist: *mut plt_entry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_section_list {
    pub hdr: Elf_Internal_Shdr,
    pub ndx: libc::c_uint,
    pub next: *mut elf_section_list,
}
pub type Elf_Internal_Phdr = elf_internal_phdr;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_phdr {
    pub p_type: libc::c_ulong,
    pub p_flags: libc::c_ulong,
    pub p_offset: bfd_vma,
    pub p_vaddr: bfd_vma,
    pub p_paddr: bfd_vma,
    pub p_filesz: bfd_vma,
    pub p_memsz: bfd_vma,
    pub p_align: bfd_vma,
}
pub type Elf_Internal_Ehdr = elf_internal_ehdr;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_ehdr {
    pub e_ident: [libc::c_uchar; 16],
    pub e_entry: bfd_vma,
    pub e_phoff: bfd_size_type,
    pub e_shoff: bfd_size_type,
    pub e_version: libc::c_ulong,
    pub e_flags: libc::c_ulong,
    pub e_type: libc::c_ushort,
    pub e_machine: libc::c_ushort,
    pub e_ehsize: libc::c_uint,
    pub e_phentsize: libc::c_uint,
    pub e_phnum: libc::c_uint,
    pub e_shentsize: libc::c_uint,
    pub e_shnum: libc::c_uint,
    pub e_shstrndx: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_22 {
    pub next: *mut bfd,
    pub hash: *mut bfd_link_hash_table,
}
pub type ufile_ptr = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_arch_info {
    pub bits_per_word: libc::c_int,
    pub bits_per_address: libc::c_int,
    pub bits_per_byte: libc::c_int,
    pub arch: bfd_architecture,
    pub mach: libc::c_ulong,
    pub arch_name: *const libc::c_char,
    pub printable_name: *const libc::c_char,
    pub section_align_power: libc::c_uint,
    pub the_default: bool,
    pub compatible: Option::<
        unsafe extern "C" fn(
            *const bfd_arch_info,
            *const bfd_arch_info,
        ) -> *const bfd_arch_info,
    >,
    pub scan: Option::<
        unsafe extern "C" fn(*const bfd_arch_info, *const libc::c_char) -> bool,
    >,
    pub fill: Option::<
        unsafe extern "C" fn(bfd_size_type, bool, bool) -> *mut libc::c_void,
    >,
    pub next: *const bfd_arch_info,
    pub max_reloc_offset_into_insn: libc::c_int,
}
pub type bfd_architecture = libc::c_uint;
pub const bfd_arch_last: bfd_architecture = 88;
pub const bfd_arch_csky: bfd_architecture = 87;
pub const bfd_arch_nfp: bfd_architecture = 86;
pub const bfd_arch_pru: bfd_architecture = 85;
pub const bfd_arch_wasm32: bfd_architecture = 84;
pub const bfd_arch_visium: bfd_architecture = 83;
pub const bfd_arch_nios2: bfd_architecture = 82;
pub const bfd_arch_aarch64: bfd_architecture = 81;
pub const bfd_arch_tilegx: bfd_architecture = 80;
pub const bfd_arch_tilepro: bfd_architecture = 79;
pub const bfd_arch_microblaze: bfd_architecture = 78;
pub const bfd_arch_lm32: bfd_architecture = 77;
pub const bfd_arch_z80: bfd_architecture = 76;
pub const bfd_arch_xtensa: bfd_architecture = 75;
pub const bfd_arch_xgate: bfd_architecture = 74;
pub const bfd_arch_xc16x: bfd_architecture = 73;
pub const bfd_arch_msp430: bfd_architecture = 72;
pub const bfd_arch_xstormy16: bfd_architecture = 71;
pub const bfd_arch_mmix: bfd_architecture = 70;
pub const bfd_arch_score: bfd_architecture = 69;
pub const bfd_arch_s390: bfd_architecture = 68;
pub const bfd_arch_rx: bfd_architecture = 67;
pub const bfd_arch_rl78: bfd_architecture = 66;
pub const bfd_arch_riscv: bfd_architecture = 65;
pub const bfd_arch_cris: bfd_architecture = 64;
pub const bfd_arch_crx: bfd_architecture = 63;
pub const bfd_arch_cr16: bfd_architecture = 62;
pub const bfd_arch_bfin: bfd_architecture = 61;
pub const bfd_arch_avr: bfd_architecture = 60;
pub const bfd_arch_pj: bfd_architecture = 59;
pub const bfd_arch_mt: bfd_architecture = 58;
pub const bfd_arch_epiphany: bfd_architecture = 57;
pub const bfd_arch_bpf: bfd_architecture = 56;
pub const bfd_arch_iq2000: bfd_architecture = 55;
pub const bfd_arch_ip2k: bfd_architecture = 54;
pub const bfd_arch_ia64: bfd_architecture = 53;
pub const bfd_arch_metag: bfd_architecture = 52;
pub const bfd_arch_mep: bfd_architecture = 51;
pub const bfd_arch_mcore: bfd_architecture = 50;
pub const bfd_arch_ft32: bfd_architecture = 49;
pub const bfd_arch_moxie: bfd_architecture = 48;
pub const bfd_arch_frv: bfd_architecture = 47;
pub const bfd_arch_fr30: bfd_architecture = 46;
pub const bfd_arch_mn10300: bfd_architecture = 45;
pub const bfd_arch_mn10200: bfd_architecture = 44;
pub const bfd_arch_m32r: bfd_architecture = 43;
pub const bfd_arch_m32c: bfd_architecture = 42;
pub const bfd_arch_arc: bfd_architecture = 41;
pub const bfd_arch_v850_rh850: bfd_architecture = 40;
pub const bfd_arch_v850: bfd_architecture = 39;
pub const bfd_arch_tic6x: bfd_architecture = 38;
pub const bfd_arch_tic54x: bfd_architecture = 37;
pub const bfd_arch_tic4x: bfd_architecture = 36;
pub const bfd_arch_tic30: bfd_architecture = 35;
pub const bfd_arch_ns32k: bfd_architecture = 34;
pub const bfd_arch_nds32: bfd_architecture = 33;
pub const bfd_arch_arm: bfd_architecture = 32;
pub const bfd_arch_alpha: bfd_architecture = 31;
pub const bfd_arch_sh: bfd_architecture = 30;
pub const bfd_arch_z8k: bfd_architecture = 29;
pub const bfd_arch_s12z: bfd_architecture = 28;
pub const bfd_arch_m9s12xg: bfd_architecture = 27;
pub const bfd_arch_m9s12x: bfd_architecture = 26;
pub const bfd_arch_m68hc12: bfd_architecture = 25;
pub const bfd_arch_m68hc11: bfd_architecture = 24;
pub const bfd_arch_dlx: bfd_architecture = 23;
pub const bfd_arch_d30v: bfd_architecture = 22;
pub const bfd_arch_d10v: bfd_architecture = 21;
pub const bfd_arch_hppa: bfd_architecture = 20;
pub const bfd_arch_rs6000: bfd_architecture = 19;
pub const bfd_arch_powerpc: bfd_architecture = 18;
pub const bfd_arch_pdp11: bfd_architecture = 17;
pub const bfd_arch_h8300: bfd_architecture = 16;
pub const bfd_arch_pyramid: bfd_architecture = 15;
pub const bfd_arch_m98k: bfd_architecture = 14;
pub const bfd_arch_convex: bfd_architecture = 13;
pub const bfd_arch_romp: bfd_architecture = 12;
pub const bfd_arch_iamcu: bfd_architecture = 11;
pub const bfd_arch_k1om: bfd_architecture = 10;
pub const bfd_arch_l1om: bfd_architecture = 9;
pub const bfd_arch_i386: bfd_architecture = 8;
pub const bfd_arch_mips: bfd_architecture = 7;
pub const bfd_arch_spu: bfd_architecture = 6;
pub const bfd_arch_sparc: bfd_architecture = 5;
pub const bfd_arch_or1k: bfd_architecture = 4;
pub const bfd_arch_vax: bfd_architecture = 3;
pub const bfd_arch_m68k: bfd_architecture = 2;
pub const bfd_arch_obscure: bfd_architecture = 1;
pub const bfd_arch_unknown: bfd_architecture = 0;
pub type bfd_plugin_format = libc::c_uint;
pub const bfd_plugin_no: bfd_plugin_format = 2;
pub const bfd_plugin_yes: bfd_plugin_format = 1;
pub const bfd_plugin_unknown: bfd_plugin_format = 0;
pub type bfd_direction = libc::c_uint;
pub const both_direction: bfd_direction = 3;
pub const write_direction: bfd_direction = 2;
pub const read_direction: bfd_direction = 1;
pub const no_direction: bfd_direction = 0;
pub type bfd_format = libc::c_uint;
pub const bfd_type_end: bfd_format = 4;
pub const bfd_core: bfd_format = 3;
pub const bfd_archive: bfd_format = 2;
pub const bfd_object: bfd_format = 1;
pub const bfd_unknown: bfd_format = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_target {
    pub name: *const libc::c_char,
    pub flavour: bfd_flavour,
    pub byteorder: bfd_endian,
    pub header_byteorder: bfd_endian,
    pub object_flags: flagword,
    pub section_flags: flagword,
    pub symbol_leading_char: libc::c_char,
    pub ar_pad_char: libc::c_char,
    pub ar_max_namelen: libc::c_uchar,
    pub match_priority: libc::c_uchar,
    pub keep_unused_section_symbols: bool,
    pub bfd_getx64: Option::<unsafe extern "C" fn(*const libc::c_void) -> bfd_uint64_t>,
    pub bfd_getx_signed_64: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_int64_t,
    >,
    pub bfd_putx64: Option::<
        unsafe extern "C" fn(bfd_uint64_t, *mut libc::c_void) -> (),
    >,
    pub bfd_getx32: Option::<unsafe extern "C" fn(*const libc::c_void) -> bfd_vma>,
    pub bfd_getx_signed_32: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_signed_vma,
    >,
    pub bfd_putx32: Option::<unsafe extern "C" fn(bfd_vma, *mut libc::c_void) -> ()>,
    pub bfd_getx16: Option::<unsafe extern "C" fn(*const libc::c_void) -> bfd_vma>,
    pub bfd_getx_signed_16: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_signed_vma,
    >,
    pub bfd_putx16: Option::<unsafe extern "C" fn(bfd_vma, *mut libc::c_void) -> ()>,
    pub bfd_h_getx64: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_uint64_t,
    >,
    pub bfd_h_getx_signed_64: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_int64_t,
    >,
    pub bfd_h_putx64: Option::<
        unsafe extern "C" fn(bfd_uint64_t, *mut libc::c_void) -> (),
    >,
    pub bfd_h_getx32: Option::<unsafe extern "C" fn(*const libc::c_void) -> bfd_vma>,
    pub bfd_h_getx_signed_32: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_signed_vma,
    >,
    pub bfd_h_putx32: Option::<unsafe extern "C" fn(bfd_vma, *mut libc::c_void) -> ()>,
    pub bfd_h_getx16: Option::<unsafe extern "C" fn(*const libc::c_void) -> bfd_vma>,
    pub bfd_h_getx_signed_16: Option::<
        unsafe extern "C" fn(*const libc::c_void) -> bfd_signed_vma,
    >,
    pub bfd_h_putx16: Option::<unsafe extern "C" fn(bfd_vma, *mut libc::c_void) -> ()>,
    pub _bfd_check_format: [Option::<unsafe extern "C" fn(*mut bfd) -> bfd_cleanup>; 4],
    pub _bfd_set_format: [Option::<unsafe extern "C" fn(*mut bfd) -> bool>; 4],
    pub _bfd_write_contents: [Option::<unsafe extern "C" fn(*mut bfd) -> bool>; 4],
    pub _close_and_cleanup: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub _bfd_free_cached_info: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub _new_section_hook: Option::<unsafe extern "C" fn(*mut bfd, sec_ptr) -> bool>,
    pub _bfd_get_section_contents: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            sec_ptr,
            *mut libc::c_void,
            file_ptr,
            bfd_size_type,
        ) -> bool,
    >,
    pub _bfd_get_section_contents_in_window: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            sec_ptr,
            *mut bfd_window,
            file_ptr,
            bfd_size_type,
        ) -> bool,
    >,
    pub _bfd_copy_private_bfd_data: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd) -> bool,
    >,
    pub _bfd_merge_private_bfd_data: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_init_private_section_data: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            sec_ptr,
            *mut bfd,
            sec_ptr,
            *mut bfd_link_info,
        ) -> bool,
    >,
    pub _bfd_copy_private_section_data: Option::<
        unsafe extern "C" fn(*mut bfd, sec_ptr, *mut bfd, sec_ptr) -> bool,
    >,
    pub _bfd_copy_private_symbol_data: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asymbol, *mut bfd, *mut asymbol) -> bool,
    >,
    pub _bfd_copy_private_header_data: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd) -> bool,
    >,
    pub _bfd_set_private_flags: Option::<
        unsafe extern "C" fn(*mut bfd, flagword) -> bool,
    >,
    pub _bfd_print_private_bfd_data: Option::<
        unsafe extern "C" fn(*mut bfd, *mut libc::c_void) -> bool,
    >,
    pub _core_file_failing_command: Option::<
        unsafe extern "C" fn(*mut bfd) -> *mut libc::c_char,
    >,
    pub _core_file_failing_signal: Option::<
        unsafe extern "C" fn(*mut bfd) -> libc::c_int,
    >,
    pub _core_file_matches_executable_p: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd) -> bool,
    >,
    pub _core_file_pid: Option::<unsafe extern "C" fn(*mut bfd) -> libc::c_int>,
    pub _bfd_slurp_armap: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub _bfd_slurp_extended_name_table: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub _bfd_construct_extended_name_table: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut *mut libc::c_char,
            *mut bfd_size_type,
            *mut *const libc::c_char,
        ) -> bool,
    >,
    pub _bfd_truncate_arname: Option::<
        unsafe extern "C" fn(*mut bfd, *const libc::c_char, *mut libc::c_char) -> (),
    >,
    pub write_armap: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            libc::c_uint,
            *mut orl,
            libc::c_uint,
            libc::c_int,
        ) -> bool,
    >,
    pub _bfd_read_ar_hdr_fn: Option::<
        unsafe extern "C" fn(*mut bfd) -> *mut libc::c_void,
    >,
    pub _bfd_write_ar_hdr_fn: Option::<unsafe extern "C" fn(*mut bfd, *mut bfd) -> bool>,
    pub openr_next_archived_file: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd) -> *mut bfd,
    >,
    pub _bfd_get_elt_at_index: Option::<
        unsafe extern "C" fn(*mut bfd, symindex) -> *mut bfd,
    >,
    pub _bfd_stat_arch_elt: Option::<
        unsafe extern "C" fn(*mut bfd, *mut stat) -> libc::c_int,
    >,
    pub _bfd_update_armap_timestamp: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub _bfd_get_symtab_upper_bound: Option::<
        unsafe extern "C" fn(*mut bfd) -> libc::c_long,
    >,
    pub _bfd_canonicalize_symtab: Option::<
        unsafe extern "C" fn(*mut bfd, *mut *mut bfd_symbol) -> libc::c_long,
    >,
    pub _bfd_make_empty_symbol: Option::<
        unsafe extern "C" fn(*mut bfd) -> *mut bfd_symbol,
    >,
    pub _bfd_print_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut libc::c_void,
            *mut bfd_symbol,
            bfd_print_symbol_type,
        ) -> (),
    >,
    pub _bfd_get_symbol_info: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_symbol, *mut symbol_info) -> (),
    >,
    pub _bfd_get_symbol_version_string: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_symbol,
            bool,
            *mut bool,
        ) -> *const libc::c_char,
    >,
    pub _bfd_is_local_label_name: Option::<
        unsafe extern "C" fn(*mut bfd, *const libc::c_char) -> bool,
    >,
    pub _bfd_is_target_special_symbol: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asymbol) -> bool,
    >,
    pub _get_lineno: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_symbol) -> *mut alent,
    >,
    pub _bfd_find_nearest_line: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut *mut bfd_symbol,
            *mut bfd_section,
            bfd_vma,
            *mut *const libc::c_char,
            *mut *const libc::c_char,
            *mut libc::c_uint,
            *mut libc::c_uint,
        ) -> bool,
    >,
    pub _bfd_find_line: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut *mut bfd_symbol,
            *mut bfd_symbol,
            *mut *const libc::c_char,
            *mut libc::c_uint,
        ) -> bool,
    >,
    pub _bfd_find_inliner_info: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut *const libc::c_char,
            *mut *const libc::c_char,
            *mut libc::c_uint,
        ) -> bool,
    >,
    pub _bfd_make_debug_symbol: Option::<
        unsafe extern "C" fn(*mut bfd, *mut libc::c_void, libc::c_ulong) -> *mut asymbol,
    >,
    pub _read_minisymbols: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            bool,
            *mut *mut libc::c_void,
            *mut libc::c_uint,
        ) -> libc::c_long,
    >,
    pub _minisymbol_to_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            bool,
            *const libc::c_void,
            *mut asymbol,
        ) -> *mut asymbol,
    >,
    pub _get_reloc_upper_bound: Option::<
        unsafe extern "C" fn(*mut bfd, sec_ptr) -> libc::c_long,
    >,
    pub _bfd_canonicalize_reloc: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            sec_ptr,
            *mut *mut arelent,
            *mut *mut bfd_symbol,
        ) -> libc::c_long,
    >,
    pub _bfd_set_reloc: Option::<
        unsafe extern "C" fn(*mut bfd, sec_ptr, *mut *mut arelent, libc::c_uint) -> (),
    >,
    pub reloc_type_lookup: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            bfd_reloc_code_real_type,
        ) -> *const reloc_howto_type,
    >,
    pub reloc_name_lookup: Option::<
        unsafe extern "C" fn(*mut bfd, *const libc::c_char) -> *const reloc_howto_type,
    >,
    pub _bfd_set_arch_mach: Option::<
        unsafe extern "C" fn(*mut bfd, bfd_architecture, libc::c_ulong) -> bool,
    >,
    pub _bfd_set_section_contents: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            sec_ptr,
            *const libc::c_void,
            file_ptr,
            bfd_size_type,
        ) -> bool,
    >,
    pub _bfd_sizeof_headers: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> libc::c_int,
    >,
    pub _bfd_get_relocated_section_contents: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut bfd_link_order,
            *mut bfd_byte,
            bool,
            *mut *mut bfd_symbol,
        ) -> *mut bfd_byte,
    >,
    pub _bfd_relax_section: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_section,
            *mut bfd_link_info,
            *mut bool,
        ) -> bool,
    >,
    pub _bfd_link_hash_table_create: Option::<
        unsafe extern "C" fn(*mut bfd) -> *mut bfd_link_hash_table,
    >,
    pub _bfd_link_add_symbols: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_link_just_syms: Option::<
        unsafe extern "C" fn(*mut asection, *mut bfd_link_info) -> (),
    >,
    pub _bfd_copy_link_hash_symbol_type: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_hash_entry,
            *mut bfd_link_hash_entry,
        ) -> (),
    >,
    pub _bfd_final_link: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_link_split_section: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_section) -> bool,
    >,
    pub _bfd_link_check_relocs: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_gc_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_lookup_section_flags: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut flag_info, *mut asection) -> bool,
    >,
    pub _bfd_merge_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_is_group_section: Option::<
        unsafe extern "C" fn(*mut bfd, *const bfd_section) -> bool,
    >,
    pub _bfd_group_name: Option::<
        unsafe extern "C" fn(*mut bfd, *const bfd_section) -> *const libc::c_char,
    >,
    pub _bfd_discard_group: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_section) -> bool,
    >,
    pub _section_already_linked: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection, *mut bfd_link_info) -> bool,
    >,
    pub _bfd_define_common_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
        ) -> bool,
    >,
    pub _bfd_link_hide_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut bfd_link_hash_entry,
        ) -> (),
    >,
    pub _bfd_define_start_stop: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *mut asection,
        ) -> *mut bfd_link_hash_entry,
    >,
    pub _bfd_get_dynamic_symtab_upper_bound: Option::<
        unsafe extern "C" fn(*mut bfd) -> libc::c_long,
    >,
    pub _bfd_canonicalize_dynamic_symtab: Option::<
        unsafe extern "C" fn(*mut bfd, *mut *mut bfd_symbol) -> libc::c_long,
    >,
    pub _bfd_get_synthetic_symtab: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            libc::c_long,
            *mut *mut bfd_symbol,
            libc::c_long,
            *mut *mut bfd_symbol,
            *mut *mut bfd_symbol,
        ) -> libc::c_long,
    >,
    pub _bfd_get_dynamic_reloc_upper_bound: Option::<
        unsafe extern "C" fn(*mut bfd) -> libc::c_long,
    >,
    pub _bfd_canonicalize_dynamic_reloc: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut *mut arelent,
            *mut *mut bfd_symbol,
        ) -> libc::c_long,
    >,
    pub alternative_target: *const bfd_target,
    pub backend_data: *const libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct flag_info {
    pub only_with_flags: flagword,
    pub not_with_flags: flagword,
    pub flag_list: *mut flag_info_list,
    pub flags_initialized: bool,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct flag_info_list {
    pub with: flag_type,
    pub name: *const libc::c_char,
    pub valid: bool,
    pub next: *mut flag_info_list,
}
pub type flag_type = libc::c_uint;
pub const without_flags: flag_type = 1;
pub const with_flags: flag_type = 0;
pub type sec_ptr = *mut bfd_section;
pub type symbol_info = _symbol_info;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _symbol_info {
    pub value: symvalue,
    pub type_0: libc::c_char,
    pub name: *const libc::c_char,
    pub stab_type: libc::c_uchar,
    pub stab_other: libc::c_char,
    pub stab_desc: libc::c_short,
    pub stab_name: *const libc::c_char,
}
pub type bfd_print_symbol_type = bfd_print_symbol;
pub type bfd_print_symbol = libc::c_uint;
pub const bfd_print_symbol_all: bfd_print_symbol = 2;
pub const bfd_print_symbol_more: bfd_print_symbol = 1;
pub const bfd_print_symbol_name: bfd_print_symbol = 0;
pub type symindex = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct orl {
    pub name: *mut *mut libc::c_char,
    pub u: C2RustUnnamed_23,
    pub namidx: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_23 {
    pub pos: file_ptr,
    pub abfd: *mut bfd,
}
pub type bfd_window = _bfd_window;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _bfd_window {
    pub data: *mut libc::c_void,
    pub size: bfd_size_type,
    pub i: *mut _bfd_window_internal,
}
pub type bfd_cleanup = Option::<unsafe extern "C" fn(*mut bfd) -> ()>;
pub type bfd_endian = libc::c_uint;
pub const BFD_ENDIAN_UNKNOWN: bfd_endian = 2;
pub const BFD_ENDIAN_LITTLE: bfd_endian = 1;
pub const BFD_ENDIAN_BIG: bfd_endian = 0;
pub type bfd_flavour = libc::c_uint;
pub const bfd_target_sym_flavour: bfd_flavour = 20;
pub const bfd_target_pef_xlib_flavour: bfd_flavour = 19;
pub const bfd_target_pef_flavour: bfd_flavour = 18;
pub const bfd_target_mach_o_flavour: bfd_flavour = 17;
pub const bfd_target_mmo_flavour: bfd_flavour = 16;
pub const bfd_target_evax_flavour: bfd_flavour = 15;
pub const bfd_target_ovax_flavour: bfd_flavour = 14;
pub const bfd_target_msdos_flavour: bfd_flavour = 13;
pub const bfd_target_versados_flavour: bfd_flavour = 12;
pub const bfd_target_os9k_flavour: bfd_flavour = 11;
pub const bfd_target_som_flavour: bfd_flavour = 10;
pub const bfd_target_ihex_flavour: bfd_flavour = 9;
pub const bfd_target_verilog_flavour: bfd_flavour = 8;
pub const bfd_target_srec_flavour: bfd_flavour = 7;
pub const bfd_target_tekhex_flavour: bfd_flavour = 6;
pub const bfd_target_elf_flavour: bfd_flavour = 5;
pub const bfd_target_xcoff_flavour: bfd_flavour = 4;
pub const bfd_target_ecoff_flavour: bfd_flavour = 3;
pub const bfd_target_coff_flavour: bfd_flavour = 2;
pub const bfd_target_aout_flavour: bfd_flavour = 1;
pub const bfd_target_unknown_flavour: bfd_flavour = 0;
pub type addressT = bfd_vma;
pub type offsetT = bfd_signed_vma;
pub type valueT = addressT;
pub type segT = *mut asection;
pub type subsegT = libc::c_int;
pub type _relax_state = libc::c_uint;
pub const rs_dwarf2dbg: _relax_state = 13;
pub const rs_cfa: _relax_state = 12;
pub const rs_leb128: _relax_state = 11;
pub const rs_fill_nop: _relax_state = 10;
pub const rs_space_nop: _relax_state = 9;
pub const rs_space: _relax_state = 8;
pub const rs_machine_dependent: _relax_state = 7;
pub const rs_broken_word: _relax_state = 6;
pub const rs_org: _relax_state = 5;
pub const rs_align_test: _relax_state = 4;
pub const rs_align_code: _relax_state = 3;
pub const rs_align: _relax_state = 2;
pub const rs_fill: _relax_state = 1;
pub const rs_dummy: _relax_state = 0;
pub type relax_stateT = _relax_state;
pub type relax_substateT = libc::c_uint;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct relax_type {
    pub rlx_forward: offsetT,
    pub rlx_backward: offsetT,
    pub rlx_length: libc::c_uchar,
    pub rlx_more: relax_substateT,
}
pub type relax_typeS = relax_type;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _pseudo_type {
    pub poc_name: *const libc::c_char,
    pub poc_handler: Option::<unsafe extern "C" fn(libc::c_int) -> ()>,
    pub poc_val: libc::c_int,
}
pub type pseudo_typeS = _pseudo_type;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct expressionS {
    pub X_add_symbol: *mut symbolS,
    pub X_op_symbol: *mut symbolS,
    pub X_add_number: offsetT,
    #[bitfield(name = "X_op", ty = "operatorT", bits = "0..=7")]
    #[bitfield(name = "X_unsigned", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "X_extrabit", ty = "libc::c_uint", bits = "9..=9")]
    pub X_op_X_unsigned_X_extrabit: [u8; 2],
    pub X_md: libc::c_ushort,
}
pub type operatorT = libc::c_uint;
pub const O_max: operatorT = 62;
pub const O_md32: operatorT = 61;
pub const O_md31: operatorT = 60;
pub const O_md30: operatorT = 59;
pub const O_md29: operatorT = 58;
pub const O_md28: operatorT = 57;
pub const O_md27: operatorT = 56;
pub const O_md26: operatorT = 55;
pub const O_md25: operatorT = 54;
pub const O_md24: operatorT = 53;
pub const O_md23: operatorT = 52;
pub const O_md22: operatorT = 51;
pub const O_md21: operatorT = 50;
pub const O_md20: operatorT = 49;
pub const O_md19: operatorT = 48;
pub const O_md18: operatorT = 47;
pub const O_md17: operatorT = 46;
pub const O_md16: operatorT = 45;
pub const O_md15: operatorT = 44;
pub const O_md14: operatorT = 43;
pub const O_md13: operatorT = 42;
pub const O_md12: operatorT = 41;
pub const O_md11: operatorT = 40;
pub const O_md10: operatorT = 39;
pub const O_md9: operatorT = 38;
pub const O_md8: operatorT = 37;
pub const O_md7: operatorT = 36;
pub const O_md6: operatorT = 35;
pub const O_md5: operatorT = 34;
pub const O_md4: operatorT = 33;
pub const O_md3: operatorT = 32;
pub const O_md2: operatorT = 31;
pub const O_md1: operatorT = 30;
pub const O_index: operatorT = 29;
pub const O_logical_or: operatorT = 28;
pub const O_logical_and: operatorT = 27;
pub const O_gt: operatorT = 26;
pub const O_ge: operatorT = 25;
pub const O_le: operatorT = 24;
pub const O_lt: operatorT = 23;
pub const O_ne: operatorT = 22;
pub const O_eq: operatorT = 21;
pub const O_subtract: operatorT = 20;
pub const O_add: operatorT = 19;
pub const O_bit_and: operatorT = 18;
pub const O_bit_exclusive_or: operatorT = 17;
pub const O_bit_or_not: operatorT = 16;
pub const O_bit_inclusive_or: operatorT = 15;
pub const O_right_shift: operatorT = 14;
pub const O_left_shift: operatorT = 13;
pub const O_modulus: operatorT = 12;
pub const O_divide: operatorT = 11;
pub const O_multiply: operatorT = 10;
pub const O_logical_not: operatorT = 9;
pub const O_bit_not: operatorT = 8;
pub const O_uminus: operatorT = 7;
pub const O_big: operatorT = 6;
pub const O_register: operatorT = 5;
pub const O_symbol_rva: operatorT = 4;
pub const O_symbol: operatorT = 3;
pub const O_constant: operatorT = 2;
pub const O_absent: operatorT = 1;
pub const O_illegal: operatorT = 0;
pub type symbolS = symbol;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct fix {
    pub fx_next: *mut fix,
    #[bitfield(name = "fx_pcrel", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "fx_done", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "fx_no_overflow", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "fx_signed", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "fx_tcbit", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "fx_tcbit2", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "fx_unused", ty = "libc::c_uint", bits = "6..=15")]
    #[bitfield(name = "fx_pcrel_adjust", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "fx_size", ty = "libc::c_uint", bits = "24..=31")]
    pub fx_pcrel_fx_done_fx_no_overflow_fx_signed_fx_tcbit_fx_tcbit2_fx_unused_fx_pcrel_adjust_fx_size: [u8; 4],
    pub fx_r_type: bfd_reloc_code_real_type,
    pub fx_frag: *mut fragS,
    pub fx_where: libc::c_ulong,
    pub fx_addsy: *mut symbolS,
    pub fx_subsy: *mut symbolS,
    pub fx_offset: valueT,
    pub fx_dot_value: addressT,
    pub fx_dot_frag: *mut fragS,
    pub fx_addnumber: valueT,
    pub fx_file: *const libc::c_char,
    pub fx_line: libc::c_uint,
}
pub type fragS = frag;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct frag {
    pub fr_address: addressT,
    pub last_fr_address: addressT,
    pub fr_fix: valueT,
    pub fr_var: offsetT,
    pub fr_offset: offsetT,
    pub fr_symbol: *mut symbolS,
    pub fr_opcode: *mut libc::c_char,
    pub fr_next: *mut frag,
    pub fr_file: *const libc::c_char,
    pub fr_line: libc::c_uint,
    pub line: *mut list_info_struct,
    #[bitfield(name = "region", ty = "libc::c_uint", bits = "0..=15")]
    #[bitfield(name = "relax_marker", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "has_code", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "insn_addr", ty = "libc::c_uint", bits = "18..=23")]
    pub region_relax_marker_has_code_insn_addr: [u8; 3],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 1],
    pub fr_type: relax_stateT,
    pub fr_subtype: relax_substateT,
    pub tc_frag_data: i386_tc_frag_data,
    pub fr_literal: [libc::c_char; 1],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct i386_tc_frag_data {
    pub u: C2RustUnnamed_25,
    pub padding_address: addressT,
    pub isa: processor_type,
    pub isa_flags: i386_cpu_flags,
    pub tune: processor_type,
    pub max_bytes: libc::c_uint,
    pub length: libc::c_uchar,
    pub last_length: libc::c_uchar,
    pub max_prefix_length: libc::c_uchar,
    pub prefix_length: libc::c_uchar,
    pub default_prefix: libc::c_uchar,
    pub cmp_size: libc::c_uchar,
    #[bitfield(name = "mf_type", ty = "libc::c_uint", bits = "0..=2")]
    #[bitfield(name = "classified", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "branch_type", ty = "libc::c_uint", bits = "4..=6")]
    pub mf_type_classified_branch_type: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 5],
}
pub type processor_type = libc::c_uint;
pub const PROCESSOR_BT: processor_type = 21;
pub const PROCESSOR_ZNVER: processor_type = 20;
pub const PROCESSOR_BD: processor_type = 19;
pub const PROCESSOR_AMDFAM10: processor_type = 18;
pub const PROCESSOR_GENERIC64: processor_type = 17;
pub const PROCESSOR_GENERIC32: processor_type = 16;
pub const PROCESSOR_K8: processor_type = 15;
pub const PROCESSOR_ATHLON: processor_type = 14;
pub const PROCESSOR_K6: processor_type = 13;
pub const PROCESSOR_IAMCU: processor_type = 12;
pub const PROCESSOR_K1OM: processor_type = 11;
pub const PROCESSOR_L1OM: processor_type = 10;
pub const PROCESSOR_COREI7: processor_type = 9;
pub const PROCESSOR_CORE2: processor_type = 8;
pub const PROCESSOR_CORE: processor_type = 7;
pub const PROCESSOR_NOCONA: processor_type = 6;
pub const PROCESSOR_PENTIUM4: processor_type = 5;
pub const PROCESSOR_PENTIUMPRO: processor_type = 4;
pub const PROCESSOR_PENTIUM: processor_type = 3;
pub const PROCESSOR_I486: processor_type = 2;
pub const PROCESSOR_I386: processor_type = 1;
pub const PROCESSOR_UNKNOWN: processor_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub union i386_cpu_flags {
    pub bitfield: C2RustUnnamed_24,
    pub array: [libc::c_uint; 4],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct C2RustUnnamed_24 {
    #[bitfield(name = "cpui186", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "cpui286", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "cpui386", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "cpui486", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "cpui586", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "cpui686", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "cpucmov", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "cpufxsr", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "cpuclflush", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "cpunop", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "cpusyscall", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "cpu8087", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "cpu287", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "cpu387", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "cpu687", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "cpufisttp", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "cpummx", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "cpusse", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "cpusse2", ty = "libc::c_uint", bits = "18..=18")]
    #[bitfield(name = "cpua3dnow", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "cpua3dnowa", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "cpusse3", ty = "libc::c_uint", bits = "21..=21")]
    #[bitfield(name = "cpupadlock", ty = "libc::c_uint", bits = "22..=22")]
    #[bitfield(name = "cpusvme", ty = "libc::c_uint", bits = "23..=23")]
    #[bitfield(name = "cpuvmx", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "cpusmx", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "cpussse3", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "cpusse4a", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "cpulzcnt", ty = "libc::c_uint", bits = "28..=28")]
    #[bitfield(name = "cpupopcnt", ty = "libc::c_uint", bits = "29..=29")]
    #[bitfield(name = "cpusse4_1", ty = "libc::c_uint", bits = "30..=30")]
    #[bitfield(name = "cpusse4_2", ty = "libc::c_uint", bits = "31..=31")]
    #[bitfield(name = "cpuavx", ty = "libc::c_uint", bits = "32..=32")]
    #[bitfield(name = "cpuavx2", ty = "libc::c_uint", bits = "33..=33")]
    #[bitfield(name = "cpuavx512f", ty = "libc::c_uint", bits = "34..=34")]
    #[bitfield(name = "cpuavx512cd", ty = "libc::c_uint", bits = "35..=35")]
    #[bitfield(name = "cpuavx512er", ty = "libc::c_uint", bits = "36..=36")]
    #[bitfield(name = "cpuavx512pf", ty = "libc::c_uint", bits = "37..=37")]
    #[bitfield(name = "cpuavx512vl", ty = "libc::c_uint", bits = "38..=38")]
    #[bitfield(name = "cpuavx512dq", ty = "libc::c_uint", bits = "39..=39")]
    #[bitfield(name = "cpuavx512bw", ty = "libc::c_uint", bits = "40..=40")]
    #[bitfield(name = "cpul1om", ty = "libc::c_uint", bits = "41..=41")]
    #[bitfield(name = "cpuk1om", ty = "libc::c_uint", bits = "42..=42")]
    #[bitfield(name = "cpuiamcu", ty = "libc::c_uint", bits = "43..=43")]
    #[bitfield(name = "cpuxsave", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "cpuxsaveopt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "cpuaes", ty = "libc::c_uint", bits = "46..=46")]
    #[bitfield(name = "cpupclmul", ty = "libc::c_uint", bits = "47..=47")]
    #[bitfield(name = "cpufma", ty = "libc::c_uint", bits = "48..=48")]
    #[bitfield(name = "cpufma4", ty = "libc::c_uint", bits = "49..=49")]
    #[bitfield(name = "cpuxop", ty = "libc::c_uint", bits = "50..=50")]
    #[bitfield(name = "cpulwp", ty = "libc::c_uint", bits = "51..=51")]
    #[bitfield(name = "cpubmi", ty = "libc::c_uint", bits = "52..=52")]
    #[bitfield(name = "cputbm", ty = "libc::c_uint", bits = "53..=53")]
    #[bitfield(name = "cpumovbe", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "cpucx16", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "cpuept", ty = "libc::c_uint", bits = "56..=56")]
    #[bitfield(name = "cpurdtscp", ty = "libc::c_uint", bits = "57..=57")]
    #[bitfield(name = "cpufsgsbase", ty = "libc::c_uint", bits = "58..=58")]
    #[bitfield(name = "cpurdrnd", ty = "libc::c_uint", bits = "59..=59")]
    #[bitfield(name = "cpuf16c", ty = "libc::c_uint", bits = "60..=60")]
    #[bitfield(name = "cpubmi2", ty = "libc::c_uint", bits = "61..=61")]
    #[bitfield(name = "cpuhle", ty = "libc::c_uint", bits = "62..=62")]
    #[bitfield(name = "cpurtm", ty = "libc::c_uint", bits = "63..=63")]
    #[bitfield(name = "cpuinvpcid", ty = "libc::c_uint", bits = "64..=64")]
    #[bitfield(name = "cpuvmfunc", ty = "libc::c_uint", bits = "65..=65")]
    #[bitfield(name = "cpumpx", ty = "libc::c_uint", bits = "66..=66")]
    #[bitfield(name = "cpulm", ty = "libc::c_uint", bits = "67..=67")]
    #[bitfield(name = "cpurdseed", ty = "libc::c_uint", bits = "68..=68")]
    #[bitfield(name = "cpuadx", ty = "libc::c_uint", bits = "69..=69")]
    #[bitfield(name = "cpuprfchw", ty = "libc::c_uint", bits = "70..=70")]
    #[bitfield(name = "cpusmap", ty = "libc::c_uint", bits = "71..=71")]
    #[bitfield(name = "cpusha", ty = "libc::c_uint", bits = "72..=72")]
    #[bitfield(name = "cpuclflushopt", ty = "libc::c_uint", bits = "73..=73")]
    #[bitfield(name = "cpuxsaves", ty = "libc::c_uint", bits = "74..=74")]
    #[bitfield(name = "cpuxsavec", ty = "libc::c_uint", bits = "75..=75")]
    #[bitfield(name = "cpuprefetchwt1", ty = "libc::c_uint", bits = "76..=76")]
    #[bitfield(name = "cpuse1", ty = "libc::c_uint", bits = "77..=77")]
    #[bitfield(name = "cpuclwb", ty = "libc::c_uint", bits = "78..=78")]
    #[bitfield(name = "cpuavx512ifma", ty = "libc::c_uint", bits = "79..=79")]
    #[bitfield(name = "cpuavx512vbmi", ty = "libc::c_uint", bits = "80..=80")]
    #[bitfield(name = "cpuavx512_4fmaps", ty = "libc::c_uint", bits = "81..=81")]
    #[bitfield(name = "cpuavx512_4vnniw", ty = "libc::c_uint", bits = "82..=82")]
    #[bitfield(name = "cpuavx512_vpopcntdq", ty = "libc::c_uint", bits = "83..=83")]
    #[bitfield(name = "cpuavx512_vbmi2", ty = "libc::c_uint", bits = "84..=84")]
    #[bitfield(name = "cpuavx512_vnni", ty = "libc::c_uint", bits = "85..=85")]
    #[bitfield(name = "cpuavx512_bitalg", ty = "libc::c_uint", bits = "86..=86")]
    #[bitfield(name = "cpuavx512_bf16", ty = "libc::c_uint", bits = "87..=87")]
    #[bitfield(name = "cpuavx512_vp2intersect", ty = "libc::c_uint", bits = "88..=88")]
    #[bitfield(name = "cputdx", ty = "libc::c_uint", bits = "89..=89")]
    #[bitfield(name = "cpuavx_vnni", ty = "libc::c_uint", bits = "90..=90")]
    #[bitfield(name = "cpumwaitx", ty = "libc::c_uint", bits = "91..=91")]
    #[bitfield(name = "cpuclzero", ty = "libc::c_uint", bits = "92..=92")]
    #[bitfield(name = "cpuospke", ty = "libc::c_uint", bits = "93..=93")]
    #[bitfield(name = "cpurdpid", ty = "libc::c_uint", bits = "94..=94")]
    #[bitfield(name = "cpuptwrite", ty = "libc::c_uint", bits = "95..=95")]
    #[bitfield(name = "cpuibt", ty = "libc::c_uint", bits = "96..=96")]
    #[bitfield(name = "cpushstk", ty = "libc::c_uint", bits = "97..=97")]
    #[bitfield(name = "cpuamx_int8", ty = "libc::c_uint", bits = "98..=98")]
    #[bitfield(name = "cpuamx_bf16", ty = "libc::c_uint", bits = "99..=99")]
    #[bitfield(name = "cpuamx_tile", ty = "libc::c_uint", bits = "100..=100")]
    #[bitfield(name = "cpugfni", ty = "libc::c_uint", bits = "101..=101")]
    #[bitfield(name = "cpuvaes", ty = "libc::c_uint", bits = "102..=102")]
    #[bitfield(name = "cpuvpclmulqdq", ty = "libc::c_uint", bits = "103..=103")]
    #[bitfield(name = "cpuwbnoinvd", ty = "libc::c_uint", bits = "104..=104")]
    #[bitfield(name = "cpupconfig", ty = "libc::c_uint", bits = "105..=105")]
    #[bitfield(name = "cpuwaitpkg", ty = "libc::c_uint", bits = "106..=106")]
    #[bitfield(name = "cpuuintr", ty = "libc::c_uint", bits = "107..=107")]
    #[bitfield(name = "cpucldemote", ty = "libc::c_uint", bits = "108..=108")]
    #[bitfield(name = "cpumovdiri", ty = "libc::c_uint", bits = "109..=109")]
    #[bitfield(name = "cpumovdir64b", ty = "libc::c_uint", bits = "110..=110")]
    #[bitfield(name = "cpuenqcmd", ty = "libc::c_uint", bits = "111..=111")]
    #[bitfield(name = "cpuserialize", ty = "libc::c_uint", bits = "112..=112")]
    #[bitfield(name = "cpurdpru", ty = "libc::c_uint", bits = "113..=113")]
    #[bitfield(name = "cpumcommit", ty = "libc::c_uint", bits = "114..=114")]
    #[bitfield(name = "cpusev_es", ty = "libc::c_uint", bits = "115..=115")]
    #[bitfield(name = "cputsxldtrk", ty = "libc::c_uint", bits = "116..=116")]
    #[bitfield(name = "cpukl", ty = "libc::c_uint", bits = "117..=117")]
    #[bitfield(name = "cpuwidekl", ty = "libc::c_uint", bits = "118..=118")]
    #[bitfield(name = "cpuhreset", ty = "libc::c_uint", bits = "119..=119")]
    #[bitfield(name = "cpuinvlpgb", ty = "libc::c_uint", bits = "120..=120")]
    #[bitfield(name = "cputlbsync", ty = "libc::c_uint", bits = "121..=121")]
    #[bitfield(name = "cpusnp", ty = "libc::c_uint", bits = "122..=122")]
    #[bitfield(name = "cpu64", ty = "libc::c_uint", bits = "123..=123")]
    #[bitfield(name = "cpuno64", ty = "libc::c_uint", bits = "124..=124")]
    #[bitfield(name = "unused", ty = "libc::c_uint", bits = "125..=127")]
    pub cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [u8; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_25 {
    pub padding_fragP: *mut fragS,
    pub branch_fragP: *mut fragS,
}
pub type expr_mode = libc::c_uint;
pub const expr_defer: expr_mode = 2;
pub const expr_normal: expr_mode = 1;
pub const expr_evaluate: expr_mode = 0;
pub type operator_rankT = libc::c_char;
pub type Elf_Internal_Sym = elf_internal_sym;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_note {
    pub namesz: libc::c_ulong,
    pub descsz: libc::c_ulong,
    pub type_0: libc::c_ulong,
    pub namedata: *mut libc::c_char,
    pub descdata: *mut libc::c_char,
    pub descpos: bfd_vma,
}
pub type Elf_Internal_Note = elf_internal_note;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_rela {
    pub r_offset: bfd_vma,
    pub r_info: bfd_vma,
    pub r_addend: bfd_vma,
}
pub type Elf_Internal_Rela = elf_internal_rela;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_internal_dyn {
    pub d_tag: bfd_vma,
    pub d_un: C2RustUnnamed_26,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_26 {
    pub d_val: bfd_vma,
    pub d_ptr: bfd_vma,
}
pub type Elf_Internal_Dyn = elf_internal_dyn;
pub type notice_asneeded_action = libc::c_uint;
pub const notice_needed: notice_asneeded_action = 2;
pub const notice_not_needed: notice_asneeded_action = 1;
pub const notice_as_needed: notice_asneeded_action = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_symbol_type {
    pub symbol: asymbol,
    pub internal_elf_sym: Elf_Internal_Sym,
    pub tc_data: C2RustUnnamed_27,
    pub version: libc::c_ushort,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_27 {
    pub hppa_arg_reloc: libc::c_uint,
    pub mips_extr: *mut libc::c_void,
    pub any: *mut libc::c_void,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct eh_cie_fde {
    pub u: C2RustUnnamed_28,
    pub reloc_index: libc::c_uint,
    pub size: libc::c_uint,
    pub offset: libc::c_uint,
    pub new_offset: libc::c_uint,
    #[bitfield(name = "fde_encoding", ty = "libc::c_uint", bits = "0..=7")]
    #[bitfield(name = "lsda_encoding", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "lsda_offset", ty = "libc::c_uint", bits = "16..=23")]
    #[bitfield(name = "cie", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "removed", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "add_augmentation_size", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "make_relative", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "28..=31")]
    pub fde_encoding_lsda_encoding_lsda_offset_cie_removed_add_augmentation_size_make_relative_pad1: [u8; 4],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 4],
    pub set_loc: *mut libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_28 {
    pub fde: C2RustUnnamed_31,
    pub cie: C2RustUnnamed_29,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct C2RustUnnamed_29 {
    pub u: C2RustUnnamed_30,
    #[bitfield(name = "personality_offset", ty = "libc::c_uint", bits = "0..=7")]
    #[bitfield(name = "aug_str_len", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "aug_data_len", ty = "libc::c_uint", bits = "11..=15")]
    #[bitfield(name = "gc_mark", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "make_lsda_relative", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "make_per_encoding_relative", ty = "libc::c_uint", bits = "18..=18")]
    #[bitfield(name = "per_encoding_relative", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "per_encoding_aligned8", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "add_fde_encoding", ty = "libc::c_uint", bits = "21..=21")]
    #[bitfield(name = "merged", ty = "libc::c_uint", bits = "22..=22")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "23..=31")]
    pub personality_offset_aug_str_len_aug_data_len_gc_mark_make_lsda_relative_make_per_encoding_relative_per_encoding_relative_per_encoding_aligned8_add_fde_encoding_merged_pad1: [u8; 4],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_30 {
    pub full_cie: *mut cie,
    pub merged_with: *mut eh_cie_fde,
    pub sec: *mut asection,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_31 {
    pub cie_inf: *mut eh_cie_fde,
    pub next_for_section: *mut eh_cie_fde,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct htab {
    pub hash_f: htab_hash,
    pub eq_f: htab_eq,
    pub del_f: htab_del,
    pub entries: *mut *mut libc::c_void,
    pub size: size_t,
    pub n_elements: size_t,
    pub n_deleted: size_t,
    pub searches: libc::c_uint,
    pub collisions: libc::c_uint,
    pub alloc_f: htab_alloc,
    pub free_f: htab_free,
    pub alloc_arg: *mut libc::c_void,
    pub alloc_with_arg_f: htab_alloc_with_arg,
    pub free_with_arg_f: htab_free_with_arg,
    pub size_prime_index: libc::c_uint,
}
pub type htab_free_with_arg = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> (),
>;
pub type htab_alloc_with_arg = Option::<
    unsafe extern "C" fn(*mut libc::c_void, size_t, size_t) -> *mut libc::c_void,
>;
pub type htab_free = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type htab_alloc = Option::<
    unsafe extern "C" fn(size_t, size_t) -> *mut libc::c_void,
>;
pub type htab_del = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type htab_eq = Option::<
    unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
>;
pub type htab_hash = Option::<unsafe extern "C" fn(*const libc::c_void) -> hashval_t>;
pub type hashval_t = libc::c_uint;
pub type elf_target_os = libc::c_uint;
pub const is_nacl: elf_target_os = 3;
pub const is_vxworks: elf_target_os = 2;
pub const is_solaris: elf_target_os = 1;
pub const is_normal: elf_target_os = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_size_info {
    pub sizeof_ehdr: libc::c_uchar,
    pub sizeof_phdr: libc::c_uchar,
    pub sizeof_shdr: libc::c_uchar,
    pub sizeof_rel: libc::c_uchar,
    pub sizeof_rela: libc::c_uchar,
    pub sizeof_sym: libc::c_uchar,
    pub sizeof_dyn: libc::c_uchar,
    pub sizeof_note: libc::c_uchar,
    pub sizeof_hash_entry: libc::c_uchar,
    pub int_rels_per_ext_rel: libc::c_uchar,
    pub arch_size: libc::c_uchar,
    pub log_file_align: libc::c_uchar,
    pub elfclass: libc::c_uchar,
    pub ev_current: libc::c_uchar,
    pub write_out_phdrs: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *const Elf_Internal_Phdr,
            libc::c_uint,
        ) -> libc::c_int,
    >,
    pub write_shdrs_and_ehdr: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub checksum_contents: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            Option::<
                unsafe extern "C" fn(
                    *const libc::c_void,
                    size_t,
                    *mut libc::c_void,
                ) -> (),
            >,
            *mut libc::c_void,
        ) -> bool,
    >,
    pub write_relocs: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection, *mut libc::c_void) -> (),
    >,
    pub swap_symbol_in: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *const libc::c_void,
            *const libc::c_void,
            *mut Elf_Internal_Sym,
        ) -> bool,
    >,
    pub swap_symbol_out: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *const Elf_Internal_Sym,
            *mut libc::c_void,
            *mut libc::c_void,
        ) -> (),
    >,
    pub slurp_reloc_table: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection, *mut *mut asymbol, bool) -> bool,
    >,
    pub slurp_symbol_table: Option::<
        unsafe extern "C" fn(*mut bfd, *mut *mut asymbol, bool) -> libc::c_long,
    >,
    pub swap_dyn_in: Option::<
        unsafe extern "C" fn(*mut bfd, *const libc::c_void, *mut Elf_Internal_Dyn) -> (),
    >,
    pub swap_dyn_out: Option::<
        unsafe extern "C" fn(*mut bfd, *const Elf_Internal_Dyn, *mut libc::c_void) -> (),
    >,
    pub swap_reloc_in: Option::<
        unsafe extern "C" fn(*mut bfd, *const bfd_byte, *mut Elf_Internal_Rela) -> (),
    >,
    pub swap_reloc_out: Option::<
        unsafe extern "C" fn(*mut bfd, *const Elf_Internal_Rela, *mut bfd_byte) -> (),
    >,
    pub swap_reloca_in: Option::<
        unsafe extern "C" fn(*mut bfd, *const bfd_byte, *mut Elf_Internal_Rela) -> (),
    >,
    pub swap_reloca_out: Option::<
        unsafe extern "C" fn(*mut bfd, *const Elf_Internal_Rela, *mut bfd_byte) -> (),
    >,
}
pub type elf_reloc_type_class = libc::c_uint;
pub const reloc_class_plt: elf_reloc_type_class = 4;
pub const reloc_class_ifunc: elf_reloc_type_class = 3;
pub const reloc_class_copy: elf_reloc_type_class = 2;
pub const reloc_class_relative: elf_reloc_type_class = 1;
pub const reloc_class_normal: elf_reloc_type_class = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct elf_reloc_cookie {
    pub rels: *mut Elf_Internal_Rela,
    pub rel: *mut Elf_Internal_Rela,
    pub relend: *mut Elf_Internal_Rela,
    pub locsyms: *mut Elf_Internal_Sym,
    pub abfd: *mut bfd,
    pub locsymcount: size_t,
    pub extsymoff: size_t,
    pub sym_hashes: *mut *mut elf_link_hash_entry,
    pub r_sym_shift: libc::c_int,
    pub bad_symtab: bool,
}
pub type irix_compat_t = libc::c_uint;
pub const ict_irix6: irix_compat_t = 2;
pub const ict_irix5: irix_compat_t = 1;
pub const ict_none: irix_compat_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_special_section {
    pub prefix: *const libc::c_char,
    pub prefix_length: libc::c_uint,
    pub suffix_length: libc::c_int,
    pub type_0: libc::c_uint,
    pub attr: bfd_vma,
}
pub type elf_gc_mark_hook_fn = Option::<
    unsafe extern "C" fn(
        *mut asection,
        *mut bfd_link_info,
        *mut Elf_Internal_Rela,
        *mut elf_link_hash_entry,
        *mut Elf_Internal_Sym,
    ) -> *mut asection,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_section_reloc_data {
    pub hdr: *mut Elf_Internal_Shdr,
    pub count: libc::c_uint,
    pub idx: libc::c_int,
    pub hashes: *mut *mut elf_link_hash_entry,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct elf_backend_data {
    pub arch: bfd_architecture,
    pub target_id: elf_target_id,
    pub target_os: elf_target_os,
    pub elf_machine_code: libc::c_int,
    pub elf_osabi: libc::c_int,
    pub maxpagesize: bfd_vma,
    pub minpagesize: bfd_vma,
    pub commonpagesize: bfd_vma,
    pub relropagesize: bfd_vma,
    pub dynamic_sec_flags: flagword,
    pub arch_data: *const libc::c_void,
    pub elf_info_to_howto: Option::<
        unsafe extern "C" fn(*mut bfd, *mut arelent, *mut Elf_Internal_Rela) -> bool,
    >,
    pub elf_info_to_howto_rel: Option::<
        unsafe extern "C" fn(*mut bfd, *mut arelent, *mut Elf_Internal_Rela) -> bool,
    >,
    pub elf_backend_sym_is_global: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asymbol) -> bool,
    >,
    pub elf_backend_object_p: Option::<unsafe extern "C" fn(*mut bfd) -> bool>,
    pub elf_backend_symbol_processing: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asymbol) -> (),
    >,
    pub elf_backend_symbol_table_processing: Option::<
        unsafe extern "C" fn(*mut bfd, *mut elf_symbol_type, libc::c_uint) -> bool,
    >,
    pub elf_backend_get_symbol_type: Option::<
        unsafe extern "C" fn(*mut Elf_Internal_Sym, libc::c_int) -> libc::c_int,
    >,
    pub elf_backend_archive_symbol_lookup: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *const libc::c_char,
        ) -> *mut bfd_link_hash_entry,
    >,
    pub elf_backend_name_local_section_symbols: Option::<
        unsafe extern "C" fn(*mut bfd) -> bool,
    >,
    pub elf_backend_section_processing: Option::<
        unsafe extern "C" fn(*mut bfd, *mut Elf_Internal_Shdr) -> bool,
    >,
    pub elf_backend_section_from_shdr: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut Elf_Internal_Shdr,
            *const libc::c_char,
            libc::c_int,
        ) -> bool,
    >,
    pub elf_backend_section_flags: Option::<
        unsafe extern "C" fn(*const Elf_Internal_Shdr) -> bool,
    >,
    pub get_sec_type_attr: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection) -> *const bfd_elf_special_section,
    >,
    pub elf_backend_section_from_phdr: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut Elf_Internal_Phdr,
            libc::c_int,
            *const libc::c_char,
        ) -> bool,
    >,
    pub elf_backend_fake_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut Elf_Internal_Shdr, *mut asection) -> bool,
    >,
    pub elf_backend_section_from_bfd_section: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection, *mut libc::c_int) -> bool,
    >,
    pub elf_add_symbol_hook: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut Elf_Internal_Sym,
            *mut *const libc::c_char,
            *mut flagword,
            *mut *mut asection,
            *mut bfd_vma,
        ) -> bool,
    >,
    pub elf_backend_link_output_symbol_hook: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *const libc::c_char,
            *mut Elf_Internal_Sym,
            *mut asection,
            *mut elf_link_hash_entry,
        ) -> libc::c_int,
    >,
    pub elf_backend_create_dynamic_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_omit_section_dynsym: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info, *mut asection) -> bool,
    >,
    pub relocs_compatible: Option::<
        unsafe extern "C" fn(*const bfd_target, *const bfd_target) -> bool,
    >,
    pub check_relocs: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut asection,
            *const Elf_Internal_Rela,
        ) -> bool,
    >,
    pub check_directives: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub notice_as_needed: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            notice_asneeded_action,
        ) -> bool,
    >,
    pub elf_backend_adjust_dynamic_symbol: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut elf_link_hash_entry) -> bool,
    >,
    pub elf_backend_always_size_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_size_dynamic_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_strip_zero_sized_dynamic_sections: Option::<
        unsafe extern "C" fn(*mut bfd_link_info) -> bool,
    >,
    pub elf_backend_init_index_section: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> (),
    >,
    pub elf_backend_relocate_section: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut bfd,
            *mut asection,
            *mut bfd_byte,
            *mut Elf_Internal_Rela,
            *mut Elf_Internal_Sym,
            *mut *mut asection,
        ) -> libc::c_int,
    >,
    pub elf_backend_finish_dynamic_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut elf_link_hash_entry,
            *mut Elf_Internal_Sym,
        ) -> bool,
    >,
    pub elf_backend_finish_dynamic_sections: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_begin_write_processing: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> (),
    >,
    pub elf_backend_final_write_processing: Option::<
        unsafe extern "C" fn(*mut bfd) -> bool,
    >,
    pub elf_backend_additional_program_headers: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> libc::c_int,
    >,
    pub elf_backend_modify_segment_map: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_modify_headers: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_allow_non_load_phdr: Option::<
        unsafe extern "C" fn(*mut bfd, *const Elf_Internal_Phdr, libc::c_uint) -> bool,
    >,
    pub gc_keep: Option::<unsafe extern "C" fn(*mut bfd_link_info) -> ()>,
    pub gc_mark_dynamic_ref: Option::<
        unsafe extern "C" fn(*mut elf_link_hash_entry, *mut libc::c_void) -> bool,
    >,
    pub gc_mark_hook: elf_gc_mark_hook_fn,
    pub gc_mark_extra_sections: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, elf_gc_mark_hook_fn) -> bool,
    >,
    pub elf_backend_init_file_header: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_print_symbol_all: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut libc::c_void,
            *mut asymbol,
        ) -> *const libc::c_char,
    >,
    pub elf_backend_output_arch_local_syms: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut libc::c_void,
            Option::<
                unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const libc::c_char,
                    *mut Elf_Internal_Sym,
                    *mut asection,
                    *mut elf_link_hash_entry,
                ) -> libc::c_int,
            >,
        ) -> bool,
    >,
    pub elf_backend_output_arch_syms: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut libc::c_void,
            Option::<
                unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const libc::c_char,
                    *mut Elf_Internal_Sym,
                    *mut asection,
                    *mut elf_link_hash_entry,
                ) -> libc::c_int,
            >,
        ) -> bool,
    >,
    pub elf_backend_filter_implib_symbols: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut *mut asymbol,
            libc::c_long,
        ) -> libc::c_uint,
    >,
    pub elf_backend_copy_indirect_symbol: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut elf_link_hash_entry,
            *mut elf_link_hash_entry,
        ) -> (),
    >,
    pub elf_backend_hide_symbol: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut elf_link_hash_entry, bool) -> (),
    >,
    pub elf_backend_fixup_symbol: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut elf_link_hash_entry) -> bool,
    >,
    pub elf_backend_merge_symbol_attribute: Option::<
        unsafe extern "C" fn(*mut elf_link_hash_entry, libc::c_uint, bool, bool) -> (),
    >,
    pub elf_backend_get_target_dtag: Option::<
        unsafe extern "C" fn(bfd_vma) -> *mut libc::c_char,
    >,
    pub elf_backend_ignore_undef_symbol: Option::<
        unsafe extern "C" fn(*mut elf_link_hash_entry) -> bool,
    >,
    pub elf_backend_emit_relocs: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut asection,
            *mut Elf_Internal_Shdr,
            *mut Elf_Internal_Rela,
            *mut *mut elf_link_hash_entry,
        ) -> bool,
    >,
    pub elf_backend_update_relocs: Option::<
        unsafe extern "C" fn(*mut asection, *mut bfd_elf_section_reloc_data) -> (),
    >,
    pub elf_backend_count_relocs: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut asection) -> libc::c_uint,
    >,
    pub elf_backend_count_additional_relocs: Option::<
        unsafe extern "C" fn(*mut asection) -> libc::c_uint,
    >,
    pub sort_relocs_p: Option::<unsafe extern "C" fn(*mut asection) -> bool>,
    pub elf_backend_grok_prstatus: Option::<
        unsafe extern "C" fn(*mut bfd, *mut Elf_Internal_Note) -> bool,
    >,
    pub elf_backend_grok_psinfo: Option::<
        unsafe extern "C" fn(*mut bfd, *mut Elf_Internal_Note) -> bool,
    >,
    pub elf_backend_grok_freebsd_prstatus: Option::<
        unsafe extern "C" fn(*mut bfd, *mut Elf_Internal_Note) -> bool,
    >,
    pub elf_backend_write_core_note: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut libc::c_char,
            *mut libc::c_int,
            libc::c_int,
            ...
        ) -> *mut libc::c_char,
    >,
    pub elf_backend_lookup_section_flags_hook: Option::<
        unsafe extern "C" fn(*mut libc::c_char) -> flagword,
    >,
    pub elf_backend_reloc_type_class: Option::<
        unsafe extern "C" fn(
            *const bfd_link_info,
            *const asection,
            *const Elf_Internal_Rela,
        ) -> elf_reloc_type_class,
    >,
    pub elf_backend_discard_info: Option::<
        unsafe extern "C" fn(*mut bfd, *mut elf_reloc_cookie, *mut bfd_link_info) -> bool,
    >,
    pub elf_backend_ignore_discarded_relocs: Option::<
        unsafe extern "C" fn(*mut asection) -> bool,
    >,
    pub action_discarded: Option::<unsafe extern "C" fn(*mut asection) -> libc::c_uint>,
    pub elf_backend_eh_frame_address_size: Option::<
        unsafe extern "C" fn(*mut bfd, *const asection) -> libc::c_uint,
    >,
    pub elf_backend_can_make_relative_eh_frame: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info, *mut asection) -> bool,
    >,
    pub elf_backend_can_make_lsda_relative_eh_frame: Option::<
        unsafe extern "C" fn(*mut bfd, *mut bfd_link_info, *mut asection) -> bool,
    >,
    pub elf_backend_encode_eh_address: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut asection,
            bfd_vma,
            *mut asection,
            bfd_vma,
            *mut bfd_vma,
        ) -> bfd_byte,
    >,
    pub elf_backend_write_section: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut asection,
            *mut bfd_byte,
        ) -> bool,
    >,
    pub elf_backend_elfsym_local_is_section: Option::<
        unsafe extern "C" fn(*mut bfd) -> bool,
    >,
    pub elf_backend_mips_irix_compat: Option::<
        unsafe extern "C" fn(*mut bfd) -> irix_compat_t,
    >,
    pub elf_backend_mips_rtype_to_howto: Option::<
        unsafe extern "C" fn(*mut bfd, libc::c_uint, bool) -> *const reloc_howto_type,
    >,
    pub elf_backend_ecoff_debug_swap: *const ecoff_debug_swap,
    pub elf_backend_bfd_from_remote_memory: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            bfd_vma,
            bfd_size_type,
            *mut bfd_vma,
            Option::<
                unsafe extern "C" fn(
                    bfd_vma,
                    *mut bfd_byte,
                    bfd_size_type,
                ) -> libc::c_int,
            >,
        ) -> *mut bfd,
    >,
    pub elf_backend_core_find_build_id: Option::<
        unsafe extern "C" fn(*mut bfd, bfd_vma) -> bool,
    >,
    pub plt_sym_val: Option::<
        unsafe extern "C" fn(bfd_vma, *const asection, *const arelent) -> bfd_vma,
    >,
    pub common_definition: Option::<unsafe extern "C" fn(*mut Elf_Internal_Sym) -> bool>,
    pub common_section_index: Option::<
        unsafe extern "C" fn(*mut asection) -> libc::c_uint,
    >,
    pub common_section: Option::<unsafe extern "C" fn(*mut asection) -> *mut asection>,
    pub merge_symbol: Option::<
        unsafe extern "C" fn(
            *mut elf_link_hash_entry,
            *const Elf_Internal_Sym,
            *mut *mut asection,
            bool,
            bool,
            *mut bfd,
            *const asection,
        ) -> bool,
    >,
    pub elf_hash_symbol: Option::<
        unsafe extern "C" fn(*mut elf_link_hash_entry) -> bool,
    >,
    pub record_xhash_symbol: Option::<
        unsafe extern "C" fn(*mut elf_link_hash_entry, bfd_vma) -> (),
    >,
    pub is_function_type: Option::<unsafe extern "C" fn(libc::c_uint) -> bool>,
    pub maybe_function_sym: Option::<
        unsafe extern "C" fn(
            *const asymbol,
            *mut asection,
            *mut bfd_vma,
        ) -> bfd_size_type,
    >,
    pub get_reloc_section: Option::<
        unsafe extern "C" fn(*mut bfd, *const libc::c_char) -> *mut asection,
    >,
    pub elf_backend_copy_special_section_fields: Option::<
        unsafe extern "C" fn(
            *const bfd,
            *mut bfd,
            *const Elf_Internal_Shdr,
            *mut Elf_Internal_Shdr,
        ) -> bool,
    >,
    pub link_order_error_handler: Option::<
        unsafe extern "C" fn(*const libc::c_char, ...) -> (),
    >,
    pub relplt_name: *const libc::c_char,
    pub elf_machine_alt1: libc::c_int,
    pub elf_machine_alt2: libc::c_int,
    pub s: *const elf_size_info,
    pub special_sections: *const bfd_elf_special_section,
    pub got_header_size: bfd_vma,
    pub got_elt_size: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut bfd_link_info,
            *mut elf_link_hash_entry,
            *mut bfd,
            libc::c_ulong,
        ) -> bfd_vma,
    >,
    pub obj_attrs_vendor: *const libc::c_char,
    pub obj_attrs_section: *const libc::c_char,
    pub obj_attrs_arg_type: Option::<unsafe extern "C" fn(libc::c_int) -> libc::c_int>,
    pub obj_attrs_section_type: libc::c_uint,
    pub obj_attrs_order: Option::<unsafe extern "C" fn(libc::c_int) -> libc::c_int>,
    pub obj_attrs_handle_unknown: Option::<
        unsafe extern "C" fn(*mut bfd, libc::c_int) -> bool,
    >,
    pub parse_gnu_properties: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            libc::c_uint,
            *mut bfd_byte,
            libc::c_uint,
        ) -> elf_property_kind,
    >,
    pub merge_gnu_properties: Option::<
        unsafe extern "C" fn(
            *mut bfd_link_info,
            *mut bfd,
            *mut bfd,
            *mut elf_property,
            *mut elf_property,
        ) -> bool,
    >,
    pub setup_gnu_properties: Option::<
        unsafe extern "C" fn(*mut bfd_link_info) -> *mut bfd,
    >,
    pub fixup_gnu_properties: Option::<
        unsafe extern "C" fn(*mut bfd_link_info, *mut *mut elf_property_list) -> (),
    >,
    pub compact_eh_encoding: Option::<
        unsafe extern "C" fn(*mut bfd_link_info) -> libc::c_int,
    >,
    pub cant_unwind_opcode: Option::<
        unsafe extern "C" fn(*mut bfd_link_info) -> libc::c_int,
    >,
    pub symbol_section_index: Option::<
        unsafe extern "C" fn(*mut bfd, *mut elf_symbol_type) -> libc::c_uint,
    >,
    pub init_secondary_reloc_section: Option::<
        unsafe extern "C" fn(
            *mut bfd,
            *mut Elf_Internal_Shdr,
            *const libc::c_char,
            libc::c_uint,
        ) -> bool,
    >,
    pub slurp_secondary_relocs: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection, *mut *mut asymbol, bool) -> bool,
    >,
    pub write_secondary_relocs: Option::<
        unsafe extern "C" fn(*mut bfd, *mut asection) -> bool,
    >,
    pub static_tls_alignment: libc::c_uint,
    pub stack_align: libc::c_uint,
    pub elf_strtab_flags: libc::c_ulong,
    #[bitfield(name = "collect", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "type_change_ok", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "may_use_rel_p", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "may_use_rela_p", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "default_use_rela_p", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "rela_plts_and_copies_p", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "rela_normal", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "dtrel_excludes_plt", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "sign_extend_vma", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "want_got_plt", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "plt_readonly", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "want_plt_sym", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "plt_not_loaded", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "plt_alignment", ty = "libc::c_uint", bits = "13..=16")]
    #[bitfield(name = "can_gc_sections", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "can_refcount", ty = "libc::c_uint", bits = "18..=18")]
    #[bitfield(name = "want_got_sym", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "want_dynbss", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "want_dynrelro", ty = "libc::c_uint", bits = "21..=21")]
    #[bitfield(name = "want_p_paddr_set_to_zero", ty = "libc::c_uint", bits = "22..=22")]
    #[bitfield(name = "no_page_alias", ty = "libc::c_uint", bits = "23..=23")]
    #[bitfield(name = "default_execstack", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "caches_rawsize", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "extern_protected_data", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "always_renumber_dynsyms", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "linux_prpsinfo32_ugid16", ty = "libc::c_uint", bits = "28..=28")]
    #[bitfield(name = "linux_prpsinfo64_ugid16", ty = "libc::c_uint", bits = "29..=29")]
    pub collect_type_change_ok_may_use_rel_p_may_use_rela_p_default_use_rela_p_rela_plts_and_copies_p_rela_normal_dtrel_excludes_plt_sign_extend_vma_want_got_plt_plt_readonly_want_plt_sym_plt_not_loaded_plt_alignment_can_gc_sections_can_refcount_want_got_sym_want_dynbss_want_dynrelro_want_p_paddr_set_to_zero_no_page_alias_default_execstack_caches_rawsize_extern_protected_data_always_renumber_dynsyms_linux_prpsinfo32_ugid16_linux_prpsinfo64_ugid16: [u8; 4],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bfd_elf_section_data {
    pub this_hdr: Elf_Internal_Shdr,
    pub section_flag_info: *mut flag_info,
    pub rel: bfd_elf_section_reloc_data,
    pub rela: bfd_elf_section_reloc_data,
    pub this_idx: libc::c_int,
    pub dynindx: libc::c_int,
    pub linked_to: *mut asection,
    pub relocs: *mut Elf_Internal_Rela,
    pub local_dynrel: *mut libc::c_void,
    pub sreloc: *mut asection,
    pub group: C2RustUnnamed_32,
    pub sec_group: *mut asection,
    pub next_in_group: *mut asection,
    pub fde_list: *mut eh_cie_fde,
    pub eh_frame_entry: *mut asection,
    pub has_secondary_relocs: bool,
    pub sec_info: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_32 {
    pub name: *const libc::c_char,
    pub id: *mut bfd_symbol,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct i386_opcode_modifier {
    #[bitfield(name = "d", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "w", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "load", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "modrm", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "jump", ty = "libc::c_uint", bits = "4..=6")]
    #[bitfield(name = "floatmf", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "floatr", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "size", ty = "libc::c_uint", bits = "9..=10")]
    #[bitfield(name = "checkregsize", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "mnemonicsize", ty = "libc::c_uint", bits = "12..=13")]
    #[bitfield(name = "anysize", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "no_bsuf", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "no_wsuf", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "no_lsuf", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "no_ssuf", ty = "libc::c_uint", bits = "18..=18")]
    #[bitfield(name = "no_qsuf", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "no_ldsuf", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "fwait", ty = "libc::c_uint", bits = "21..=21")]
    #[bitfield(name = "isstring", ty = "libc::c_uint", bits = "22..=23")]
    #[bitfield(name = "regmem", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "bndprefixok", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "regkludge", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "implicit1stxmm0", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "prefixok", ty = "libc::c_uint", bits = "28..=30")]
    #[bitfield(name = "todword", ty = "libc::c_uint", bits = "31..=31")]
    #[bitfield(name = "toqword", ty = "libc::c_uint", bits = "32..=32")]
    #[bitfield(name = "addrprefixopreg", ty = "libc::c_uint", bits = "33..=33")]
    #[bitfield(name = "isprefix", ty = "libc::c_uint", bits = "34..=34")]
    #[bitfield(name = "immext", ty = "libc::c_uint", bits = "35..=35")]
    #[bitfield(name = "norex64", ty = "libc::c_uint", bits = "36..=36")]
    #[bitfield(name = "ugh", ty = "libc::c_uint", bits = "37..=37")]
    #[bitfield(name = "pseudovexprefix", ty = "libc::c_uint", bits = "38..=38")]
    #[bitfield(name = "vex", ty = "libc::c_uint", bits = "39..=40")]
    #[bitfield(name = "vexvvvv", ty = "libc::c_uint", bits = "41..=42")]
    #[bitfield(name = "vexw", ty = "libc::c_uint", bits = "43..=44")]
    #[bitfield(name = "opcodespace", ty = "libc::c_uint", bits = "45..=48")]
    #[bitfield(name = "opcodeprefix", ty = "libc::c_uint", bits = "49..=50")]
    #[bitfield(name = "vexsources", ty = "libc::c_uint", bits = "51..=52")]
    #[bitfield(name = "sib", ty = "libc::c_uint", bits = "53..=55")]
    #[bitfield(name = "sse2avx", ty = "libc::c_uint", bits = "56..=56")]
    #[bitfield(name = "noavx", ty = "libc::c_uint", bits = "57..=57")]
    #[bitfield(name = "evex", ty = "libc::c_uint", bits = "58..=60")]
    #[bitfield(name = "masking", ty = "libc::c_uint", bits = "61..=62")]
    #[bitfield(name = "broadcast", ty = "libc::c_uint", bits = "64..=66")]
    #[bitfield(name = "staticrounding", ty = "libc::c_uint", bits = "67..=67")]
    #[bitfield(name = "sae", ty = "libc::c_uint", bits = "68..=68")]
    #[bitfield(name = "disp8memshift", ty = "libc::c_uint", bits = "69..=71")]
    #[bitfield(name = "nodefmask", ty = "libc::c_uint", bits = "72..=72")]
    #[bitfield(name = "implicitquadgroup", ty = "libc::c_uint", bits = "73..=73")]
    #[bitfield(name = "swapsources", ty = "libc::c_uint", bits = "74..=74")]
    #[bitfield(name = "optimize", ty = "libc::c_uint", bits = "75..=75")]
    #[bitfield(name = "attmnemonic", ty = "libc::c_uint", bits = "76..=76")]
    #[bitfield(name = "attsyntax", ty = "libc::c_uint", bits = "77..=77")]
    #[bitfield(name = "intelsyntax", ty = "libc::c_uint", bits = "78..=78")]
    #[bitfield(name = "isa64", ty = "libc::c_uint", bits = "79..=80")]
    pub d_w_load_modrm_jump_floatmf_floatr_size_checkregsize_mnemonicsize_anysize_no_bsuf_no_wsuf_no_lsuf_no_ssuf_no_qsuf_no_ldsuf_fwait_isstring_regmem_bndprefixok_regkludge_implicit1stxmm0_prefixok_todword_toqword_addrprefixopreg_isprefix_immext_norex64_ugh_pseudovexprefix_vex_vexvvvv_vexw_opcodespace_opcodeprefix_vexsources_sib_sse2avx_noavx_evex_masking_broadcast_staticrounding_sae_disp8memshift_nodefmask_implicitquadgroup_swapsources_optimize_attmnemonic_attsyntax_intelsyntax_isa64: [u8; 11],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 1],
}
pub type operand_class = libc::c_uint;
pub const RegBND: operand_class = 9;
pub const RegMask: operand_class = 8;
pub const RegSIMD: operand_class = 7;
pub const RegMMX: operand_class = 6;
pub const RegTR: operand_class = 5;
pub const RegDR: operand_class = 4;
pub const RegCR: operand_class = 3;
pub const SReg: operand_class = 2;
pub const Reg: operand_class = 1;
pub const ClassNone: operand_class = 0;
pub type operand_instance = libc::c_uint;
pub const RegB: operand_instance = 4;
pub const RegD: operand_instance = 3;
pub const RegC: operand_instance = 2;
pub const Accum: operand_instance = 1;
pub const InstanceNone: operand_instance = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub union i386_operand_type {
    pub bitfield: C2RustUnnamed_33,
    pub array: [libc::c_uint; 1],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct C2RustUnnamed_33 {
    #[bitfield(name = "class", ty = "libc::c_uint", bits = "0..=3")]
    #[bitfield(name = "instance", ty = "libc::c_uint", bits = "4..=6")]
    #[bitfield(name = "imm1", ty = "libc::c_uint", bits = "7..=7")]
    #[bitfield(name = "imm8", ty = "libc::c_uint", bits = "8..=8")]
    #[bitfield(name = "imm8s", ty = "libc::c_uint", bits = "9..=9")]
    #[bitfield(name = "imm16", ty = "libc::c_uint", bits = "10..=10")]
    #[bitfield(name = "imm32", ty = "libc::c_uint", bits = "11..=11")]
    #[bitfield(name = "imm32s", ty = "libc::c_uint", bits = "12..=12")]
    #[bitfield(name = "imm64", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "disp8", ty = "libc::c_uint", bits = "14..=14")]
    #[bitfield(name = "disp16", ty = "libc::c_uint", bits = "15..=15")]
    #[bitfield(name = "disp32", ty = "libc::c_uint", bits = "16..=16")]
    #[bitfield(name = "disp32s", ty = "libc::c_uint", bits = "17..=17")]
    #[bitfield(name = "disp64", ty = "libc::c_uint", bits = "18..=18")]
    #[bitfield(name = "baseindex", ty = "libc::c_uint", bits = "19..=19")]
    #[bitfield(name = "byte", ty = "libc::c_uint", bits = "20..=20")]
    #[bitfield(name = "word", ty = "libc::c_uint", bits = "21..=21")]
    #[bitfield(name = "dword", ty = "libc::c_uint", bits = "22..=22")]
    #[bitfield(name = "fword", ty = "libc::c_uint", bits = "23..=23")]
    #[bitfield(name = "qword", ty = "libc::c_uint", bits = "24..=24")]
    #[bitfield(name = "tbyte", ty = "libc::c_uint", bits = "25..=25")]
    #[bitfield(name = "xmmword", ty = "libc::c_uint", bits = "26..=26")]
    #[bitfield(name = "ymmword", ty = "libc::c_uint", bits = "27..=27")]
    #[bitfield(name = "zmmword", ty = "libc::c_uint", bits = "28..=28")]
    #[bitfield(name = "tmmword", ty = "libc::c_uint", bits = "29..=29")]
    #[bitfield(name = "unspecified", ty = "libc::c_uint", bits = "30..=30")]
    #[bitfield(name = "unused", ty = "libc::c_uint", bits = "31..=31")]
    pub class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [u8; 4],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct insn_template {
    pub name: *mut libc::c_char,
    #[bitfield(name = "base_opcode", ty = "libc::c_uint", bits = "0..=15")]
    #[bitfield(name = "extension_opcode", ty = "libc::c_int", bits = "16..=24")]
    #[bitfield(name = "operands", ty = "libc::c_uint", bits = "25..=27")]
    pub base_opcode_extension_opcode_operands: [u8; 4],
    pub opcode_modifier: i386_opcode_modifier,
    pub cpu_flags: i386_cpu_flags,
    pub operand_types: [i386_operand_type; 5],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct reg_entry {
    pub reg_name: *const libc::c_char,
    pub reg_type: i386_operand_type,
    pub reg_flags: libc::c_uchar,
    pub reg_num: libc::c_uchar,
    pub dw2_regnum: [libc::c_schar; 2],
}
pub const CODE_64BIT: flag_code = 2;
pub type flag_code = libc::c_uint;
pub const CODE_16BIT: flag_code = 1;
pub const CODE_32BIT: flag_code = 0;
pub const I386_ABI: x86_elf_abi = 0;
pub type x86_elf_abi = libc::c_uint;
pub const X86_64_X32_ABI: x86_elf_abi = 2;
pub const X86_64_ABI: x86_elf_abi = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct arch_entry {
    pub name: *const libc::c_char,
    pub len: libc::c_uint,
    pub type_0: processor_type,
    pub flags: i386_cpu_flags,
    pub skip: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_34 {
    pub op_modifier: operatorT,
    pub is_mem: libc::c_int,
    pub is_indirect: libc::c_int,
    pub has_offset: libc::c_int,
    pub in_offset: libc::c_uint,
    pub in_bracket: libc::c_uint,
    pub in_scale: libc::c_uint,
    pub reloc_types: i386_operand_type,
    pub base: *const reg_entry,
    pub index: *const reg_entry,
    pub scale_factor: offsetT,
    pub seg: *mut symbolS,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union i386_op {
    pub disps: *mut expressionS,
    pub imms: *mut expressionS,
    pub regs: *const reg_entry,
}
pub type i386_insn = _i386_insn;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _i386_insn {
    pub tm: insn_template,
    pub suffix: libc::c_char,
    pub opcode_length: libc::c_uchar,
    pub operands: libc::c_uint,
    pub reg_operands: libc::c_uint,
    pub disp_operands: libc::c_uint,
    pub mem_operands: libc::c_uint,
    pub imm_operands: libc::c_uint,
    pub types: [i386_operand_type; 5],
    pub op: [i386_op; 5],
    pub flags: [libc::c_uint; 5],
    pub reloc: [bfd_reloc_code_real; 5],
    pub base_reg: *const reg_entry,
    pub index_reg: *const reg_entry,
    pub log2_scale_factor: libc::c_uint,
    pub seg: [*const reg_entry; 2],
    pub memop1_string: *mut libc::c_char,
    pub prefixes: libc::c_uint,
    pub prefix: [libc::c_uchar; 7],
    pub short_form: bool,
    pub jumpabsolute: bool,
    pub xstate: C2RustUnnamed_38,
    pub has_gotpc_tls_reloc: bool,
    pub rm: modrm_byte,
    pub rex: rex_byte,
    pub vrex: rex_byte,
    pub sib: sib_byte,
    pub vex: vex_prefix,
    pub mask: Mask_Operation,
    pub rounding: RC_Operation,
    pub broadcast: Broadcast_Operation,
    pub memshift: libc::c_uint,
    pub dir_encoding: C2RustUnnamed_37,
    pub disp_encoding: C2RustUnnamed_36,
    pub rex_encoding: bool,
    pub no_optimize: bool,
    pub vec_encoding: C2RustUnnamed_35,
    pub rep_prefix: *const libc::c_char,
    pub hle_prefix: *const libc::c_char,
    pub bnd_prefix: *const libc::c_char,
    pub notrack_prefix: *const libc::c_char,
    pub error: i386_error,
}
pub type i386_error = libc::c_uint;
pub const invalid_register_operand: i386_error = 21;
pub const rc_sae_operand_not_last_imm: i386_error = 20;
pub const unsupported_rc_sae: i386_error = 19;
pub const no_default_mask: i386_error = 18;
pub const mask_not_on_destination: i386_error = 17;
pub const unsupported_masking: i386_error = 16;
pub const broadcast_needed: i386_error = 15;
pub const unsupported_broadcast: i386_error = 14;
pub const unsupported_vector_index_register: i386_error = 13;
pub const invalid_tmm_register_set: i386_error = 12;
pub const invalid_vector_register_set: i386_error = 11;
pub const invalid_vsib_address: i386_error = 10;
pub const invalid_sib_address: i386_error = 9;
pub const unsupported: i386_error = 8;
pub const unsupported_syntax: i386_error = 7;
pub const unsupported_with_intel_mnemonic: i386_error = 6;
pub const bad_imm4: i386_error = 5;
pub const invalid_instruction_suffix: i386_error = 4;
pub const number_of_operands_mismatch: i386_error = 3;
pub const register_type_mismatch: i386_error = 2;
pub const operand_type_mismatch: i386_error = 1;
pub const operand_size_mismatch: i386_error = 0;
pub type C2RustUnnamed_35 = libc::c_uint;
pub const vex_encoding_error: C2RustUnnamed_35 = 4;
pub const vex_encoding_evex: C2RustUnnamed_35 = 3;
pub const vex_encoding_vex3: C2RustUnnamed_35 = 2;
pub const vex_encoding_vex: C2RustUnnamed_35 = 1;
pub const vex_encoding_default: C2RustUnnamed_35 = 0;
pub type C2RustUnnamed_36 = libc::c_uint;
pub const disp_encoding_32bit: C2RustUnnamed_36 = 3;
pub const disp_encoding_16bit: C2RustUnnamed_36 = 2;
pub const disp_encoding_8bit: C2RustUnnamed_36 = 1;
pub const disp_encoding_default: C2RustUnnamed_36 = 0;
pub type C2RustUnnamed_37 = libc::c_uint;
pub const dir_encoding_swap: C2RustUnnamed_37 = 3;
pub const dir_encoding_store: C2RustUnnamed_37 = 2;
pub const dir_encoding_load: C2RustUnnamed_37 = 1;
pub const dir_encoding_default: C2RustUnnamed_37 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Broadcast_Operation {
    pub type_0: libc::c_uint,
    pub operand: libc::c_uint,
    pub bytes: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RC_Operation {
    pub type_0: rc_type,
    pub operand: libc::c_uint,
}
pub type rc_type = libc::c_int;
pub const saeonly: rc_type = 4;
pub const rz: rc_type = 3;
pub const ru: rc_type = 2;
pub const rd: rc_type = 1;
pub const rne: rc_type = 0;
pub const rc_none: rc_type = -1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Mask_Operation {
    pub reg: *const reg_entry,
    pub zeroing: libc::c_uint,
    pub operand: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct vex_prefix {
    pub bytes: [libc::c_uchar; 4],
    pub length: libc::c_uint,
    pub register_specifier: *const reg_entry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sib_byte {
    pub base: libc::c_uint,
    pub index: libc::c_uint,
    pub scale: libc::c_uint,
}
pub type rex_byte = libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct modrm_byte {
    pub regmem: libc::c_uint,
    pub reg: libc::c_uint,
    pub mode: libc::c_uint,
}
pub type C2RustUnnamed_38 = libc::c_uint;
pub const xstate_mask: C2RustUnnamed_38 = 32;
pub const xstate_tmm: C2RustUnnamed_38 = 16;
pub const xstate_zmm: C2RustUnnamed_38 = 14;
pub const xstate_ymm: C2RustUnnamed_38 = 6;
pub const xstate_xmm: C2RustUnnamed_38 = 2;
pub const xstate_mmx: C2RustUnnamed_38 = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct templates {
    pub start: *const insn_template,
    pub end: *const insn_template,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_39 {
    pub str_0: *const libc::c_char,
    pub len: libc::c_int,
    pub rel: [bfd_reloc_code_real; 2],
    pub types64: i386_operand_type,
    pub need_GOT_symbol: bool,
}
pub type fixS = fix;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_40 {
    pub name: *const libc::c_char,
    pub op: operatorT,
    pub sz: [libc::c_ushort; 3],
}
pub type htab_t = *mut htab;
pub type string_tuple_t = string_tuple;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct string_tuple {
    pub key: *const libc::c_char,
    pub value: *const libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_41 {
    pub name: *const libc::c_char,
    pub op: operatorT,
    pub operands: libc::c_uint,
}
pub const lfence_branch_none: lfence_before_indirect_branch_kind = 0;
pub type lfence_before_indirect_branch_kind = libc::c_uint;
pub const lfence_branch_all: lfence_before_indirect_branch_kind = 3;
pub const lfence_branch_memory: lfence_before_indirect_branch_kind = 2;
pub const lfence_branch_register: lfence_before_indirect_branch_kind = 1;
pub const lfence_before_ret_none: lfence_before_ret_kind = 0;
pub type lfence_before_ret_kind = libc::c_uint;
pub const lfence_before_ret_shl: lfence_before_ret_kind = 3;
pub const lfence_before_ret_or: lfence_before_ret_kind = 2;
pub const lfence_before_ret_not: lfence_before_ret_kind = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_42 {
    pub seg: segT,
    pub file: *const libc::c_char,
    pub name: *const libc::c_char,
    pub line: libc::c_uint,
    pub kind: last_insn_kind,
}
pub type last_insn_kind = libc::c_uint;
pub const last_insn_prefix: last_insn_kind = 2;
pub const last_insn_directive: last_insn_kind = 1;
pub const last_insn_other: last_insn_kind = 0;
pub type segment_info_type = segment_info_struct;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct segment_info_struct {
    pub frchainP: *mut frchainS,
    #[bitfield(name = "hadone", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "bss", ty = "libc::c_uint", bits = "1..=1")]
    pub hadone_bss: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 3],
    pub user_stuff: libc::c_int,
    pub fix_root: *mut fixS,
    pub fix_tail: *mut fixS,
    pub dot: *mut symbolS,
    pub lineno_list_head: *mut lineno_list,
    pub lineno_list_tail: *mut lineno_list,
    pub bfd_section: *mut asection,
    pub sym: *mut symbolS,
    pub dwarf2_line_seg: *mut libc::c_void,
    pub stabu: C2RustUnnamed_43,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_43 {
    pub stab_string_size: libc::c_ulong,
    pub p: *mut libc::c_char,
}
pub type frchainS = frchain;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct frchain {
    pub frch_root: *mut frag,
    pub frch_last: *mut frag,
    pub frch_next: *mut frchain,
    pub frch_subseg: subsegT,
    pub fix_root: *mut fixS,
    pub fix_tail: *mut fixS,
    pub frch_obstack: obstack,
    pub frch_frag_now: *mut fragS,
    pub frch_cfi_data: *mut frch_cfi_data,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct frch_cfi_data {
    pub cur_fde_data: *mut fde_entry,
    pub last_address: *mut symbolS,
    pub cur_cfa_offset: offsetT,
    pub cfa_save_stack: *mut cfa_save_data,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct cfa_save_data {
    pub next: *mut cfa_save_data,
    pub cfa_offset: offsetT,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fde_entry {
    pub next: *mut fde_entry,
    pub start_address: *mut symbolS,
    pub end_address: *mut symbolS,
    pub data: *mut cfi_insn_data,
    pub last: *mut *mut cfi_insn_data,
    pub per_encoding: libc::c_uchar,
    pub lsda_encoding: libc::c_uchar,
    pub personality_id: libc::c_int,
    pub personality: expressionS,
    pub lsda: expressionS,
    pub return_column: libc::c_uint,
    pub signal_frame: libc::c_uint,
    pub eh_header_type: libc::c_int,
    pub eh_data_size: libc::c_int,
    pub eh_data: *mut bfd_byte,
    pub eh_loc: *mut symbolS,
    pub sections: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct cfi_insn_data {
    pub next: *mut cfi_insn_data,
    pub insn: libc::c_int,
    pub u: C2RustUnnamed_44,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_44 {
    pub ri: C2RustUnnamed_48,
    pub rr: C2RustUnnamed_47,
    pub r: libc::c_uint,
    pub i: offsetT,
    pub ll: C2RustUnnamed_46,
    pub esc: *mut cfi_escape_data,
    pub ea: C2RustUnnamed_45,
    pub sym_name: *const libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_45 {
    pub reg: libc::c_uint,
    pub encoding: libc::c_uint,
    pub exp: expressionS,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_46 {
    pub lab1: *mut symbolS,
    pub lab2: *mut symbolS,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_47 {
    pub reg1: libc::c_uint,
    pub reg2: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_48 {
    pub reg: libc::c_uint,
    pub offset: offsetT,
}
pub type check_kind = libc::c_uint;
pub const check_error: check_kind = 2;
pub const check_warning: check_kind = 1;
pub const check_none: check_kind = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct noarch_entry {
    pub name: *const libc::c_char,
    pub len: libc::c_uint,
    pub flags: i386_cpu_flags,
}
pub type x86_64_isa = libc::c_uint;
pub const intel64: x86_64_isa = 2;
pub const amd64: x86_64_isa = 1;
pub const align_branch_jmp_bit: align_branch_bit = 8;
pub const align_branch_fused_bit: align_branch_bit = 4;
pub const align_branch_jcc_bit: align_branch_bit = 2;
pub const align_branch_indirect_bit: align_branch_bit = 32;
pub const align_branch_ret_bit: align_branch_bit = 64;
pub const align_branch_call_bit: align_branch_bit = 16;
pub type C2RustUnnamed_49 = libc::c_uint;
pub const evexw1: C2RustUnnamed_49 = 1;
pub const evexw0: C2RustUnnamed_49 = 0;
pub type C2RustUnnamed_50 = libc::c_uint;
pub const evexl512: C2RustUnnamed_50 = 2;
pub const evexl256: C2RustUnnamed_50 = 1;
pub const evexl128: C2RustUnnamed_50 = 0;
pub type C2RustUnnamed_51 = libc::c_uint;
pub const vexw1: C2RustUnnamed_51 = 1;
pub const vexw0: C2RustUnnamed_51 = 0;
pub type C2RustUnnamed_52 = libc::c_uint;
pub const vex256: C2RustUnnamed_52 = 1;
pub const vex128: C2RustUnnamed_52 = 0;
pub type operand_type = libc::c_uint;
pub const anymem: operand_type = 3;
pub const disp: operand_type = 2;
pub const imm: operand_type = 1;
pub const reg: operand_type = 0;
pub type PREFIX_GROUP = libc::c_uint;
pub const PREFIX_OTHER: PREFIX_GROUP = 4;
pub const PREFIX_DS: PREFIX_GROUP = 3;
pub const PREFIX_REP: PREFIX_GROUP = 2;
pub const PREFIX_LOCK: PREFIX_GROUP = 1;
pub const PREFIX_EXIST: PREFIX_GROUP = 0;
pub const align_branch_fused: align_branch_kind = 2;
pub type mf_cmp_kind = libc::c_uint;
pub const mf_cmp_incdec: mf_cmp_kind = 2;
pub const mf_cmp_alu_cmp: mf_cmp_kind = 1;
pub const mf_cmp_test_and: mf_cmp_kind = 0;
pub type align_branch_kind = libc::c_uint;
pub const align_branch_ret: align_branch_kind = 6;
pub const align_branch_indirect: align_branch_kind = 5;
pub const align_branch_call: align_branch_kind = 4;
pub const align_branch_jmp: align_branch_kind = 3;
pub const align_branch_jcc: align_branch_kind = 1;
pub const align_branch_none: align_branch_kind = 0;
pub type mf_jcc_kind = libc::c_uint;
pub const mf_jcc_jle: mf_jcc_kind = 7;
pub const mf_jcc_jl: mf_jcc_kind = 6;
pub const mf_jcc_jp: mf_jcc_kind = 5;
pub const mf_jcc_js: mf_jcc_kind = 4;
pub const mf_jcc_jna: mf_jcc_kind = 3;
pub const mf_jcc_je: mf_jcc_kind = 2;
pub const mf_jcc_jc: mf_jcc_kind = 1;
pub const mf_jcc_jo: mf_jcc_kind = 0;
pub const need_qword: C2RustUnnamed_53 = 2;
pub const need_dword: C2RustUnnamed_53 = 1;
pub const need_word: C2RustUnnamed_53 = 0;
pub type C2RustUnnamed_53 = libc::c_uint;
pub const _sch_isprint: C2RustUnnamed_54 = 16;
pub const _sch_isdigit: C2RustUnnamed_54 = 4;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RC_name {
    pub type_0: rc_type,
    pub name: *const libc::c_char,
    pub len: libc::c_uint,
}
pub const _sch_isalpha: C2RustUnnamed_54 = 136;
pub const _sch_isupper: C2RustUnnamed_54 = 128;
pub const _sch_islower: C2RustUnnamed_54 = 8;
pub type C2RustUnnamed_54 = libc::c_uint;
pub const _sch_isbasic: C2RustUnnamed_54 = 3088;
pub const _sch_iscppsp: C2RustUnnamed_54 = 3072;
pub const _sch_isgraph: C2RustUnnamed_54 = 172;
pub const _sch_isidnum: C2RustUnnamed_54 = 516;
pub const _sch_isalnum: C2RustUnnamed_54 = 140;
pub const _sch_isnvsp: C2RustUnnamed_54 = 2048;
pub const _sch_isvsp: C2RustUnnamed_54 = 1024;
pub const _sch_isidst: C2RustUnnamed_54 = 512;
pub const _sch_isxdigit: C2RustUnnamed_54 = 256;
pub const _sch_isspace: C2RustUnnamed_54 = 64;
pub const _sch_ispunct: C2RustUnnamed_54 = 32;
pub const _sch_iscntrl: C2RustUnnamed_54 = 2;
pub const _sch_isblank: C2RustUnnamed_54 = 1;
pub type align_branch_bit = libc::c_uint;
#[inline]
unsafe extern "C" fn atoi(mut __nptr: *const libc::c_char) -> libc::c_int {
    return strtol(
        __nptr,
        0 as *mut libc::c_void as *mut *mut libc::c_char,
        10 as libc::c_int,
    ) as libc::c_int;
}
#[inline]
unsafe extern "C" fn startswith(
    mut str: *const libc::c_char,
    mut prefix: *const libc::c_char,
) -> bool {
    return strncmp(str, prefix, strlen(prefix)) == 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn bfd_section_size(mut sec: *const asection) -> bfd_size_type {
    return (*sec).size;
}
#[inline]
unsafe extern "C" fn bfd_section_flags(mut sec: *const asection) -> flagword {
    return (*sec).flags;
}
#[inline]
unsafe extern "C" fn bfd_section_userdata(
    mut sec: *const asection,
) -> *mut libc::c_void {
    return (*sec).userdata;
}
#[inline]
unsafe extern "C" fn bfd_set_section_alignment(
    mut sec: *mut asection,
    mut val: libc::c_uint,
) -> bool {
    (*sec).alignment_power = val;
    return 1 as libc::c_int != 0;
}
#[inline]
unsafe extern "C" fn bfd_is_abs_section(mut sec: *const asection) -> bool {
    return sec
        == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection as *const asection;
}
#[inline]
unsafe extern "C" fn bfd_applicable_section_flags(mut abfd: *const bfd) -> flagword {
    return (*(*abfd).xvec).section_flags;
}
#[inline]
unsafe extern "C" fn bfd_get_symbol_leading_char(mut abfd: *const bfd) -> libc::c_char {
    return (*(*abfd).xvec).symbol_leading_char;
}
#[no_mangle]
pub unsafe extern "C" fn i386_arch() -> bfd_architecture {
    if cpu_arch_isa as libc::c_uint == PROCESSOR_L1OM as libc::c_int as libc::c_uint {
        if bfd_target_elf_flavour as libc::c_int != bfd_target_elf_flavour as libc::c_int
            || flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
        {
            as_fatal(
                dcgettext(
                    0 as *const libc::c_char,
                    b"Intel L1OM is 64bit ELF only\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        return bfd_arch_l1om;
    } else if cpu_arch_isa as libc::c_uint
        == PROCESSOR_K1OM as libc::c_int as libc::c_uint
    {
        if bfd_target_elf_flavour as libc::c_int != bfd_target_elf_flavour as libc::c_int
            || flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
        {
            as_fatal(
                dcgettext(
                    0 as *const libc::c_char,
                    b"Intel K1OM is 64bit ELF only\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        return bfd_arch_k1om;
    } else if cpu_arch_isa as libc::c_uint
        == PROCESSOR_IAMCU as libc::c_int as libc::c_uint
    {
        if bfd_target_elf_flavour as libc::c_int != bfd_target_elf_flavour as libc::c_int
            || flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        {
            as_fatal(
                dcgettext(
                    0 as *const libc::c_char,
                    b"Intel MCU is 32bit ELF only\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        return bfd_arch_iamcu;
    } else {
        return bfd_arch_i386
    };
}
#[no_mangle]
pub static mut cpu_arch_isa: processor_type = PROCESSOR_UNKNOWN;
#[no_mangle]
pub unsafe extern "C" fn i386_mach() -> libc::c_ulong {
    if startswith(default_arch, b"x86_64\0" as *const u8 as *const libc::c_char) {
        if cpu_arch_isa as libc::c_uint == PROCESSOR_L1OM as libc::c_int as libc::c_uint
        {
            if bfd_target_elf_flavour as libc::c_int
                != bfd_target_elf_flavour as libc::c_int
                || *default_arch.offset(6 as libc::c_int as isize) as libc::c_int
                    != '\0' as i32
            {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Intel L1OM is 64bit ELF only\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            return ((1 as libc::c_int) << 5 as libc::c_int) as libc::c_ulong;
        } else if cpu_arch_isa as libc::c_uint
            == PROCESSOR_K1OM as libc::c_int as libc::c_uint
        {
            if bfd_target_elf_flavour as libc::c_int
                != bfd_target_elf_flavour as libc::c_int
                || *default_arch.offset(6 as libc::c_int as isize) as libc::c_int
                    != '\0' as i32
            {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Intel K1OM is 64bit ELF only\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            return ((1 as libc::c_int) << 6 as libc::c_int) as libc::c_ulong;
        } else if *default_arch.offset(6 as libc::c_int as isize) as libc::c_int
            == '\0' as i32
        {
            return ((1 as libc::c_int) << 3 as libc::c_int) as libc::c_ulong
        } else {
            return ((1 as libc::c_int) << 4 as libc::c_int) as libc::c_ulong
        }
    } else if strcmp(default_arch, b"i386\0" as *const u8 as *const libc::c_char) == 0
        || strcmp(default_arch, b"iamcu\0" as *const u8 as *const libc::c_char) == 0
    {
        if cpu_arch_isa as libc::c_uint == PROCESSOR_IAMCU as libc::c_int as libc::c_uint
        {
            if bfd_target_elf_flavour as libc::c_int
                != bfd_target_elf_flavour as libc::c_int
            {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Intel MCU is 32bit ELF only\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            return ((1 as libc::c_int) << 2 as libc::c_int
                | (1 as libc::c_int) << 8 as libc::c_int) as libc::c_ulong;
        } else {
            return ((1 as libc::c_int) << 2 as libc::c_int) as libc::c_ulong
        }
    } else {
        as_fatal(
            dcgettext(
                0 as *const libc::c_char,
                b"unknown architecture\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    };
}
static mut iamcu_flags: i386_cpu_flags = i386_cpu_flags {
    bitfield: C2RustUnnamed_24 {
        cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
    },
};
#[no_mangle]
pub unsafe extern "C" fn i386_target_format() -> *const libc::c_char {
    if startswith(default_arch, b"x86_64\0" as *const u8 as *const libc::c_char) {
        update_code_flag(CODE_64BIT as libc::c_int, 1 as libc::c_int);
        if *default_arch.offset(6 as libc::c_int as isize) as libc::c_int == '\0' as i32
        {
            x86_elf_abi = X86_64_ABI;
        } else {
            x86_elf_abi = X86_64_X32_ABI;
        }
    } else if strcmp(default_arch, b"i386\0" as *const u8 as *const libc::c_char) == 0 {
        update_code_flag(CODE_32BIT as libc::c_int, 1 as libc::c_int);
    } else if strcmp(default_arch, b"iamcu\0" as *const u8 as *const libc::c_char) == 0 {
        update_code_flag(CODE_32BIT as libc::c_int, 1 as libc::c_int);
        if cpu_arch_isa as libc::c_uint
            == PROCESSOR_UNKNOWN as libc::c_int as libc::c_uint
        {
            cpu_arch_name = b"iamcu\0" as *const u8 as *const libc::c_char;
            cpu_sub_arch_name = 0 as *mut libc::c_char;
            cpu_arch_flags = iamcu_flags;
            cpu_arch_isa = PROCESSOR_IAMCU;
            cpu_arch_isa_flags = iamcu_flags;
            if cpu_arch_tune_set == 0 {
                cpu_arch_tune = cpu_arch_isa;
                cpu_arch_tune_flags = cpu_arch_isa_flags;
            }
        } else if cpu_arch_isa as libc::c_uint
            != PROCESSOR_IAMCU as libc::c_int as libc::c_uint
        {
            as_fatal(
                dcgettext(
                    0 as *const libc::c_char,
                    b"Intel MCU doesn't support `%s' architecture\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                cpu_arch_name,
            );
        }
    } else {
        as_fatal(
            dcgettext(
                0 as *const libc::c_char,
                b"unknown architecture\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    }
    if cpu_flags_all_zero(&mut cpu_arch_isa_flags) != 0 {
        cpu_arch_isa_flags = cpu_arch[(flag_code as libc::c_uint
                == CODE_64BIT as libc::c_int as libc::c_uint) as libc::c_int as usize]
            .flags;
    }
    if cpu_flags_all_zero(&mut cpu_arch_tune_flags) != 0 {
        cpu_arch_tune_flags = cpu_arch[(flag_code as libc::c_uint
                == CODE_64BIT as libc::c_int as libc::c_uint) as libc::c_int as usize]
            .flags;
    }
    match bfd_target_elf_flavour as libc::c_int {
        5 => {
            let mut format: *const libc::c_char = 0 as *const libc::c_char;
            match x86_elf_abi as libc::c_uint {
                1 => {
                    use_rela_relocations = 1 as libc::c_int;
                    object_64bit = 1 as libc::c_int as libc::c_uint;
                    tls_get_addr = b"__tls_get_addr\0" as *const u8
                        as *const libc::c_char;
                    format = b"elf64-x86-64\0" as *const u8 as *const libc::c_char;
                }
                2 => {
                    use_rela_relocations = 1 as libc::c_int;
                    object_64bit = 1 as libc::c_int as libc::c_uint;
                    tls_get_addr = b"__tls_get_addr\0" as *const u8
                        as *const libc::c_char;
                    disallow_64bit_reloc = 1 as libc::c_int as libc::c_uint;
                    format = b"elf32-x86-64\0" as *const u8 as *const libc::c_char;
                }
                _ => {
                    format = b"elf32-i386\0" as *const u8 as *const libc::c_char;
                    tls_get_addr = b"___tls_get_addr\0" as *const u8
                        as *const libc::c_char;
                }
            }
            if cpu_arch_isa as libc::c_uint
                == PROCESSOR_L1OM as libc::c_int as libc::c_uint
            {
                if x86_elf_abi as libc::c_uint
                    != X86_64_ABI as libc::c_int as libc::c_uint
                {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"Intel L1OM is 64bit only\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
                return b"elf64-l1om\0" as *const u8 as *const libc::c_char;
            } else if cpu_arch_isa as libc::c_uint
                == PROCESSOR_K1OM as libc::c_int as libc::c_uint
            {
                if x86_elf_abi as libc::c_uint
                    != X86_64_ABI as libc::c_int as libc::c_uint
                {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"Intel K1OM is 64bit only\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
                return b"elf64-k1om\0" as *const u8 as *const libc::c_char;
            } else if cpu_arch_isa as libc::c_uint
                == PROCESSOR_IAMCU as libc::c_int as libc::c_uint
            {
                if x86_elf_abi as libc::c_uint != I386_ABI as libc::c_int as libc::c_uint
                {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"Intel MCU is 32bit only\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
                return b"elf32-iamcu\0" as *const u8 as *const libc::c_char;
            } else {
                return format
            }
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                13989 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 37],
                    &[libc::c_char; 37],
                >(b"const char *i386_target_format(void)\0"))
                    .as_ptr(),
            );
        }
    };
}
#[no_mangle]
pub static mut EXP_CHARS: [libc::c_char; 3] = unsafe {
    *::core::mem::transmute::<&[u8; 3], &[libc::c_char; 3]>(b"eE\0")
};
#[no_mangle]
pub static mut FLT_CHARS: [libc::c_char; 7] = unsafe {
    *::core::mem::transmute::<&[u8; 7], &[libc::c_char; 7]>(b"fFdDxX\0")
};
#[no_mangle]
pub unsafe extern "C" fn tc_gen_reloc(
    mut section: *mut asection,
    mut fixp: *mut fixS,
) -> *mut arelent {
    let mut rel: *mut arelent = 0 as *mut arelent;
    let mut code: bfd_reloc_code_real_type = _dummy_first_bfd_reloc_code_real;
    let mut sym: *mut symbolS = 0 as *mut symbolS;
    let mut current_block_45: u64;
    match (*fixp).fx_r_type as libc::c_uint {
        36 | 37 => {
            if !((*fixp).fx_addsy).is_null()
                && !bfd_is_abs_section(
                    S_GET_SEGMENT((*fixp).fx_addsy) as *const asection,
                )
                && (((*fixp).fx_subsy).is_null()
                    || bfd_is_abs_section(
                        S_GET_SEGMENT((*fixp).fx_subsy) as *const asection,
                    ) as libc::c_int != 0)
            {
                sym = (*fixp).fx_addsy;
            } else if !((*fixp).fx_subsy).is_null()
                && !bfd_is_abs_section(
                    S_GET_SEGMENT((*fixp).fx_subsy) as *const asection,
                )
                && (((*fixp).fx_addsy).is_null()
                    || bfd_is_abs_section(
                        S_GET_SEGMENT((*fixp).fx_addsy) as *const asection,
                    ) as libc::c_int != 0)
            {
                sym = (*fixp).fx_subsy;
            } else {
                sym = 0 as *mut symbolS;
            }
            if 1 as libc::c_int != 0 && !sym.is_null() && S_IS_DEFINED(sym) != 0
                && S_IS_EXTERNAL(sym) == 0
            {
                let mut value: valueT = (*(&mut (*(symbol_get_bfdsym
                    as unsafe extern "C" fn(*mut symbolS) -> *mut asymbol)(sym))
                    .the_bfd as *mut *mut bfd as *mut elf_symbol_type))
                    .internal_elf_sym
                    .st_size;
                if (*symbol_get_bfdsym(sym)).flags
                    & ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint != 0
                {
                    value = bfd_section_size(S_GET_SEGMENT(sym) as *const asection);
                }
                if sym == (*fixp).fx_subsy {
                    value = value.wrapping_neg();
                    if !((*fixp).fx_addsy).is_null() {
                        value = (value as libc::c_ulong)
                            .wrapping_add(S_GET_VALUE((*fixp).fx_addsy)) as valueT
                            as valueT;
                    }
                } else if !((*fixp).fx_subsy).is_null() {
                    value = (value as libc::c_ulong)
                        .wrapping_sub(S_GET_VALUE((*fixp).fx_subsy)) as valueT as valueT;
                }
                value = (value as libc::c_ulong).wrapping_add((*fixp).fx_offset)
                    as valueT as valueT;
                if (*fixp).fx_r_type as libc::c_uint
                    == BFD_RELOC_SIZE32 as libc::c_int as libc::c_uint
                    && object_64bit != 0 && fits_in_unsigned_long(value) == 0
                {
                    as_bad_where(
                        (*fixp).fx_file,
                        (*fixp).fx_line,
                        dcgettext(
                            0 as *const libc::c_char,
                            b"symbol size computation overflow\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
                (*fixp).fx_addsy = 0 as *mut symbolS;
                (*fixp).fx_subsy = 0 as *mut symbolS;
                md_apply_fix(fixp, &mut value as *mut valueT, 0 as segT);
                return 0 as *mut arelent;
            }
            if ((*fixp).fx_addsy).is_null() || !((*fixp).fx_subsy).is_null() {
                as_bad_where(
                    (*fixp).fx_file,
                    (*fixp).fx_line,
                    b"unsupported expression involving @size\0" as *const u8
                        as *const libc::c_char,
                );
                return 0 as *mut arelent;
            }
            current_block_45 = 7046257748288146106;
        }
        382 | 381 | 387 | 410 | 411 | 357 | 356 | 380 | 362 | 363 | 368 | 369 | 370 | 371
        | 365 | 366 | 372 | 367 | 376 | 377 | 392 | 393 | 394 | 390 | 395 | 396 | 391
        | 397 | 398 | 399 | 400 | 401 | 402 | 403 | 404 | 405 | 62 | 1511 | 1510 => {
            current_block_45 = 7046257748288146106;
        }
        388 => {
            if (*fixp).fx_pcrel() == 0 {
                code = (*fixp).fx_r_type;
                current_block_45 = 14001958660280927786;
            } else {
                current_block_45 = 2277141543899448133;
            }
        }
        _ => {
            current_block_45 = 2277141543899448133;
        }
    }
    match current_block_45 {
        7046257748288146106 => {
            code = (*fixp).fx_r_type;
        }
        2277141543899448133 => {
            if (*fixp).fx_pcrel() != 0 {
                match (*fixp).fx_size() as libc::c_int {
                    1 => {
                        code = BFD_RELOC_8_PCREL;
                    }
                    2 => {
                        code = BFD_RELOC_16_PCREL;
                    }
                    4 => {
                        code = BFD_RELOC_32_PCREL;
                    }
                    8 => {
                        code = BFD_RELOC_64_PCREL;
                    }
                    _ => {
                        as_bad_where(
                            (*fixp).fx_file,
                            (*fixp).fx_line,
                            dcgettext(
                                0 as *const libc::c_char,
                                b"can not do %d byte pc-relative relocation\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            (*fixp).fx_size() as libc::c_int,
                        );
                        code = BFD_RELOC_32_PCREL;
                    }
                }
            } else {
                match (*fixp).fx_size() as libc::c_int {
                    1 => {
                        code = BFD_RELOC_8;
                    }
                    2 => {
                        code = BFD_RELOC_16;
                    }
                    4 => {
                        code = BFD_RELOC_32;
                    }
                    8 => {
                        code = BFD_RELOC_64;
                    }
                    _ => {
                        as_bad_where(
                            (*fixp).fx_file,
                            (*fixp).fx_line,
                            dcgettext(
                                0 as *const libc::c_char,
                                b"can not do %d byte relocation\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            (*fixp).fx_size() as libc::c_int,
                        );
                        code = BFD_RELOC_32;
                    }
                }
            }
        }
        _ => {}
    }
    if (code as libc::c_uint == BFD_RELOC_32 as libc::c_int as libc::c_uint
        || code as libc::c_uint == BFD_RELOC_32_PCREL as libc::c_int as libc::c_uint
        || code as libc::c_uint == BFD_RELOC_X86_64_32S as libc::c_int as libc::c_uint)
        && !GOT_symbol.is_null() && (*fixp).fx_addsy == GOT_symbol
    {
        if object_64bit == 0 {
            code = BFD_RELOC_386_GOTPC;
        } else {
            code = BFD_RELOC_X86_64_GOTPC32;
        }
    }
    if (code as libc::c_uint == BFD_RELOC_64 as libc::c_int as libc::c_uint
        || code as libc::c_uint == BFD_RELOC_64_PCREL as libc::c_int as libc::c_uint)
        && !GOT_symbol.is_null() && (*fixp).fx_addsy == GOT_symbol
    {
        code = BFD_RELOC_X86_64_GOTPC64;
    }
    rel = xmalloc(::core::mem::size_of::<arelent>() as libc::c_ulong) as *mut arelent;
    (*rel)
        .sym_ptr_ptr = xmalloc(::core::mem::size_of::<*mut asymbol>() as libc::c_ulong)
        as *mut *mut asymbol;
    *(*rel).sym_ptr_ptr = symbol_get_bfdsym((*fixp).fx_addsy);
    (*rel).address = ((*(*fixp).fx_frag).fr_address).wrapping_add((*fixp).fx_where);
    if use_rela_relocations == 0 {
        if (*fixp).fx_r_type as libc::c_uint
            == BFD_RELOC_VTABLE_ENTRY as libc::c_int as libc::c_uint
        {
            (*rel).address = (*fixp).fx_offset;
        }
        (*rel).addend = 0 as libc::c_int as bfd_vma;
    } else {
        if disallow_64bit_reloc != 0 {
            match code as libc::c_uint {
                390 | 391 | 8 | 397 | 399 | 400 | 401 | 402 | 403 => {
                    as_bad_where(
                        (*fixp).fx_file,
                        (*fixp).fx_line,
                        dcgettext(
                            0 as *const libc::c_char,
                            b"cannot represent relocation type %s in x32 mode\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        bfd_get_reloc_code_name(code),
                    );
                }
                _ => {}
            }
        }
        if (*fixp).fx_pcrel() == 0 {
            (*rel).addend = (*fixp).fx_offset;
        } else {
            match code as libc::c_uint {
                382 | 381 | 387 | 410 | 411 | 392 | 393 | 395 | 404 | 405 => {
                    (*rel)
                        .addend = ((*fixp).fx_offset)
                        .wrapping_sub((*fixp).fx_size() as libc::c_ulong);
                }
                _ => {
                    (*rel)
                        .addend = ((*section).vma)
                        .wrapping_sub((*fixp).fx_size() as libc::c_ulong)
                        .wrapping_add((*fixp).fx_addnumber)
                        .wrapping_add(md_pcrel_from(fixp) as libc::c_ulong);
                }
            }
        }
    }
    (*rel).howto = bfd_reloc_type_lookup(stdoutput, code);
    if ((*rel).howto).is_null() {
        as_bad_where(
            (*fixp).fx_file,
            (*fixp).fx_line,
            dcgettext(
                0 as *const libc::c_char,
                b"cannot represent relocation type %s\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            bfd_get_reloc_code_name(code),
        );
        (*rel).howto = bfd_reloc_type_lookup(stdoutput, BFD_RELOC_32);
        if !((*rel).howto).is_null() {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                14400 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 42],
                    &[libc::c_char; 42],
                >(b"arelent *tc_gen_reloc(asection *, fixS *)\0"))
                    .as_ptr(),
            );
        };
    }
    return rel;
}
#[no_mangle]
pub unsafe extern "C" fn md_convert_frag(
    mut abfd: *mut bfd,
    mut sec: segT,
    mut fragP: *mut fragS,
) {
    let mut opcode: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut where_to_put_displacement: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut target_address: offsetT = 0;
    let mut opcode_address: offsetT = 0;
    let mut extension: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    let mut displacement_from_opcode_start: offsetT = 0;
    if (*fragP).fr_subtype >> 2 as libc::c_int == 3 as libc::c_int as libc::c_uint
        || (*fragP).fr_subtype >> 2 as libc::c_int == 5 as libc::c_int as libc::c_uint
        || (*fragP).fr_subtype >> 2 as libc::c_int == 4 as libc::c_int as libc::c_uint
    {
        let mut size: libc::c_uint = (*fragP).tc_frag_data.length as libc::c_uint;
        if size != 0 {
            if size > (*fragP).tc_frag_data.max_bytes {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    12313 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 43],
                        &[libc::c_char; 43],
                    >(b"void md_convert_frag(bfd *, segT, fragS *)\0"))
                        .as_ptr(),
                );
            }
            if flag_debug != 0 {
                let mut msg: *const libc::c_char = 0 as *const libc::c_char;
                let mut branch: *const libc::c_char = b"branch\0" as *const u8
                    as *const libc::c_char;
                let mut prefix: *const libc::c_char = b"\0" as *const u8
                    as *const libc::c_char;
                let mut padding_fragP: *mut fragS = 0 as *mut fragS;
                if (*fragP).fr_subtype >> 2 as libc::c_int
                    == 4 as libc::c_int as libc::c_uint
                {
                    padding_fragP = (*fragP).tc_frag_data.u.padding_fragP;
                    match (*fragP).tc_frag_data.default_prefix as libc::c_int {
                        46 => {
                            prefix = b" cs\0" as *const u8 as *const libc::c_char;
                        }
                        62 => {
                            prefix = b" ds\0" as *const u8 as *const libc::c_char;
                        }
                        38 => {
                            prefix = b" es\0" as *const u8 as *const libc::c_char;
                        }
                        100 => {
                            prefix = b" fs\0" as *const u8 as *const libc::c_char;
                        }
                        101 => {
                            prefix = b" gs\0" as *const u8 as *const libc::c_char;
                        }
                        54 => {
                            prefix = b" ss\0" as *const u8 as *const libc::c_char;
                        }
                        _ => {
                            as_abort(
                                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                12328 as libc::c_int,
                                (*::core::mem::transmute::<
                                    &[u8; 43],
                                    &[libc::c_char; 43],
                                >(b"void md_convert_frag(bfd *, segT, fragS *)\0"))
                                    .as_ptr(),
                            );
                        }
                    }
                    if !padding_fragP.is_null() {
                        msg = dcgettext(
                            0 as *const libc::c_char,
                            b"%s:%u: add %d%s at 0x%llx to align %s within %d-byte boundary\n\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        );
                    } else {
                        msg = dcgettext(
                            0 as *const libc::c_char,
                            b"%s:%u: add additional %d%s at 0x%llx to align %s within %d-byte boundary\n\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        );
                    }
                } else {
                    padding_fragP = fragP;
                    msg = dcgettext(
                        0 as *const libc::c_char,
                        b"%s:%u: add %d%s-byte nop at 0x%llx to align %s within %d-byte boundary\n\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    );
                }
                if !padding_fragP.is_null() {
                    match ((*padding_fragP).tc_frag_data).branch_type() as libc::c_int {
                        1 => {
                            branch = b"jcc\0" as *const u8 as *const libc::c_char;
                        }
                        2 => {
                            branch = b"fused jcc\0" as *const u8 as *const libc::c_char;
                        }
                        3 => {
                            branch = b"jmp\0" as *const u8 as *const libc::c_char;
                        }
                        4 => {
                            branch = b"call\0" as *const u8 as *const libc::c_char;
                        }
                        5 => {
                            branch = b"indiret branch\0" as *const u8
                                as *const libc::c_char;
                        }
                        6 => {
                            branch = b"ret\0" as *const u8 as *const libc::c_char;
                        }
                        _ => {}
                    }
                }
                fprintf(
                    stdout,
                    msg,
                    (*fragP).fr_file,
                    (*fragP).fr_line,
                    size,
                    prefix,
                    (*fragP).fr_address as libc::c_longlong,
                    branch,
                    (1 as libc::c_int) << align_branch_power,
                );
            }
            if (*fragP).fr_subtype >> 2 as libc::c_int
                == 4 as libc::c_int as libc::c_uint
            {
                memset(
                    (*fragP).fr_opcode as *mut libc::c_void,
                    (*fragP).tc_frag_data.default_prefix as libc::c_int,
                    size as libc::c_ulong,
                );
            } else {
                i386_generate_nops(
                    fragP,
                    (*fragP).fr_opcode,
                    size as offsetT,
                    0 as libc::c_int,
                );
            }
            (*fragP)
                .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
                .wrapping_add(size as libc::c_ulong) as valueT as valueT;
        }
        return;
    }
    opcode = (*fragP).fr_opcode as *mut libc::c_uchar;
    target_address = (S_GET_VALUE((*fragP).fr_symbol))
        .wrapping_add((*fragP).fr_offset as libc::c_ulong) as offsetT;
    opcode_address = ((*fragP).fr_address).wrapping_add((*fragP).fr_fix) as offsetT;
    displacement_from_opcode_start = target_address - opcode_address;
    if (*fragP).fr_subtype & 2 as libc::c_int as libc::c_uint
        == 0 as libc::c_int as libc::c_uint
    {
        extension = 1 as libc::c_int as libc::c_uint;
        where_to_put_displacement = &mut *opcode.offset(1 as libc::c_int as isize)
            as *mut libc::c_uchar;
    } else {
        if no_cond_jump_promotion != 0
            && (*fragP).fr_subtype >> 2 as libc::c_int
                != 0 as libc::c_int as libc::c_uint
        {
            as_warn_where(
                (*fragP).fr_file,
                (*fragP).fr_line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"long jump required\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        match (*fragP).fr_subtype {
            2 => {
                extension = 4 as libc::c_int as libc::c_uint;
                *opcode
                    .offset(
                        0 as libc::c_int as isize,
                    ) = 0xe9 as libc::c_int as libc::c_uchar;
                where_to_put_displacement = &mut *opcode
                    .offset(1 as libc::c_int as isize) as *mut libc::c_uchar;
            }
            3 => {
                extension = 2 as libc::c_int as libc::c_uint;
                *opcode
                    .offset(
                        0 as libc::c_int as isize,
                    ) = 0xe9 as libc::c_int as libc::c_uchar;
                where_to_put_displacement = &mut *opcode
                    .offset(1 as libc::c_int as isize) as *mut libc::c_uchar;
            }
            6 | 10 => {
                extension = 5 as libc::c_int as libc::c_uint;
                *opcode
                    .offset(
                        1 as libc::c_int as isize,
                    ) = (*opcode.offset(0 as libc::c_int as isize) as libc::c_int
                    + 0x10 as libc::c_int) as libc::c_uchar;
                *opcode
                    .offset(
                        0 as libc::c_int as isize,
                    ) = 0xf as libc::c_int as libc::c_uchar;
                where_to_put_displacement = &mut *opcode
                    .offset(2 as libc::c_int as isize) as *mut libc::c_uchar;
            }
            7 => {
                extension = 3 as libc::c_int as libc::c_uint;
                *opcode
                    .offset(
                        1 as libc::c_int as isize,
                    ) = (*opcode.offset(0 as libc::c_int as isize) as libc::c_int
                    + 0x10 as libc::c_int) as libc::c_uchar;
                *opcode
                    .offset(
                        0 as libc::c_int as isize,
                    ) = 0xf as libc::c_int as libc::c_uchar;
                where_to_put_displacement = &mut *opcode
                    .offset(2 as libc::c_int as isize) as *mut libc::c_uchar;
            }
            11 => {
                extension = 4 as libc::c_int as libc::c_uint;
                let ref mut fresh0 = *opcode.offset(0 as libc::c_int as isize);
                *fresh0 = (*fresh0 as libc::c_int ^ 1 as libc::c_int) as libc::c_uchar;
                *opcode
                    .offset(
                        1 as libc::c_int as isize,
                    ) = 3 as libc::c_int as libc::c_uchar;
                *opcode
                    .offset(
                        2 as libc::c_int as isize,
                    ) = 0xe9 as libc::c_int as libc::c_uchar;
                where_to_put_displacement = &mut *opcode
                    .offset(3 as libc::c_int as isize) as *mut libc::c_uchar;
            }
            _ => {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Case value %ld unexpected at line %d of file \"%s\"\n\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    (*fragP).fr_subtype as libc::c_long,
                    12466 as libc::c_int,
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                );
            }
        }
    }
    if (if (*fragP).fr_subtype & 3 as libc::c_int as libc::c_uint
        == 2 as libc::c_int as libc::c_uint
    {
        4 as libc::c_int
    } else {
        (if (*fragP).fr_subtype & 3 as libc::c_int as libc::c_uint
            == (2 as libc::c_int | 1 as libc::c_int) as libc::c_uint
        {
            2 as libc::c_int
        } else {
            1 as libc::c_int
        })
    }) == 4 as libc::c_int && object_64bit != 0
        && ((displacement_from_opcode_start - extension as libc::c_long)
            as libc::c_ulong)
            .wrapping_add((1 as libc::c_int as addressT) << 31 as libc::c_int)
            > ((2 as libc::c_int as addressT) << 31 as libc::c_int)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        as_bad_where(
            (*fragP).fr_file,
            (*fragP).fr_line,
            dcgettext(
                0 as *const libc::c_char,
                b"jump target out of range\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        displacement_from_opcode_start = extension as offsetT;
    }
    number_to_chars_littleendian(
        where_to_put_displacement as *mut libc::c_char,
        (displacement_from_opcode_start - extension as libc::c_long) as valueT,
        if (*fragP).fr_subtype & 3 as libc::c_int as libc::c_uint
            == 2 as libc::c_int as libc::c_uint
        {
            4 as libc::c_int
        } else if (*fragP).fr_subtype & 3 as libc::c_int as libc::c_uint
            == (2 as libc::c_int | 1 as libc::c_int) as libc::c_uint
        {
            2 as libc::c_int
        } else {
            1 as libc::c_int
        },
    );
    (*fragP)
        .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
        .wrapping_add(extension as libc::c_ulong) as valueT as valueT;
}
#[no_mangle]
pub unsafe extern "C" fn md_undefined_symbol(
    mut name: *mut libc::c_char,
) -> *mut symbolS {
    if *name.offset(0 as libc::c_int as isize) as libc::c_int
        == (*::core::mem::transmute::<
            &[u8; 22],
            &[libc::c_char; 22],
        >(b"_GLOBAL_OFFSET_TABLE_\0"))[0 as libc::c_int as usize] as libc::c_int
        && *name.offset(1 as libc::c_int as isize) as libc::c_int
            == (*::core::mem::transmute::<
                &[u8; 22],
                &[libc::c_char; 22],
            >(b"_GLOBAL_OFFSET_TABLE_\0"))[1 as libc::c_int as usize] as libc::c_int
        && *name.offset(2 as libc::c_int as isize) as libc::c_int
            == (*::core::mem::transmute::<
                &[u8; 22],
                &[libc::c_char; 22],
            >(b"_GLOBAL_OFFSET_TABLE_\0"))[2 as libc::c_int as usize] as libc::c_int
        && strcmp(name, b"_GLOBAL_OFFSET_TABLE_\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
    {
        if GOT_symbol.is_null() {
            if !(symbol_find(name)).is_null() {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"GOT already in symbol table\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            GOT_symbol = symbol_new(
                name,
                &mut *_bfd_std_section.as_mut_ptr().offset(1 as libc::c_int as isize),
                &mut zero_address_frag,
                0 as libc::c_int as valueT,
            );
        }
        return GOT_symbol;
    }
    return 0 as *mut symbolS;
}
#[no_mangle]
pub unsafe extern "C" fn md_section_align(
    mut segment: segT,
    mut size: valueT,
) -> valueT {
    return size;
}
#[no_mangle]
pub unsafe extern "C" fn md_estimate_size_before_relax(
    mut fragP: *mut fragS,
    mut segment: segT,
) -> libc::c_int {
    if (*fragP).fr_subtype >> 2 as libc::c_int == 3 as libc::c_int as libc::c_uint
        || (*fragP).fr_subtype >> 2 as libc::c_int == 4 as libc::c_int as libc::c_uint
        || (*fragP).fr_subtype >> 2 as libc::c_int == 5 as libc::c_int as libc::c_uint
    {
        i386_classify_machine_dependent_frag(fragP);
        return (*fragP).tc_frag_data.length as libc::c_int;
    }
    if S_GET_SEGMENT((*fragP).fr_symbol) != segment
        || 1 as libc::c_int != 0
            && elf_symbol_resolved_in_segment_p((*fragP).fr_symbol, (*fragP).fr_var) == 0
    {
        let mut size: libc::c_int = if (*fragP).fr_subtype
            & 1 as libc::c_int as libc::c_uint != 0
        {
            2 as libc::c_int
        } else {
            4 as libc::c_int
        };
        let mut reloc_type: bfd_reloc_code_real = _dummy_first_bfd_reloc_code_real;
        let mut opcode: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
        let mut old_fr_fix: libc::c_int = 0;
        let mut fixP: *mut fixS = 0 as *mut fixS;
        if (*fragP).fr_var != BFD_RELOC_NONE as libc::c_int as libc::c_long {
            reloc_type = (*fragP).fr_var as bfd_reloc_code_real;
        } else if size == 2 as libc::c_int {
            reloc_type = BFD_RELOC_16_PCREL;
        } else if need_plt32_p((*fragP).fr_symbol) {
            reloc_type = BFD_RELOC_X86_64_PLT32;
        } else {
            reloc_type = BFD_RELOC_32_PCREL;
        }
        old_fr_fix = (*fragP).fr_fix as libc::c_int;
        opcode = (*fragP).fr_opcode as *mut libc::c_uchar;
        let mut current_block_30: u64;
        match (*fragP).fr_subtype >> 2 as libc::c_int {
            0 => {
                *opcode
                    .offset(
                        0 as libc::c_int as isize,
                    ) = 0xe9 as libc::c_int as libc::c_uchar;
                (*fragP)
                    .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
                    .wrapping_add(size as libc::c_ulong) as valueT as valueT;
                fixP = fix_new(
                    fragP,
                    old_fr_fix as libc::c_ulong,
                    size as libc::c_ulong,
                    (*fragP).fr_symbol,
                    (*fragP).fr_offset,
                    1 as libc::c_int,
                    reloc_type,
                );
                current_block_30 = 4775909272756257391;
            }
            2 => {
                if size == 2 as libc::c_int
                    && (no_cond_jump_promotion == 0
                        || (*fragP).fr_var
                            != BFD_RELOC_NONE as libc::c_int as libc::c_long)
                {
                    let ref mut fresh1 = *opcode.offset(0 as libc::c_int as isize);
                    *fresh1 = (*fresh1 as libc::c_int ^ 1 as libc::c_int)
                        as libc::c_uchar;
                    *opcode
                        .offset(
                            1 as libc::c_int as isize,
                        ) = 3 as libc::c_int as libc::c_uchar;
                    *opcode
                        .offset(
                            2 as libc::c_int as isize,
                        ) = 0xe9 as libc::c_int as libc::c_uchar;
                    (*fragP)
                        .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
                        .wrapping_add(
                            (2 as libc::c_int + 2 as libc::c_int) as libc::c_ulong,
                        ) as valueT as valueT;
                    fix_new(
                        fragP,
                        (old_fr_fix + 2 as libc::c_int) as libc::c_ulong,
                        2 as libc::c_int as libc::c_ulong,
                        (*fragP).fr_symbol,
                        (*fragP).fr_offset,
                        1 as libc::c_int,
                        reloc_type,
                    );
                    current_block_30 = 4775909272756257391;
                } else {
                    current_block_30 = 4284871906108440285;
                }
            }
            1 => {
                current_block_30 = 4284871906108440285;
            }
            _ => {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Case value %ld unexpected at line %d of file \"%s\"\n\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    (*fragP).fr_subtype as libc::c_long,
                    12261 as libc::c_int,
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                );
            }
        }
        match current_block_30 {
            4284871906108440285 => {
                if no_cond_jump_promotion != 0
                    && (*fragP).fr_var == BFD_RELOC_NONE as libc::c_int as libc::c_long
                {
                    (*fragP)
                        .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
                        .wrapping_add(1 as libc::c_int as libc::c_ulong) as valueT
                        as valueT;
                    fixP = fix_new(
                        fragP,
                        old_fr_fix as libc::c_ulong,
                        1 as libc::c_int as libc::c_ulong,
                        (*fragP).fr_symbol,
                        (*fragP).fr_offset,
                        1 as libc::c_int,
                        BFD_RELOC_8_PCREL,
                    );
                    (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
                } else {
                    *opcode
                        .offset(
                            1 as libc::c_int as isize,
                        ) = (*opcode.offset(0 as libc::c_int as isize) as libc::c_int
                        + 0x10 as libc::c_int) as libc::c_uchar;
                    *opcode
                        .offset(
                            0 as libc::c_int as isize,
                        ) = 0xf as libc::c_int as libc::c_uchar;
                    (*fragP)
                        .fr_fix = ((*fragP).fr_fix as libc::c_ulong)
                        .wrapping_add((1 as libc::c_int + size) as libc::c_ulong)
                        as valueT as valueT;
                    fixP = fix_new(
                        fragP,
                        (old_fr_fix + 1 as libc::c_int) as libc::c_ulong,
                        size as libc::c_ulong,
                        (*fragP).fr_symbol,
                        (*fragP).fr_offset,
                        1 as libc::c_int,
                        reloc_type,
                    );
                }
            }
            _ => {}
        }
        if size == 4 as libc::c_int
            && flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        {
            (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
        }
        frag_wane(fragP);
        return ((*fragP).fr_fix).wrapping_sub(old_fr_fix as libc::c_ulong)
            as libc::c_int;
    }
    return md_relax_table[(*fragP).fr_subtype as usize].rlx_length as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn md_operand(mut e: *mut expressionS) {
    let mut end: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut r: *const reg_entry = 0 as *const reg_entry;
    match *input_line_pointer as libc::c_int {
        37 => {
            r = parse_real_register(input_line_pointer, &mut end);
            if !r.is_null() {
                (*e).set_X_op(O_register);
                (*e).X_add_number = r.offset_from(i386_regtab.as_ptr()) as libc::c_long;
                input_line_pointer = end;
            }
        }
        91 => {
            if intel_syntax != 0 {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    12954 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 31],
                        &[libc::c_char; 31],
                    >(b"void md_operand(expressionS *)\0"))
                        .as_ptr(),
                );
            };
            let fresh2 = input_line_pointer;
            input_line_pointer = input_line_pointer.offset(1);
            end = fresh2;
            expr(0 as libc::c_int, e, expr_normal);
            if *input_line_pointer as libc::c_int == ']' as i32 {
                input_line_pointer = input_line_pointer.offset(1);
                input_line_pointer;
                (*e).X_op_symbol = make_expr_symbol(e);
                (*e).X_add_symbol = 0 as *mut symbolS;
                (*e).X_add_number = 0 as libc::c_int as offsetT;
                (*e).set_X_op(O_index);
            } else {
                (*e).set_X_op(O_absent);
                input_line_pointer = end;
            }
        }
        _ => {}
    };
}
#[no_mangle]
pub unsafe extern "C" fn md_pcrel_from(mut fixP: *mut fixS) -> libc::c_long {
    return ((*fixP).fx_size() as libc::c_ulong)
        .wrapping_add((*fixP).fx_where)
        .wrapping_add((*(*fixP).fx_frag).fr_address) as libc::c_long;
}
#[no_mangle]
pub unsafe extern "C" fn md_apply_fix(
    mut fixP: *mut fixS,
    mut valP: *mut valueT,
    mut seg: segT,
) {
    let mut p: *mut libc::c_char = ((*(*fixP).fx_frag).fr_literal)
        .as_mut_ptr()
        .offset((*fixP).fx_where as isize);
    let mut value: valueT = *valP;
    if (*fixP).fx_pcrel() != 0 {
        match (*fixP).fx_r_type as libc::c_uint {
            1 => {
                (*fixP).fx_r_type = BFD_RELOC_64_PCREL;
            }
            2 | 388 => {
                (*fixP).fx_r_type = BFD_RELOC_32_PCREL;
            }
            5 => {
                (*fixP).fx_r_type = BFD_RELOC_16_PCREL;
            }
            7 => {
                (*fixP).fx_r_type = BFD_RELOC_8_PCREL;
            }
            _ => {}
        }
    }
    if !((*fixP).fx_addsy).is_null()
        && ((*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_32_PCREL as libc::c_int as libc::c_uint
            || (*fixP).fx_r_type as libc::c_uint
                == BFD_RELOC_64_PCREL as libc::c_int as libc::c_uint
            || (*fixP).fx_r_type as libc::c_uint
                == BFD_RELOC_16_PCREL as libc::c_int as libc::c_uint
            || (*fixP).fx_r_type as libc::c_uint
                == BFD_RELOC_8_PCREL as libc::c_int as libc::c_uint)
        && use_rela_relocations == 0
    {
        value = (value as libc::c_ulong)
            .wrapping_add(((*fixP).fx_where).wrapping_add((*(*fixP).fx_frag).fr_address))
            as valueT as valueT;
        let mut sym_seg: segT = S_GET_SEGMENT((*fixP).fx_addsy);
        if (sym_seg == seg
            || symbol_section_p((*fixP).fx_addsy) != 0
                && sym_seg
                    != &mut *_bfd_std_section
                        .as_mut_ptr()
                        .offset(2 as libc::c_int as isize) as *mut asection)
            && generic_force_reloc(fixP) == 0
        {
            value = (value as libc::c_ulong)
                .wrapping_add(
                    ((*fixP).fx_where).wrapping_add((*(*fixP).fx_frag).fr_address),
                ) as valueT as valueT;
        }
    }
    if 1 as libc::c_int != 0 && !((*fixP).fx_addsy).is_null() {
        let mut current_block_25: u64;
        match (*fixP).fx_r_type as libc::c_uint {
            357 | 382 => {
                if (*fixP).fx_pcrel() != 0 {
                    value = -(4 as libc::c_int) as valueT;
                }
                current_block_25 = 1836292691772056875;
            }
            368 | 369 | 371 | 365 | 366 | 376 | 392 | 393 | 395 | 404 => {
                value = 0 as libc::c_int as valueT;
                current_block_25 = 9615909697123219339;
            }
            367 | 370 | 372 | 394 | 390 | 396 | 391 => {
                current_block_25 = 9615909697123219339;
            }
            377 | 405 => {
                value = 0 as libc::c_int as valueT;
                S_SET_THREAD_LOCAL((*fixP).fx_addsy);
                (*fixP).set_fx_done(0 as libc::c_int as libc::c_uint);
                return;
            }
            1510 | 1511 => {
                (*fixP).set_fx_done(0 as libc::c_int as libc::c_uint);
                return;
            }
            _ => {
                current_block_25 = 1836292691772056875;
            }
        }
        match current_block_25 {
            9615909697123219339 => {
                S_SET_THREAD_LOCAL((*fixP).fx_addsy);
            }
            _ => {}
        }
    }
    if object_64bit == 0 {
        value = extend_to_32bit_address(value);
    }
    *valP = value;
    if ((*fixP).fx_addsy).is_null() {
        (*fixP).set_fx_done(1 as libc::c_int as libc::c_uint);
        match (*fixP).fx_r_type as libc::c_uint {
            388 => {
                (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
            }
            _ => {}
        }
    } else if use_rela_relocations != 0 {
        (*fixP).set_fx_no_overflow(1 as libc::c_int as libc::c_uint);
        (*fixP).fx_addnumber = value;
        value = 0 as libc::c_int as valueT;
    }
    number_to_chars_littleendian(p, value, (*fixP).fx_size() as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn md_begin() {
    *lex_type
        .as_mut_ptr()
        .offset('{' as i32 as isize) = 2 as libc::c_int as libc::c_char;
    op_hash = str_htab_create();
    let mut optab: *const insn_template = 0 as *const insn_template;
    let mut core_optab: *mut templates = 0 as *mut templates;
    optab = i386_optab.as_ptr();
    core_optab = xmalloc(::core::mem::size_of::<templates>() as libc::c_ulong)
        as *mut templates;
    (*core_optab).start = optab;
    loop {
        optab = optab.offset(1);
        optab;
        if !(((*optab).name).is_null()
            || strcmp((*optab).name, (*optab.offset(-(1 as libc::c_int as isize))).name)
                != 0 as libc::c_int)
        {
            continue;
        }
        (*core_optab).end = optab;
        if !(str_hash_insert(
            op_hash,
            (*optab.offset(-(1 as libc::c_int as isize))).name,
            core_optab as *const libc::c_void,
            0 as libc::c_int,
        ))
            .is_null()
        {
            as_fatal(
                dcgettext(
                    0 as *const libc::c_char,
                    b"duplicate %s\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                (*optab.offset(-(1 as libc::c_int as isize))).name,
            );
        }
        if ((*optab).name).is_null() {
            break;
        }
        core_optab = xmalloc(::core::mem::size_of::<templates>() as libc::c_ulong)
            as *mut templates;
        (*core_optab).start = optab;
    }
    reg_hash = str_htab_create();
    let mut regtab: *const reg_entry = 0 as *const reg_entry;
    let mut regtab_size: libc::c_uint = i386_regtab_size;
    let mut current_block_26: u64;
    regtab = i386_regtab.as_ptr();
    loop {
        let fresh3 = regtab_size;
        regtab_size = regtab_size.wrapping_sub(1);
        if !(fresh3 != 0) {
            break;
        }
        match ((*regtab).reg_type.bitfield).class() as libc::c_int {
            1 => {
                if ((*regtab).reg_type.bitfield).dword() != 0 {
                    if ((*regtab).reg_type.bitfield).instance() as libc::c_int
                        == Accum as libc::c_int
                    {
                        reg_eax = regtab;
                    }
                    current_block_26 = 18377268871191777778;
                } else if ((*regtab).reg_type.bitfield).tbyte() != 0 {
                    if ((*regtab).reg_type.bitfield).instance() as libc::c_int
                        != Accum as libc::c_int
                    {
                        current_block_26 = 8236137900636309791;
                    } else {
                        reg_st0 = regtab;
                        current_block_26 = 18377268871191777778;
                    }
                } else {
                    current_block_26 = 18377268871191777778;
                }
            }
            2 => {
                match (*regtab).reg_num as libc::c_int {
                    0 => {
                        reg_es = regtab;
                    }
                    2 => {
                        reg_ss = regtab;
                    }
                    3 => {
                        reg_ds = regtab;
                    }
                    _ => {}
                }
                current_block_26 = 18377268871191777778;
            }
            8 => {
                if (*regtab).reg_num == 0 {
                    reg_k0 = regtab;
                }
                current_block_26 = 18377268871191777778;
            }
            _ => {
                current_block_26 = 18377268871191777778;
            }
        }
        match current_block_26 {
            18377268871191777778 => {
                if !(str_hash_insert(
                    reg_hash,
                    (*regtab).reg_name,
                    regtab as *const libc::c_void,
                    0 as libc::c_int,
                ))
                    .is_null()
                {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"duplicate %s\0" as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        (*regtab).reg_name,
                    );
                }
            }
            _ => {}
        }
        regtab = regtab.offset(1);
        regtab;
    }
    let mut c: libc::c_int = 0;
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    c = 0 as libc::c_int;
    while c < 256 as libc::c_int {
        if _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
            & _sch_isdigit as libc::c_int as libc::c_ushort as libc::c_int != 0
            || _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
                & _sch_islower as libc::c_int as libc::c_ushort as libc::c_int != 0
        {
            mnemonic_chars[c as usize] = c as libc::c_char;
            register_chars[c as usize] = c as libc::c_char;
            operand_chars[c as usize] = c as libc::c_char;
        } else if _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
            & _sch_isupper as libc::c_int as libc::c_ushort as libc::c_int != 0
        {
            mnemonic_chars[c
                as usize] = _sch_tolower[(c & 0xff as libc::c_int) as usize]
                as libc::c_char;
            register_chars[c as usize] = mnemonic_chars[c as usize];
            operand_chars[c as usize] = c as libc::c_char;
        } else if c == '{' as i32 || c == '}' as i32 {
            mnemonic_chars[c as usize] = c as libc::c_char;
            operand_chars[c as usize] = c as libc::c_char;
        }
        if _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
            & _sch_isalpha as libc::c_int as libc::c_ushort as libc::c_int != 0
            || _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
                & _sch_isdigit as libc::c_int as libc::c_ushort as libc::c_int != 0
        {
            identifier_chars[c as usize] = c as libc::c_char;
        } else if c >= 128 as libc::c_int {
            identifier_chars[c as usize] = c as libc::c_char;
            operand_chars[c as usize] = c as libc::c_char;
        }
        c += 1;
        c;
    }
    mnemonic_chars['_' as i32 as usize] = '_' as i32 as libc::c_char;
    mnemonic_chars['-' as i32 as usize] = '-' as i32 as libc::c_char;
    mnemonic_chars['.' as i32 as usize] = '.' as i32 as libc::c_char;
    identifier_chars['_' as i32 as usize] = '_' as i32 as libc::c_char;
    identifier_chars['.' as i32 as usize] = '.' as i32 as libc::c_char;
    p = operand_special_chars.as_mut_ptr();
    while *p as libc::c_int != '\0' as i32 {
        operand_chars[*p as libc::c_uchar as usize] = *p;
        p = p.offset(1);
        p;
    }
    if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
        x86_dwarf2_return_column = 16 as libc::c_int as libc::c_uint;
        x86_cie_data_alignment = -(8 as libc::c_int);
    } else {
        x86_dwarf2_return_column = 8 as libc::c_int as libc::c_uint;
        x86_cie_data_alignment = -(4 as libc::c_int);
    }
    if align_branch_prefix_size > 20 as libc::c_int as libc::c_uint {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            3201 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 20],
                &[libc::c_char; 20],
            >(b"void md_begin(void)\0"))
                .as_ptr(),
        );
    }
}
#[no_mangle]
pub static mut cpu_arch_isa_flags: i386_cpu_flags = i386_cpu_flags {
    bitfield: C2RustUnnamed_24 {
        cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
    },
};
#[no_mangle]
pub static mut cpu_arch_tune: processor_type = PROCESSOR_UNKNOWN;
#[no_mangle]
pub static mut extra_symbol_chars: [libc::c_char; 8] = unsafe {
    *::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"*%-([{}\0")
};
#[no_mangle]
pub static mut i386_comment_chars: *const libc::c_char = b"#\0" as *const u8
    as *const libc::c_char;
#[no_mangle]
pub unsafe extern "C" fn x86_cons(
    mut exp: *mut expressionS,
    mut size: libc::c_int,
) -> bfd_reloc_code_real_type {
    let mut got_reloc: bfd_reloc_code_real_type = BFD_RELOC_NONE;
    intel_syntax = -intel_syntax;
    (*exp).X_md = 0 as libc::c_int as libc::c_ushort;
    if size == 4 as libc::c_int || object_64bit != 0 && size == 8 as libc::c_int {
        let mut save: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut gotfree_input_line: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut adjust: libc::c_int = 0 as libc::c_int;
        save = input_line_pointer;
        gotfree_input_line = lex_got(
            &mut got_reloc,
            &mut adjust,
            0 as *mut i386_operand_type,
        );
        if !gotfree_input_line.is_null() {
            input_line_pointer = gotfree_input_line;
        }
        expr(0 as libc::c_int, exp, expr_normal);
        if !gotfree_input_line.is_null() {
            input_line_pointer = save
                .offset(
                    input_line_pointer.offset_from(gotfree_input_line) as libc::c_long
                        as isize,
                )
                .offset(adjust as isize);
            free(gotfree_input_line as *mut libc::c_void);
            if (*exp).X_op() as libc::c_int == O_constant as libc::c_int
                || (*exp).X_op() as libc::c_int == O_absent as libc::c_int
                || (*exp).X_op() as libc::c_int == O_illegal as libc::c_int
                || (*exp).X_op() as libc::c_int == O_register as libc::c_int
                || (*exp).X_op() as libc::c_int == O_big as libc::c_int
            {
                let mut c: libc::c_char = *input_line_pointer;
                *input_line_pointer = 0 as libc::c_int as libc::c_char;
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"missing or invalid expression `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    save,
                );
                *input_line_pointer = c;
            } else if (got_reloc as libc::c_uint
                == BFD_RELOC_386_PLT32 as libc::c_int as libc::c_uint
                || got_reloc as libc::c_uint
                    == BFD_RELOC_X86_64_PLT32 as libc::c_int as libc::c_uint)
                && (*exp).X_op() as libc::c_int != O_symbol as libc::c_int
            {
                let mut c_0: libc::c_char = *input_line_pointer;
                *input_line_pointer = 0 as libc::c_int as libc::c_char;
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid PLT expression `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    save,
                );
                *input_line_pointer = c_0;
            }
        }
    } else {
        expr(0 as libc::c_int, exp, expr_normal);
    }
    intel_syntax = -intel_syntax;
    if intel_syntax != 0 {
        i386_intel_simplify(exp);
    }
    if size == 4 as libc::c_int
        && (*exp).X_op() as libc::c_int == O_constant as libc::c_int && object_64bit == 0
    {
        (*exp)
            .X_add_number = extend_to_32bit_address((*exp).X_add_number as addressT)
            as offsetT;
    }
    return got_reloc;
}
#[no_mangle]
pub unsafe extern "C" fn md_assemble(mut line: *mut libc::c_char) {
    let mut j: libc::c_uint = 0;
    let mut mnemonic: [libc::c_char; 20] = [0; 20];
    let mut mnem_suffix: libc::c_char = 0;
    let mut t: *const insn_template = 0 as *const insn_template;
    memset(
        &mut i as *mut i386_insn as *mut libc::c_void,
        '\0' as i32,
        ::core::mem::size_of::<i386_insn>() as libc::c_ulong,
    );
    i.rounding.type_0 = rc_none;
    j = 0 as libc::c_int as libc::c_uint;
    while j < 5 as libc::c_int as libc::c_uint {
        i.reloc[j as usize] = BFD_RELOC_NONE;
        j = j.wrapping_add(1);
        j;
    }
    memset(
        disp_expressions.as_mut_ptr() as *mut libc::c_void,
        '\0' as i32,
        ::core::mem::size_of::<[expressionS; 2]>() as libc::c_ulong,
    );
    memset(
        im_expressions.as_mut_ptr() as *mut libc::c_void,
        '\0' as i32,
        ::core::mem::size_of::<[expressionS; 2]>() as libc::c_ulong,
    );
    save_stack_p = save_stack.as_mut_ptr();
    line = parse_insn(line, mnemonic.as_mut_ptr());
    if line.is_null() {
        return;
    }
    mnem_suffix = i.suffix;
    line = parse_operands(line, mnemonic.as_mut_ptr());
    this_operand = -(1 as libc::c_int);
    free(i.memop1_string as *mut libc::c_void);
    i.memop1_string = 0 as *mut libc::c_char;
    if line.is_null() {
        return;
    }
    if intel_syntax != 0 && i.operands > 1 as libc::c_int as libc::c_uint
        && strcmp(mnemonic.as_mut_ptr(), b"bound\0" as *const u8 as *const libc::c_char)
            != 0 as libc::c_int
        && strncmp(
            mnemonic.as_mut_ptr(),
            b"invlpg\0" as *const u8 as *const libc::c_char,
            6 as libc::c_int as libc::c_ulong,
        ) != 0 as libc::c_int
        && !startswith(
            mnemonic.as_mut_ptr(),
            b"monitor\0" as *const u8 as *const libc::c_char,
        )
        && !startswith(
            mnemonic.as_mut_ptr(),
            b"mwait\0" as *const u8 as *const libc::c_char,
        )
        && strcmp(
            mnemonic.as_mut_ptr(),
            b"pvalidate\0" as *const u8 as *const libc::c_char,
        ) != 0 as libc::c_int
        && !startswith(
            mnemonic.as_mut_ptr(),
            b"rmp\0" as *const u8 as *const libc::c_char,
        )
        && strcmp(mnemonic.as_mut_ptr(), b"tpause\0" as *const u8 as *const libc::c_char)
            != 0 as libc::c_int
        && strcmp(mnemonic.as_mut_ptr(), b"umwait\0" as *const u8 as *const libc::c_char)
            != 0 as libc::c_int
        && !(operand_type_check(i.types[0 as libc::c_int as usize], imm) != 0
            && operand_type_check(i.types[1 as libc::c_int as usize], imm) != 0)
    {
        swap_operands();
    }
    if i.imm_operands == 2 as libc::c_int as libc::c_uint
        && (strcmp(mnemonic.as_mut_ptr(), b"extrq\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
            || strcmp(
                mnemonic.as_mut_ptr(),
                b"insertq\0" as *const u8 as *const libc::c_char,
            ) == 0 as libc::c_int)
    {
        swap_2_operands(
            0 as libc::c_int as libc::c_uint,
            1 as libc::c_int as libc::c_uint,
        );
    }
    if i.imm_operands != 0 {
        optimize_imm();
    }
    if i.disp_operands != 0 && !want_disp32((*current_templates).start) {
        j = 0 as libc::c_int as libc::c_uint;
        while j < i.operands {
            let mut exp: *const expressionS = i.op[j as usize].disps;
            if !(operand_type_check(i.types[j as usize], disp) == 0) {
                if !((*exp).X_op() as libc::c_int != O_constant as libc::c_int) {
                    (i.types[j as usize].bitfield)
                        .set_disp32(0 as libc::c_int as libc::c_uint);
                    if !(fits_in_signed_long((*exp).X_add_number as addressT) != 0) {
                        (i.types[j as usize].bitfield)
                            .set_disp32s(0 as libc::c_int as libc::c_uint);
                        if (i.types[j as usize].bitfield).baseindex() != 0 {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"0x%lx out of range of signed 32bit displacement\0"
                                        as *const u8 as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                (*exp).X_add_number,
                            );
                            return;
                        }
                    }
                }
            }
            j = j.wrapping_add(1);
            j;
        }
    }
    if i.disp_operands != 0
        && i.disp_encoding as libc::c_uint
            != disp_encoding_32bit as libc::c_int as libc::c_uint
        && (flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
            || strcmp(
                mnemonic.as_mut_ptr(),
                b"movabs\0" as *const u8 as *const libc::c_char,
            ) != 0 as libc::c_int)
    {
        optimize_disp();
    }
    t = match_template(mnem_suffix);
    if t.is_null() {
        return;
    }
    if sse_check as libc::c_uint != check_none as libc::c_int as libc::c_uint
        && (i.tm.opcode_modifier).noavx() == 0 && (i.tm.cpu_flags.bitfield).cpuavx() == 0
        && (i.tm.cpu_flags.bitfield).cpuavx512f() == 0
        && ((i.tm.cpu_flags.bitfield).cpusse() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse2() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse3() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpussse3() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse4_1() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse4_2() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpupclmul() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuaes() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusha() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpugfni() as libc::c_int != 0)
    {
        if sse_check as libc::c_uint == check_warning as libc::c_int as libc::c_uint {
            Some(as_warn as unsafe extern "C" fn(*const libc::c_char, ...) -> ())
        } else {
            Some(as_bad as unsafe extern "C" fn(*const libc::c_char, ...) -> ())
        }
            .expect(
                "non-null function pointer",
            )(
            dcgettext(
                0 as *const libc::c_char,
                b"SSE instruction `%s' is used\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
    }
    if (i.tm.opcode_modifier).fwait() != 0 {
        if add_prefix(0x9b as libc::c_int as libc::c_uint) as u64 == 0 {
            return;
        }
    }
    if !(i.rep_prefix).is_null()
        && (i.tm.opcode_modifier).prefixok() as libc::c_int != 1 as libc::c_int
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"invalid instruction `%s' after `%s'\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
            i.rep_prefix,
        );
        return;
    }
    if i.prefix[5 as libc::c_int as usize] as libc::c_int != 0
        && (((i.tm.opcode_modifier).prefixok() as libc::c_int) < 4 as libc::c_int
            || i.mem_operands == 0 as libc::c_int as libc::c_uint
            || (i.tm).base_opcode() as libc::c_int != 0x86 as libc::c_int
                && i
                    .flags[(i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
                    as usize] & 2 as libc::c_int as libc::c_uint == 0)
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"expecting lockable instruction after `lock'\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return;
    }
    if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0
        && (is_any_vex_encoding(&mut i.tm) as libc::c_int != 0
            || (i.tm.operand_types[i.imm_operands as usize].bitfield).class()
                as libc::c_int >= RegMMX as libc::c_int
            || (i
                .tm
                .operand_types[(i.imm_operands)
                    .wrapping_add(1 as libc::c_int as libc::c_uint) as usize]
                .bitfield)
                .class() as libc::c_int >= RegMMX as libc::c_int)
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"data size prefix invalid with `%s'\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
        return;
    }
    if !(i.hle_prefix).is_null() && check_hle() == 0 {
        return;
    }
    if !(i.bnd_prefix).is_null() && (i.tm.opcode_modifier).bndprefixok() == 0 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"expecting valid branch instruction after `bnd'\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    }
    if !(i.notrack_prefix).is_null()
        && (i.tm.opcode_modifier).prefixok() as libc::c_int != 3 as libc::c_int
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"expecting indirect branch instruction after `notrack'\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    }
    if (i.tm.cpu_flags.bitfield).cpumpx() != 0 {
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
            && i.prefix[2 as libc::c_int as usize] as libc::c_int != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"32-bit address isn't allowed in 64-bit MPX instructions.\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        } else if if flag_code as libc::c_uint
            != CODE_16BIT as libc::c_int as libc::c_uint
        {
            i.prefix[2 as libc::c_int as usize] as libc::c_int
        } else {
            (i.mem_operands != 0 && i.prefix[2 as libc::c_int as usize] == 0)
                as libc::c_int
        } != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"16-bit address isn't allowed in MPX instructions\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
    }
    if add_bnd_prefix != 0 && (i.tm.opcode_modifier).bndprefixok() as libc::c_int != 0 {
        if i.prefix[4 as libc::c_int as usize] == 0 {
            add_prefix(0xf2 as libc::c_int as libc::c_uint);
        } else if i.prefix[4 as libc::c_int as usize] as libc::c_int
            != 0xf2 as libc::c_int
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"replacing `rep'/`repe' prefix by `bnd'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            i.prefix[4 as libc::c_int as usize] = 0xf2 as libc::c_int as libc::c_uchar;
        }
    }
    if (i.tm.opcode_modifier).isstring() as libc::c_int >= 2 as libc::c_int {
        if i.mem_operands != 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                5032 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 25],
                    &[libc::c_char; 25],
                >(b"void md_assemble(char *)\0"))
                    .as_ptr(),
            );
        };
        if check_string() == 0 {
            return;
        }
        i.disp_operands = 0 as libc::c_int as libc::c_uint;
    }
    if optimize != 0 && !i.no_optimize
        && (i.tm.opcode_modifier).optimize() as libc::c_int != 0
    {
        optimize_encoding();
    }
    if process_suffix() == 0 {
        return;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while j < i.operands {
        i
            .types[j
            as usize] = operand_type_and(
            i.types[j as usize],
            i.tm.operand_types[j as usize],
        );
        match (i.tm.operand_types[j as usize].bitfield).class() as libc::c_int {
            6 => {
                i
                    .xstate = ::core::mem::transmute::<
                    libc::c_uint,
                    C2RustUnnamed_38,
                >(i.xstate as libc::c_uint | xstate_mmx as libc::c_int as libc::c_uint);
            }
            8 => {
                i
                    .xstate = ::core::mem::transmute::<
                    libc::c_uint,
                    C2RustUnnamed_38,
                >(i.xstate as libc::c_uint | xstate_mask as libc::c_int as libc::c_uint);
            }
            7 => {
                if (i.tm.operand_types[j as usize].bitfield).tmmword() != 0 {
                    i
                        .xstate = ::core::mem::transmute::<
                        libc::c_uint,
                        C2RustUnnamed_38,
                    >(
                        i.xstate as libc::c_uint
                            | xstate_tmm as libc::c_int as libc::c_uint,
                    );
                } else if (i.tm.operand_types[j as usize].bitfield).zmmword() != 0 {
                    i
                        .xstate = ::core::mem::transmute::<
                        libc::c_uint,
                        C2RustUnnamed_38,
                    >(
                        i.xstate as libc::c_uint
                            | xstate_zmm as libc::c_int as libc::c_uint,
                    );
                } else if (i.tm.operand_types[j as usize].bitfield).ymmword() != 0 {
                    i
                        .xstate = ::core::mem::transmute::<
                        libc::c_uint,
                        C2RustUnnamed_38,
                    >(
                        i.xstate as libc::c_uint
                            | xstate_ymm as libc::c_int as libc::c_uint,
                    );
                } else if (i.tm.operand_types[j as usize].bitfield).xmmword() != 0 {
                    i
                        .xstate = ::core::mem::transmute::<
                        libc::c_uint,
                        C2RustUnnamed_38,
                    >(
                        i.xstate as libc::c_uint
                            | xstate_xmm as libc::c_int as libc::c_uint,
                    );
                }
            }
            _ => {}
        }
        j = j.wrapping_add(1);
        j;
    }
    if finalize_imm() == 0 {
        return;
    }
    if (i.types[0 as libc::c_int as usize].bitfield).imm1() != 0 {
        i.imm_operands = 0 as libc::c_int as libc::c_uint;
    }
    if i.operands <= 3 as libc::c_int as libc::c_uint {
        j = 0 as libc::c_int as libc::c_uint;
        while j < i.operands {
            if (i.types[j as usize].bitfield).instance() as libc::c_int
                != InstanceNone as libc::c_int
                && (i.types[j as usize].bitfield).xmmword() == 0
            {
                i.reg_operands = (i.reg_operands).wrapping_sub(1);
                i.reg_operands;
            }
            j = j.wrapping_add(1);
            j;
        }
    }
    if i.operands != 0 {
        if process_operands() == 0 {
            return;
        }
    } else if quiet_warnings == 0 && (i.tm.opcode_modifier).ugh() as libc::c_int != 0 {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"translating to `%sp'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
    }
    if is_any_vex_encoding(&mut i.tm) {
        if (cpu_arch_flags.bitfield).cpui286() == 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"instruction `%s' isn't supported outside of protected mode.\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
            );
            return;
        }
        if i.prefix[6 as libc::c_int as usize] as libc::c_int != 0
            || i.rex_encoding as libc::c_int != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"REX prefix invalid with `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
            );
            return;
        }
        if (i.tm.opcode_modifier).vex() != 0 {
            build_vex_prefix(t);
        } else {
            build_evex_prefix();
        }
        i.rex &= 0x40 as libc::c_int;
    }
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && (i.tm).base_opcode() as libc::c_int == 0xcd as libc::c_int
        && (i.tm.opcode_modifier).modrm() == 0
        && (*i.op[0 as libc::c_int as usize].imms).X_add_number
            == 3 as libc::c_int as libc::c_long
    {
        (i.tm).set_base_opcode(0xcc as libc::c_int as libc::c_uint);
        i.imm_operands = 0 as libc::c_int as libc::c_uint;
    }
    if ((i.tm.opcode_modifier).jump() as libc::c_int == 1 as libc::c_int
        || (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int
        || (i.tm.opcode_modifier).jump() as libc::c_int == 2 as libc::c_int)
        && (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
            == O_constant as libc::c_int
    {
        (*i.op[0 as libc::c_int as usize].disps).X_add_symbol = &mut abs_symbol;
        (*i.op[0 as libc::c_int as usize].disps).set_X_op(O_symbol);
    }
    if (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
        == Reg as libc::c_int
        && (i.types[0 as libc::c_int as usize].bitfield).byte() as libc::c_int != 0
        && (*i.op[0 as libc::c_int as usize].regs).reg_flags as libc::c_int
            & 0x2 as libc::c_int != 0 as libc::c_int
        || (i.types[1 as libc::c_int as usize].bitfield).class() as libc::c_int
            == Reg as libc::c_int
            && (i.types[1 as libc::c_int as usize].bitfield).byte() as libc::c_int != 0
            && (*i.op[1 as libc::c_int as usize].regs).reg_flags as libc::c_int
                & 0x2 as libc::c_int != 0 as libc::c_int
        || ((i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
            == Reg as libc::c_int
            && (i.types[0 as libc::c_int as usize].bitfield).byte() as libc::c_int != 0
            || (i.types[1 as libc::c_int as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                && (i.types[1 as libc::c_int as usize].bitfield).byte() as libc::c_int
                    != 0) && i.rex != 0 as libc::c_int
    {
        let mut x: libc::c_int = 0;
        i.rex |= 0x40 as libc::c_int;
        x = 0 as libc::c_int;
        while x < 2 as libc::c_int {
            if (i.types[x as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                && (i.types[x as usize].bitfield).byte() as libc::c_int != 0
                && (*i.op[x as usize].regs).reg_flags as libc::c_int & 0x2 as libc::c_int
                    == 0 as libc::c_int
            {
                if (*i.op[x as usize].regs).reg_flags as libc::c_int & 0x1 as libc::c_int
                    == 0
                {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        5169 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 25],
                            &[libc::c_char; 25],
                        >(b"void md_assemble(char *)\0"))
                            .as_ptr(),
                    );
                };
                if (*i.op[x as usize].regs).reg_num as libc::c_int > 3 as libc::c_int {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"can't encode register '%s%s' in an instruction requiring REX prefix.\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        register_prefix,
                        (*i.op[x as usize].regs).reg_name,
                    );
                }
                i
                    .op[x as usize]
                    .regs = (i.op[x as usize].regs).offset(8 as libc::c_int as isize);
            }
            x += 1;
            x;
        }
    }
    if i.rex == 0 as libc::c_int && i.rex_encoding as libc::c_int != 0 {
        let mut x_0: libc::c_int = 0;
        x_0 = 0 as libc::c_int;
        while x_0 < 2 as libc::c_int {
            if (i.types[x_0 as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                && (i.types[x_0 as usize].bitfield).byte() as libc::c_int != 0
                && (*i.op[x_0 as usize].regs).reg_flags as libc::c_int
                    & 0x2 as libc::c_int == 0 as libc::c_int
                && (*i.op[x_0 as usize].regs).reg_num as libc::c_int > 3 as libc::c_int
            {
                if (*i.op[x_0 as usize].regs).reg_flags as libc::c_int
                    & 0x1 as libc::c_int == 0
                {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        5197 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 25],
                            &[libc::c_char; 25],
                        >(b"void md_assemble(char *)\0"))
                            .as_ptr(),
                    );
                };
                i.rex_encoding = 0 as libc::c_int != 0;
                break;
            } else {
                x_0 += 1;
                x_0;
            }
        }
        if i.rex_encoding {
            i.rex = 0x40 as libc::c_int;
        }
    }
    if i.rex != 0 as libc::c_int {
        add_prefix((0x40 as libc::c_int | i.rex) as libc::c_uint);
    }
    insert_lfence_before();
    output_insn();
    insert_lfence_after();
    last_insn.seg = now_seg;
    if (i.tm.opcode_modifier).isprefix() != 0 {
        last_insn.kind = last_insn_prefix;
        last_insn.name = i.tm.name;
        last_insn.file = as_where(&mut last_insn.line);
    } else {
        last_insn.kind = last_insn_other;
    };
}
#[no_mangle]
pub unsafe extern "C" fn md_show_usage(mut stream: *mut FILE) {
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -Qy, -Qn                ignored\n  -V                      print assembler version number\n  -k                      ignored\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -n                      Do not optimize code alignment\n  -q                      quieten some warnings\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -s                      ignored\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  --32/--64/--x32         generate 32bit/64bit/x32 object\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  --divide                ignored\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -march=CPU[,+EXTENSION...]\n                          generate code for CPU and EXTENSION, CPU is one of:\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    show_arch(stream, 0 as libc::c_int, 1 as libc::c_int);
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"                          EXTENSION is combination of:\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    show_arch(stream, 1 as libc::c_int, 0 as libc::c_int);
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mtune=CPU              optimize for CPU, CPU is one of:\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    show_arch(stream, 0 as libc::c_int, 0 as libc::c_int);
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -msse2avx               encode SSE instructions with VEX prefix\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -msse-check=[none|error|warning] (default: warning)\n                          check SSE instructions\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -moperand-check=[none|error|warning] (default: warning)\n                          check operand combinations for validity\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mavxscalar=[128|256] (default: 128)\n                          encode scalar AVX instructions with specific vector\n                           length\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mvexwig=[0|1] (default: 0)\n                          encode VEX instructions with specific VEX.W value\n                           for VEX.W bit ignored instructions\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mevexlig=[128|256|512] (default: 128)\n                          encode scalar EVEX instructions with specific vector\n                           length\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mevexwig=[0|1] (default: 0)\n                          encode EVEX instructions with specific EVEX.W value\n                           for EVEX.W bit ignored instructions\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mevexrcig=[rne|rd|ru|rz] (default: rne)\n                          encode EVEX instructions with specific EVEX.RC value\n                           for SAE-only ignored instructions\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mmnemonic=[att|intel] \0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"(default: att)\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"                          use AT&T/Intel mnemonic\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -msyntax=[att|intel] (default: att)\n                          use AT&T/Intel syntax\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mindex-reg             support pseudo index registers\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mnaked-reg             don't require `%%' prefix for registers\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -madd-bnd-prefix        add BND prefix for all valid branches\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mshared                disable branch optimization for shared code\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mx86-used-note=[no|yes] \0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"(default: yes)\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"                          generate x86 used ISA and feature properties\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -momit-lock-prefix=[no|yes] (default: no)\n                          strip all lock prefixes\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mfence-as-lock-add=[no|yes] (default: no)\n                          encode lfence, mfence and sfence as\n                           lock addl $0x0, (%%{re}sp)\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mrelax-relocations=[no|yes] \0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"(default: yes)\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"                          generate relax relocations\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -malign-branch-boundary=NUM (default: 0)\n                          align branches within NUM byte boundary\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -malign-branch=TYPE[+TYPE...] (default: jcc+fused+jmp)\n                          TYPE is combination of jcc, fused, jmp, call, ret,\n                           indirect\n                          specify types of branches to align\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -malign-branch-prefix-size=NUM (default: 5)\n                          align branches with NUM prefixes per instruction\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mbranches-within-32B-boundaries\n                          align branches within 32 byte boundary\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mlfence-after-load=[no|yes] (default: no)\n                          generate lfence after load\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mlfence-before-indirect-branch=[none|all|register|memory] (default: none)\n                          generate lfence before indirect near branch\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mlfence-before-ret=[none|or|not|shl|yes] (default: none)\n                          generate lfence before ret\n\0"
                as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mamd64                 accept only AMD64 ISA [default]\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
    fprintf(
        stream,
        dcgettext(
            0 as *const libc::c_char,
            b"  -mintel64               accept only Intel64 ISA\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
    );
}
#[no_mangle]
pub unsafe extern "C" fn md_parse_option(
    mut c: libc::c_int,
    mut arg: *const libc::c_char,
) -> libc::c_int {
    let mut j: libc::c_uint = 0;
    let mut arch: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut next: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut saved: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut type_0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut current_block_238: u64;
    match c {
        110 => {
            optimize_align_code = 0 as libc::c_int;
        }
        113 => {
            quiet_warnings = 1 as libc::c_int;
        }
        81 => {
            if *arg.offset(0 as libc::c_int as isize) as libc::c_int != 'y' as i32
                && *arg.offset(0 as libc::c_int as isize) as libc::c_int != 'n' as i32
                || *arg.offset(1 as libc::c_int as isize) as libc::c_int != 0
            {
                return 0 as libc::c_int;
            }
        }
        86 => {
            print_version_id();
        }
        311 => {
            shared = 1 as libc::c_int;
        }
        315 => {
            if strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                x86_used_note = 1 as libc::c_int as libc::c_uint;
            } else if strcasecmp(arg, b"no\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                x86_used_note = 0 as libc::c_int as libc::c_uint;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mx86-used-note= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        291 => {
            let mut list: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
            let mut l: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
            list = bfd_target_list();
            l = list;
            while !(*l).is_null() {
                if startswith(*l, b"elf64-x86-64\0" as *const u8 as *const libc::c_char)
                    as libc::c_int != 0
                    || strcmp(*l, b"coff-x86-64\0" as *const u8 as *const libc::c_char)
                        == 0 as libc::c_int
                    || strcmp(*l, b"pe-x86-64\0" as *const u8 as *const libc::c_char)
                        == 0 as libc::c_int
                    || strcmp(*l, b"pei-x86-64\0" as *const u8 as *const libc::c_char)
                        == 0 as libc::c_int
                    || strcmp(*l, b"mach-o-x86-64\0" as *const u8 as *const libc::c_char)
                        == 0 as libc::c_int
                {
                    default_arch = b"x86_64\0" as *const u8 as *const libc::c_char;
                    break;
                } else {
                    l = l.offset(1);
                    l;
                }
            }
            if (*l).is_null() {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"no compiled in support for x86_64\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            free(list as *mut libc::c_void);
        }
        304 => {
            let mut list_0: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
            let mut l_0: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
            list_0 = bfd_target_list();
            l_0 = list_0;
            while !(*l_0).is_null() {
                if startswith(
                    *l_0,
                    b"elf32-x86-64\0" as *const u8 as *const libc::c_char,
                ) {
                    default_arch = b"x86_64:32\0" as *const u8 as *const libc::c_char;
                    break;
                } else {
                    l_0 = l_0.offset(1);
                    l_0;
                }
            }
            if (*l_0).is_null() {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"no compiled in support for 32bit x86_64\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            free(list_0 as *mut libc::c_void);
        }
        290 => {
            default_arch = b"i386\0" as *const u8 as *const libc::c_char;
        }
        107 | 115 | 292 => {}
        293 => {
            saved = xstrdup(arg);
            arch = saved;
            if *arch as libc::c_int == '+' as i32 {
                arch = arch.offset(1);
                arch;
            }
            loop {
                if *arch as libc::c_int == '.' as i32 {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"invalid -march= option: `%s'\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        arg,
                    );
                }
                next = strchr(arch, '+' as i32);
                if !next.is_null() {
                    let fresh4 = next;
                    next = next.offset(1);
                    *fresh4 = '\0' as i32 as libc::c_char;
                }
                j = 0 as libc::c_int as libc::c_uint;
                while (j as libc::c_ulong)
                    < (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                        .wrapping_div(
                            ::core::mem::size_of::<arch_entry>() as libc::c_ulong,
                        )
                {
                    if strcmp(arch, cpu_arch[j as usize].name) == 0 as libc::c_int {
                        if !((cpu_arch[j as usize].flags.bitfield).cpui386() == 0) {
                            cpu_arch_name = cpu_arch[j as usize].name;
                            cpu_sub_arch_name = 0 as *mut libc::c_char;
                            cpu_arch_flags = cpu_arch[j as usize].flags;
                            cpu_arch_isa = cpu_arch[j as usize].type_0;
                            cpu_arch_isa_flags = cpu_arch[j as usize].flags;
                            if cpu_arch_tune_set == 0 {
                                cpu_arch_tune = cpu_arch_isa;
                                cpu_arch_tune_flags = cpu_arch_isa_flags;
                            }
                            break;
                        }
                    } else if *cpu_arch[j as usize].name as libc::c_int == '.' as i32
                        && strcmp(
                            arch,
                            (cpu_arch[j as usize].name).offset(1 as libc::c_int as isize),
                        ) == 0 as libc::c_int
                    {
                        let mut flags: i386_cpu_flags = i386_cpu_flags {
                            bitfield: C2RustUnnamed_24 {
                                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                            },
                        };
                        flags = cpu_flags_or(cpu_arch_flags, cpu_arch[j as usize].flags);
                        if cpu_flags_equal(&mut flags, &mut cpu_arch_flags) == 0 {
                            if !cpu_sub_arch_name.is_null() {
                                let mut name: *mut libc::c_char = cpu_sub_arch_name;
                                cpu_sub_arch_name = concat(
                                    name,
                                    cpu_arch[j as usize].name,
                                    0 as *mut libc::c_void as *const libc::c_char,
                                );
                                free(name as *mut libc::c_void);
                            } else {
                                cpu_sub_arch_name = xstrdup(cpu_arch[j as usize].name);
                            }
                            cpu_arch_flags = flags;
                            cpu_arch_isa_flags = flags;
                        } else {
                            cpu_arch_isa_flags = cpu_flags_or(
                                cpu_arch_isa_flags,
                                cpu_arch[j as usize].flags,
                            );
                        }
                        break;
                    }
                    j = j.wrapping_add(1);
                    j;
                }
                if j as libc::c_ulong
                    >= (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                        .wrapping_div(
                            ::core::mem::size_of::<arch_entry>() as libc::c_ulong,
                        )
                {
                    j = 0 as libc::c_int as libc::c_uint;
                    while (j as libc::c_ulong)
                        < (::core::mem::size_of::<[noarch_entry; 50]>() as libc::c_ulong)
                            .wrapping_div(
                                ::core::mem::size_of::<noarch_entry>() as libc::c_ulong,
                            )
                    {
                        if strcmp(arch, cpu_noarch[j as usize].name) == 0 as libc::c_int
                        {
                            let mut flags_0: i386_cpu_flags = i386_cpu_flags {
                                bitfield: C2RustUnnamed_24 {
                                    cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                                },
                            };
                            flags_0 = cpu_flags_and_not(
                                cpu_arch_flags,
                                cpu_noarch[j as usize].flags,
                            );
                            if cpu_flags_equal(&mut flags_0, &mut cpu_arch_flags) == 0 {
                                if !cpu_sub_arch_name.is_null() {
                                    let mut name_0: *mut libc::c_char = cpu_sub_arch_name;
                                    cpu_sub_arch_name = concat(
                                        arch,
                                        0 as *mut libc::c_void as *const libc::c_char,
                                    );
                                    free(name_0 as *mut libc::c_void);
                                } else {
                                    cpu_sub_arch_name = xstrdup(arch);
                                }
                                cpu_arch_flags = flags_0;
                                cpu_arch_isa_flags = flags_0;
                            }
                            break;
                        } else {
                            j = j.wrapping_add(1);
                            j;
                        }
                    }
                    if j as libc::c_ulong
                        >= (::core::mem::size_of::<[noarch_entry; 50]>()
                            as libc::c_ulong)
                            .wrapping_div(
                                ::core::mem::size_of::<noarch_entry>() as libc::c_ulong,
                            )
                    {
                        j = (::core::mem::size_of::<[arch_entry; 154]>()
                            as libc::c_ulong)
                            .wrapping_div(
                                ::core::mem::size_of::<arch_entry>() as libc::c_ulong,
                            ) as libc::c_uint;
                    }
                }
                if j as libc::c_ulong
                    >= (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                        .wrapping_div(
                            ::core::mem::size_of::<arch_entry>() as libc::c_ulong,
                        )
                {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"invalid -march= option: `%s'\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        arg,
                    );
                }
                arch = next;
                if next.is_null() {
                    break;
                }
            }
            free(saved as *mut libc::c_void);
        }
        294 => {
            if *arg as libc::c_int == '.' as i32 {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mtune= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
            j = 0 as libc::c_int as libc::c_uint;
            while (j as libc::c_ulong)
                < (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                    .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
            {
                if strcmp(arg, cpu_arch[j as usize].name) == 0 as libc::c_int {
                    cpu_arch_tune_set = 1 as libc::c_int;
                    cpu_arch_tune = cpu_arch[j as usize].type_0;
                    cpu_arch_tune_flags = cpu_arch[j as usize].flags;
                    break;
                } else {
                    j = j.wrapping_add(1);
                    j;
                }
            }
            if j as libc::c_ulong
                >= (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                    .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
            {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mtune= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        295 => {
            if strcasecmp(arg, b"att\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                intel_mnemonic = 0 as libc::c_int;
            } else if strcasecmp(arg, b"intel\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                intel_mnemonic = 1 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mmnemonic= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        296 => {
            if strcasecmp(arg, b"att\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                intel_syntax = 0 as libc::c_int;
            } else if strcasecmp(arg, b"intel\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                intel_syntax = 1 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -msyntax= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        297 => {
            allow_index_reg = 1 as libc::c_int;
        }
        298 => {
            allow_naked_reg = 1 as libc::c_int;
        }
        300 => {
            sse2avx = 1 as libc::c_int as libc::c_uint;
        }
        301 => {
            if strcasecmp(arg, b"error\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                sse_check = check_error;
            } else if strcasecmp(arg, b"warning\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                sse_check = check_warning;
            } else if strcasecmp(arg, b"none\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                sse_check = check_none;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -msse-check= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        302 => {
            if strcasecmp(arg, b"error\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                operand_check = check_error;
            } else if strcasecmp(arg, b"warning\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                operand_check = check_warning;
            } else if strcasecmp(arg, b"none\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                operand_check = check_none;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -moperand-check= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        303 => {
            if strcasecmp(arg, b"128\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                avxscalar = vex128;
            } else if strcasecmp(arg, b"256\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                avxscalar = vex256;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mavxscalar= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        316 => {
            if strcmp(arg, b"0\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                vexwig = vexw0;
            } else if strcmp(arg, b"1\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                vexwig = vexw1;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mvexwig= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        305 => {
            add_bnd_prefix = 1 as libc::c_int;
        }
        306 => {
            if strcmp(arg, b"128\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexlig = evexl128;
            } else if strcmp(arg, b"256\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexlig = evexl256;
            } else if strcmp(arg, b"512\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexlig = evexl512;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mevexlig= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        310 => {
            if strcmp(arg, b"rne\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexrcig = rne;
            } else if strcmp(arg, b"rd\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexrcig = rd;
            } else if strcmp(arg, b"ru\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexrcig = ru;
            } else if strcmp(arg, b"rz\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexrcig = rz;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mevexrcig= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        307 => {
            if strcmp(arg, b"0\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexwig = evexw0;
            } else if strcmp(arg, b"1\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                evexwig = evexw1;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mevexwig= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        309 => {
            if strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                omit_lock_prefix = 1 as libc::c_int;
            } else if strcasecmp(arg, b"no\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                omit_lock_prefix = 0 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -momit-lock-prefix= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        314 => {
            if strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                avoid_fence = 1 as libc::c_int;
            } else if strcasecmp(arg, b"no\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                avoid_fence = 0 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mfence-as-lock-add= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        321 => {
            if strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_after_load = 1 as libc::c_int;
            } else if strcasecmp(arg, b"no\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_after_load = 0 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mlfence-after-load= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        322 => {
            if strcasecmp(arg, b"all\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_indirect_branch = lfence_branch_all;
                if lfence_before_ret as libc::c_uint
                    == lfence_before_ret_none as libc::c_int as libc::c_uint
                {
                    lfence_before_ret = lfence_before_ret_shl;
                }
            } else if strcasecmp(arg, b"memory\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_indirect_branch = lfence_branch_memory;
            } else if strcasecmp(arg, b"register\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_indirect_branch = lfence_branch_register;
            } else if strcasecmp(arg, b"none\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_indirect_branch = lfence_branch_none;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mlfence-before-indirect-branch= option: `%s'\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        323 => {
            if strcasecmp(arg, b"or\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_ret = lfence_before_ret_or;
            } else if strcasecmp(arg, b"not\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_ret = lfence_before_ret_not;
            } else if strcasecmp(arg, b"shl\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
                || strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
            {
                lfence_before_ret = lfence_before_ret_shl;
            } else if strcasecmp(arg, b"none\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                lfence_before_ret = lfence_before_ret_none;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mlfence-before-ret= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        299 => {
            if strcasecmp(arg, b"yes\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                generate_relax_relocations = 1 as libc::c_int;
            } else if strcasecmp(arg, b"no\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                generate_relax_relocations = 0 as libc::c_int;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -mrelax-relocations= option: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        317 => {
            let mut end: *mut libc::c_char = 0 as *mut libc::c_char;
            let mut align: libc::c_long = strtoul(arg, &mut end, 0 as libc::c_int)
                as libc::c_long;
            if *end as libc::c_int == '\0' as i32 {
                if align == 0 as libc::c_int as libc::c_long {
                    align_branch_power = 0 as libc::c_int;
                    current_block_238 = 1707335883933721018;
                } else if align >= 16 as libc::c_int as libc::c_long {
                    let mut align_power: libc::c_int = 0;
                    align_power = 0 as libc::c_int;
                    while align & 1 as libc::c_int as libc::c_long
                        == 0 as libc::c_int as libc::c_long
                    {
                        align >>= 1 as libc::c_int;
                        align_power += 1;
                        align_power;
                    }
                    if align == 1 as libc::c_int as libc::c_long
                        && align_power < 32 as libc::c_int
                    {
                        align_branch_power = align_power;
                        current_block_238 = 1707335883933721018;
                    } else {
                        current_block_238 = 14880025327978413542;
                    }
                } else {
                    current_block_238 = 14880025327978413542;
                }
            } else {
                current_block_238 = 14880025327978413542;
            }
            match current_block_238 {
                1707335883933721018 => {}
                _ => {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"invalid -malign-branch-boundary= value: %s\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        arg,
                    );
                }
            }
        }
        318 => {
            let mut end_0: *mut libc::c_char = 0 as *mut libc::c_char;
            let mut align_0: libc::c_int = strtoul(arg, &mut end_0, 0 as libc::c_int)
                as libc::c_int;
            if *end_0 as libc::c_int == '\0' as i32 && align_0 >= 0 as libc::c_int
                && align_0 < 6 as libc::c_int
            {
                align_branch_prefix_size = align_0 as libc::c_uint;
            } else {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid -malign-branch-prefix-size= value: %s\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    arg,
                );
            }
        }
        319 => {
            align_branch = 0 as libc::c_int as libc::c_uint;
            saved = xstrdup(arg);
            type_0 = saved;
            loop {
                next = strchr(type_0, '+' as i32);
                if !next.is_null() {
                    let fresh5 = next;
                    next = next.offset(1);
                    *fresh5 = '\0' as i32 as libc::c_char;
                }
                if strcasecmp(type_0, b"jcc\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    align_branch |= align_branch_jcc_bit as libc::c_int as libc::c_uint;
                } else if strcasecmp(
                    type_0,
                    b"fused\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    align_branch
                        |= align_branch_fused_bit as libc::c_int as libc::c_uint;
                } else if strcasecmp(
                    type_0,
                    b"jmp\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    align_branch |= align_branch_jmp_bit as libc::c_int as libc::c_uint;
                } else if strcasecmp(
                    type_0,
                    b"call\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    align_branch |= align_branch_call_bit as libc::c_int as libc::c_uint;
                } else if strcasecmp(
                    type_0,
                    b"ret\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    align_branch |= align_branch_ret_bit as libc::c_int as libc::c_uint;
                } else if strcasecmp(
                    type_0,
                    b"indirect\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    align_branch
                        |= align_branch_indirect_bit as libc::c_int as libc::c_uint;
                } else {
                    as_fatal(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"invalid -malign-branch= option: `%s'\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        arg,
                    );
                }
                type_0 = next;
                if next.is_null() {
                    break;
                }
            }
            free(saved as *mut libc::c_void);
        }
        320 => {
            align_branch_power = 5 as libc::c_int;
            align_branch_prefix_size = 5 as libc::c_int as libc::c_uint;
            align_branch = (align_branch_jcc_bit as libc::c_int
                | align_branch_fused_bit as libc::c_int
                | align_branch_jmp_bit as libc::c_int) as libc::c_uint;
        }
        312 => {
            isa64 = amd64;
        }
        313 => {
            isa64 = intel64;
        }
        79 => {
            if arg.is_null() {
                optimize = 1 as libc::c_int;
                optimize_for_space = 0 as libc::c_int;
            } else if *arg as libc::c_int == 's' as i32 {
                optimize_for_space = 1 as libc::c_int;
                optimize = 2147483647 as libc::c_int;
            } else {
                optimize = atoi(arg);
                optimize_for_space = 0 as libc::c_int;
            }
        }
        _ => return 0 as libc::c_int,
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn md_atof(
    mut type_0: libc::c_int,
    mut litP: *mut libc::c_char,
    mut sizeP: *mut libc::c_int,
) -> *const libc::c_char {
    return ieee_md_atof(type_0, litP, sizeP, 0 as libc::c_int != 0);
}
#[no_mangle]
pub static mut md_pseudo_table: [pseudo_typeS; 24] = unsafe {
    [
        {
            let mut init = _pseudo_type {
                poc_name: b"align\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    s_align_bytes as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"arch\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_cpu_arch as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"bss\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(s_bss as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"ffloat\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(float_cons as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 'f' as i32,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"dfloat\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(float_cons as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 'd' as i32,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"tfloat\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(float_cons as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 'x' as i32,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"value\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(cons as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 2 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"slong\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    signed_cons as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 4 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"noopt\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(s_ignore as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"optim\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(s_ignore as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"code16gcc\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_16bit_gcc_code_flag as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: CODE_16BIT as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"code16\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_code_flag as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: CODE_16BIT as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"code32\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_code_flag as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: CODE_32BIT as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"code64\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_code_flag as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: CODE_64BIT as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"intel_syntax\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_intel_syntax as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 1 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"att_syntax\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_intel_syntax as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"intel_mnemonic\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_intel_mnemonic as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 1 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"att_mnemonic\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_intel_mnemonic as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"allow_index_reg\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_allow_index_reg as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 1 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"disallow_index_reg\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    set_allow_index_reg as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"sse_check\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(set_check as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"operand_check\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(set_check as unsafe extern "C" fn(libc::c_int) -> ()),
                poc_val: 1 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: b"largecomm\0" as *const u8 as *const libc::c_char,
                poc_handler: Some(
                    handle_large_common as unsafe extern "C" fn(libc::c_int) -> (),
                ),
                poc_val: 0 as libc::c_int,
            };
            init
        },
        {
            let mut init = _pseudo_type {
                poc_name: 0 as *const libc::c_char,
                poc_handler: None,
                poc_val: 0 as libc::c_int,
            };
            init
        },
    ]
};
#[no_mangle]
pub unsafe extern "C" fn x86_cons_fix_new(
    mut frag: *mut fragS,
    mut off: libc::c_uint,
    mut len: libc::c_uint,
    mut exp: *mut expressionS,
    mut r: bfd_reloc_code_real_type,
) {
    r = reloc(len, 0 as libc::c_int, cons_sign, r);
    fix_new_exp(
        frag,
        off as libc::c_ulong,
        len as libc::c_ulong,
        exp,
        0 as libc::c_int,
        r,
    );
}
#[no_mangle]
pub unsafe extern "C" fn x86_address_bytes() -> libc::c_int {
    if (*(*stdoutput).arch_info).mach
        & ((1 as libc::c_int) << 4 as libc::c_int) as libc::c_ulong != 0
    {
        return 4 as libc::c_int;
    }
    return (*(*stdoutput).arch_info).bits_per_address / 8 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn i386_validate_fix(mut fixp: *mut fixS) -> libc::c_int {
    if (*fixp).fx_r_type as libc::c_uint
        == BFD_RELOC_SIZE32 as libc::c_int as libc::c_uint
        || (*fixp).fx_r_type as libc::c_uint
            == BFD_RELOC_SIZE64 as libc::c_int as libc::c_uint
    {
        return (1 as libc::c_int != 0 && !((*fixp).fx_addsy).is_null()
            && (S_IS_DEFINED((*fixp).fx_addsy) == 0
                || S_IS_EXTERNAL((*fixp).fx_addsy) != 0)) as libc::c_int;
    }
    if !((*fixp).fx_subsy).is_null() {
        if (*fixp).fx_subsy == GOT_symbol {
            if (*fixp).fx_r_type as libc::c_uint
                == BFD_RELOC_32_PCREL as libc::c_int as libc::c_uint
            {
                if object_64bit == 0 {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        14110 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 30],
                            &[libc::c_char; 30],
                        >(b"int i386_validate_fix(fixS *)\0"))
                            .as_ptr(),
                    );
                }
                if (*fixp).fx_tcbit2() != 0 {
                    (*fixp)
                        .fx_r_type = (if (*fixp).fx_tcbit() as libc::c_int != 0 {
                        BFD_RELOC_X86_64_REX_GOTPCRELX as libc::c_int
                    } else {
                        BFD_RELOC_X86_64_GOTPCRELX as libc::c_int
                    }) as bfd_reloc_code_real_type;
                } else {
                    (*fixp).fx_r_type = BFD_RELOC_X86_64_GOTPCREL;
                }
            } else if object_64bit == 0 {
                (*fixp).fx_r_type = BFD_RELOC_386_GOTOFF;
            } else {
                (*fixp).fx_r_type = BFD_RELOC_X86_64_GOTOFF64;
            }
            (*fixp).fx_subsy = 0 as *mut symbolS;
        }
    } else {
        if !((*fixp).fx_addsy).is_null()
            && ((*fixp).fx_r_type as libc::c_uint
                == BFD_RELOC_386_PLT32 as libc::c_int as libc::c_uint
                || (*fixp).fx_r_type as libc::c_uint
                    == BFD_RELOC_X86_64_PLT32 as libc::c_int as libc::c_uint)
            && symbol_section_p((*fixp).fx_addsy) != 0
        {
            (*fixp).fx_r_type = BFD_RELOC_32_PCREL;
        }
        if object_64bit == 0 {
            if (*fixp).fx_r_type as libc::c_uint
                == BFD_RELOC_386_GOT32 as libc::c_int as libc::c_uint
                && (*fixp).fx_tcbit2() as libc::c_int != 0
            {
                (*fixp).fx_r_type = BFD_RELOC_386_GOT32X;
            }
        }
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn tc_i386_fix_adjustable(mut fixP: *mut fixS) -> libc::c_int {
    if 1 as libc::c_int == 0 {
        return 1 as libc::c_int;
    }
    if use_rela_relocations != 0
        && (*S_GET_SEGMENT((*fixP).fx_addsy)).flags
            & 0x800000 as libc::c_int as libc::c_uint != 0 as libc::c_int as libc::c_uint
        && (*fixP).fx_pcrel() as libc::c_int != 0
    {
        return 0 as libc::c_int;
    }
    if !GOT_symbol.is_null() && (*fixP).fx_subsy == GOT_symbol
        && (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_32_PCREL as libc::c_int as libc::c_uint
    {
        return 0 as libc::c_int;
    }
    if (*fixP).fx_r_type as libc::c_uint
        == BFD_RELOC_SIZE32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_SIZE64 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_GOTOFF as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_GOT32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_GOT32X as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_GD as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_LDM as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_LDO_32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_IE_32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_IE as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_GOTIE as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_LE_32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_LE as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_GOTDESC as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_386_TLS_DESC_CALL as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOT32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOTPCREL as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOTPCRELX as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_REX_GOTPCRELX as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_TLSGD as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_TLSLD as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_DTPOFF32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_DTPOFF64 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOTTPOFF as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_TPOFF32 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_TPOFF64 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOTOFF64 as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_GOTPC32_TLSDESC as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_X86_64_TLSDESC_CALL as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_VTABLE_INHERIT as libc::c_int as libc::c_uint
        || (*fixP).fx_r_type as libc::c_uint
            == BFD_RELOC_VTABLE_ENTRY as libc::c_int as libc::c_uint
    {
        return 0 as libc::c_int;
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn i386_parse_name(
    mut name: *mut libc::c_char,
    mut e: *mut expressionS,
    mut nextcharP: *mut libc::c_char,
) -> libc::c_int {
    let mut r: *const reg_entry = 0 as *const reg_entry;
    let mut end: *mut libc::c_char = input_line_pointer;
    *end = *nextcharP;
    r = parse_register(name, &mut input_line_pointer);
    if !r.is_null() && end <= input_line_pointer {
        *nextcharP = *input_line_pointer;
        *input_line_pointer = 0 as libc::c_int as libc::c_char;
        if r != &bad_reg as *const reg_entry {
            (*e).set_X_op(O_register);
            (*e).X_add_number = r.offset_from(i386_regtab.as_ptr()) as libc::c_long;
        } else {
            (*e).set_X_op(O_illegal);
        }
        return 1 as libc::c_int;
    }
    input_line_pointer = end;
    *end = 0 as libc::c_int as libc::c_char;
    return if intel_syntax != 0 {
        i386_intel_parse_name(name, e)
    } else {
        0 as libc::c_int
    };
}
#[inline]
unsafe extern "C" fn str_hash_find(
    mut table: htab_t,
    mut key: *const libc::c_char,
) -> *mut libc::c_void {
    let mut needle: string_tuple_t = {
        let mut init = string_tuple {
            key: key,
            value: 0 as *const libc::c_void,
        };
        init
    };
    let mut tuple: *mut string_tuple_t = htab_find(
        table,
        &mut needle as *mut string_tuple_t as *const libc::c_void,
    ) as *mut string_tuple_t;
    return if !tuple.is_null() {
        (*tuple).value as *mut libc::c_void
    } else {
        0 as *mut libc::c_void
    };
}
#[no_mangle]
pub unsafe extern "C" fn i386_operator(
    mut name: *const libc::c_char,
    mut operands: libc::c_uint,
    mut pc: *mut libc::c_char,
) -> operatorT {
    let mut j: libc::c_uint = 0;
    if intel_syntax == 0 {
        return O_absent;
    }
    if name.is_null() {
        if operands != 2 as libc::c_int as libc::c_uint {
            return O_illegal;
        }
        match *input_line_pointer as libc::c_int {
            58 => {
                input_line_pointer = input_line_pointer.offset(1);
                input_line_pointer;
                return O_md2;
            }
            91 => {
                input_line_pointer = input_line_pointer.offset(1);
                input_line_pointer;
                return O_index;
            }
            64 => {
                if this_operand >= 0 as libc::c_int
                    && i.reloc[this_operand as usize] as libc::c_uint
                        == BFD_RELOC_NONE as libc::c_int as libc::c_uint
                {
                    let mut adjust: libc::c_int = 0 as libc::c_int;
                    let mut gotfree_input_line: *mut libc::c_char = lex_got(
                        &mut *(i.reloc).as_mut_ptr().offset(this_operand as isize),
                        &mut adjust,
                        &mut intel_state.reloc_types,
                    );
                    if !gotfree_input_line.is_null() {
                        free(gotfree_input_line as *mut libc::c_void);
                        let fresh6 = input_line_pointer;
                        input_line_pointer = input_line_pointer.offset(1);
                        *fresh6 = '+' as i32 as libc::c_char;
                        memset(
                            input_line_pointer as *mut libc::c_void,
                            '0' as i32,
                            (adjust - 1 as libc::c_int) as libc::c_ulong,
                        );
                        *input_line_pointer
                            .offset(
                                (adjust - 1 as libc::c_int) as isize,
                            ) = ' ' as i32 as libc::c_char;
                        return O_add;
                    }
                }
            }
            _ => {}
        }
        return O_illegal;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while !(i386_operators[j as usize].name).is_null() {
        if strcasecmp(i386_operators[j as usize].name, name) == 0 as libc::c_int {
            if i386_operators[j as usize].operands != 0
                && i386_operators[j as usize].operands != operands
            {
                return O_illegal;
            }
            return i386_operators[j as usize].op;
        }
        j = j.wrapping_add(1);
        j;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while !(i386_types[j as usize].name).is_null() {
        if strcasecmp(i386_types[j as usize].name, name) == 0 as libc::c_int {
            break;
        }
        j = j.wrapping_add(1);
        j;
    }
    if !(i386_types[j as usize].name).is_null() && *pc as libc::c_int == ' ' as i32 {
        let mut pname: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut c: libc::c_char = 0;
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
        c = get_symbol_name(&mut pname);
        if strcasecmp(pname, b"ptr\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            *pname.offset(-(1 as libc::c_int) as isize) = *pc;
            *pc = c;
            if intel_syntax > 0 as libc::c_int
                || operands != 1 as libc::c_int as libc::c_uint
            {
                return O_illegal;
            }
            return i386_types[j as usize].op;
        }
        restore_line_pointer(c);
        input_line_pointer = pname.offset(-(1 as libc::c_int as isize));
    }
    return O_absent;
}
#[no_mangle]
pub unsafe extern "C" fn i386_need_index_operator() -> libc::c_int {
    return (intel_syntax < 0 as libc::c_int) as libc::c_int;
}
#[no_mangle]
pub static mut md_relax_table: [relax_typeS; 12] = [
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((0 as libc::c_int) << 2 as libc::c_int | 2 as libc::c_int)
                as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((0 as libc::c_int) << 2 as libc::c_int
                | (2 as libc::c_int | 1 as libc::c_int)) as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 4 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 2 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((1 as libc::c_int) << 2 as libc::c_int | 2 as libc::c_int)
                as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((1 as libc::c_int) << 2 as libc::c_int
                | (2 as libc::c_int | 1 as libc::c_int)) as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 5 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 3 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((2 as libc::c_int) << 2 as libc::c_int | 2 as libc::c_int)
                as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: (127 as libc::c_int + 1 as libc::c_int) as offsetT,
            rlx_backward: (-(128 as libc::c_int) + 1 as libc::c_int) as offsetT,
            rlx_length: 1 as libc::c_int as libc::c_uchar,
            rlx_more: ((2 as libc::c_int) << 2 as libc::c_int
                | (2 as libc::c_int | 1 as libc::c_int)) as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 5 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
    {
        let mut init = relax_type {
            rlx_forward: 0 as libc::c_int as offsetT,
            rlx_backward: 0 as libc::c_int as offsetT,
            rlx_length: 4 as libc::c_int as libc::c_uchar,
            rlx_more: 0 as libc::c_int as relax_substateT,
        };
        init
    },
];
#[no_mangle]
pub static mut optimize_align_code: libc::c_int = 1 as libc::c_int;
#[no_mangle]
pub unsafe extern "C" fn i386_cons_align(mut ignore: libc::c_int) {
    if last_insn.kind as libc::c_uint
        != last_insn_directive as libc::c_int as libc::c_uint
        && bfd_section_flags(now_seg as *const asection)
            & 0x10 as libc::c_int as libc::c_uint != 0
    {
        last_insn.seg = now_seg;
        last_insn.kind = last_insn_directive;
        last_insn.name = b"constant directive\0" as *const u8 as *const libc::c_char;
        last_insn.file = as_where(&mut last_insn.line);
        if lfence_before_ret as libc::c_uint
            != lfence_before_ret_none as libc::c_int as libc::c_uint
        {
            if lfence_before_indirect_branch as libc::c_uint
                != lfence_branch_none as libc::c_int as libc::c_uint
            {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"constant directive skips -mlfence-before-ret and -mlfence-before-indirect-branch\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            } else {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"constant directive skips -mlfence-before-ret\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
        } else if lfence_before_indirect_branch as libc::c_uint
            != lfence_branch_none as libc::c_int as libc::c_uint
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"constant directive skips -mlfence-before-indirect-branch\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn i386_print_statistics(mut file: *mut FILE) {
    htab_print_statistics(
        file,
        b"i386 opcode\0" as *const u8 as *const libc::c_char,
        op_hash,
    );
    htab_print_statistics(
        file,
        b"i386 register\0" as *const u8 as *const libc::c_char,
        reg_hash,
    );
}
#[no_mangle]
pub unsafe extern "C" fn i386_frag_max_var(mut frag: *mut fragS) -> libc::c_uint {
    if (*frag).fr_type as libc::c_uint
        == rs_machine_dependent as libc::c_int as libc::c_uint
    {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            11708 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 40],
                &[libc::c_char; 40],
            >(b"unsigned int i386_frag_max_var(fragS *)\0"))
                .as_ptr(),
        );
    };
    return (if (*frag).fr_subtype >> 2 as libc::c_int == 0 as libc::c_int as libc::c_uint
    {
        4 as libc::c_int
    } else {
        5 as libc::c_int
    }) as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn i386_generic_table_relax_frag(
    mut segment: segT,
    mut fragP: *mut fragS,
    mut stretch: libc::c_long,
) -> libc::c_long {
    if (*fragP).fr_subtype >> 2 as libc::c_int == 3 as libc::c_int as libc::c_uint
        || (*fragP).fr_subtype >> 2 as libc::c_int == 5 as libc::c_int as libc::c_uint
    {
        let mut padding_size: libc::c_long = i386_branch_padding_size(
            fragP,
            0 as libc::c_int as offsetT,
        ) as libc::c_long;
        let mut grow: libc::c_long = padding_size
            - (*fragP).tc_frag_data.length as libc::c_long;
        if (*fragP).tc_frag_data.padding_address != 0
            && ((*fragP).tc_frag_data.padding_address != (*fragP).fr_address
                || padding_size != 0)
        {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                12025 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 56],
                    &[libc::c_char; 56],
                >(b"long i386_generic_table_relax_frag(segT, fragS *, long)\0"))
                    .as_ptr(),
            );
        }
        if grow != 0 {
            (*fragP).tc_frag_data.length = padding_size as libc::c_uchar;
        }
        return grow;
    } else if (*fragP).fr_subtype >> 2 as libc::c_int == 4 as libc::c_int as libc::c_uint
    {
        let mut padding_fragP: *mut fragS = 0 as *mut fragS;
        let mut next_fragP: *mut fragS = 0 as *mut fragS;
        let mut padding_size_0: libc::c_long = 0;
        let mut left_size: libc::c_long = 0;
        let mut last_size: libc::c_long = 0;
        padding_fragP = (*fragP).tc_frag_data.u.padding_fragP;
        if padding_fragP.is_null() {
            return ((*fragP).tc_frag_data.length as libc::c_int
                - (*fragP).tc_frag_data.last_length as libc::c_int) as libc::c_long;
        }
        if (*fragP).tc_frag_data.padding_address == 0 {
            (*fragP)
                .tc_frag_data
                .padding_address = ((*padding_fragP).fr_address)
                .wrapping_sub(
                    ((*fragP).fr_address).wrapping_sub(stretch as libc::c_ulong),
                );
        }
        left_size = (*fragP).tc_frag_data.prefix_length as libc::c_long;
        next_fragP = fragP;
        while next_fragP != padding_fragP {
            if (*next_fragP).fr_type as libc::c_uint
                == rs_machine_dependent as libc::c_int as libc::c_uint
                && (*next_fragP).fr_subtype >> 2 as libc::c_int
                    == 4 as libc::c_int as libc::c_uint
            {
                if left_size != 0 {
                    let mut max: libc::c_int = (*next_fragP).tc_frag_data.max_bytes
                        as libc::c_int;
                    if max != 0 {
                        let mut size: libc::c_int = 0;
                        if max as libc::c_long > left_size {
                            size = left_size as libc::c_int;
                        } else {
                            size = max;
                        }
                        left_size -= size as libc::c_long;
                        (*next_fragP).tc_frag_data.last_length = size as libc::c_uchar;
                    }
                } else {
                    (*next_fragP)
                        .tc_frag_data
                        .last_length = 0 as libc::c_int as libc::c_uchar;
                }
            }
            next_fragP = (*next_fragP).fr_next;
        }
        padding_size_0 = i386_branch_padding_size(
            padding_fragP,
            ((*fragP).fr_address).wrapping_add((*fragP).tc_frag_data.padding_address)
                as offsetT,
        ) as libc::c_long;
        last_size = (*fragP).tc_frag_data.prefix_length as libc::c_long;
        if padding_size_0 == last_size {
            (*padding_fragP)
                .tc_frag_data
                .padding_address = ((*fragP).fr_address)
                .wrapping_add(padding_size_0 as libc::c_ulong)
                .wrapping_add((*fragP).tc_frag_data.padding_address);
            return 0 as libc::c_int as libc::c_long;
        }
        if padding_size_0 > (*fragP).tc_frag_data.max_prefix_length as libc::c_long {
            (*padding_fragP).tc_frag_data.padding_address = 0 as libc::c_int as addressT;
            padding_size_0 = 0 as libc::c_int as libc::c_long;
        } else {
            (*padding_fragP)
                .tc_frag_data
                .padding_address = ((*fragP).fr_address)
                .wrapping_add(padding_size_0 as libc::c_ulong)
                .wrapping_add((*fragP).tc_frag_data.padding_address);
        }
        (*fragP).tc_frag_data.prefix_length = padding_size_0 as libc::c_uchar;
        left_size = padding_size_0;
        next_fragP = fragP;
        while next_fragP != padding_fragP {
            if (*next_fragP).fr_type as libc::c_uint
                == rs_machine_dependent as libc::c_int as libc::c_uint
                && (*next_fragP).fr_subtype >> 2 as libc::c_int
                    == 4 as libc::c_int as libc::c_uint
            {
                if left_size != 0 {
                    let mut max_0: libc::c_int = (*next_fragP).tc_frag_data.max_bytes
                        as libc::c_int;
                    if max_0 != 0 {
                        let mut size_0: libc::c_int = 0;
                        if max_0 as libc::c_long > left_size {
                            size_0 = left_size as libc::c_int;
                        } else {
                            size_0 = max_0;
                        }
                        left_size -= size_0 as libc::c_long;
                        (*next_fragP).tc_frag_data.length = size_0 as libc::c_uchar;
                    }
                } else {
                    (*next_fragP)
                        .tc_frag_data
                        .length = 0 as libc::c_int as libc::c_uchar;
                }
            }
            next_fragP = (*next_fragP).fr_next;
        }
        return ((*fragP).tc_frag_data.length as libc::c_int
            - (*fragP).tc_frag_data.last_length as libc::c_int) as libc::c_long;
    }
    return relax_frag(segment, fragP, stretch);
}
#[no_mangle]
pub unsafe extern "C" fn i386_generate_nops(
    mut fragP: *mut fragS,
    mut where_0: *mut libc::c_char,
    mut count: offsetT,
    mut limit: libc::c_int,
) {
    let mut patt: *const *const libc::c_uchar = 0 as *const *const libc::c_uchar;
    let mut max_single_nop_size: libc::c_int = 0;
    let mut max_number_of_nops: libc::c_int = 0;
    let mut current_block_0: u64;
    match (*fragP).fr_type as libc::c_uint {
        10 | 3 => {
            current_block_0 = 7502529970979898288;
        }
        7 => {
            if (*fragP).fr_subtype >> 2 as libc::c_int
                == 3 as libc::c_int as libc::c_uint
                || (*fragP).fr_subtype >> 2 as libc::c_int
                    == 5 as libc::c_int as libc::c_uint
            {
                current_block_0 = 7502529970979898288;
            } else {
                current_block_0 = 18098902710544568491;
            }
        }
        _ => {
            current_block_0 = 18098902710544568491;
        }
    }
    match current_block_0 {
        18098902710544568491 => return,
        _ => {}
    }
    if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint {
        patt = f16_patt.as_ptr();
        max_single_nop_size = (::core::mem::size_of::<[*const libc::c_uchar; 4]>()
            as libc::c_ulong)
            .wrapping_div(
                ::core::mem::size_of::<*const libc::c_uchar>() as libc::c_ulong,
            ) as libc::c_int;
        max_number_of_nops = 2 as libc::c_int;
    } else {
        if (*fragP).tc_frag_data.isa as libc::c_uint
            == PROCESSOR_UNKNOWN as libc::c_int as libc::c_uint
        {
            match cpu_arch_tune as libc::c_uint {
                0 => {
                    if ((*fragP).tc_frag_data.isa_flags.bitfield).cpunop() != 0 {
                        patt = alt_patt.as_ptr();
                    } else {
                        patt = f32_patt.as_ptr();
                    }
                }
                5 | 6 | 7 | 8 | 9 | 10 | 11 | 17 | 13 | 14 | 15 | 18 | 19 | 20 | 21 => {
                    patt = alt_patt.as_ptr();
                }
                1 | 2 | 3 | 4 | 12 | 16 => {
                    patt = f32_patt.as_ptr();
                }
                _ => {}
            }
        } else {
            match (*fragP).tc_frag_data.tune as libc::c_uint {
                0 => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        1621 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 55],
                            &[libc::c_char; 55],
                        >(b"void i386_generate_nops(fragS *, char *, offsetT, int)\0"))
                            .as_ptr(),
                    );
                }
                1 | 2 | 3 | 12 | 13 | 14 | 15 | 18 | 19 | 20 | 21 | 16 => {
                    if ((*fragP).tc_frag_data.isa_flags.bitfield).cpunop() != 0 {
                        patt = alt_patt.as_ptr();
                    } else {
                        patt = f32_patt.as_ptr();
                    }
                }
                4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 => {
                    if ((*fragP).tc_frag_data.isa_flags.bitfield).cpunop() != 0 {
                        patt = alt_patt.as_ptr();
                    } else {
                        patt = f32_patt.as_ptr();
                    }
                }
                17 => {
                    patt = alt_patt.as_ptr();
                }
                _ => {}
            }
        }
        if patt == f32_patt.as_ptr() {
            max_single_nop_size = (::core::mem::size_of::<[*const libc::c_uchar; 7]>()
                as libc::c_ulong)
                .wrapping_div(
                    ::core::mem::size_of::<*const libc::c_uchar>() as libc::c_ulong,
                ) as libc::c_int;
            max_number_of_nops = 2 as libc::c_int;
        } else {
            max_single_nop_size = (::core::mem::size_of::<[*const libc::c_uchar; 11]>()
                as libc::c_ulong)
                .wrapping_div(
                    ::core::mem::size_of::<*const libc::c_uchar>() as libc::c_ulong,
                ) as libc::c_int;
            max_number_of_nops = 7 as libc::c_int;
        }
    }
    if limit == 0 as libc::c_int {
        limit = max_single_nop_size;
    }
    if (*fragP).fr_type as libc::c_uint == rs_fill_nop as libc::c_int as libc::c_uint {
        if limit > max_single_nop_size {
            as_bad_where(
                (*fragP).fr_file,
                (*fragP).fr_line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid single nop size: %d (expect within [0, %d])\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                limit,
                max_single_nop_size,
            );
            return;
        }
    } else if (*fragP).fr_type as libc::c_uint
        != rs_machine_dependent as libc::c_int as libc::c_uint
    {
        (*fragP).fr_var = count;
    }
    if count / max_single_nop_size as libc::c_long > max_number_of_nops as libc::c_long {
        let mut disp_0: offsetT = count - 2 as libc::c_int as libc::c_long;
        if fits_in_imm7(disp_0) != 0 {
            count = disp_0;
            *where_0
                .offset(
                    0 as libc::c_int as isize,
                ) = jump_disp8[0 as libc::c_int as usize] as libc::c_char;
            *where_0.offset(1 as libc::c_int as isize) = count as libc::c_char;
            where_0 = where_0.offset(2 as libc::c_int as isize);
        } else {
            let mut size_of_jump: libc::c_uint = 0;
            if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint {
                *where_0
                    .offset(
                        0 as libc::c_int as isize,
                    ) = jump16_disp32[0 as libc::c_int as usize] as libc::c_char;
                *where_0
                    .offset(
                        1 as libc::c_int as isize,
                    ) = jump16_disp32[1 as libc::c_int as usize] as libc::c_char;
                size_of_jump = 2 as libc::c_int as libc::c_uint;
            } else {
                *where_0
                    .offset(
                        0 as libc::c_int as isize,
                    ) = jump32_disp32[0 as libc::c_int as usize] as libc::c_char;
                size_of_jump = 1 as libc::c_int as libc::c_uint;
            }
            count
                -= size_of_jump.wrapping_add(4 as libc::c_int as libc::c_uint)
                    as libc::c_long;
            if fits_in_imm31(count) == 0 {
                as_bad_where(
                    (*fragP).fr_file,
                    (*fragP).fr_line,
                    dcgettext(
                        0 as *const libc::c_char,
                        b"jump over nop padding out of range\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return;
            }
            number_to_chars_littleendian(
                where_0.offset(size_of_jump as isize),
                count as valueT,
                4 as libc::c_int,
            );
            where_0 = where_0
                .offset(
                    size_of_jump.wrapping_add(4 as libc::c_int as libc::c_uint) as isize,
                );
        }
    }
    i386_output_nops(where_0, patt, count as libc::c_int, limit);
}
#[no_mangle]
pub static mut x86_dwarf2_return_column: libc::c_uint = 0;
#[no_mangle]
pub static mut x86_cie_data_alignment: libc::c_int = 0;
#[no_mangle]
pub unsafe extern "C" fn x86_dwarf2_addr_size() -> libc::c_int {
    if x86_elf_abi as libc::c_uint == X86_64_X32_ABI as libc::c_int as libc::c_uint {
        return 4 as libc::c_int;
    }
    return (bfd_arch_bits_per_address(stdoutput))
        .wrapping_div(8 as libc::c_int as libc::c_uint) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn tc_x86_parse_to_dw2regnum(mut exp: *mut expressionS) {
    let mut saved_naked_reg: libc::c_int = 0;
    let mut saved_register_dot: libc::c_char = 0;
    saved_naked_reg = allow_naked_reg;
    allow_naked_reg = 1 as libc::c_int;
    saved_register_dot = register_chars['.' as i32 as usize];
    register_chars['.' as i32 as usize] = '.' as i32 as libc::c_char;
    allow_pseudo_reg = 1 as libc::c_int;
    expr(0 as libc::c_int, exp, expr_evaluate);
    allow_pseudo_reg = 0 as libc::c_int;
    register_chars['.' as i32 as usize] = saved_register_dot;
    allow_naked_reg = saved_naked_reg;
    if (*exp).X_op() as libc::c_int == O_register as libc::c_int
        && (*exp).X_add_number >= 0 as libc::c_int as libc::c_long
    {
        if ((*exp).X_add_number as addressT) < i386_regtab_size as libc::c_ulong {
            (*exp).set_X_op(O_constant);
            (*exp)
                .X_add_number = (*i386_regtab
                .as_ptr()
                .offset((*exp).X_add_number as isize))
                .dw2_regnum[(flag_code as libc::c_uint >> 1 as libc::c_int) as usize]
                as offsetT;
        } else {
            (*exp).set_X_op(O_illegal);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn tc_x86_frame_initial_instructions() {
    static mut sp_regno: [libc::c_uint; 2] = [0; 2];
    if sp_regno[(flag_code as libc::c_uint >> 1 as libc::c_int) as usize] == 0 {
        let mut saved_input: *mut libc::c_char = input_line_pointer;
        let mut sp: [[libc::c_char; 4]; 2] = [
            *::core::mem::transmute::<&[u8; 4], &mut [libc::c_char; 4]>(b"esp\0"),
            *::core::mem::transmute::<&[u8; 4], &mut [libc::c_char; 4]>(b"rsp\0"),
        ];
        let mut exp: expressionS = expressionS {
            X_add_symbol: 0 as *mut symbolS,
            X_op_symbol: 0 as *mut symbolS,
            X_add_number: 0,
            X_op_X_unsigned_X_extrabit: [0; 2],
            X_md: 0,
        };
        input_line_pointer = (sp[(flag_code as libc::c_uint >> 1 as libc::c_int)
            as usize])
            .as_mut_ptr();
        tc_x86_parse_to_dw2regnum(&mut exp);
        if exp.X_op() as libc::c_int == O_constant as libc::c_int {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                14450 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void tc_x86_frame_initial_instructions(void)\0"))
                    .as_ptr(),
            );
        };
        sp_regno[(flag_code as libc::c_uint >> 1 as libc::c_int)
            as usize] = exp.X_add_number as libc::c_uint;
        input_line_pointer = saved_input;
    }
    cfi_add_CFA_def_cfa(
        sp_regno[(flag_code as libc::c_uint >> 1 as libc::c_int) as usize],
        -x86_cie_data_alignment as offsetT,
    );
    cfi_add_CFA_offset(x86_dwarf2_return_column, x86_cie_data_alignment as offsetT);
}
#[no_mangle]
pub unsafe extern "C" fn i386_elf_section_type(
    mut str: *const libc::c_char,
    mut len: size_t,
) -> libc::c_int {
    if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        && len
            == (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
        && startswith(str, b"unwind\0" as *const u8 as *const libc::c_char)
            as libc::c_int != 0
    {
        return 0x70000001 as libc::c_int;
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn x86_64_section_word(
    mut str: *mut libc::c_char,
    mut len: size_t,
) -> bfd_vma {
    if len == 5 as libc::c_int as libc::c_ulong
        && flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        && startswith(str, b"large\0" as *const u8 as *const libc::c_char) as libc::c_int
            != 0
    {
        return 0x10000000 as libc::c_int as bfd_vma;
    }
    return -(1 as libc::c_int) as bfd_vma;
}
#[no_mangle]
pub unsafe extern "C" fn x86_64_section_letter(
    mut letter: libc::c_int,
    mut ptr_msg: *mut *const libc::c_char,
) -> bfd_vma {
    if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
        if letter == 'l' as i32 {
            return 0x10000000 as libc::c_int as bfd_vma;
        }
        *ptr_msg = dcgettext(
            0 as *const libc::c_char,
            b"bad .section directive: want a,l,w,x,M,S,G,T in string\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        );
    } else {
        *ptr_msg = dcgettext(
            0 as *const libc::c_char,
            b"bad .section directive: want a,w,x,M,S,G,T in string\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        );
    }
    return -(1 as libc::c_int) as bfd_vma;
}
#[no_mangle]
pub unsafe extern "C" fn x86_cleanup() {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut seg: *mut asection = now_seg;
    let mut subseg: subsegT = now_subseg;
    let mut sec: *mut asection = 0 as *mut asection;
    let mut alignment: libc::c_uint = 0;
    let mut align_size_1: libc::c_uint = 0;
    let mut isa_1_descsz: libc::c_uint = 0;
    let mut feature_2_descsz: libc::c_uint = 0;
    let mut descsz: libc::c_uint = 0;
    let mut isa_1_descsz_raw: libc::c_uint = 0;
    let mut feature_2_descsz_raw: libc::c_uint = 0;
    let mut padding: libc::c_uint = 0;
    if 1 as libc::c_int == 0 || x86_used_note == 0 {
        return;
    }
    x86_feature_2_used |= (1 as libc::c_uint) << 0 as libc::c_int;
    sec = subseg_new(
        b".note.gnu.property\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
    );
    bfd_set_section_flags(
        sec,
        (0x1 as libc::c_int | 0x2 as libc::c_int | 0x20 as libc::c_int
            | 0x100 as libc::c_int | 0x8 as libc::c_int) as flagword,
    );
    if (*(*((*(*stdoutput).xvec).backend_data as *const elf_backend_data)).s).elfclass
        as libc::c_int == 2 as libc::c_int
    {
        align_size_1 = 7 as libc::c_int as libc::c_uint;
        alignment = 3 as libc::c_int as libc::c_uint;
    } else {
        align_size_1 = 3 as libc::c_int as libc::c_uint;
        alignment = 2 as libc::c_int as libc::c_uint;
    }
    bfd_set_section_alignment(sec, alignment);
    (*((*sec).used_by_bfd as *mut bfd_elf_section_data))
        .this_hdr
        .sh_type = 7 as libc::c_int as libc::c_uint;
    isa_1_descsz_raw = (4 as libc::c_int + 4 as libc::c_int + 4 as libc::c_int)
        as libc::c_uint;
    isa_1_descsz = isa_1_descsz_raw.wrapping_add(align_size_1) & !align_size_1;
    feature_2_descsz_raw = isa_1_descsz;
    feature_2_descsz_raw = feature_2_descsz_raw
        .wrapping_add(
            (4 as libc::c_int + 4 as libc::c_int + 4 as libc::c_int) as libc::c_uint,
        );
    feature_2_descsz = feature_2_descsz_raw.wrapping_add(align_size_1) & !align_size_1;
    descsz = feature_2_descsz;
    p = frag_more(
        ((4 as libc::c_int + 4 as libc::c_int + 4 as libc::c_int + 4 as libc::c_int)
            as libc::c_uint)
            .wrapping_add(descsz) as size_t,
    );
    number_to_chars_littleendian(p, 4 as libc::c_int as valueT, 4 as libc::c_int);
    number_to_chars_littleendian(
        p.offset(4 as libc::c_int as isize),
        descsz as valueT,
        4 as libc::c_int,
    );
    number_to_chars_littleendian(
        p.offset((4 as libc::c_int * 2 as libc::c_int) as isize),
        5 as libc::c_int as valueT,
        4 as libc::c_int,
    );
    memcpy(
        p.offset((4 as libc::c_int * 3 as libc::c_int) as isize) as *mut libc::c_void,
        b"GNU\0" as *const u8 as *const libc::c_char as *const libc::c_void,
        4 as libc::c_int as libc::c_ulong,
    );
    number_to_chars_littleendian(
        p.offset((4 as libc::c_int * 4 as libc::c_int) as isize),
        (0xc0010000 as libc::c_uint).wrapping_add(2 as libc::c_int as libc::c_uint)
            as valueT,
        4 as libc::c_int,
    );
    number_to_chars_littleendian(
        p.offset((4 as libc::c_int * 5 as libc::c_int) as isize),
        4 as libc::c_int as valueT,
        4 as libc::c_int,
    );
    number_to_chars_littleendian(
        p.offset((4 as libc::c_int * 6 as libc::c_int) as isize),
        x86_isa_1_used as valueT,
        4 as libc::c_int,
    );
    padding = isa_1_descsz.wrapping_sub(isa_1_descsz_raw);
    if padding != 0 {
        memset(
            p.offset((4 as libc::c_int * 7 as libc::c_int) as isize)
                as *mut libc::c_void,
            0 as libc::c_int,
            padding as libc::c_ulong,
        );
    }
    number_to_chars_littleendian(
        p
            .offset(isa_1_descsz as isize)
            .offset((4 as libc::c_int * 4 as libc::c_int) as isize),
        (0xc0010000 as libc::c_uint).wrapping_add(1 as libc::c_int as libc::c_uint)
            as valueT,
        4 as libc::c_int,
    );
    number_to_chars_littleendian(
        p
            .offset(isa_1_descsz as isize)
            .offset((4 as libc::c_int * 5 as libc::c_int) as isize),
        4 as libc::c_int as valueT,
        4 as libc::c_int,
    );
    number_to_chars_littleendian(
        p
            .offset(isa_1_descsz as isize)
            .offset((4 as libc::c_int * 6 as libc::c_int) as isize),
        x86_feature_2_used as valueT,
        4 as libc::c_int,
    );
    padding = feature_2_descsz.wrapping_sub(feature_2_descsz_raw);
    if padding != 0 {
        memset(
            p
                .offset(isa_1_descsz as isize)
                .offset((4 as libc::c_int * 7 as libc::c_int) as isize)
                as *mut libc::c_void,
            0 as libc::c_int,
            padding as libc::c_ulong,
        );
    }
    if !seg.is_null() && subseg != 0 {
        subseg_set(seg, subseg);
    }
}
unsafe extern "C" fn hash_string_tuple(mut e: *const libc::c_void) -> hashval_t {
    let mut tuple: *mut string_tuple_t = e as *mut string_tuple_t;
    return htab_hash_string((*tuple).key as *const libc::c_void);
}
unsafe extern "C" fn eq_string_tuple(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut ea: *const string_tuple_t = a as *const string_tuple_t;
    let mut eb: *const string_tuple_t = b as *const string_tuple_t;
    return (strcmp((*ea).key, (*eb).key) == 0 as libc::c_int) as libc::c_int;
}
#[inline]
unsafe extern "C" fn string_tuple_alloc(
    mut key: *const libc::c_char,
    mut value: *const libc::c_void,
) -> *mut string_tuple_t {
    let mut tuple: *mut string_tuple_t = xmalloc(
        ::core::mem::size_of::<string_tuple_t>() as libc::c_ulong,
    ) as *mut string_tuple_t;
    (*tuple).key = key;
    (*tuple).value = value;
    return tuple;
}
#[inline]
unsafe extern "C" fn str_hash_insert(
    mut table: htab_t,
    mut key: *const libc::c_char,
    mut value: *const libc::c_void,
    mut replace: libc::c_int,
) -> *mut *mut libc::c_void {
    let mut elt: *mut string_tuple_t = string_tuple_alloc(key, value);
    let mut slot: *mut *mut libc::c_void = htab_insert(
        table,
        elt as *mut libc::c_void,
        replace,
    );
    if !slot.is_null() && replace == 0 {
        free(elt as *mut libc::c_void);
    }
    return slot;
}
#[inline]
unsafe extern "C" fn str_htab_create() -> htab_t {
    return htab_create_alloc(
        16 as libc::c_int as size_t,
        Some(
            hash_string_tuple as unsafe extern "C" fn(*const libc::c_void) -> hashval_t,
        ),
        Some(
            eq_string_tuple
                as unsafe extern "C" fn(
                    *const libc::c_void,
                    *const libc::c_void,
                ) -> libc::c_int,
        ),
        None,
        Some(xcalloc as unsafe extern "C" fn(size_t, size_t) -> *mut libc::c_void),
        Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ()),
    );
}
#[no_mangle]
pub static mut line_comment_chars: [libc::c_char; 3] = unsafe {
    *::core::mem::transmute::<&[u8; 3], &[libc::c_char; 3]>(b"#/\0")
};
#[no_mangle]
pub static mut line_separator_chars: [libc::c_char; 2] = unsafe {
    *::core::mem::transmute::<&[u8; 2], &[libc::c_char; 2]>(b";\0")
};
unsafe extern "C" fn update_code_flag(mut value: libc::c_int, mut check: libc::c_int) {
    let mut as_error: Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()> = None;
    flag_code = value as flag_code;
    if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
        (cpu_arch_flags.bitfield).set_cpu64(1 as libc::c_int as libc::c_uint);
        (cpu_arch_flags.bitfield).set_cpuno64(0 as libc::c_int as libc::c_uint);
    } else {
        (cpu_arch_flags.bitfield).set_cpu64(0 as libc::c_int as libc::c_uint);
        (cpu_arch_flags.bitfield).set_cpuno64(1 as libc::c_int as libc::c_uint);
    }
    if value == CODE_64BIT as libc::c_int && (cpu_arch_flags.bitfield).cpulm() == 0 {
        if check != 0 {
            as_error = ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> !>,
                Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()>,
            >(Some(as_fatal as unsafe extern "C" fn(*const libc::c_char, ...) -> !));
        } else {
            as_error = Some(
                as_bad as unsafe extern "C" fn(*const libc::c_char, ...) -> (),
            );
        }
        (Some(as_error.expect("non-null function pointer")))
            .expect(
                "non-null function pointer",
            )(
            dcgettext(
                0 as *const libc::c_char,
                b"64bit mode not supported on `%s'.\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            if !cpu_arch_name.is_null() { cpu_arch_name } else { default_arch },
        );
    }
    if value == CODE_32BIT as libc::c_int && (cpu_arch_flags.bitfield).cpui386() == 0 {
        if check != 0 {
            as_error = ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> !>,
                Option::<unsafe extern "C" fn(*const libc::c_char, ...) -> ()>,
            >(Some(as_fatal as unsafe extern "C" fn(*const libc::c_char, ...) -> !));
        } else {
            as_error = Some(
                as_bad as unsafe extern "C" fn(*const libc::c_char, ...) -> (),
            );
        }
        (Some(as_error.expect("non-null function pointer")))
            .expect(
                "non-null function pointer",
            )(
            dcgettext(
                0 as *const libc::c_char,
                b"32bit mode not supported on `%s'.\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            if !cpu_arch_name.is_null() { cpu_arch_name } else { default_arch },
        );
    }
    stackop_size = '\0' as i32 as libc::c_char;
}
unsafe extern "C" fn set_code_flag(mut value: libc::c_int) {
    update_code_flag(value, 0 as libc::c_int);
}
unsafe extern "C" fn set_16bit_gcc_code_flag(mut new_code_flag: libc::c_int) {
    flag_code = new_code_flag as flag_code;
    if flag_code as libc::c_uint != CODE_16BIT as libc::c_int as libc::c_uint {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2709 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"void set_16bit_gcc_code_flag(int)\0"))
                .as_ptr(),
        );
    }
    (cpu_arch_flags.bitfield).set_cpu64(0 as libc::c_int as libc::c_uint);
    (cpu_arch_flags.bitfield).set_cpuno64(1 as libc::c_int as libc::c_uint);
    stackop_size = 'l' as i32 as libc::c_char;
}
unsafe extern "C" fn set_intel_syntax(mut syntax_flag: libc::c_int) {
    let mut ask_naked_reg: libc::c_int = 0 as libc::c_int;
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *is_end_of_line.as_mut_ptr().offset(*input_line_pointer as libc::c_uchar as isize)
        == 0
    {
        let mut string: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut e: libc::c_int = get_symbol_name(&mut string) as libc::c_int;
        if strcmp(string, b"prefix\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            ask_naked_reg = 1 as libc::c_int;
        } else if strcmp(string, b"noprefix\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            ask_naked_reg = -(1 as libc::c_int);
        } else {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"bad argument to syntax directive.\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        restore_line_pointer(e as libc::c_char);
    }
    demand_empty_rest_of_line();
    intel_syntax = syntax_flag;
    if ask_naked_reg == 0 as libc::c_int {
        allow_naked_reg = (intel_syntax != 0
            && bfd_get_symbol_leading_char(stdoutput) as libc::c_int != '\0' as i32)
            as libc::c_int;
    } else {
        allow_naked_reg = (ask_naked_reg < 0 as libc::c_int) as libc::c_int;
    }
    expr_set_rank(
        O_md2,
        (if syntax_flag != 0 { 10 as libc::c_int } else { 0 as libc::c_int })
            as operator_rankT,
    );
    identifier_chars['%' as i32
        as usize] = (if intel_syntax != 0 && allow_naked_reg != 0 {
        '%' as i32
    } else {
        0 as libc::c_int
    }) as libc::c_char;
    identifier_chars['$' as i32
        as usize] = (if intel_syntax != 0 { '$' as i32 } else { 0 as libc::c_int })
        as libc::c_char;
    register_prefix = if allow_naked_reg != 0 {
        b"\0" as *const u8 as *const libc::c_char
    } else {
        b"%\0" as *const u8 as *const libc::c_char
    };
}
unsafe extern "C" fn set_intel_mnemonic(mut mnemonic_flag: libc::c_int) {
    intel_mnemonic = mnemonic_flag;
}
unsafe extern "C" fn set_allow_index_reg(mut flag: libc::c_int) {
    allow_index_reg = flag;
}
unsafe extern "C" fn set_check(mut what: libc::c_int) {
    let mut kind: *mut check_kind = 0 as *mut check_kind;
    let mut str: *const libc::c_char = 0 as *const libc::c_char;
    if what != 0 {
        kind = &mut operand_check;
        str = b"operand\0" as *const u8 as *const libc::c_char;
    } else {
        kind = &mut sse_check;
        str = b"sse\0" as *const u8 as *const libc::c_char;
    }
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *is_end_of_line.as_mut_ptr().offset(*input_line_pointer as libc::c_uchar as isize)
        == 0
    {
        let mut string: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut e: libc::c_int = get_symbol_name(&mut string) as libc::c_int;
        if strcmp(string, b"none\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            *kind = check_none;
        } else if strcmp(string, b"warning\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            *kind = check_warning;
        } else if strcmp(string, b"error\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            *kind = check_error;
        } else {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"bad argument to %s_check directive.\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                str,
            );
        }
        restore_line_pointer(e as libc::c_char);
    } else {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"missing argument for %s_check directive\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            str,
        );
    }
    demand_empty_rest_of_line();
}
unsafe extern "C" fn set_cpu_arch(mut dummy: libc::c_int) {
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *is_end_of_line.as_mut_ptr().offset(*input_line_pointer as libc::c_uchar as isize)
        == 0
    {
        let mut string: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut e: libc::c_int = get_symbol_name(&mut string) as libc::c_int;
        let mut j: libc::c_uint = 0;
        let mut flags: i386_cpu_flags = i386_cpu_flags {
            bitfield: C2RustUnnamed_24 {
                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
            },
        };
        j = 0 as libc::c_int as libc::c_uint;
        while (j as libc::c_ulong)
            < (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
        {
            if strcmp(string, cpu_arch[j as usize].name) == 0 as libc::c_int {
                check_cpu_arch_compatible(string, cpu_arch[j as usize].flags);
                if *string as libc::c_int != '.' as i32 {
                    cpu_arch_name = cpu_arch[j as usize].name;
                    cpu_sub_arch_name = 0 as *mut libc::c_char;
                    cpu_arch_flags = cpu_arch[j as usize].flags;
                    if flag_code as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                    {
                        (cpu_arch_flags.bitfield)
                            .set_cpu64(1 as libc::c_int as libc::c_uint);
                        (cpu_arch_flags.bitfield)
                            .set_cpuno64(0 as libc::c_int as libc::c_uint);
                    } else {
                        (cpu_arch_flags.bitfield)
                            .set_cpu64(0 as libc::c_int as libc::c_uint);
                        (cpu_arch_flags.bitfield)
                            .set_cpuno64(1 as libc::c_int as libc::c_uint);
                    }
                    cpu_arch_isa = cpu_arch[j as usize].type_0;
                    cpu_arch_isa_flags = cpu_arch[j as usize].flags;
                    if cpu_arch_tune_set == 0 {
                        cpu_arch_tune = cpu_arch_isa;
                        cpu_arch_tune_flags = cpu_arch_isa_flags;
                    }
                    break;
                } else {
                    flags = cpu_flags_or(cpu_arch_flags, cpu_arch[j as usize].flags);
                    if cpu_flags_equal(&mut flags, &mut cpu_arch_flags) == 0 {
                        if !cpu_sub_arch_name.is_null() {
                            let mut name: *mut libc::c_char = cpu_sub_arch_name;
                            cpu_sub_arch_name = concat(
                                name,
                                cpu_arch[j as usize].name,
                                0 as *mut libc::c_void as *const libc::c_char,
                            );
                            free(name as *mut libc::c_void);
                        } else {
                            cpu_sub_arch_name = xstrdup(cpu_arch[j as usize].name);
                        }
                        cpu_arch_flags = flags;
                        cpu_arch_isa_flags = flags;
                    } else {
                        cpu_arch_isa_flags = cpu_flags_or(
                            cpu_arch_isa_flags,
                            cpu_arch[j as usize].flags,
                        );
                    }
                    restore_line_pointer(e as libc::c_char);
                    demand_empty_rest_of_line();
                    return;
                }
            } else {
                j = j.wrapping_add(1);
                j;
            }
        }
        if *string as libc::c_int == '.' as i32
            && j as libc::c_ulong
                >= (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                    .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
        {
            j = 0 as libc::c_int as libc::c_uint;
            while (j as libc::c_ulong)
                < (::core::mem::size_of::<[noarch_entry; 50]>() as libc::c_ulong)
                    .wrapping_div(
                        ::core::mem::size_of::<noarch_entry>() as libc::c_ulong,
                    )
            {
                if strcmp(
                    string.offset(1 as libc::c_int as isize),
                    cpu_noarch[j as usize].name,
                ) == 0 as libc::c_int
                {
                    flags = cpu_flags_and_not(
                        cpu_arch_flags,
                        cpu_noarch[j as usize].flags,
                    );
                    if cpu_flags_equal(&mut flags, &mut cpu_arch_flags) == 0 {
                        if !cpu_sub_arch_name.is_null() {
                            let mut name_0: *mut libc::c_char = cpu_sub_arch_name;
                            cpu_sub_arch_name = concat(
                                name_0,
                                string,
                                0 as *mut libc::c_void as *const libc::c_char,
                            );
                            free(name_0 as *mut libc::c_void);
                        } else {
                            cpu_sub_arch_name = xstrdup(string);
                        }
                        cpu_arch_flags = flags;
                        cpu_arch_isa_flags = flags;
                    }
                    restore_line_pointer(e as libc::c_char);
                    demand_empty_rest_of_line();
                    return;
                }
                j = j.wrapping_add(1);
                j;
            }
            j = (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
                as libc::c_uint;
        }
        if j as libc::c_ulong
            >= (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
                .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"no such architecture: `%s'\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                string,
            );
        }
        *input_line_pointer = e as libc::c_char;
    } else {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"missing cpu architecture\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    }
    no_cond_jump_promotion = 0 as libc::c_int as libc::c_uint;
    if *input_line_pointer as libc::c_int == ',' as i32
        && *is_end_of_line
            .as_mut_ptr()
            .offset(
                *input_line_pointer.offset(1 as libc::c_int as isize) as libc::c_uchar
                    as isize,
            ) == 0
    {
        let mut string_0: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut e_0: libc::c_char = 0;
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
        e_0 = get_symbol_name(&mut string_0);
        if strcmp(string_0, b"nojumps\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            no_cond_jump_promotion = 1 as libc::c_int as libc::c_uint;
        } else if !(strcmp(string_0, b"jumps\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"no such architecture modifier: `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                string_0,
            );
        }
        restore_line_pointer(e_0);
    }
    demand_empty_rest_of_line();
}
unsafe extern "C" fn signed_cons(mut size: libc::c_int) {
    if object_64bit != 0 {
        cons_sign = 1 as libc::c_int;
    }
    cons(size);
    cons_sign = -(1 as libc::c_int);
}
unsafe extern "C" fn output_invalid(mut c: libc::c_int) -> *mut libc::c_char {
    if _sch_istable[(c & 0xff as libc::c_int) as usize] as libc::c_int
        & _sch_isprint as libc::c_int as libc::c_ushort as libc::c_int != 0
    {
        snprintf(
            output_invalid_buf.as_mut_ptr(),
            ::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong,
            b"'%c'\0" as *const u8 as *const libc::c_char,
            c,
        );
    } else {
        snprintf(
            output_invalid_buf.as_mut_ptr(),
            ::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong,
            b"(0x%x)\0" as *const u8 as *const libc::c_char,
            c as libc::c_uchar as libc::c_int,
        );
    }
    return output_invalid_buf.as_mut_ptr();
}
unsafe extern "C" fn i386_finalize_immediate(
    mut exp_seg: segT,
    mut exp: *mut expressionS,
    mut types: i386_operand_type,
    mut imm_start: *const libc::c_char,
) -> libc::c_int {
    if (*exp).X_op() as libc::c_int == O_absent as libc::c_int
        || (*exp).X_op() as libc::c_int == O_illegal as libc::c_int
        || (*exp).X_op() as libc::c_int == O_big as libc::c_int
    {
        if !imm_start.is_null() {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"missing or invalid immediate expression `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                imm_start,
            );
        }
        return 0 as libc::c_int;
    } else if (*exp).X_op() as libc::c_int == O_constant as libc::c_int {
        (i.types[this_operand as usize].bitfield)
            .set_imm64(1 as libc::c_int as libc::c_uint);
        if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint {
            (*exp)
                .X_add_number = extend_to_32bit_address((*exp).X_add_number as addressT)
                as offsetT;
        }
    } else {
        (i.types[this_operand as usize].bitfield)
            .set_imm8(1 as libc::c_int as libc::c_uint);
        (i.types[this_operand as usize].bitfield)
            .set_imm16(1 as libc::c_int as libc::c_uint);
        (i.types[this_operand as usize].bitfield)
            .set_imm32(1 as libc::c_int as libc::c_uint);
        (i.types[this_operand as usize].bitfield)
            .set_imm32s(1 as libc::c_int as libc::c_uint);
        (i.types[this_operand as usize].bitfield)
            .set_imm64(1 as libc::c_int as libc::c_uint);
        i
            .types[this_operand
            as usize] = operand_type_and(i.types[this_operand as usize], types);
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn i386_finalize_displacement(
    mut exp_seg: segT,
    mut exp: *mut expressionS,
    mut types: i386_operand_type,
    mut disp_start: *const libc::c_char,
) -> libc::c_int {
    let mut bigdisp: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut ret: libc::c_int = 1 as libc::c_int;
    let mut current_block_16: u64;
    if i.reloc[this_operand as usize] as libc::c_uint
        == BFD_RELOC_386_GOTOFF as libc::c_int as libc::c_uint
        || i.reloc[this_operand as usize] as libc::c_uint
            == BFD_RELOC_X86_64_GOTPCREL as libc::c_int as libc::c_uint
        || i.reloc[this_operand as usize] as libc::c_uint
            == BFD_RELOC_X86_64_GOTOFF64 as libc::c_int as libc::c_uint
    {
        if (*exp).X_op() as libc::c_int != O_symbol as libc::c_int {
            current_block_16 = 13567992651544012221;
        } else {
            if S_IS_LOCAL((*exp).X_add_symbol) != 0
                && S_GET_SEGMENT((*exp).X_add_symbol)
                    != &mut *_bfd_std_section
                        .as_mut_ptr()
                        .offset(1 as libc::c_int as isize) as *mut asection
                && S_GET_SEGMENT((*exp).X_add_symbol) != expr_section
            {
                section_symbol(S_GET_SEGMENT((*exp).X_add_symbol));
            }
            (*exp).set_X_op(O_subtract);
            (*exp).X_op_symbol = GOT_symbol;
            if i.reloc[this_operand as usize] as libc::c_uint
                == BFD_RELOC_X86_64_GOTPCREL as libc::c_int as libc::c_uint
            {
                i.reloc[this_operand as usize] = BFD_RELOC_32_PCREL;
            } else if i.reloc[this_operand as usize] as libc::c_uint
                == BFD_RELOC_X86_64_GOTOFF64 as libc::c_int as libc::c_uint
            {
                i.reloc[this_operand as usize] = BFD_RELOC_64;
            } else {
                i.reloc[this_operand as usize] = BFD_RELOC_32;
            }
            current_block_16 = 5948590327928692120;
        }
    } else if (*exp).X_op() as libc::c_int == O_absent as libc::c_int
        || (*exp).X_op() as libc::c_int == O_illegal as libc::c_int
        || (*exp).X_op() as libc::c_int == O_big as libc::c_int
    {
        current_block_16 = 13567992651544012221;
    } else {
        if (*exp).X_op() as libc::c_int == O_constant as libc::c_int {
            if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint {
                (*exp)
                    .X_add_number = extend_to_32bit_address(
                    (*exp).X_add_number as addressT,
                ) as offsetT;
            }
        } else if ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            == 3 as libc::c_int
        {
            (i.types[this_operand as usize].bitfield)
                .set_disp8(1 as libc::c_int as libc::c_uint);
        }
        current_block_16 = 5948590327928692120;
    }
    match current_block_16 {
        13567992651544012221 => {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"missing or invalid displacement expression `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                disp_start,
            );
            ret = 0 as libc::c_int;
        }
        _ => {}
    }
    bigdisp = operand_type_and_not(i.types[this_operand as usize], anydisp);
    if operand_type_all_zero(&mut bigdisp) != 0 {
        i
            .types[this_operand
            as usize] = operand_type_and(i.types[this_operand as usize], types);
    }
    return ret;
}
unsafe extern "C" fn i386_att_operand(
    mut operand_string: *mut libc::c_char,
) -> libc::c_int {
    let mut r: *const reg_entry = 0 as *const reg_entry;
    let mut end_op: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut op_string: *mut libc::c_char = operand_string;
    if *op_string as libc::c_int == ' ' as i32 {
        op_string = op_string.offset(1);
        op_string;
    }
    if *op_string as libc::c_int == '*' as i32 {
        op_string = op_string.offset(1);
        op_string;
        if *op_string as libc::c_int == ' ' as i32 {
            op_string = op_string.offset(1);
            op_string;
        }
        i.jumpabsolute = 1 as libc::c_int != 0;
    }
    let mut base_string: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut displacement_string_start: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut displacement_string_end: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut current_block_176: u64;
    r = parse_register(op_string, &mut end_op);
    if !r.is_null() {
        let mut temp: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        if r == &bad_reg as *const reg_entry {
            return 0 as libc::c_int;
        }
        op_string = end_op;
        if *op_string as libc::c_int == ' ' as i32 {
            op_string = op_string.offset(1);
            op_string;
        }
        if *op_string as libc::c_int == ':' as i32
            && ((*r).reg_type.bitfield).class() as libc::c_int == SReg as libc::c_int
        {
            i.seg[i.mem_operands as usize] = r;
            op_string = op_string.offset(1);
            op_string;
            if *op_string as libc::c_int == ' ' as i32 {
                op_string = op_string.offset(1);
                op_string;
            }
            if !i.jumpabsolute && *op_string as libc::c_int == '*' as i32 {
                op_string = op_string.offset(1);
                op_string;
                if *op_string as libc::c_int == ' ' as i32 {
                    op_string = op_string.offset(1);
                    op_string;
                }
                i.jumpabsolute = 1 as libc::c_int != 0;
            }
            if !starts_memory_operand(*op_string) {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"bad memory operand `%s'\0" as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    op_string,
                );
                return 0 as libc::c_int;
            }
            current_block_176 = 13881864312544973640;
        } else {
            if *op_string as libc::c_int == '{' as i32 {
                op_string = check_VecOperations(op_string);
                if op_string.is_null() {
                    return 0 as libc::c_int;
                }
            }
            if *op_string != 0 {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"junk `%s' after register\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    op_string,
                );
                return 0 as libc::c_int;
            }
            temp = (*r).reg_type;
            (temp.bitfield).set_baseindex(0 as libc::c_int as libc::c_uint);
            i
                .types[this_operand
                as usize] = operand_type_or(i.types[this_operand as usize], temp);
            (i.types[this_operand as usize].bitfield)
                .set_unspecified(0 as libc::c_int as libc::c_uint);
            i.op[this_operand as usize].regs = r;
            i.reg_operands = (i.reg_operands).wrapping_add(1);
            i.reg_operands;
            current_block_176 = 9008220588464243015;
        }
    } else if *op_string as libc::c_int == '%' as i32 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"bad register name `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            op_string,
        );
        return 0 as libc::c_int;
    } else if *op_string as libc::c_int == '$' as i32 {
        op_string = op_string.offset(1);
        op_string;
        if i.jumpabsolute {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"immediate operand illegal with absolute jump\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
        if i386_immediate(op_string) == 0 {
            return 0 as libc::c_int;
        }
        current_block_176 = 9008220588464243015;
    } else if RC_SAE_immediate(operand_string) != 0 {
        current_block_176 = 9008220588464243015;
    } else {
        if starts_memory_operand(*op_string) {
            base_string = 0 as *mut libc::c_char;
            displacement_string_start = 0 as *mut libc::c_char;
            displacement_string_end = 0 as *mut libc::c_char;
        } else {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid char %s beginning operand %d `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                output_invalid(*op_string as libc::c_int),
                this_operand + 1 as libc::c_int,
                op_string,
            );
            return 0 as libc::c_int;
        }
        current_block_176 = 13881864312544973640;
    }
    match current_block_176 {
        13881864312544973640 => {
            if i.mem_operands == 1 as libc::c_int as libc::c_uint
                && maybe_adjust_templates() == 0
            {
                return 0 as libc::c_int;
            }
            if i.mem_operands == 1 as libc::c_int as libc::c_uint
                && ((*(*current_templates).start).opcode_modifier).isstring() == 0
                || i.mem_operands == 2 as libc::c_int as libc::c_uint
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"too many memory references for `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    (*(*current_templates).start).name,
                );
                return 0 as libc::c_int;
            }
            base_string = op_string.offset(strlen(op_string) as isize);
            base_string = base_string.offset(-1);
            base_string;
            if *base_string as libc::c_int == ' ' as i32 {
                base_string = base_string.offset(-1);
                base_string;
            }
            if *base_string as libc::c_int == '}' as i32 {
                let mut vop_start: *mut libc::c_char = 0 as *mut libc::c_char;
                loop {
                    let fresh7 = base_string;
                    base_string = base_string.offset(-1);
                    if !(fresh7 > op_string) {
                        break;
                    }
                    if *base_string as libc::c_int == '"' as i32 {
                        break;
                    }
                    if *base_string as libc::c_int != '{' as i32 {
                        continue;
                    }
                    vop_start = base_string;
                    base_string = base_string.offset(-1);
                    base_string;
                    if *base_string as libc::c_int == ' ' as i32 {
                        base_string = base_string.offset(-1);
                        base_string;
                    }
                    if *base_string as libc::c_int != '}' as i32 {
                        break;
                    }
                    vop_start = 0 as *mut libc::c_char;
                }
                if vop_start.is_null() {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"unbalanced figure braces\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                    return 0 as libc::c_int;
                }
                if (check_VecOperations(vop_start)).is_null() {
                    return 0 as libc::c_int;
                }
            }
            displacement_string_start = op_string;
            displacement_string_end = base_string.offset(1 as libc::c_int as isize);
            if *base_string as libc::c_int == ')' as i32 {
                let mut temp_string: *mut libc::c_char = 0 as *mut libc::c_char;
                let mut parens_not_balanced: libc::c_uint = 1 as libc::c_int
                    as libc::c_uint;
                loop {
                    base_string = base_string.offset(-1);
                    base_string;
                    if *base_string as libc::c_int == ')' as i32 {
                        parens_not_balanced = parens_not_balanced.wrapping_add(1);
                        parens_not_balanced;
                    }
                    if *base_string as libc::c_int == '(' as i32 {
                        parens_not_balanced = parens_not_balanced.wrapping_sub(1);
                        parens_not_balanced;
                    }
                    if !(parens_not_balanced != 0
                        && *base_string as libc::c_int != '"' as i32)
                    {
                        break;
                    }
                }
                temp_string = base_string;
                if *base_string as libc::c_int == '(' as i32 {
                    base_string = base_string.offset(1);
                    base_string;
                }
                if *base_string as libc::c_int == ' ' as i32 {
                    base_string = base_string.offset(1);
                    base_string;
                }
                if *base_string as libc::c_int == ',' as i32
                    || {
                        i.base_reg = parse_register(base_string, &mut end_op);
                        !(i.base_reg).is_null()
                    }
                {
                    displacement_string_end = temp_string;
                    (i.types[this_operand as usize].bitfield)
                        .set_baseindex(1 as libc::c_int as libc::c_uint);
                    if !(i.base_reg).is_null() {
                        if i.base_reg == &bad_reg as *const reg_entry {
                            return 0 as libc::c_int;
                        }
                        base_string = end_op;
                        if *base_string as libc::c_int == ' ' as i32 {
                            base_string = base_string.offset(1);
                            base_string;
                        }
                    }
                    if *base_string as libc::c_int == ',' as i32 {
                        base_string = base_string.offset(1);
                        base_string;
                        if *base_string as libc::c_int == ' ' as i32 {
                            base_string = base_string.offset(1);
                            base_string;
                        }
                        i.index_reg = parse_register(base_string, &mut end_op);
                        if !(i.index_reg).is_null() {
                            if i.index_reg == &bad_reg as *const reg_entry {
                                return 0 as libc::c_int;
                            }
                            base_string = end_op;
                            if *base_string as libc::c_int == ' ' as i32 {
                                base_string = base_string.offset(1);
                                base_string;
                            }
                            if *base_string as libc::c_int == ',' as i32 {
                                base_string = base_string.offset(1);
                                base_string;
                                if *base_string as libc::c_int == ' ' as i32 {
                                    base_string = base_string.offset(1);
                                    base_string;
                                }
                            } else if *base_string as libc::c_int != ')' as i32 {
                                as_bad(
                                    dcgettext(
                                        0 as *const libc::c_char,
                                        b"expecting `,' or `)' after index register in `%s'\0"
                                            as *const u8 as *const libc::c_char,
                                        5 as libc::c_int,
                                    ),
                                    operand_string,
                                );
                                return 0 as libc::c_int;
                            }
                        } else if *base_string as libc::c_int == '%' as i32 {
                            end_op = strchr(base_string, ',' as i32);
                            if !end_op.is_null() {
                                *end_op = '\0' as i32 as libc::c_char;
                            }
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"bad register name `%s'\0" as *const u8
                                        as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                base_string,
                            );
                            return 0 as libc::c_int;
                        }
                        if *base_string as libc::c_int != ')' as i32 {
                            let mut end_scale: *mut libc::c_char = i386_scale(
                                base_string,
                            );
                            if end_scale.is_null() {
                                return 0 as libc::c_int;
                            }
                            base_string = end_scale;
                            if *base_string as libc::c_int == ' ' as i32 {
                                base_string = base_string.offset(1);
                                base_string;
                            }
                            if *base_string as libc::c_int != ')' as i32 {
                                as_bad(
                                    dcgettext(
                                        0 as *const libc::c_char,
                                        b"expecting `)' after scale factor in `%s'\0" as *const u8
                                            as *const libc::c_char,
                                        5 as libc::c_int,
                                    ),
                                    operand_string,
                                );
                                return 0 as libc::c_int;
                            }
                        } else if (i.index_reg).is_null() {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"expecting index register or scale factor after `,'; got '%c'\0"
                                        as *const u8 as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                *base_string as libc::c_int,
                            );
                            return 0 as libc::c_int;
                        }
                    } else if *base_string as libc::c_int != ')' as i32 {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"expecting `,' or `)' after base register in `%s'\0"
                                    as *const u8 as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            operand_string,
                        );
                        return 0 as libc::c_int;
                    }
                } else if *base_string as libc::c_int == '%' as i32 {
                    end_op = strchr(base_string, ',' as i32);
                    if !end_op.is_null() {
                        *end_op = '\0' as i32 as libc::c_char;
                    }
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"bad register name `%s'\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        base_string,
                    );
                    return 0 as libc::c_int;
                }
            }
            if displacement_string_start != displacement_string_end {
                if i386_displacement(displacement_string_start, displacement_string_end)
                    == 0
                {
                    return 0 as libc::c_int;
                }
            }
            if !(i.base_reg).is_null()
                && ((*i.base_reg).reg_type.bitfield).instance() as libc::c_int
                    == RegD as libc::c_int
                && ((*i.base_reg).reg_type.bitfield).word() as libc::c_int != 0
                && (i.index_reg).is_null()
                && i.log2_scale_factor == 0 as libc::c_int as libc::c_uint
                && (i.seg[i.mem_operands as usize]).is_null()
                && operand_type_check(i.types[this_operand as usize], disp) == 0
            {
                i.types[this_operand as usize] = (*i.base_reg).reg_type;
                return 1 as libc::c_int;
            }
            if i386_index_check(operand_string) == 0 as libc::c_int {
                return 0 as libc::c_int;
            }
            i.flags[this_operand as usize] |= 2 as libc::c_int as libc::c_uint;
            if i.mem_operands == 0 as libc::c_int as libc::c_uint {
                i.memop1_string = xstrdup(operand_string);
            }
            i.mem_operands = (i.mem_operands).wrapping_add(1);
            i.mem_operands;
        }
        _ => {}
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn i386_intel_operand(
    mut operand_string: *mut libc::c_char,
    mut got_a_float: libc::c_int,
) -> libc::c_int {
    let mut saved_input_line_pointer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut buf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut exp_seg: segT = 0 as *mut asection;
    let mut exp: expressionS = expressionS {
        X_add_symbol: 0 as *mut symbolS,
        X_op_symbol: 0 as *mut symbolS,
        X_add_number: 0,
        X_op_X_unsigned_X_extrabit: [0; 2],
        X_md: 0,
    };
    let mut expP: *mut expressionS = 0 as *mut expressionS;
    let mut suffix: libc::c_char = 0 as libc::c_int as libc::c_char;
    let mut ret: libc::c_int = 0;
    if RC_SAE_immediate(operand_string) != 0 {
        return 1 as libc::c_int;
    }
    intel_state.op_modifier = O_absent;
    intel_state.is_mem = 0 as libc::c_int;
    intel_state.is_indirect = 0 as libc::c_int;
    intel_state.has_offset = 0 as libc::c_int;
    intel_state.base = 0 as *const reg_entry;
    intel_state.index = 0 as *const reg_entry;
    intel_state.seg = 0 as *mut symbolS;
    operand_type_set(&mut intel_state.reloc_types, !(0 as libc::c_int) as libc::c_uint);
    if intel_state.in_offset == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            591 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    if intel_state.in_bracket == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            592 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    if intel_state.in_scale == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            593 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    saved_input_line_pointer = input_line_pointer;
    buf = xstrdup(operand_string);
    input_line_pointer = buf;
    intel_syntax = -(1 as libc::c_int);
    memset(
        &mut exp as *mut expressionS as *mut libc::c_void,
        0 as libc::c_int,
        ::core::mem::size_of::<expressionS>() as libc::c_ulong,
    );
    exp_seg = expr(0 as libc::c_int, &mut exp, expr_normal);
    ret = i386_intel_simplify(&mut exp);
    intel_syntax = 1 as libc::c_int;
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *input_line_pointer as libc::c_int == '{' as i32 {
        let mut end: *mut libc::c_char = check_VecOperations(input_line_pointer);
        if !end.is_null() {
            input_line_pointer = end;
        } else {
            ret = 0 as libc::c_int;
        }
    }
    if *is_end_of_line.as_mut_ptr().offset(*input_line_pointer as libc::c_uchar as isize)
        == 0
    {
        if ret != 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"junk `%s' after expression\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                input_line_pointer,
            );
        }
        ret = 0 as libc::c_int;
    } else if exp.X_op() as libc::c_int == O_illegal as libc::c_int
        || exp.X_op() as libc::c_int == O_absent as libc::c_int
    {
        if ret != 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid expression\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        ret = 0 as libc::c_int;
    } else if intel_state.has_offset == 0 && input_line_pointer > buf
        && *input_line_pointer.offset(-(1 as libc::c_int as isize)) as libc::c_int
            == ']' as i32
    {
        intel_state.is_mem |= 1 as libc::c_int;
        intel_state.is_indirect = 1 as libc::c_int;
    }
    input_line_pointer = saved_input_line_pointer;
    free(buf as *mut libc::c_void);
    if intel_state.in_offset == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            639 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    if intel_state.in_bracket == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            640 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    if intel_state.in_scale == 0 {} else {
        as_abort(
            b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
            641 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 36],
                &[libc::c_char; 36],
            >(b"int i386_intel_operand(char *, int)\0"))
                .as_ptr(),
        );
    };
    if ret == 0 {
        return 0 as libc::c_int;
    }
    if intel_state.op_modifier as libc::c_uint != O_absent as libc::c_int as libc::c_uint
        && (((*(*current_templates).start).opcode_modifier).opcodespace() as libc::c_int
            != 0 as libc::c_int
            || (*(*current_templates).start).base_opcode() as libc::c_int
                != 0x8d as libc::c_int)
    {
        (i.types[this_operand as usize].bitfield)
            .set_unspecified(0 as libc::c_int as libc::c_uint);
        let mut current_block_91: u64;
        match intel_state.op_modifier as libc::c_uint {
            57 => {
                (i.types[this_operand as usize].bitfield)
                    .set_byte(1 as libc::c_int as libc::c_uint);
                suffix = 'b' as i32 as libc::c_char;
                current_block_91 = 10778260831612459202;
            }
            56 => {
                (i.types[this_operand as usize].bitfield)
                    .set_word(1 as libc::c_int as libc::c_uint);
                if got_a_float == 2 as libc::c_int {
                    suffix = 's' as i32 as libc::c_char;
                } else {
                    suffix = 'w' as i32 as libc::c_char;
                }
                current_block_91 = 10778260831612459202;
            }
            55 => {
                (i.types[this_operand as usize].bitfield)
                    .set_dword(1 as libc::c_int as libc::c_uint);
                if *((*(*current_templates).start).name)
                    .offset(0 as libc::c_int as isize) as libc::c_int == 'l' as i32
                    && *((*(*current_templates).start).name)
                        .offset(2 as libc::c_int as isize) as libc::c_int == 's' as i32
                    && *((*(*current_templates).start).name)
                        .offset(3 as libc::c_int as isize) as libc::c_int
                        == 0 as libc::c_int
                    || ((*(*current_templates).start).opcode_modifier).opcodespace()
                        as libc::c_int == 0 as libc::c_int
                        && (*(*current_templates).start).base_opcode() as libc::c_int
                            == 0x62 as libc::c_int
                {
                    suffix = 'w' as i32 as libc::c_char;
                } else if flag_code as libc::c_uint
                    != CODE_32BIT as libc::c_int as libc::c_uint
                    && (((*(*current_templates).start).opcode_modifier).jump()
                        as libc::c_int == 1 as libc::c_int
                        || ((*(*current_templates).start).opcode_modifier).jump()
                            as libc::c_int == 2 as libc::c_int)
                {
                    suffix = (if flag_code as libc::c_uint
                        == CODE_16BIT as libc::c_int as libc::c_uint
                    {
                        '\u{1}' as i32
                    } else {
                        'w' as i32
                    }) as libc::c_char;
                } else if got_a_float == 1 as libc::c_int {
                    suffix = 's' as i32 as libc::c_char;
                } else {
                    suffix = 'l' as i32 as libc::c_char;
                }
                current_block_91 = 10778260831612459202;
            }
            53 => {
                (i.types[this_operand as usize].bitfield)
                    .set_fword(1 as libc::c_int as libc::c_uint);
                if *((*(*current_templates).start).name)
                    .offset(0 as libc::c_int as isize) as libc::c_int == 'l' as i32
                    && *((*(*current_templates).start).name)
                        .offset(2 as libc::c_int as isize) as libc::c_int == 's' as i32
                    && *((*(*current_templates).start).name)
                        .offset(3 as libc::c_int as isize) as libc::c_int
                        == 0 as libc::c_int
                {
                    suffix = 'l' as i32 as libc::c_char;
                } else if got_a_float == 0 {
                    if flag_code as libc::c_uint
                        == CODE_16BIT as libc::c_int as libc::c_uint
                    {
                        add_prefix(0x66 as libc::c_int as libc::c_uint);
                    }
                    suffix = '\u{1}' as i32 as libc::c_char;
                }
                current_block_91 = 10778260831612459202;
            }
            54 => {
                (i.types[this_operand as usize].bitfield)
                    .set_qword(1 as libc::c_int as libc::c_uint);
                if ((*(*current_templates).start).opcode_modifier).opcodespace()
                    as libc::c_int == 0 as libc::c_int
                    && (*(*current_templates).start).base_opcode() as libc::c_int
                        == 0x62 as libc::c_int || got_a_float == 1 as libc::c_int
                {
                    suffix = 'l' as i32 as libc::c_char;
                } else {
                    suffix = 'q' as i32 as libc::c_char;
                }
                current_block_91 = 10778260831612459202;
            }
            52 => {
                (i.types[this_operand as usize].bitfield)
                    .set_tbyte(1 as libc::c_int as libc::c_uint);
                if got_a_float == 1 as libc::c_int {
                    suffix = '\u{1}' as i32 as libc::c_char;
                } else if (((*(*current_templates).start)
                    .operand_types[0 as libc::c_int as usize]
                    .bitfield)
                    .fword() as libc::c_int != 0
                    || ((*(*current_templates).start)
                        .operand_types[0 as libc::c_int as usize]
                        .bitfield)
                        .tbyte() as libc::c_int != 0
                    || ((*(*current_templates).start).opcode_modifier).jump()
                        as libc::c_int == 2 as libc::c_int
                    || ((*(*current_templates).start).opcode_modifier).jump()
                        as libc::c_int == 1 as libc::c_int)
                    && flag_code as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                {
                    suffix = 'q' as i32 as libc::c_char;
                } else {
                    (i.types[this_operand as usize].bitfield)
                        .set_byte(1 as libc::c_int as libc::c_uint);
                }
                current_block_91 = 10778260831612459202;
            }
            51 => {
                (i.types[this_operand as usize].bitfield)
                    .set_xmmword(1 as libc::c_int as libc::c_uint);
                current_block_91 = 10778260831612459202;
            }
            50 => {
                (i.types[this_operand as usize].bitfield)
                    .set_ymmword(1 as libc::c_int as libc::c_uint);
                current_block_91 = 10778260831612459202;
            }
            49 => {
                (i.types[this_operand as usize].bitfield)
                    .set_zmmword(1 as libc::c_int as libc::c_uint);
                current_block_91 = 10778260831612459202;
            }
            58 => {
                suffix = '\u{1}' as i32 as libc::c_char;
                current_block_91 = 18169827623847735938;
            }
            59 => {
                current_block_91 = 18169827623847735938;
            }
            _ => {
                as_fatal(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"Case value %ld unexpected at line %d of file \"%s\"\n\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    intel_state.op_modifier as libc::c_long,
                    752 as libc::c_int,
                    b"./config/tc-i386-intel.c\0" as *const u8 as *const libc::c_char,
                );
            }
        }
        match current_block_91 {
            18169827623847735938 => {
                if ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
                    != 1 as libc::c_int
                    && ((*(*current_templates).start).opcode_modifier).jump()
                        as libc::c_int != 2 as libc::c_int
                {
                    (i.types[this_operand as usize].bitfield)
                        .set_byte(1 as libc::c_int as libc::c_uint);
                    (i.types[this_operand as usize].bitfield)
                        .set_tbyte(1 as libc::c_int as libc::c_uint);
                    suffix = i.suffix;
                }
            }
            _ => {}
        }
        if i.suffix == 0 {
            i.suffix = suffix;
        } else if i.suffix as libc::c_int != suffix as libc::c_int {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"conflicting operand size modifiers\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
    }
    if ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
        == 1 as libc::c_int
        || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            == 2 as libc::c_int
        || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            == 4 as libc::c_int
    {
        let mut jumpabsolute: bool = 0 as libc::c_int != 0;
        if !(i.op[this_operand as usize].regs).is_null() || !(intel_state.base).is_null()
            || !(intel_state.index).is_null() || intel_state.is_mem > 1 as libc::c_int
        {
            jumpabsolute = 1 as libc::c_int != 0;
        } else {
            match intel_state.op_modifier as libc::c_uint {
                59 => {
                    if !(intel_state.seg).is_null() {
                        jumpabsolute = 1 as libc::c_int != 0;
                    } else {
                        intel_state.is_mem = 1 as libc::c_int;
                    }
                }
                58 | 1 => {
                    if (intel_state.seg).is_null() {
                        intel_state.is_mem = 1 as libc::c_int;
                        if intel_state.op_modifier as libc::c_uint
                            == O_absent as libc::c_int as libc::c_uint
                        {
                            if intel_state.is_indirect == 1 as libc::c_int {
                                jumpabsolute = 1 as libc::c_int != 0;
                            }
                        } else {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"cannot infer the segment part of the operand\0"
                                        as *const u8 as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                            );
                            return 0 as libc::c_int;
                        }
                    } else if S_GET_SEGMENT(intel_state.seg) == reg_section {
                        jumpabsolute = 1 as libc::c_int != 0;
                    } else {
                        let mut types: i386_operand_type = i386_operand_type {
                            bitfield: C2RustUnnamed_33 {
                                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                            },
                        };
                        if i.imm_operands >= 2 as libc::c_int as libc::c_uint {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"at most %d immediate operands are allowed\0" as *const u8
                                        as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                2 as libc::c_int,
                            );
                            return 0 as libc::c_int;
                        }
                        let fresh8 = i.imm_operands;
                        i.imm_operands = (i.imm_operands).wrapping_add(1);
                        expP = &mut *im_expressions.as_mut_ptr().offset(fresh8 as isize)
                            as *mut expressionS;
                        memset(
                            expP as *mut libc::c_void,
                            0 as libc::c_int,
                            ::core::mem::size_of::<expressionS>() as libc::c_ulong,
                        );
                        (*expP).set_X_op(O_symbol);
                        (*expP).X_add_symbol = intel_state.seg;
                        i.op[this_operand as usize].imms = expP;
                        resolve_expression(expP);
                        operand_type_set(
                            &mut types,
                            !(0 as libc::c_int) as libc::c_uint,
                        );
                        if i386_finalize_immediate(
                            S_GET_SEGMENT(intel_state.seg),
                            expP,
                            types,
                            operand_string,
                        ) == 0
                        {
                            return 0 as libc::c_int;
                        }
                        if i.operands < 5 as libc::c_int as libc::c_uint {
                            let fresh9 = i.operands;
                            i.operands = (i.operands).wrapping_add(1);
                            this_operand = fresh9 as libc::c_int;
                            (i.types[this_operand as usize].bitfield)
                                .set_unspecified(1 as libc::c_int as libc::c_uint);
                        }
                        if suffix as libc::c_int == '\u{1}' as i32 {
                            i.suffix = 0 as libc::c_int as libc::c_char;
                        }
                        intel_state.seg = 0 as *mut symbolS;
                        intel_state.is_mem = 0 as libc::c_int;
                    }
                }
                _ => {
                    jumpabsolute = 1 as libc::c_int != 0;
                }
            }
        }
        if jumpabsolute {
            i.jumpabsolute = 1 as libc::c_int != 0;
            intel_state.is_mem |= 1 as libc::c_int;
        }
    } else if !(intel_state.seg).is_null() {
        intel_state.is_mem |= 1 as libc::c_int;
    }
    if !(i.op[this_operand as usize].regs).is_null() {
        let mut temp: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        if !(intel_state.base).is_null() || !(intel_state.index).is_null()
            || !(intel_state.seg).is_null()
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid operand\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
        temp = (*i.op[this_operand as usize].regs).reg_type;
        (temp.bitfield).set_baseindex(0 as libc::c_int as libc::c_uint);
        i
            .types[this_operand
            as usize] = operand_type_or(i.types[this_operand as usize], temp);
        (i.types[this_operand as usize].bitfield)
            .set_unspecified(0 as libc::c_int as libc::c_uint);
        i.reg_operands = (i.reg_operands).wrapping_add(1);
        i.reg_operands;
    } else if !(intel_state.base).is_null() || !(intel_state.index).is_null()
        || !(intel_state.seg).is_null() || intel_state.is_mem != 0
    {
        if i.mem_operands == 1 as libc::c_int as libc::c_uint
            && maybe_adjust_templates() == 0
        {
            return 0 as libc::c_int;
        }
        if i.mem_operands as libc::c_int
            >= 2 as libc::c_int
                - (((*(*current_templates).start).opcode_modifier).isstring() == 0)
                    as libc::c_int
        {
            if (((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
                == 4 as libc::c_int
                || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
                    == 2 as libc::c_int
                || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
                    == 1 as libc::c_int) && this_operand == 1 as libc::c_int
                && (intel_state.seg).is_null()
                && i.mem_operands == 1 as libc::c_int as libc::c_uint
                && i.disp_operands == 1 as libc::c_int as libc::c_uint
                && intel_state.op_modifier as libc::c_uint
                    == O_absent as libc::c_int as libc::c_uint
            {
                this_operand = 0 as libc::c_int;
                if i386_finalize_immediate(
                    exp_seg,
                    i.op[0 as libc::c_int as usize].imms,
                    intel_state.reloc_types,
                    0 as *const libc::c_char,
                ) != 0
                {
                    this_operand = 1 as libc::c_int;
                    expP = &mut *im_expressions
                        .as_mut_ptr()
                        .offset(0 as libc::c_int as isize) as *mut expressionS;
                    i.op[this_operand as usize].imms = expP;
                    *expP = exp;
                    if i386_finalize_immediate(
                        exp_seg,
                        expP,
                        intel_state.reloc_types,
                        0 as *const libc::c_char,
                    ) != 0
                    {
                        i.mem_operands = 0 as libc::c_int as libc::c_uint;
                        i.disp_operands = 0 as libc::c_int as libc::c_uint;
                        i.imm_operands = 2 as libc::c_int as libc::c_uint;
                        i.flags[0 as libc::c_int as usize]
                            &= !(2 as libc::c_int) as libc::c_uint;
                        (i.types[0 as libc::c_int as usize].bitfield)
                            .set_disp16(0 as libc::c_int as libc::c_uint);
                        (i.types[0 as libc::c_int as usize].bitfield)
                            .set_disp32(0 as libc::c_int as libc::c_uint);
                        (i.types[0 as libc::c_int as usize].bitfield)
                            .set_disp32s(0 as libc::c_int as libc::c_uint);
                        return 1 as libc::c_int;
                    }
                }
            }
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"too many memory references for `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                (*(*current_templates).start).name,
            );
            return 0 as libc::c_int;
        }
        if !(intel_state.base).is_null() && !(intel_state.index).is_null()
            && ((*intel_state.base).reg_type.bitfield).word() as libc::c_int != 0
            && ((*intel_state.index).reg_type.bitfield).word() as libc::c_int != 0
            && (*intel_state.base).reg_num as libc::c_int >= 6 as libc::c_int
            && ((*intel_state.index).reg_num as libc::c_int) < 6 as libc::c_int
        {
            i.base_reg = intel_state.index;
            i.index_reg = intel_state.base;
        } else {
            i.base_reg = intel_state.base;
            i.index_reg = intel_state.index;
        }
        if !(i.base_reg).is_null() || !(i.index_reg).is_null() {
            (i.types[this_operand as usize].bitfield)
                .set_baseindex(1 as libc::c_int as libc::c_uint);
        }
        expP = &mut *disp_expressions.as_mut_ptr().offset(i.disp_operands as isize)
            as *mut expressionS;
        memcpy(
            expP as *mut libc::c_void,
            &mut exp as *mut expressionS as *const libc::c_void,
            ::core::mem::size_of::<expressionS>() as libc::c_ulong,
        );
        resolve_expression(expP);
        if (*expP).X_op() as libc::c_int != O_constant as libc::c_int
            || (*expP).X_add_number != 0
            || (i.types[this_operand as usize].bitfield).baseindex() == 0
        {
            i.op[this_operand as usize].disps = expP;
            i.disp_operands = (i.disp_operands).wrapping_add(1);
            i.disp_operands;
            i386_addressing_mode();
            if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
                if i.prefix[2 as libc::c_int as usize] == 0 {
                    (i.types[this_operand as usize].bitfield)
                        .set_disp64(1 as libc::c_int as libc::c_uint);
                    (i.types[this_operand as usize].bitfield)
                        .set_disp32s(1 as libc::c_int as libc::c_uint);
                } else {
                    (i.types[this_operand as usize].bitfield)
                        .set_disp32(1 as libc::c_int as libc::c_uint);
                }
            } else if (i.prefix[2 as libc::c_int as usize] == 0) as libc::c_int
                ^ (flag_code as libc::c_uint
                    == CODE_16BIT as libc::c_int as libc::c_uint) as libc::c_int != 0
            {
                (i.types[this_operand as usize].bitfield)
                    .set_disp32(1 as libc::c_int as libc::c_uint);
            } else {
                (i.types[this_operand as usize].bitfield)
                    .set_disp16(1 as libc::c_int as libc::c_uint);
            }
            if i386_finalize_displacement(
                exp_seg,
                expP,
                intel_state.reloc_types,
                operand_string,
            ) == 0
            {
                return 0 as libc::c_int;
            }
        }
        if !(intel_state.seg).is_null() {
            ret = check_none as libc::c_int;
            loop {
                expP = symbol_get_value_expression(intel_state.seg);
                if (*expP).X_op() as libc::c_int != O_md2 as libc::c_int
                    || (*symbol_get_value_expression((*expP).X_op_symbol)).X_op()
                        as libc::c_int != O_register as libc::c_int
                {
                    break;
                }
                intel_state.seg = (*expP).X_add_symbol;
                ret = operand_check as libc::c_int;
            }
            if (*expP).X_op() as libc::c_int != O_register as libc::c_int {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"segment register name expected\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return 0 as libc::c_int;
            }
            if ((*i386_regtab.as_ptr().offset((*expP).X_add_number as isize))
                .reg_type
                .bitfield)
                .class() as libc::c_int != SReg as libc::c_int
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid use of register\0" as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return 0 as libc::c_int;
            }
            match ret {
                2 => {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"redundant segment overrides\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                    return 0 as libc::c_int;
                }
                1 => {
                    as_warn(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"redundant segment overrides\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
                _ => {}
            }
            if (*i386_regtab.as_ptr().offset((*expP).X_add_number as isize)).reg_num
                as libc::c_int == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
            {
                i.seg[i.mem_operands as usize] = 0 as *const reg_entry;
            } else {
                i
                    .seg[i.mem_operands
                    as usize] = &*i386_regtab
                    .as_ptr()
                    .offset((*expP).X_add_number as isize) as *const reg_entry;
            }
        }
        if i386_index_check(operand_string) == 0 {
            return 0 as libc::c_int;
        }
        i.flags[this_operand as usize] |= 2 as libc::c_int as libc::c_uint;
        if i.mem_operands == 0 as libc::c_int as libc::c_uint {
            i.memop1_string = xstrdup(operand_string);
        }
        i.mem_operands = (i.mem_operands).wrapping_add(1);
        i.mem_operands;
    } else {
        if i.imm_operands >= 2 as libc::c_int as libc::c_uint {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"at most %d immediate operands are allowed\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                2 as libc::c_int,
            );
            return 0 as libc::c_int;
        }
        let fresh10 = i.imm_operands;
        i.imm_operands = (i.imm_operands).wrapping_add(1);
        expP = &mut *im_expressions.as_mut_ptr().offset(fresh10 as isize)
            as *mut expressionS;
        i.op[this_operand as usize].imms = expP;
        *expP = exp;
        return i386_finalize_immediate(
            exp_seg,
            expP,
            intel_state.reloc_types,
            operand_string,
        );
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn i386_intel_simplify(mut e: *mut expressionS) -> libc::c_int {
    let mut the_reg: *const reg_entry = if this_operand >= 0 as libc::c_int {
        i.op[this_operand as usize].regs
    } else {
        0 as *const reg_entry
    };
    let mut base: *const reg_entry = intel_state.base;
    let mut state_index: *const reg_entry = intel_state.index;
    let mut ret: libc::c_int = 0;
    if intel_syntax == 0 {
        return 1 as libc::c_int;
    }
    let mut current_block_91: u64;
    match (*e).X_op() as libc::c_int {
        29 => {
            if !((*e).X_add_symbol).is_null() {
                if i386_intel_simplify_symbol((*e).X_add_symbol) == 0
                    || i386_intel_check(the_reg, intel_state.base, intel_state.index)
                        == 0
                {
                    return 0 as libc::c_int;
                }
            }
            if intel_state.in_offset == 0 {
                intel_state.in_bracket = (intel_state.in_bracket).wrapping_add(1);
                intel_state.in_bracket;
            }
            ret = i386_intel_simplify_symbol((*e).X_op_symbol);
            if intel_state.in_offset == 0 {
                intel_state.in_bracket = (intel_state.in_bracket).wrapping_sub(1);
                intel_state.in_bracket;
            }
            if ret == 0 {
                return 0 as libc::c_int;
            }
            if !((*e).X_add_symbol).is_null() {
                (*e).set_X_op(O_add);
            } else {
                i386_intel_fold(e, (*e).X_op_symbol);
            }
            current_block_91 = 2310077433060450808;
        }
        61 => {
            intel_state.has_offset = 1 as libc::c_int;
            intel_state.in_offset = (intel_state.in_offset).wrapping_add(1);
            intel_state.in_offset;
            ret = i386_intel_simplify_symbol((*e).X_add_symbol);
            intel_state.in_offset = (intel_state.in_offset).wrapping_sub(1);
            intel_state.in_offset;
            if ret == 0 || i386_intel_check(the_reg, base, state_index) == 0 {
                return 0 as libc::c_int;
            }
            i386_intel_fold(e, (*e).X_add_symbol);
            return ret;
        }
        57 | 56 | 55 | 53 | 54 | 52 | 51 | 50 | 49 | 59 | 58 => {
            if intel_state.op_modifier as libc::c_uint
                == O_absent as libc::c_int as libc::c_uint
            {
                intel_state.op_modifier = (*e).X_op();
            }
            current_block_91 = 12119073086124701650;
        }
        60 => {
            current_block_91 = 12119073086124701650;
        }
        31 => {
            if (*symbol_get_value_expression((*e).X_op_symbol)).X_op() as libc::c_int
                == O_register as libc::c_int
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid use of register\0" as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return 0 as libc::c_int;
            }
            if i386_intel_simplify_symbol((*e).X_op_symbol) == 0
                || i386_intel_check(the_reg, intel_state.base, intel_state.index) == 0
            {
                return 0 as libc::c_int;
            }
            if intel_state.in_offset == 0 {
                if (intel_state.seg).is_null() {
                    intel_state.seg = (*e).X_add_symbol;
                } else {
                    let mut exp: expressionS = expressionS {
                        X_add_symbol: 0 as *mut symbolS,
                        X_op_symbol: 0 as *mut symbolS,
                        X_add_number: 0,
                        X_op_X_unsigned_X_extrabit: [0; 2],
                        X_md: 0,
                    };
                    exp.set_X_op(O_md2);
                    exp.X_add_symbol = (*e).X_add_symbol;
                    exp.X_op_symbol = intel_state.seg;
                    intel_state.seg = make_expr_symbol(&mut exp);
                }
            }
            i386_intel_fold(e, (*e).X_op_symbol);
            current_block_91 = 2310077433060450808;
        }
        10 => {
            if this_operand >= 0 as libc::c_int && intel_state.in_bracket != 0 {
                let mut scale: *mut expressionS = 0 as *mut expressionS;
                let mut has_index: libc::c_int = (intel_state.index
                    != 0 as *mut libc::c_void as *const reg_entry) as libc::c_int;
                let fresh11 = intel_state.in_scale;
                intel_state.in_scale = (intel_state.in_scale).wrapping_add(1);
                if fresh11 == 0 {
                    intel_state.scale_factor = 1 as libc::c_int as offsetT;
                }
                ret = i386_intel_simplify_symbol((*e).X_add_symbol);
                if ret != 0 && has_index == 0 && !(intel_state.index).is_null() {
                    scale = symbol_get_value_expression((*e).X_op_symbol);
                }
                if ret != 0 {
                    ret = i386_intel_simplify_symbol((*e).X_op_symbol);
                }
                if ret != 0 && scale.is_null() && has_index == 0
                    && !(intel_state.index).is_null()
                {
                    scale = symbol_get_value_expression((*e).X_add_symbol);
                }
                if ret != 0 && !scale.is_null() {
                    resolve_expression(scale);
                    if (*scale).X_op() as libc::c_int != O_constant as libc::c_int
                        || ((*intel_state.index).reg_type.bitfield).word() as libc::c_int
                            != 0
                    {
                        (*scale).X_add_number = 0 as libc::c_int as offsetT;
                    }
                    intel_state.scale_factor *= (*scale).X_add_number;
                }
                intel_state.in_scale = (intel_state.in_scale).wrapping_sub(1);
                intel_state.in_scale;
                if ret == 0 {
                    return 0 as libc::c_int;
                }
                if intel_state.in_scale == 0 {
                    match intel_state.scale_factor {
                        1 => {
                            i.log2_scale_factor = 0 as libc::c_int as libc::c_uint;
                        }
                        2 => {
                            i.log2_scale_factor = 1 as libc::c_int as libc::c_uint;
                        }
                        4 => {
                            i.log2_scale_factor = 2 as libc::c_int as libc::c_uint;
                        }
                        8 => {
                            i.log2_scale_factor = 3 as libc::c_int as libc::c_uint;
                        }
                        _ => {
                            intel_state
                                .index = reg_eax.offset(4 as libc::c_int as isize);
                        }
                    }
                }
                current_block_91 = 2310077433060450808;
            } else {
                current_block_91 = 9957996918500758398;
            }
        }
        5 => {
            ret = i386_intel_simplify_register(e);
            if ret == 2 as libc::c_int {
                if (*e).X_add_number
                    < -(1 as libc::c_int) as libc::c_ushort as libc::c_long
                {} else {
                    as_abort(
                        b"./config/tc-i386-intel.c\0" as *const u8
                            as *const libc::c_char,
                        515 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 39],
                            &[libc::c_char; 39],
                        >(b"int i386_intel_simplify(expressionS *)\0"))
                            .as_ptr(),
                    );
                };
                (*e)
                    .X_md = ((*e).X_add_number as libc::c_ushort as libc::c_int
                    + 1 as libc::c_int) as libc::c_ushort;
                (*e).set_X_op(O_constant);
                (*e).X_add_number = 0 as libc::c_int as offsetT;
            }
            return ret;
        }
        2 => {
            if (*e).X_md != 0 {
                return i386_intel_simplify_register(e);
            }
            current_block_91 = 9957996918500758398;
        }
        _ => {
            current_block_91 = 9957996918500758398;
        }
    }
    match current_block_91 {
        9957996918500758398 => {
            if !((*e).X_add_symbol).is_null()
                && i386_intel_simplify_symbol((*e).X_add_symbol) == 0
            {
                return 0 as libc::c_int;
            }
            if (*e).X_op() as libc::c_int == O_add as libc::c_int
                || (*e).X_op() as libc::c_int == O_subtract as libc::c_int
            {
                base = intel_state.base;
                state_index = intel_state.index;
            }
            if i386_intel_check(the_reg, base, state_index) == 0
                || !((*e).X_op_symbol).is_null()
                    && i386_intel_simplify_symbol((*e).X_op_symbol) == 0
                || i386_intel_check(
                    the_reg,
                    (if (*e).X_op() as libc::c_int != O_add as libc::c_int {
                        base
                    } else {
                        intel_state.base
                    }),
                    (if (*e).X_op() as libc::c_int != O_add as libc::c_int {
                        state_index
                    } else {
                        intel_state.index
                    }),
                ) == 0
            {
                return 0 as libc::c_int;
            }
        }
        12119073086124701650 => {
            if (*symbol_get_value_expression((*e).X_add_symbol)).X_op() as libc::c_int
                == O_register as libc::c_int
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid use of register\0" as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return 0 as libc::c_int;
            }
            if i386_intel_simplify_symbol((*e).X_add_symbol) == 0 {
                return 0 as libc::c_int;
            }
            i386_intel_fold(e, (*e).X_add_symbol);
        }
        _ => {}
    }
    if this_operand >= 0 as libc::c_int
        && (*e).X_op() as libc::c_int == O_symbol as libc::c_int
        && intel_state.in_offset == 0
    {
        let mut seg: segT = S_GET_SEGMENT((*e).X_add_symbol);
        if seg
            != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection && seg != reg_section && seg != expr_section
        {
            intel_state.is_mem
                |= 2 as libc::c_int - (intel_state.in_bracket == 0) as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn i386_intel_parse_name(
    mut name: *const libc::c_char,
    mut e: *mut expressionS,
) -> libc::c_int {
    let mut j: libc::c_uint = 0;
    if strcmp(name, b"$\0" as *const u8 as *const libc::c_char) == 0 {
        current_location(e);
        return 1 as libc::c_int;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while !(i386_types[j as usize].name).is_null() {
        if strcasecmp(i386_types[j as usize].name, name) == 0 as libc::c_int {
            (*e).set_X_op(O_constant);
            (*e).X_add_number = i386_types[j as usize].sz[flag_code as usize] as offsetT;
            (*e).X_add_symbol = 0 as *mut symbolS;
            (*e).X_op_symbol = 0 as *mut symbolS;
            return 1 as libc::c_int;
        }
        j = j.wrapping_add(1);
        j;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn parse_register(
    mut reg_string: *mut libc::c_char,
    mut end_op: *mut *mut libc::c_char,
) -> *const reg_entry {
    let mut r: *const reg_entry = 0 as *const reg_entry;
    if *reg_string as libc::c_int == '%' as i32 || allow_naked_reg != 0 {
        r = parse_real_register(reg_string, end_op);
    } else {
        r = 0 as *const reg_entry;
    }
    if r.is_null() {
        let mut save: *mut libc::c_char = input_line_pointer;
        let mut c: libc::c_char = 0;
        let mut symbolP: *mut symbolS = 0 as *mut symbolS;
        input_line_pointer = reg_string;
        c = get_symbol_name(&mut reg_string);
        symbolP = symbol_find(reg_string);
        if !symbolP.is_null() && S_GET_SEGMENT(symbolP) == reg_section {
            let mut e: *const expressionS = symbol_get_value_expression(symbolP);
            r = i386_regtab.as_ptr().offset((*e).X_add_number as isize);
            if !check_register(r) {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"register '%s%s' cannot be used here\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    register_prefix,
                    (*r).reg_name,
                );
                r = &bad_reg;
            }
            *end_op = input_line_pointer;
        }
        *input_line_pointer = c;
        input_line_pointer = save;
    }
    return r;
}
unsafe extern "C" fn parse_insn(
    mut line: *mut libc::c_char,
    mut mnemonic: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut current_block: u64;
    let mut l: *mut libc::c_char = line;
    let mut token_start: *mut libc::c_char = l;
    let mut mnem_p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut supported: libc::c_int = 0;
    let mut t: *const insn_template = 0 as *const insn_template;
    let mut dot_p: *mut libc::c_char = 0 as *mut libc::c_char;
    loop {
        mnem_p = mnemonic;
        loop {
            *mnem_p = mnemonic_chars[*l as libc::c_uchar as usize];
            if !(*mnem_p as libc::c_int != 0 as libc::c_int) {
                break;
            }
            if *mnem_p as libc::c_int == '.' as i32 {
                dot_p = mnem_p;
            }
            mnem_p = mnem_p.offset(1);
            mnem_p;
            if mnem_p >= mnemonic.offset(20 as libc::c_int as isize) {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"no such instruction: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    token_start,
                );
                return 0 as *mut libc::c_char;
            }
            l = l.offset(1);
            l;
        }
        if !(*l as libc::c_int == ' ' as i32) && *l as libc::c_int != '\0' as i32
            && (intel_syntax != 0
                || *l as libc::c_int != '/' as i32 && *l as libc::c_int != ',' as i32)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid character %s in mnemonic\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                output_invalid(*l as libc::c_int),
            );
            return 0 as *mut libc::c_char;
        }
        if token_start == l {
            if intel_syntax == 0 && *l as libc::c_int == '/' as i32 {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"expecting prefix; got nothing\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            } else {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"expecting mnemonic; got nothing\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            return 0 as *mut libc::c_char;
        }
        current_templates = str_hash_find(op_hash, mnemonic) as *const templates;
        if !(*l as libc::c_int != '\0' as i32
            && (!(*l as libc::c_int == ' ' as i32)
                || *l.offset(1 as libc::c_int as isize) as libc::c_int != '\0' as i32)
            && !current_templates.is_null()
            && ((*(*current_templates).start).opcode_modifier).isprefix() as libc::c_int
                != 0)
        {
            break;
        }
        if cpu_flags_check_cpu64((*(*current_templates).start).cpu_flags) == 0 {
            as_bad(
                if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
                {
                    dcgettext(
                        0 as *const libc::c_char,
                        b"`%s' is only supported in 64-bit mode\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    )
                } else {
                    dcgettext(
                        0 as *const libc::c_char,
                        b"`%s' is not supported in 64-bit mode\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    )
                },
                (*(*current_templates).start).name,
            );
            return 0 as *mut libc::c_char;
        }
        if (((*(*current_templates).start).opcode_modifier).size() as libc::c_int
            == 1 as libc::c_int
            || ((*(*current_templates).start).opcode_modifier).size() as libc::c_int
                == 2 as libc::c_int)
            && flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
            && (((*(*current_templates).start).opcode_modifier).size() as libc::c_int
                == 2 as libc::c_int) as libc::c_int
                ^ (flag_code as libc::c_uint
                    == CODE_16BIT as libc::c_int as libc::c_uint) as libc::c_int != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"redundant %s prefix\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                (*(*current_templates).start).name,
            );
            return 0 as *mut libc::c_char;
        }
        if (*(*current_templates).start).base_opcode() as libc::c_int == 0 as libc::c_int
        {
            match (*(*current_templates).start).extension_opcode() {
                0 => {
                    i.disp_encoding = disp_encoding_8bit;
                }
                1 => {
                    i.disp_encoding = disp_encoding_16bit;
                }
                2 => {
                    i.disp_encoding = disp_encoding_32bit;
                }
                3 => {
                    i.dir_encoding = dir_encoding_load;
                }
                4 => {
                    i.dir_encoding = dir_encoding_store;
                }
                5 => {
                    i.vec_encoding = vex_encoding_vex;
                }
                6 => {
                    i.vec_encoding = vex_encoding_vex3;
                }
                7 => {
                    i.vec_encoding = vex_encoding_evex;
                }
                8 => {
                    i.rex_encoding = 1 as libc::c_int != 0;
                }
                9 => {
                    i.no_optimize = 1 as libc::c_int != 0;
                }
                _ => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        5347 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 33],
                            &[libc::c_char; 33],
                        >(b"char *parse_insn(char *, char *)\0"))
                            .as_ptr(),
                    );
                }
            }
        } else {
            match add_prefix((*(*current_templates).start).base_opcode()) as libc::c_uint
            {
                0 => return 0 as *mut libc::c_char,
                3 => {
                    if ((*(*current_templates).start).cpu_flags.bitfield).cpuibt() != 0 {
                        i.notrack_prefix = (*(*current_templates).start).name;
                    }
                }
                2 => {
                    if ((*(*current_templates).start).cpu_flags.bitfield).cpuhle() != 0 {
                        i.hle_prefix = (*(*current_templates).start).name;
                    } else if ((*(*current_templates).start).cpu_flags.bitfield).cpumpx()
                        != 0
                    {
                        i.bnd_prefix = (*(*current_templates).start).name;
                    } else {
                        i.rep_prefix = (*(*current_templates).start).name;
                    }
                }
                _ => {}
            }
        }
        l = l.offset(1);
        token_start = l;
    }
    if current_templates.is_null() {
        if mnem_p.offset(-(2 as libc::c_int as isize)) == dot_p
            && *dot_p.offset(1 as libc::c_int as isize) as libc::c_int == 's' as i32
        {
            i.dir_encoding = dir_encoding_swap;
            current_block = 9925100494328262799;
        } else if mnem_p.offset(-(3 as libc::c_int as isize)) == dot_p
            && *dot_p.offset(1 as libc::c_int as isize) as libc::c_int == 'd' as i32
            && *dot_p.offset(2 as libc::c_int as isize) as libc::c_int == '8' as i32
        {
            i.disp_encoding = disp_encoding_8bit;
            current_block = 9925100494328262799;
        } else if mnem_p.offset(-(4 as libc::c_int as isize)) == dot_p
            && *dot_p.offset(1 as libc::c_int as isize) as libc::c_int == 'd' as i32
            && *dot_p.offset(2 as libc::c_int as isize) as libc::c_int == '3' as i32
            && *dot_p.offset(3 as libc::c_int as isize) as libc::c_int == '2' as i32
        {
            i.disp_encoding = disp_encoding_32bit;
            current_block = 9925100494328262799;
        } else {
            current_block = 13146470232337498846;
        }
        match current_block {
            13146470232337498846 => {}
            _ => {
                mnem_p = dot_p;
                *dot_p = '\0' as i32 as libc::c_char;
                current_templates = str_hash_find(op_hash, mnemonic) as *const templates;
                current_block = 5181772461570869434;
            }
        }
    } else {
        current_block = 5181772461570869434;
    }
    match current_block {
        5181772461570869434 => {
            if current_templates.is_null() {
                current_block = 13146470232337498846;
            } else {
                current_block = 8102658916883067714;
            }
        }
        _ => {}
    }
    match current_block {
        13146470232337498846 => {
            if mnem_p > mnemonic {
                let mut current_block_78: u64;
                match *mnem_p.offset(-(1 as libc::c_int) as isize) as libc::c_int {
                    119 => {
                        if intel_syntax != 0
                            && intel_float_operand(mnemonic) & 2 as libc::c_int != 0
                        {
                            i.suffix = 's' as i32 as libc::c_char;
                            current_block_78 = 2606304779496145856;
                        } else {
                            current_block_78 = 11443453268483285195;
                        }
                    }
                    98 | 113 => {
                        current_block_78 = 11443453268483285195;
                    }
                    115 | 108 => {
                        if intel_syntax == 0 {
                            i.suffix = *mnem_p.offset(-(1 as libc::c_int) as isize);
                            *mnem_p
                                .offset(
                                    -(1 as libc::c_int) as isize,
                                ) = '\0' as i32 as libc::c_char;
                            current_templates = str_hash_find(op_hash, mnemonic)
                                as *const templates;
                        }
                        current_block_78 = 6002151390280567665;
                    }
                    100 => {
                        if intel_syntax != 0 {
                            if intel_float_operand(mnemonic) == 1 as libc::c_int {
                                i.suffix = 's' as i32 as libc::c_char;
                            } else {
                                i.suffix = 'l' as i32 as libc::c_char;
                            }
                            *mnem_p
                                .offset(
                                    -(1 as libc::c_int) as isize,
                                ) = '\0' as i32 as libc::c_char;
                            current_templates = str_hash_find(op_hash, mnemonic)
                                as *const templates;
                        }
                        current_block_78 = 6002151390280567665;
                    }
                    _ => {
                        current_block_78 = 6002151390280567665;
                    }
                }
                match current_block_78 {
                    11443453268483285195 => {
                        i.suffix = *mnem_p.offset(-(1 as libc::c_int) as isize);
                        current_block_78 = 2606304779496145856;
                    }
                    _ => {}
                }
                match current_block_78 {
                    2606304779496145856 => {
                        *mnem_p
                            .offset(
                                -(1 as libc::c_int) as isize,
                            ) = '\0' as i32 as libc::c_char;
                        current_templates = str_hash_find(op_hash, mnemonic)
                            as *const templates;
                    }
                    _ => {}
                }
            }
            if current_templates.is_null() {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"no such instruction: `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    token_start,
                );
                return 0 as *mut libc::c_char;
            }
        }
        _ => {}
    }
    if ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
        == 1 as libc::c_int
        || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            == 3 as libc::c_int
    {
        if *l.offset(0 as libc::c_int as isize) as libc::c_int == ',' as i32
            && *l.offset(1 as libc::c_int as isize) as libc::c_int == 'p' as i32
        {
            if *l.offset(2 as libc::c_int as isize) as libc::c_int == 't' as i32 {
                if add_prefix(0x3e as libc::c_int as libc::c_uint) as u64 == 0 {
                    return 0 as *mut libc::c_char;
                }
                l = l.offset(3 as libc::c_int as isize);
            } else if *l.offset(2 as libc::c_int as isize) as libc::c_int == 'n' as i32 {
                if add_prefix(0x2e as libc::c_int as libc::c_uint) as u64 == 0 {
                    return 0 as *mut libc::c_char;
                }
                l = l.offset(3 as libc::c_int as isize);
            }
        }
    }
    if *l as libc::c_int == ',' as i32 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"invalid character %s in mnemonic\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            output_invalid(*l as libc::c_int),
        );
        return 0 as *mut libc::c_char;
    }
    supported = 0 as libc::c_int;
    t = (*current_templates).start;
    while t < (*current_templates).end {
        supported |= cpu_flags_match(t);
        if supported == 0x1 as libc::c_int | 0x2 as libc::c_int {
            if (cpu_arch_flags.bitfield).cpui386() == 0
                && flag_code as libc::c_uint != CODE_16BIT as libc::c_int as libc::c_uint
            {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"use .code16 to ensure correct addressing mode\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            }
            return l;
        }
        t = t.offset(1);
        t;
    }
    if supported & 0x2 as libc::c_int == 0 {
        as_bad(
            if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s' is not supported in 64-bit mode\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                )
            } else {
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s' is only supported in 64-bit mode\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                )
            },
            (*(*current_templates).start).name,
        );
    } else {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"`%s' is not supported on `%s%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            (*(*current_templates).start).name,
            if !cpu_arch_name.is_null() { cpu_arch_name } else { default_arch },
            if !cpu_sub_arch_name.is_null() {
                cpu_sub_arch_name as *const libc::c_char
            } else {
                b"\0" as *const u8 as *const libc::c_char
            },
        );
    }
    return 0 as *mut libc::c_char;
}
unsafe extern "C" fn parse_operands(
    mut l: *mut libc::c_char,
    mut mnemonic: *const libc::c_char,
) -> *mut libc::c_char {
    let mut token_start: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut expecting_operand: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    while *l as libc::c_int != '\0' as i32 {
        's_288: {
            let mut current_block_61: u64;
            let mut paren_not_balanced: libc::c_uint = 0 as libc::c_int as libc::c_uint;
            let mut in_quotes: bool = 0 as libc::c_int != 0;
            if *l as libc::c_int == ' ' as i32 {
                l = l.offset(1);
                l;
            }
            if operand_chars[*l as libc::c_uchar as usize] == 0
                && *l as libc::c_int != '\0' as i32 && *l as libc::c_int != '"' as i32
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"invalid character %s before operand %d\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    output_invalid(*l as libc::c_int),
                    (i.operands).wrapping_add(1 as libc::c_int as libc::c_uint),
                );
                return 0 as *mut libc::c_char;
            }
            token_start = l;
            while in_quotes as libc::c_int != 0 || paren_not_balanced != 0
                || *l as libc::c_int != ',' as i32
            {
                if *l as libc::c_int == '\0' as i32 {
                    if in_quotes {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"unbalanced double quotes in operand %d.\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            (i.operands).wrapping_add(1 as libc::c_int as libc::c_uint),
                        );
                        return 0 as *mut libc::c_char;
                    }
                    if !(paren_not_balanced != 0) {
                        break;
                    }
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"unbalanced parenthesis in operand %d.\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        (i.operands).wrapping_add(1 as libc::c_int as libc::c_uint),
                    );
                    return 0 as *mut libc::c_char;
                } else {
                    if *l as libc::c_int == '\\' as i32
                        && *l.offset(1 as libc::c_int as isize) as libc::c_int
                            == '"' as i32
                    {
                        l = l.offset(1);
                        l;
                    } else if *l as libc::c_int == '"' as i32 {
                        in_quotes = !in_quotes;
                    } else if !in_quotes
                        && operand_chars[*l as libc::c_uchar as usize] == 0
                        && !(*l as libc::c_int == ' ' as i32)
                    {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"invalid character %s in operand %d\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            output_invalid(*l as libc::c_int),
                            (i.operands).wrapping_add(1 as libc::c_int as libc::c_uint),
                        );
                        return 0 as *mut libc::c_char;
                    }
                    if intel_syntax == 0 && !in_quotes {
                        if *l as libc::c_int == '(' as i32 {
                            paren_not_balanced = paren_not_balanced.wrapping_add(1);
                            paren_not_balanced;
                        }
                        if *l as libc::c_int == ')' as i32 {
                            paren_not_balanced = paren_not_balanced.wrapping_sub(1);
                            paren_not_balanced;
                        }
                    }
                    l = l.offset(1);
                    l;
                }
            }
            if l != token_start {
                let mut operand_ok: libc::c_uint = 0;
                let fresh12 = i.operands;
                i.operands = (i.operands).wrapping_add(1);
                this_operand = fresh12 as libc::c_int;
                if i.operands > 5 as libc::c_int as libc::c_uint {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"spurious operands; (%d operands/instruction max)\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        5 as libc::c_int,
                    );
                    return 0 as *mut libc::c_char;
                }
                (i.types[this_operand as usize].bitfield)
                    .set_unspecified(1 as libc::c_int as libc::c_uint);
                let fresh13 = save_stack_p;
                save_stack_p = save_stack_p.offset(1);
                *fresh13 = *l;
                *l = '\0' as i32 as libc::c_char;
                if i.mem_operands > 1 as libc::c_int as libc::c_uint {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"too many memory references for `%s'\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                        mnemonic,
                    );
                    return 0 as *mut libc::c_char;
                }
                if intel_syntax != 0 {
                    operand_ok = i386_intel_operand(
                        token_start,
                        intel_float_operand(mnemonic),
                    ) as libc::c_uint;
                } else {
                    operand_ok = i386_att_operand(token_start) as libc::c_uint;
                }
                save_stack_p = save_stack_p.offset(-1);
                *l = *save_stack_p;
                if operand_ok == 0 {
                    return 0 as *mut libc::c_char;
                }
                current_block_61 = 2290177392965769716;
            } else if expecting_operand != 0 {
                current_block_61 = 5781903790662633242;
            } else {
                if *l as libc::c_int == ',' as i32 {
                    as_bad(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"expecting operand before ','; got nothing\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                    return 0 as *mut libc::c_char;
                }
                current_block_61 = 2290177392965769716;
            }
            match current_block_61 {
                2290177392965769716 => {
                    if *l as libc::c_int == ',' as i32 {
                        l = l.offset(1);
                        if *l as libc::c_int == '\0' as i32 {
                            current_block_61 = 5781903790662633242;
                        } else {
                            expecting_operand = 1 as libc::c_int as libc::c_uint;
                            current_block_61 = 6072622540298447352;
                        }
                    } else {
                        current_block_61 = 6072622540298447352;
                    }
                    match current_block_61 {
                        5781903790662633242 => {}
                        _ => {
                            break 's_288;
                        }
                    }
                }
                _ => {}
            }
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"expecting operand after ','; got nothing\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as *mut libc::c_char;
        }
    }
    return l;
}
unsafe extern "C" fn swap_operands() {
    match i.operands {
        5 | 4 => {
            swap_2_operands(
                1 as libc::c_int as libc::c_uint,
                (i.operands).wrapping_sub(2 as libc::c_int as libc::c_uint),
            );
        }
        3 | 2 => {}
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                5706 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 25],
                    &[libc::c_char; 25],
                >(b"void swap_operands(void)\0"))
                    .as_ptr(),
            );
        }
    }
    swap_2_operands(
        0 as libc::c_int as libc::c_uint,
        (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint),
    );
    if i.mem_operands == 2 as libc::c_int as libc::c_uint {
        let mut temp_seg: *const reg_entry = 0 as *const reg_entry;
        temp_seg = i.seg[0 as libc::c_int as usize];
        i.seg[0 as libc::c_int as usize] = i.seg[1 as libc::c_int as usize];
        i.seg[1 as libc::c_int as usize] = temp_seg;
    }
}
unsafe extern "C" fn swap_2_operands(mut xchg1: libc::c_uint, mut xchg2: libc::c_uint) {
    let mut temp_op: i386_op = i386_op {
        disps: 0 as *mut expressionS,
    };
    let mut temp_type: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut temp_flags: libc::c_uint = 0;
    let mut temp_reloc: bfd_reloc_code_real = _dummy_first_bfd_reloc_code_real;
    temp_type = i.types[xchg2 as usize];
    i.types[xchg2 as usize] = i.types[xchg1 as usize];
    i.types[xchg1 as usize] = temp_type;
    temp_flags = i.flags[xchg2 as usize];
    i.flags[xchg2 as usize] = i.flags[xchg1 as usize];
    i.flags[xchg1 as usize] = temp_flags;
    temp_op = i.op[xchg2 as usize];
    i.op[xchg2 as usize] = i.op[xchg1 as usize];
    i.op[xchg1 as usize] = temp_op;
    temp_reloc = i.reloc[xchg2 as usize];
    i.reloc[xchg2 as usize] = i.reloc[xchg1 as usize];
    i.reloc[xchg1 as usize] = temp_reloc;
    if !(i.mask.reg).is_null() {
        if i.mask.operand == xchg1 {
            i.mask.operand = xchg2;
        } else if i.mask.operand == xchg2 {
            i.mask.operand = xchg1;
        }
    }
    if i.broadcast.type_0 != 0 {
        if i.broadcast.operand == xchg1 {
            i.broadcast.operand = xchg2;
        } else if i.broadcast.operand == xchg2 {
            i.broadcast.operand = xchg1;
        }
    }
    if i.rounding.type_0 as libc::c_int != rc_none as libc::c_int {
        if i.rounding.operand == xchg1 {
            i.rounding.operand = xchg2;
        } else if i.rounding.operand == xchg2 {
            i.rounding.operand = xchg1;
        }
    }
}
unsafe extern "C" fn i386_addressing_mode() -> flag_code {
    let mut addr_mode: flag_code = CODE_32BIT;
    if i.prefix[2 as libc::c_int as usize] != 0 {
        addr_mode = (if flag_code as libc::c_uint
            == CODE_32BIT as libc::c_int as libc::c_uint
        {
            CODE_16BIT as libc::c_int
        } else {
            CODE_32BIT as libc::c_int
        }) as flag_code;
    } else if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint
        && ((*(*current_templates).start).cpu_flags.bitfield).cpumpx() as libc::c_int
            != 0 && (i.types[this_operand as usize].bitfield).baseindex() == 0
    {
        addr_mode = CODE_32BIT;
        i.prefix[2 as libc::c_int as usize] = 0x67 as libc::c_int as libc::c_uchar;
        i.prefixes = (i.prefixes).wrapping_add(1);
        i.prefixes;
        if (i.types[this_operand as usize].bitfield).disp16() == 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                11050 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 42],
                    &[libc::c_char; 42],
                >(b"enum flag_code i386_addressing_mode(void)\0"))
                    .as_ptr(),
            );
        };
        if (i.types[this_operand as usize].bitfield).disp32() == 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                11051 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 42],
                    &[libc::c_char; 42],
                >(b"enum flag_code i386_addressing_mode(void)\0"))
                    .as_ptr(),
            );
        };
    } else {
        addr_mode = flag_code;
        if i.mem_operands == 0 as libc::c_int as libc::c_uint {
            let mut addr_reg: *const reg_entry = i.base_reg;
            if addr_reg.is_null() {
                addr_reg = i.index_reg;
            }
            if !addr_reg.is_null() {
                if ((*addr_reg).reg_type.bitfield).dword() != 0 {
                    addr_mode = CODE_32BIT;
                } else if flag_code as libc::c_uint
                    != CODE_64BIT as libc::c_int as libc::c_uint
                    && ((*addr_reg).reg_type.bitfield).word() as libc::c_int != 0
                {
                    addr_mode = CODE_16BIT;
                }
                if addr_mode as libc::c_uint != flag_code as libc::c_uint {
                    i
                        .prefix[2 as libc::c_int
                        as usize] = 0x67 as libc::c_int as libc::c_uchar;
                    i
                        .prefixes = (i.prefixes)
                        .wrapping_add(1 as libc::c_int as libc::c_uint);
                    if flag_code as libc::c_uint
                        != CODE_64BIT as libc::c_int as libc::c_uint
                        && ((i.types[this_operand as usize].bitfield).disp16()
                            as libc::c_int != 0
                            || (i.types[this_operand as usize].bitfield).disp32()
                                as libc::c_int != 0)
                    {
                        i
                            .types[this_operand
                            as usize] = operand_type_xor(
                            i.types[this_operand as usize],
                            disp16_32,
                        );
                    }
                }
            }
        }
    }
    return addr_mode;
}
unsafe extern "C" fn optimize_imm() {
    let mut guess_suffix: libc::c_char = 0 as libc::c_int as libc::c_char;
    let mut op: libc::c_int = 0;
    if i.suffix != 0 {
        guess_suffix = i.suffix;
    } else if i.reg_operands != 0 {
        op = i.operands as libc::c_int;
        loop {
            op -= 1;
            if !(op >= 0 as libc::c_int) {
                break;
            }
            if (i.types[op as usize].bitfield).class() as libc::c_int
                != Reg as libc::c_int
            {
                continue;
            }
            if (i.types[op as usize].bitfield).byte() != 0 {
                guess_suffix = 'b' as i32 as libc::c_char;
                break;
            } else if (i.types[op as usize].bitfield).word() != 0 {
                guess_suffix = 'w' as i32 as libc::c_char;
                break;
            } else if (i.types[op as usize].bitfield).dword() != 0 {
                guess_suffix = 'l' as i32 as libc::c_char;
                break;
            } else {
                if !((i.types[op as usize].bitfield).qword() != 0) {
                    continue;
                }
                guess_suffix = 'q' as i32 as libc::c_char;
                break;
            }
        }
    } else if (flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint)
        as libc::c_int
        ^ (i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int)
            as libc::c_int != 0
    {
        guess_suffix = 'w' as i32 as libc::c_char;
    }
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if operand_type_check(i.types[op as usize], imm) != 0 {
            match (*i.op[op as usize].imms).X_op() as libc::c_int {
                2 => {
                    match guess_suffix as libc::c_int {
                        108 => {
                            (i.types[op as usize].bitfield)
                                .set_imm32(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm64(1 as libc::c_int as libc::c_uint);
                        }
                        119 => {
                            (i.types[op as usize].bitfield)
                                .set_imm16(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm32(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm32s(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm64(1 as libc::c_int as libc::c_uint);
                        }
                        98 => {
                            (i.types[op as usize].bitfield)
                                .set_imm8(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm8s(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm16(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm32(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm32s(1 as libc::c_int as libc::c_uint);
                            (i.types[op as usize].bitfield)
                                .set_imm64(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {}
                    }
                    if (i.types[op as usize].bitfield).imm16() as libc::c_int != 0
                        && fits_in_unsigned_word(
                            (*i.op[op as usize].imms).X_add_number as addressT,
                        ) != 0
                    {
                        (*i.op[op as usize].imms)
                            .X_add_number = ((*i.op[op as usize].imms).X_add_number
                            ^ 0x8000 as libc::c_int as libc::c_long)
                            - 0x8000 as libc::c_int as libc::c_long;
                    }
                    if (i.types[op as usize].bitfield).imm32() as libc::c_int != 0
                        && fits_in_unsigned_long(
                            (*i.op[op as usize].imms).X_add_number as addressT,
                        ) != 0
                    {
                        (*i.op[op as usize].imms)
                            .X_add_number = ((*i.op[op as usize].imms).X_add_number
                            ^ (1 as libc::c_int as offsetT) << 31 as libc::c_int)
                            - ((1 as libc::c_int as offsetT) << 31 as libc::c_int);
                    }
                    i
                        .types[op
                        as usize] = operand_type_or(
                        i.types[op as usize],
                        smallest_imm_type((*i.op[op as usize].imms).X_add_number),
                    );
                    if guess_suffix as libc::c_int == 'q' as i32 {
                        (i.types[op as usize].bitfield)
                            .set_imm32(0 as libc::c_int as libc::c_uint);
                    }
                }
                1 | 5 => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        5823 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 24],
                            &[libc::c_char; 24],
                        >(b"void optimize_imm(void)\0"))
                            .as_ptr(),
                    );
                }
                _ => {
                    let mut mask: i386_operand_type = i386_operand_type {
                        bitfield: C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        },
                    };
                    let mut allowed: i386_operand_type = i386_operand_type {
                        bitfield: C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        },
                    };
                    let mut t: *const insn_template = (*current_templates).start;
                    operand_type_set(&mut mask, 0 as libc::c_int as libc::c_uint);
                    allowed = (*t).operand_types[op as usize];
                    loop {
                        t = t.offset(1);
                        if !(t < (*current_templates).end) {
                            break;
                        }
                        allowed = operand_type_and(allowed, anyimm);
                        allowed = operand_type_or(
                            allowed,
                            (*t).operand_types[op as usize],
                        );
                    }
                    match guess_suffix as libc::c_int {
                        113 => {
                            (mask.bitfield).set_imm64(1 as libc::c_int as libc::c_uint);
                            (mask.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
                        }
                        108 => {
                            (mask.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
                        }
                        119 => {
                            (mask.bitfield).set_imm16(1 as libc::c_int as libc::c_uint);
                        }
                        98 => {
                            (mask.bitfield).set_imm8(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {}
                    }
                    allowed = operand_type_and(mask, allowed);
                    if operand_type_all_zero(&mut allowed) == 0 {
                        i
                            .types[op
                            as usize] = operand_type_and(i.types[op as usize], mask);
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn optimize_disp() {
    let mut op: libc::c_int = 0;
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if !(operand_type_check(i.types[op as usize], disp) != 0) {
            continue;
        }
        if (*i.op[op as usize].disps).X_op() as libc::c_int == O_constant as libc::c_int
        {
            let mut op_disp: offsetT = (*i.op[op as usize].disps).X_add_number;
            if op_disp == 0
                && (i.types[op as usize].bitfield).baseindex() as libc::c_int != 0
            {
                i
                    .types[op
                    as usize] = operand_type_and_not(i.types[op as usize], anydisp);
                i.op[op as usize].disps = 0 as *mut expressionS;
                i.disp_operands = (i.disp_operands).wrapping_sub(1);
                i.disp_operands;
            } else {
                if (i.types[op as usize].bitfield).disp16() as libc::c_int != 0
                    && fits_in_unsigned_word(op_disp as addressT) != 0
                {
                    op_disp = (op_disp ^ 0x8000 as libc::c_int as libc::c_long)
                        - 0x8000 as libc::c_int as libc::c_long;
                    (i.types[op as usize].bitfield)
                        .set_disp64(0 as libc::c_int as libc::c_uint);
                }
                if ((i.types[op as usize].bitfield).disp32() as libc::c_int != 0
                    || flag_code as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                        && want_disp32((*current_templates).start) as libc::c_int != 0)
                    && fits_in_unsigned_long(op_disp as addressT) != 0
                {
                    op_disp = ((op_disp
                        ^ (1 as libc::c_int as offsetT) << 31 as libc::c_int)
                        as libc::c_ulong)
                        .wrapping_sub(
                            (1 as libc::c_int as addressT) << 31 as libc::c_int,
                        ) as offsetT;
                    (i.types[op as usize].bitfield)
                        .set_disp64(0 as libc::c_int as libc::c_uint);
                    (i.types[op as usize].bitfield)
                        .set_disp32(1 as libc::c_int as libc::c_uint);
                }
                if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                    && fits_in_signed_long(op_disp as addressT) != 0
                {
                    (i.types[op as usize].bitfield)
                        .set_disp64(0 as libc::c_int as libc::c_uint);
                    (i.types[op as usize].bitfield)
                        .set_disp32s(1 as libc::c_int as libc::c_uint);
                }
                if ((i.types[op as usize].bitfield).disp32() as libc::c_int != 0
                    || (i.types[op as usize].bitfield).disp32s() as libc::c_int != 0
                    || (i.types[op as usize].bitfield).disp16() as libc::c_int != 0)
                    && fits_in_disp8(op_disp) != 0
                {
                    (i.types[op as usize].bitfield)
                        .set_disp8(1 as libc::c_int as libc::c_uint);
                }
                (*i.op[op as usize].disps).X_add_number = op_disp;
            }
        } else if i.reloc[op as usize] as libc::c_uint
            == BFD_RELOC_386_TLS_DESC_CALL as libc::c_int as libc::c_uint
            || i.reloc[op as usize] as libc::c_uint
                == BFD_RELOC_X86_64_TLSDESC_CALL as libc::c_int as libc::c_uint
        {
            fix_new_exp(
                frag_now,
                (frag_more(0 as libc::c_int as size_t))
                    .offset_from(((*frag_now).fr_literal).as_mut_ptr()) as libc::c_long
                    as libc::c_ulong,
                0 as libc::c_int as libc::c_ulong,
                i.op[op as usize].disps,
                0 as libc::c_int,
                i.reloc[op as usize],
            );
            i.types[op as usize] = operand_type_and_not(i.types[op as usize], anydisp);
        } else {
            (i.types[op as usize].bitfield).set_disp64(0 as libc::c_int as libc::c_uint);
        }
    };
}
unsafe extern "C" fn match_template(
    mut mnem_suffix: libc::c_char,
) -> *const insn_template {
    let mut current_block: u64;
    let mut t: *const insn_template = 0 as *const insn_template;
    let mut overlap0: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut overlap1: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut overlap2: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut overlap3: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut overlap4: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut found_reverse_match: libc::c_uint = 0;
    let mut suffix_check: i386_opcode_modifier = i386_opcode_modifier {
        d_w_load_modrm_jump_floatmf_floatr_size_checkregsize_mnemonicsize_anysize_no_bsuf_no_wsuf_no_lsuf_no_ssuf_no_qsuf_no_ldsuf_fwait_isstring_regmem_bndprefixok_regkludge_implicit1stxmm0_prefixok_todword_toqword_addrprefixopreg_isprefix_immext_norex64_ugh_pseudovexprefix_vex_vexvvvv_vexw_opcodespace_opcodeprefix_vexsources_sib_sse2avx_noavx_evex_masking_broadcast_staticrounding_sae_disp8memshift_nodefmask_implicitquadgroup_swapsources_optimize_attmnemonic_attsyntax_intelsyntax_isa64: [0; 11],
        c2rust_padding: [0; 1],
    };
    let mut operand_types: [i386_operand_type; 5] = [i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    }; 5];
    let mut addr_prefix_disp: libc::c_int = 0;
    let mut j: libc::c_uint = 0;
    let mut size_match: libc::c_uint = 0;
    let mut check_register_0: libc::c_uint = 0;
    let mut specific_error: i386_error = operand_size_mismatch;
    found_reverse_match = 0 as libc::c_int as libc::c_uint;
    addr_prefix_disp = -(1 as libc::c_int);
    memset(
        &mut suffix_check as *mut i386_opcode_modifier as *mut libc::c_void,
        0 as libc::c_int,
        ::core::mem::size_of::<i386_opcode_modifier>() as libc::c_ulong,
    );
    match mnem_suffix as libc::c_int {
        98 => {
            suffix_check.set_no_bsuf(1 as libc::c_int as libc::c_uint);
        }
        119 => {
            suffix_check.set_no_wsuf(1 as libc::c_int as libc::c_uint);
        }
        115 => {
            suffix_check.set_no_ssuf(1 as libc::c_int as libc::c_uint);
        }
        108 => {
            suffix_check.set_no_lsuf(1 as libc::c_int as libc::c_uint);
        }
        113 => {
            suffix_check.set_no_qsuf(1 as libc::c_int as libc::c_uint);
        }
        _ => {
            if i.suffix as libc::c_int == '\u{1}' as i32 {
                suffix_check.set_no_ldsuf(1 as libc::c_int as libc::c_uint);
            }
        }
    }
    i.error = number_of_operands_mismatch;
    t = (*current_templates).start;
    while t < (*current_templates).end {
        addr_prefix_disp = -(1 as libc::c_int);
        found_reverse_match = 0 as libc::c_int as libc::c_uint;
        if !(i.operands != (*t).operands()) {
            i.error = unsupported;
            if !(cpu_flags_match(t) != 0x1 as libc::c_int | 0x2 as libc::c_int) {
                i.error = unsupported;
                if !(((*t).opcode_modifier).pseudovexprefix() as libc::c_int != 0
                    && !(i.vec_encoding as libc::c_uint
                        == vex_encoding_vex as libc::c_int as libc::c_uint
                        || i.vec_encoding as libc::c_uint
                            == vex_encoding_vex3 as libc::c_int as libc::c_uint))
                {
                    i.error = unsupported_with_intel_mnemonic;
                    if !(intel_mnemonic != 0
                        && ((*t).opcode_modifier).attmnemonic() as libc::c_int != 0)
                    {
                        i.error = unsupported_syntax;
                        if !(intel_syntax != 0
                            && ((*t).opcode_modifier).attsyntax() as libc::c_int != 0
                            || intel_syntax == 0
                                && ((*t).opcode_modifier).intelsyntax() as libc::c_int != 0)
                        {
                            match isa64 as libc::c_uint {
                                1 => {
                                    if ((*t).opcode_modifier).isa64() as libc::c_int
                                        >= 2 as libc::c_int
                                    {
                                        current_block = 4956146061682418353;
                                    } else {
                                        current_block = 17500079516916021833;
                                    }
                                }
                                2 => {
                                    if ((*t).opcode_modifier).isa64() as libc::c_int
                                        == 1 as libc::c_int
                                        && flag_code as libc::c_uint
                                            == CODE_64BIT as libc::c_int as libc::c_uint
                                    {
                                        current_block = 4956146061682418353;
                                    } else {
                                        current_block = 17500079516916021833;
                                    }
                                }
                                _ => {
                                    if ((*t).opcode_modifier).isa64() as libc::c_int
                                        == 2 as libc::c_int
                                    {
                                        current_block = 4956146061682418353;
                                    } else {
                                        current_block = 17500079516916021833;
                                    }
                                }
                            }
                            match current_block {
                                4956146061682418353 => {}
                                _ => {
                                    i.error = invalid_instruction_suffix;
                                    if !(((*t).opcode_modifier).no_bsuf() as libc::c_int != 0
                                        && suffix_check.no_bsuf() as libc::c_int != 0
                                        || ((*t).opcode_modifier).no_wsuf() as libc::c_int != 0
                                            && suffix_check.no_wsuf() as libc::c_int != 0
                                        || ((*t).opcode_modifier).no_lsuf() as libc::c_int != 0
                                            && suffix_check.no_lsuf() as libc::c_int != 0
                                        || ((*t).opcode_modifier).no_ssuf() as libc::c_int != 0
                                            && suffix_check.no_ssuf() as libc::c_int != 0
                                        || ((*t).opcode_modifier).no_qsuf() as libc::c_int != 0
                                            && suffix_check.no_qsuf() as libc::c_int != 0
                                        || ((*t).opcode_modifier).no_ldsuf() as libc::c_int != 0
                                            && suffix_check.no_ldsuf() as libc::c_int != 0)
                                    {
                                        size_match = operand_size_match(t);
                                        if !(size_match == 0) {
                                            if i.jumpabsolute as libc::c_int != 0
                                                && ((*t).opcode_modifier).jump() as libc::c_int
                                                    != 5 as libc::c_int
                                            {
                                                i.error = operand_type_mismatch;
                                            } else {
                                                j = 0 as libc::c_int as libc::c_uint;
                                                while j < 5 as libc::c_int as libc::c_uint {
                                                    operand_types[j as usize] = (*t).operand_types[j as usize];
                                                    j = j.wrapping_add(1);
                                                    j;
                                                }
                                                j = (i.imm_operands)
                                                    .wrapping_add(
                                                        ((*t).operands()
                                                            > (i.imm_operands)
                                                                .wrapping_add(1 as libc::c_int as libc::c_uint))
                                                            as libc::c_int as libc::c_uint,
                                                    );
                                                if !((i.suffix as libc::c_int == 'q' as i32
                                                    && flag_code as libc::c_uint
                                                        != CODE_64BIT as libc::c_int as libc::c_uint
                                                    && !(((*t).opcode_modifier).opcodespace() as libc::c_int
                                                        == 1 as libc::c_int
                                                        && (*t).base_opcode() as libc::c_int == 0xc7 as libc::c_int
                                                        && ((*t).opcode_modifier).opcodeprefix() as libc::c_int
                                                            == 0 as libc::c_int
                                                        && (*t).extension_opcode() == 1 as libc::c_int)
                                                    || i.suffix as libc::c_int == 'l' as i32
                                                        && (cpu_arch_flags.bitfield).cpui386() == 0)
                                                    && (if intel_syntax != 0 {
                                                        (((*t).opcode_modifier).mnemonicsize() as libc::c_int
                                                            != 1 as libc::c_int && intel_float_operand((*t).name) == 0)
                                                            as libc::c_int
                                                    } else {
                                                        (intel_float_operand((*t).name) != 2 as libc::c_int)
                                                            as libc::c_int
                                                    }) != 0
                                                    && ((*t).operands() == i.imm_operands
                                                        || (operand_types[i.imm_operands as usize].bitfield).class()
                                                            as libc::c_int != RegMMX as libc::c_int
                                                            && (operand_types[i.imm_operands as usize].bitfield).class()
                                                                as libc::c_int != RegSIMD as libc::c_int
                                                            && (operand_types[i.imm_operands as usize].bitfield).class()
                                                                as libc::c_int != RegMask as libc::c_int
                                                        || (operand_types[j as usize].bitfield).class()
                                                            as libc::c_int != RegMMX as libc::c_int
                                                            && (operand_types[j as usize].bitfield).class()
                                                                as libc::c_int != RegSIMD as libc::c_int
                                                            && (operand_types[j as usize].bitfield).class()
                                                                as libc::c_int != RegMask as libc::c_int)
                                                    && ((*t).opcode_modifier).sib() == 0)
                                                {
                                                    if (*t).operands() == 0 {
                                                        if !(VEX_check_encoding(t) != 0) {
                                                            break;
                                                        }
                                                        specific_error = i.error;
                                                    } else {
                                                        if ((*t).opcode_modifier).jump() == 0
                                                            || ((*t).opcode_modifier).jump() as libc::c_int
                                                                == 5 as libc::c_int
                                                        {
                                                            j = 0 as libc::c_int as libc::c_uint;
                                                            while j < 5 as libc::c_int as libc::c_uint {
                                                                if operand_type_check(operand_types[j as usize], disp) != 0
                                                                {
                                                                    break;
                                                                }
                                                                j = j.wrapping_add(1);
                                                                j;
                                                            }
                                                            if j < 5 as libc::c_int as libc::c_uint {
                                                                let mut override_0: bool = i
                                                                    .prefix[2 as libc::c_int as usize] as libc::c_int
                                                                    != 0 as libc::c_int;
                                                                addr_prefix_disp = j as libc::c_int;
                                                                let mut current_block_42: u64;
                                                                match flag_code as libc::c_uint {
                                                                    1 => {
                                                                        override_0 = !override_0;
                                                                        current_block_42 = 10100864008429836752;
                                                                    }
                                                                    0 => {
                                                                        current_block_42 = 10100864008429836752;
                                                                    }
                                                                    2 => {
                                                                        if (operand_types[j as usize].bitfield).disp32s()
                                                                            as libc::c_int != 0
                                                                            || (operand_types[j as usize].bitfield).disp64()
                                                                                as libc::c_int != 0
                                                                        {
                                                                            (operand_types[j as usize].bitfield)
                                                                                .set_disp64(
                                                                                    (operand_types[j as usize].bitfield).disp64()
                                                                                        & !override_0 as libc::c_int as libc::c_uint,
                                                                                );
                                                                            (operand_types[j as usize].bitfield)
                                                                                .set_disp32s(
                                                                                    (operand_types[j as usize].bitfield).disp32s()
                                                                                        & !override_0 as libc::c_int as libc::c_uint,
                                                                                );
                                                                            (operand_types[j as usize].bitfield)
                                                                                .set_disp32(override_0 as libc::c_uint);
                                                                        }
                                                                        (operand_types[j as usize].bitfield)
                                                                            .set_disp16(0 as libc::c_int as libc::c_uint);
                                                                        current_block_42 = 14001958660280927786;
                                                                    }
                                                                    _ => {
                                                                        current_block_42 = 14001958660280927786;
                                                                    }
                                                                }
                                                                match current_block_42 {
                                                                    10100864008429836752 => {
                                                                        if (operand_types[j as usize].bitfield).disp32()
                                                                            as libc::c_int != 0
                                                                            && (operand_types[j as usize].bitfield).disp16()
                                                                                as libc::c_int != 0
                                                                        {
                                                                            (operand_types[j as usize].bitfield)
                                                                                .set_disp16(override_0 as libc::c_uint);
                                                                            (operand_types[j as usize].bitfield)
                                                                                .set_disp32(!override_0 as libc::c_int as libc::c_uint);
                                                                        }
                                                                        (operand_types[j as usize].bitfield)
                                                                            .set_disp32s(0 as libc::c_int as libc::c_uint);
                                                                        (operand_types[j as usize].bitfield)
                                                                            .set_disp64(0 as libc::c_int as libc::c_uint);
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                        if !(i.reloc[0 as libc::c_int as usize] as libc::c_uint
                                                            == BFD_RELOC_386_GOT32 as libc::c_int as libc::c_uint
                                                            && (*t).base_opcode() as libc::c_int == 0xa0 as libc::c_int
                                                            && ((*t).opcode_modifier).opcodespace() as libc::c_int
                                                                == 0 as libc::c_int)
                                                        {
                                                            if ((*t).opcode_modifier).checkregsize() != 0 {
                                                                check_register_0 = (((1 as libc::c_int)
                                                                    << (*t).operands() as libc::c_int) - 1 as libc::c_int)
                                                                    as libc::c_uint;
                                                                if i.broadcast.type_0 != 0 {
                                                                    check_register_0
                                                                        &= !((1 as libc::c_int) << i.broadcast.operand)
                                                                            as libc::c_uint;
                                                                }
                                                            } else {
                                                                check_register_0 = 0 as libc::c_int as libc::c_uint;
                                                            }
                                                            overlap0 = operand_type_and(
                                                                i.types[0 as libc::c_int as usize],
                                                                operand_types[0 as libc::c_int as usize],
                                                            );
                                                            match (*t).operands() as libc::c_int {
                                                                1 => {
                                                                    if operand_type_match(
                                                                        overlap0,
                                                                        i.types[0 as libc::c_int as usize],
                                                                    ) == 0
                                                                    {
                                                                        current_block = 4956146061682418353;
                                                                    } else {
                                                                        current_block = 6478348674394853609;
                                                                    }
                                                                }
                                                                2 => {
                                                                    if flag_code as libc::c_uint
                                                                        == CODE_64BIT as libc::c_int as libc::c_uint
                                                                        && (*t).base_opcode() as libc::c_int == 0x90 as libc::c_int
                                                                        && ((*t).opcode_modifier).opcodespace() as libc::c_int
                                                                            == 0 as libc::c_int
                                                                        && (i.types[0 as libc::c_int as usize].bitfield).instance()
                                                                            as libc::c_int == Accum as libc::c_int
                                                                        && (i.types[0 as libc::c_int as usize].bitfield).dword()
                                                                            as libc::c_int != 0
                                                                        && (i.types[1 as libc::c_int as usize].bitfield).instance()
                                                                            as libc::c_int == Accum as libc::c_int
                                                                        && (i.types[1 as libc::c_int as usize].bitfield).dword()
                                                                            as libc::c_int != 0
                                                                    {
                                                                        current_block = 4956146061682418353;
                                                                    } else if flag_code as libc::c_uint
                                                                        != CODE_64BIT as libc::c_int as libc::c_uint
                                                                        && !(i.hle_prefix).is_null()
                                                                        && (*t).base_opcode() as libc::c_int == 0xa0 as libc::c_int
                                                                        && ((*t).opcode_modifier).opcodespace() as libc::c_int
                                                                            == 0 as libc::c_int
                                                                        && (i.types[0 as libc::c_int as usize].bitfield).instance()
                                                                            as libc::c_int == Accum as libc::c_int
                                                                        && i.flags[1 as libc::c_int as usize]
                                                                            & 2 as libc::c_int as libc::c_uint != 0
                                                                    {
                                                                        current_block = 4956146061682418353;
                                                                    } else {
                                                                        current_block = 9689749586081882599;
                                                                    }
                                                                }
                                                                3 => {
                                                                    current_block = 9689749586081882599;
                                                                }
                                                                4 | 5 => {
                                                                    current_block = 517034762281879536;
                                                                }
                                                                _ => {
                                                                    current_block = 6478348674394853609;
                                                                }
                                                            }
                                                            match current_block {
                                                                4956146061682418353 => {}
                                                                _ => {
                                                                    match current_block {
                                                                        9689749586081882599 => {
                                                                            if size_match & 1 as libc::c_int as libc::c_uint == 0 {
                                                                                current_block = 14894329081065991031;
                                                                            } else {
                                                                                overlap1 = operand_type_and(
                                                                                    operand_types[0 as libc::c_int as usize],
                                                                                    operand_types[1 as libc::c_int as usize],
                                                                                );
                                                                                if ((*t).opcode_modifier).d() as libc::c_int != 0
                                                                                    && i.reg_operands == i.operands
                                                                                    && operand_type_all_zero(&mut overlap1) == 0
                                                                                {
                                                                                    match i.dir_encoding as libc::c_uint {
                                                                                        1 => {
                                                                                            current_block = 9026978927733134056;
                                                                                            match current_block {
                                                                                                13315895986227077161 => {
                                                                                                    if operand_type_check(
                                                                                                        operand_types[(i.operands)
                                                                                                            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                        anymem,
                                                                                                    ) == 0 && ((*t).opcode_modifier).regmem() == 0
                                                                                                    {
                                                                                                        current_block = 14894329081065991031;
                                                                                                    } else {
                                                                                                        current_block = 14329534724295951598;
                                                                                                    }
                                                                                                }
                                                                                                _ => {
                                                                                                    if operand_type_check(
                                                                                                        operand_types[(i.operands)
                                                                                                            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                        anymem,
                                                                                                    ) != 0
                                                                                                        || ((*t).opcode_modifier).regmem() as libc::c_int != 0
                                                                                                    {
                                                                                                        current_block = 14894329081065991031;
                                                                                                    } else {
                                                                                                        current_block = 14329534724295951598;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        2 => {
                                                                                            current_block = 13315895986227077161;
                                                                                            match current_block {
                                                                                                13315895986227077161 => {
                                                                                                    if operand_type_check(
                                                                                                        operand_types[(i.operands)
                                                                                                            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                        anymem,
                                                                                                    ) == 0 && ((*t).opcode_modifier).regmem() == 0
                                                                                                    {
                                                                                                        current_block = 14894329081065991031;
                                                                                                    } else {
                                                                                                        current_block = 14329534724295951598;
                                                                                                    }
                                                                                                }
                                                                                                _ => {
                                                                                                    if operand_type_check(
                                                                                                        operand_types[(i.operands)
                                                                                                            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                        anymem,
                                                                                                    ) != 0
                                                                                                        || ((*t).opcode_modifier).regmem() as libc::c_int != 0
                                                                                                    {
                                                                                                        current_block = 14894329081065991031;
                                                                                                    } else {
                                                                                                        current_block = 14329534724295951598;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        3 => {
                                                                                            current_block = 14894329081065991031;
                                                                                        }
                                                                                        0 | _ => {
                                                                                            current_block = 14329534724295951598;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    current_block = 14329534724295951598;
                                                                                }
                                                                                match current_block {
                                                                                    14894329081065991031 => {}
                                                                                    _ => {
                                                                                        if (i.dir_encoding as libc::c_uint
                                                                                            == dir_encoding_store as libc::c_int as libc::c_uint
                                                                                            || i.dir_encoding as libc::c_uint
                                                                                                == dir_encoding_swap as libc::c_int as libc::c_uint)
                                                                                            && i.mem_operands == 0 as libc::c_int as libc::c_uint
                                                                                            && ((*t).opcode_modifier).load() as libc::c_int != 0
                                                                                        {
                                                                                            current_block = 4956146061682418353;
                                                                                        } else {
                                                                                            current_block = 517034762281879536;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                    match current_block {
                                                                        4956146061682418353 => {}
                                                                        _ => {
                                                                            match current_block {
                                                                                517034762281879536 => {
                                                                                    overlap1 = operand_type_and(
                                                                                        i.types[1 as libc::c_int as usize],
                                                                                        operand_types[1 as libc::c_int as usize],
                                                                                    );
                                                                                    if operand_type_match(
                                                                                        overlap0,
                                                                                        i.types[0 as libc::c_int as usize],
                                                                                    ) == 0
                                                                                        || operand_type_match(
                                                                                            overlap1,
                                                                                            i.types[1 as libc::c_int as usize],
                                                                                        ) == 0
                                                                                        || check_register_0 & 3 as libc::c_int as libc::c_uint
                                                                                            == 3 as libc::c_int as libc::c_uint
                                                                                            && operand_type_register_match(
                                                                                                i.types[0 as libc::c_int as usize],
                                                                                                operand_types[0 as libc::c_int as usize],
                                                                                                i.types[1 as libc::c_int as usize],
                                                                                                operand_types[1 as libc::c_int as usize],
                                                                                            ) == 0
                                                                                    {
                                                                                        if ((*t).opcode_modifier).d() == 0 {
                                                                                            current_block = 4956146061682418353;
                                                                                        } else {
                                                                                            current_block = 14894329081065991031;
                                                                                        }
                                                                                    } else {
                                                                                        let mut current_block_70: u64;
                                                                                        match (*t).operands() as libc::c_int {
                                                                                            5 => {
                                                                                                overlap4 = operand_type_and(
                                                                                                    i.types[4 as libc::c_int as usize],
                                                                                                    operand_types[4 as libc::c_int as usize],
                                                                                                );
                                                                                                current_block_70 = 3698023394284672799;
                                                                                            }
                                                                                            4 => {
                                                                                                current_block_70 = 3698023394284672799;
                                                                                            }
                                                                                            3 => {
                                                                                                current_block_70 = 14308311194270866869;
                                                                                            }
                                                                                            _ => {
                                                                                                current_block_70 = 15586796709793571329;
                                                                                            }
                                                                                        }
                                                                                        match current_block_70 {
                                                                                            3698023394284672799 => {
                                                                                                overlap3 = operand_type_and(
                                                                                                    i.types[3 as libc::c_int as usize],
                                                                                                    operand_types[3 as libc::c_int as usize],
                                                                                                );
                                                                                                current_block_70 = 14308311194270866869;
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                        match current_block_70 {
                                                                                            14308311194270866869 => {
                                                                                                overlap2 = operand_type_and(
                                                                                                    i.types[2 as libc::c_int as usize],
                                                                                                    operand_types[2 as libc::c_int as usize],
                                                                                                );
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                        match (*t).operands() as libc::c_int {
                                                                                            5 => {
                                                                                                current_block = 4198650290338699487;
                                                                                                match current_block {
                                                                                                    4198650290338699487 => {
                                                                                                        if operand_type_match(
                                                                                                            overlap4,
                                                                                                            i.types[4 as libc::c_int as usize],
                                                                                                        ) == 0
                                                                                                            || operand_type_register_match(
                                                                                                                i.types[3 as libc::c_int as usize],
                                                                                                                operand_types[3 as libc::c_int as usize],
                                                                                                                i.types[4 as libc::c_int as usize],
                                                                                                                operand_types[4 as libc::c_int as usize],
                                                                                                            ) == 0
                                                                                                        {
                                                                                                            current_block = 4956146061682418353;
                                                                                                        } else {
                                                                                                            current_block = 14670997300441389923;
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                                match current_block {
                                                                                                    4956146061682418353 => {}
                                                                                                    _ => {
                                                                                                        match current_block {
                                                                                                            14670997300441389923 => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap3,
                                                                                                                    i.types[3 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 0xa as libc::c_int as libc::c_uint
                                                                                                                        == 0xa as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 0xc as libc::c_int as libc::c_uint
                                                                                                                        == 0xc as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 9657783393930895685;
                                                                                                                }
                                                                                                            }
                                                                                                            _ => {}
                                                                                                        }
                                                                                                        match current_block {
                                                                                                            4956146061682418353 => {}
                                                                                                            _ => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap2,
                                                                                                                    i.types[2 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 5 as libc::c_int as libc::c_uint
                                                                                                                        == 5 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[0 as libc::c_int as usize],
                                                                                                                            operand_types[0 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 6 as libc::c_int as libc::c_uint
                                                                                                                        == 6 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 6478348674394853609;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            4 => {
                                                                                                current_block = 14670997300441389923;
                                                                                                match current_block {
                                                                                                    4198650290338699487 => {
                                                                                                        if operand_type_match(
                                                                                                            overlap4,
                                                                                                            i.types[4 as libc::c_int as usize],
                                                                                                        ) == 0
                                                                                                            || operand_type_register_match(
                                                                                                                i.types[3 as libc::c_int as usize],
                                                                                                                operand_types[3 as libc::c_int as usize],
                                                                                                                i.types[4 as libc::c_int as usize],
                                                                                                                operand_types[4 as libc::c_int as usize],
                                                                                                            ) == 0
                                                                                                        {
                                                                                                            current_block = 4956146061682418353;
                                                                                                        } else {
                                                                                                            current_block = 14670997300441389923;
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                                match current_block {
                                                                                                    4956146061682418353 => {}
                                                                                                    _ => {
                                                                                                        match current_block {
                                                                                                            14670997300441389923 => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap3,
                                                                                                                    i.types[3 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 0xa as libc::c_int as libc::c_uint
                                                                                                                        == 0xa as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 0xc as libc::c_int as libc::c_uint
                                                                                                                        == 0xc as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 9657783393930895685;
                                                                                                                }
                                                                                                            }
                                                                                                            _ => {}
                                                                                                        }
                                                                                                        match current_block {
                                                                                                            4956146061682418353 => {}
                                                                                                            _ => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap2,
                                                                                                                    i.types[2 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 5 as libc::c_int as libc::c_uint
                                                                                                                        == 5 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[0 as libc::c_int as usize],
                                                                                                                            operand_types[0 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 6 as libc::c_int as libc::c_uint
                                                                                                                        == 6 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 6478348674394853609;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            3 => {
                                                                                                current_block = 9657783393930895685;
                                                                                                match current_block {
                                                                                                    4198650290338699487 => {
                                                                                                        if operand_type_match(
                                                                                                            overlap4,
                                                                                                            i.types[4 as libc::c_int as usize],
                                                                                                        ) == 0
                                                                                                            || operand_type_register_match(
                                                                                                                i.types[3 as libc::c_int as usize],
                                                                                                                operand_types[3 as libc::c_int as usize],
                                                                                                                i.types[4 as libc::c_int as usize],
                                                                                                                operand_types[4 as libc::c_int as usize],
                                                                                                            ) == 0
                                                                                                        {
                                                                                                            current_block = 4956146061682418353;
                                                                                                        } else {
                                                                                                            current_block = 14670997300441389923;
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                                match current_block {
                                                                                                    4956146061682418353 => {}
                                                                                                    _ => {
                                                                                                        match current_block {
                                                                                                            14670997300441389923 => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap3,
                                                                                                                    i.types[3 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 0xa as libc::c_int as libc::c_uint
                                                                                                                        == 0xa as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 0xc as libc::c_int as libc::c_uint
                                                                                                                        == 0xc as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                            i.types[3 as libc::c_int as usize],
                                                                                                                            operand_types[3 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 9657783393930895685;
                                                                                                                }
                                                                                                            }
                                                                                                            _ => {}
                                                                                                        }
                                                                                                        match current_block {
                                                                                                            4956146061682418353 => {}
                                                                                                            _ => {
                                                                                                                if operand_type_match(
                                                                                                                    overlap2,
                                                                                                                    i.types[2 as libc::c_int as usize],
                                                                                                                ) == 0
                                                                                                                    || check_register_0 & 5 as libc::c_int as libc::c_uint
                                                                                                                        == 5 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[0 as libc::c_int as usize],
                                                                                                                            operand_types[0 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                    || check_register_0 & 6 as libc::c_int as libc::c_uint
                                                                                                                        == 6 as libc::c_int as libc::c_uint
                                                                                                                        && operand_type_register_match(
                                                                                                                            i.types[1 as libc::c_int as usize],
                                                                                                                            operand_types[1 as libc::c_int as usize],
                                                                                                                            i.types[2 as libc::c_int as usize],
                                                                                                                            operand_types[2 as libc::c_int as usize],
                                                                                                                        ) == 0
                                                                                                                {
                                                                                                                    current_block = 4956146061682418353;
                                                                                                                } else {
                                                                                                                    current_block = 6478348674394853609;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {
                                                                                                current_block = 6478348674394853609;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                            match current_block {
                                                                                4956146061682418353 => {}
                                                                                _ => {
                                                                                    match current_block {
                                                                                        14894329081065991031 => {
                                                                                            if size_match & 2 as libc::c_int as libc::c_uint == 0 {
                                                                                                current_block = 4956146061682418353;
                                                                                            } else {
                                                                                                overlap0 = operand_type_and(
                                                                                                    i.types[0 as libc::c_int as usize],
                                                                                                    operand_types[(i.operands)
                                                                                                        .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                );
                                                                                                overlap1 = operand_type_and(
                                                                                                    i
                                                                                                        .types[(i.operands)
                                                                                                        .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                    operand_types[0 as libc::c_int as usize],
                                                                                                );
                                                                                                if operand_type_match(
                                                                                                    overlap0,
                                                                                                    i.types[0 as libc::c_int as usize],
                                                                                                ) == 0
                                                                                                    || operand_type_match(
                                                                                                        overlap1,
                                                                                                        i
                                                                                                            .types[(i.operands)
                                                                                                            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                    ) == 0
                                                                                                    || check_register_0 != 0
                                                                                                        && operand_type_register_match(
                                                                                                            i.types[0 as libc::c_int as usize],
                                                                                                            operand_types[(i.operands)
                                                                                                                .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                            i
                                                                                                                .types[(i.operands)
                                                                                                                .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize],
                                                                                                            operand_types[0 as libc::c_int as usize],
                                                                                                        ) == 0
                                                                                                {
                                                                                                    current_block = 4956146061682418353;
                                                                                                } else {
                                                                                                    if ((*t).opcode_modifier).d() == 0 {
                                                                                                        found_reverse_match = 0 as libc::c_int as libc::c_uint;
                                                                                                    } else if (operand_types[0 as libc::c_int as usize]
                                                                                                        .bitfield)
                                                                                                        .tbyte() != 0
                                                                                                    {
                                                                                                        found_reverse_match = 0x400 as libc::c_int as libc::c_uint;
                                                                                                    } else if (operand_types[0 as libc::c_int as usize]
                                                                                                        .bitfield)
                                                                                                        .xmmword() as libc::c_int != 0
                                                                                                        || (operand_types[(i.operands)
                                                                                                                .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize]
                                                                                                            .bitfield)
                                                                                                            .xmmword() as libc::c_int != 0
                                                                                                        || (operand_types[0 as libc::c_int as usize].bitfield)
                                                                                                            .class() as libc::c_int == RegMMX as libc::c_int
                                                                                                        || (operand_types[(i.operands)
                                                                                                                .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize]
                                                                                                            .bitfield)
                                                                                                            .class() as libc::c_int == RegMMX as libc::c_int
                                                                                                        || is_any_vex_encoding(t) as libc::c_int != 0
                                                                                                    {
                                                                                                        found_reverse_match = (if (*t).base_opcode() as libc::c_int
                                                                                                            & 0xee as libc::c_int != 0x6e as libc::c_int
                                                                                                        {
                                                                                                            0x1 as libc::c_int
                                                                                                        } else {
                                                                                                            0x10 as libc::c_int
                                                                                                        }) as libc::c_uint;
                                                                                                    } else {
                                                                                                        found_reverse_match = 0x2 as libc::c_int as libc::c_uint;
                                                                                                    }
                                                                                                    if ((*t).opcode_modifier).floatr() != 0 {
                                                                                                        found_reverse_match |= 0x8 as libc::c_int as libc::c_uint;
                                                                                                    }
                                                                                                    current_block = 6478348674394853609;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                    match current_block {
                                                                                        4956146061682418353 => {}
                                                                                        _ => {
                                                                                            if check_VecOperands(t) != 0 {
                                                                                                specific_error = i.error;
                                                                                            } else {
                                                                                                if !(VEX_check_encoding(t) != 0) {
                                                                                                    break;
                                                                                                }
                                                                                                specific_error = i.error;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        t = t.offset(1);
        t;
    }
    if t == (*current_templates).end {
        let mut err_msg: *const libc::c_char = 0 as *const libc::c_char;
        match if specific_error as libc::c_uint != 0 {
            specific_error as libc::c_uint
        } else {
            i.error as libc::c_uint
        } {
            0 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"operand size mismatch\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            1 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"operand type mismatch\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            2 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"register type mismatch\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            3 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"number of operands mismatch\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            4 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"invalid instruction suffix\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            5 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"constant doesn't fit in 4 bits\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            6 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported with Intel mnemonic\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            7 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported syntax\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            8 => {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"unsupported instruction `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    (*(*current_templates).start).name,
                );
                return 0 as *const insn_template;
            }
            9 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"invalid SIB address\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            10 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"invalid VSIB address\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            11 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"mask, index, and destination registers must be distinct\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            12 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"all tmm registers must be distinct\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            13 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported vector index register\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            14 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported broadcast\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            15 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"broadcast is needed for operand of such type\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            16 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported masking\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            17 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"mask not on destination operand\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            18 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"default mask isn't allowed\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            19 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"unsupported static rounding/sae\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            20 => {
                if intel_syntax != 0 {
                    err_msg = dcgettext(
                        0 as *const libc::c_char,
                        b"RC/SAE operand must precede immediate operands\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    );
                } else {
                    err_msg = dcgettext(
                        0 as *const libc::c_char,
                        b"RC/SAE operand must follow immediate operands\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    );
                }
            }
            21 => {
                err_msg = dcgettext(
                    0 as *const libc::c_char,
                    b"invalid register operand\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                );
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6804 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 42],
                        &[libc::c_char; 42],
                    >(b"const insn_template *match_template(char)\0"))
                        .as_ptr(),
                );
            }
        }
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"%s for `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            err_msg,
            (*(*current_templates).start).name,
        );
        return 0 as *const insn_template;
    }
    if quiet_warnings == 0 {
        if intel_syntax == 0
            && i.jumpabsolute as libc::c_int
                != (((*t).opcode_modifier).jump() as libc::c_int == 5 as libc::c_int)
                    as libc::c_int
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"indirect %s without `*'\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                (*t).name,
            );
        }
        if ((*t).opcode_modifier).isprefix() as libc::c_int != 0
            && ((*t).opcode_modifier).mnemonicsize() as libc::c_int == 1 as libc::c_int
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"stand-alone `%s' prefix\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                (*t).name,
            );
        }
    }
    install_template(t);
    if addr_prefix_disp != -(1 as libc::c_int) {
        i
            .tm
            .operand_types[addr_prefix_disp
            as usize] = operand_types[addr_prefix_disp as usize];
    }
    if found_reverse_match != 0 {
        (i.tm).set_base_opcode((i.tm).base_opcode() ^ found_reverse_match);
        i
            .tm
            .operand_types[0 as libc::c_int
            as usize] = operand_types[(i.operands)
            .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize];
        i
            .tm
            .operand_types[(i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
            as usize] = operand_types[0 as libc::c_int as usize];
        (i.tm.opcode_modifier)
            .set_regmem(
                ((i.tm.opcode_modifier).modrm() as libc::c_int != 0
                    && (i.tm.opcode_modifier).d() as libc::c_int != 0
                    && (i.tm).operands()
                        > (2 as libc::c_uint)
                            .wrapping_sub((i.tm.opcode_modifier).sse2avx())
                    && (i.tm.opcode_modifier).regmem() == 0) as libc::c_int
                    as libc::c_uint,
            );
    }
    return t;
}
unsafe extern "C" fn check_string() -> libc::c_int {
    let mut es_op: libc::c_uint = ((i.tm.opcode_modifier).isstring() as libc::c_int
        - 2 as libc::c_int) as libc::c_uint;
    let mut op: libc::c_uint = if (i
        .tm
        .operand_types[0 as libc::c_int as usize]
        .bitfield)
        .baseindex() as libc::c_int != 0
    {
        es_op
    } else {
        0 as libc::c_int as libc::c_uint
    };
    if !(i.seg[op as usize]).is_null() && i.seg[op as usize] != reg_es {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"`%s' operand %u must use `%ses' segment\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
            if intel_syntax != 0 {
                (i.tm).operands().wrapping_sub(es_op)
            } else {
                es_op.wrapping_add(1 as libc::c_int as libc::c_uint)
            },
            register_prefix,
        );
        return 0 as libc::c_int;
    }
    i.seg[op as usize] = i.seg[1 as libc::c_int as usize];
    return 1 as libc::c_int;
}
unsafe extern "C" fn process_suffix() -> libc::c_int {
    let mut is_crc32: bool = 0 as libc::c_int != 0;
    let mut is_movx: bool = 0 as libc::c_int != 0;
    if (i.tm.opcode_modifier).size() as libc::c_int == 1 as libc::c_int {
        i.suffix = 'w' as i32 as libc::c_char;
    } else if (i.tm.opcode_modifier).size() as libc::c_int == 2 as libc::c_int {
        i.suffix = 'l' as i32 as libc::c_char;
    } else if (i.tm.opcode_modifier).size() as libc::c_int == 3 as libc::c_int {
        i.suffix = 'q' as i32 as libc::c_char;
    } else if i.reg_operands != 0
        && (i.operands > 1 as libc::c_int as libc::c_uint
            || (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int) && (i.tm.opcode_modifier).addrprefixopreg() == 0
    {
        let mut numop: libc::c_uint = i.operands;
        is_movx = (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
            && (i.tm).base_opcode() as libc::c_int | 8 as libc::c_int
                == 0xbe as libc::c_int
            || (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
                && (i.tm).base_opcode() as libc::c_int == 0x63 as libc::c_int
                && (i.tm.cpu_flags.bitfield).cpu64() as libc::c_int != 0;
        is_crc32 = (i.tm).base_opcode() as libc::c_int == 0xf0 as libc::c_int
            && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 2 as libc::c_int
            && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int == 3 as libc::c_int;
        if is_movx as libc::c_int != 0
            && ((i.tm.opcode_modifier).w() as libc::c_int != 0
                || (i.tm).base_opcode() as libc::c_int == 0x63 as libc::c_int)
        {
            i.operands = (i.operands).wrapping_sub(1);
            i.operands;
        }
        if is_crc32 as libc::c_int != 0
            && (i.tm.operand_types[1 as libc::c_int as usize].bitfield).qword()
                as libc::c_int != 0
        {
            i.rex |= 8 as libc::c_int;
        }
        if i.suffix == 0 {
            let mut op: libc::c_uint = if is_crc32 as libc::c_int != 0 {
                1 as libc::c_int as libc::c_uint
            } else {
                i.operands
            };
            loop {
                let fresh14 = op;
                op = op.wrapping_sub(1);
                if !(fresh14 != 0) {
                    break;
                }
                if !((i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == InstanceNone as libc::c_int
                    || (i.tm.operand_types[op as usize].bitfield).instance()
                        as libc::c_int == Accum as libc::c_int)
                {
                    continue;
                }
                if (i.types[op as usize].bitfield).class() as libc::c_int
                    != Reg as libc::c_int
                {
                    continue;
                }
                if (i.types[op as usize].bitfield).byte() != 0 {
                    i.suffix = 'b' as i32 as libc::c_char;
                    break;
                } else if (i.types[op as usize].bitfield).word() != 0 {
                    i.suffix = 'w' as i32 as libc::c_char;
                    break;
                } else if (i.types[op as usize].bitfield).dword() != 0 {
                    i.suffix = 'l' as i32 as libc::c_char;
                    break;
                } else {
                    if !((i.types[op as usize].bitfield).qword() != 0) {
                        continue;
                    }
                    i.suffix = 'q' as i32 as libc::c_char;
                    break;
                }
            }
            if is_movx as libc::c_int != 0
                && (i.tm.opcode_modifier).w() as libc::c_int != 0 && i.suffix == 0
                && intel_syntax == 0
            {
                i.suffix = 'b' as i32 as libc::c_char;
            }
        } else if i.suffix as libc::c_int == 'b' as i32 {
            if intel_syntax != 0
                && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    == 1 as libc::c_int
                && (i.tm.opcode_modifier).no_bsuf() as libc::c_int != 0
            {
                i.suffix = 0 as libc::c_int as libc::c_char;
            } else if check_byte_reg() == 0 {
                return 0 as libc::c_int
            }
        } else if i.suffix as libc::c_int == 'l' as i32 {
            if intel_syntax != 0
                && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    == 1 as libc::c_int
                && (i.tm.opcode_modifier).no_lsuf() as libc::c_int != 0
                && (i.tm.opcode_modifier).todword() == 0
                && (i.tm.opcode_modifier).toqword() == 0
            {
                i.suffix = 0 as libc::c_int as libc::c_char;
            } else if check_long_reg() == 0 {
                return 0 as libc::c_int
            }
        } else if i.suffix as libc::c_int == 'q' as i32 {
            if intel_syntax != 0
                && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    == 1 as libc::c_int
                && (i.tm.opcode_modifier).no_qsuf() as libc::c_int != 0
                && (i.tm.opcode_modifier).todword() == 0
                && (i.tm.opcode_modifier).toqword() == 0
            {
                i.suffix = 0 as libc::c_int as libc::c_char;
            } else if check_qword_reg() == 0 {
                return 0 as libc::c_int
            }
        } else if i.suffix as libc::c_int == 'w' as i32 {
            if intel_syntax != 0
                && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    == 1 as libc::c_int
                && (i.tm.opcode_modifier).no_wsuf() as libc::c_int != 0
            {
                i.suffix = 0 as libc::c_int as libc::c_char;
            } else if check_word_reg() == 0 {
                return 0 as libc::c_int
            }
        } else if intel_syntax != 0
            && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int == 1 as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7070 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 25],
                    &[libc::c_char; 25],
                >(b"int process_suffix(void)\0"))
                    .as_ptr(),
            );
        }
        i.operands = numop;
    } else if (i.tm.opcode_modifier).mnemonicsize() as libc::c_int == 2 as libc::c_int
        && i.suffix == 0
    {
        i.suffix = stackop_size;
        if stackop_size as libc::c_int == 'l' as i32 {
            if (i.tm).base_opcode() as libc::c_int == 0xcf as libc::c_int {
                i.suffix = 'w' as i32 as libc::c_char;
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"generating 16-bit `iret' for .code16gcc directive\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
            } else if (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                == 0x7 as libc::c_int
            {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"generating 32-bit `%s', unlike earlier gas versions\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
            }
        }
    } else if i.suffix == 0
        && ((i.tm.opcode_modifier).jump() as libc::c_int == 5 as libc::c_int
            || (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int
            || (i.tm.opcode_modifier).jump() as libc::c_int == 4 as libc::c_int
            || (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
                && (i.tm).base_opcode() as libc::c_int == 0x1 as libc::c_int
                && (i.tm).extension_opcode() <= 3 as libc::c_int)
    {
        let mut current_block_62: u64;
        match flag_code as libc::c_uint {
            2 => {
                if (i.tm.opcode_modifier).no_qsuf() == 0 {
                    if (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int
                        || (i.tm.opcode_modifier).no_lsuf() as libc::c_int != 0
                    {
                        i.suffix = 'q' as i32 as libc::c_char;
                    }
                    current_block_62 = 7494008139977416618;
                } else {
                    current_block_62 = 16749800609724740287;
                }
            }
            0 => {
                current_block_62 = 16749800609724740287;
            }
            1 => {
                if (i.tm.opcode_modifier).no_wsuf() == 0 {
                    i.suffix = 'w' as i32 as libc::c_char;
                }
                current_block_62 = 7494008139977416618;
            }
            _ => {
                current_block_62 = 7494008139977416618;
            }
        }
        match current_block_62 {
            16749800609724740287 => {
                if (i.tm.opcode_modifier).no_lsuf() == 0 {
                    i.suffix = 'l' as i32 as libc::c_char;
                }
            }
            _ => {}
        }
    }
    if i.suffix == 0
        && ((i.tm.opcode_modifier).mnemonicsize() as libc::c_int != 2 as libc::c_int
            || flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                && (i.tm.opcode_modifier).no_lsuf() == 0
                && (i.tm.opcode_modifier).no_qsuf() == 0)
        && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int != 1 as libc::c_int
        && i.prefix[3 as libc::c_int as usize] == 0
        && i.prefix[6 as libc::c_int as usize] as libc::c_int & 8 as libc::c_int == 0
        && ((i.tm.opcode_modifier).no_ssuf() as libc::c_int != 0
            || (i.tm.opcode_modifier).floatmf() as libc::c_int != 0)
    {
        let mut suffixes: libc::c_uint = 0;
        let mut evex: libc::c_uint = 0 as libc::c_int as libc::c_uint;
        suffixes = ((i.tm.opcode_modifier).no_bsuf() == 0) as libc::c_int
            as libc::c_uint;
        if (i.tm.opcode_modifier).no_wsuf() == 0 {
            suffixes |= ((1 as libc::c_int) << 1 as libc::c_int) as libc::c_uint;
        }
        if (i.tm.opcode_modifier).no_lsuf() == 0 {
            suffixes |= ((1 as libc::c_int) << 2 as libc::c_int) as libc::c_uint;
        }
        if (i.tm.opcode_modifier).no_ldsuf() == 0 {
            suffixes |= ((1 as libc::c_int) << 3 as libc::c_int) as libc::c_uint;
        }
        if (i.tm.opcode_modifier).no_ssuf() == 0 {
            suffixes |= ((1 as libc::c_int) << 4 as libc::c_int) as libc::c_uint;
        }
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
            && (i.tm.opcode_modifier).no_qsuf() == 0
        {
            suffixes |= ((1 as libc::c_int) << 5 as libc::c_int) as libc::c_uint;
        }
        if intel_syntax != 0 && is_any_vex_encoding(&mut i.tm) as libc::c_int != 0
            && i.broadcast.type_0 == 0
        {
            let mut op_0: libc::c_uint = 0;
            op_0 = 0 as libc::c_int as libc::c_uint;
            while op_0 < (i.tm).operands() {
                if is_evex_encoding(&mut i.tm) as libc::c_int != 0
                    && (cpu_arch_flags.bitfield).cpuavx512vl() == 0
                {
                    if (i.tm.operand_types[op_0 as usize].bitfield).ymmword() != 0 {
                        (i.tm.operand_types[op_0 as usize].bitfield)
                            .set_xmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if (i.tm.operand_types[op_0 as usize].bitfield).zmmword() != 0 {
                        (i.tm.operand_types[op_0 as usize].bitfield)
                            .set_ymmword(0 as libc::c_int as libc::c_uint);
                    }
                    if (i.tm.opcode_modifier).evex() == 0
                        || (i.tm.opcode_modifier).evex() as libc::c_int
                            == 5 as libc::c_int
                    {
                        (i.tm.opcode_modifier)
                            .set_evex(1 as libc::c_int as libc::c_uint);
                    }
                }
                if !(((i.tm.operand_types[op_0 as usize].bitfield).xmmword()
                    as libc::c_int
                    + (i.tm.operand_types[op_0 as usize].bitfield).ymmword()
                        as libc::c_int
                    + (i.tm.operand_types[op_0 as usize].bitfield).zmmword()
                        as libc::c_int) < 2 as libc::c_int)
                {
                    if (i.types[op_0 as usize].bitfield).xmmword() as libc::c_int != 0
                        || (i.types[op_0 as usize].bitfield).ymmword() as libc::c_int
                            != 0
                        || (i.types[op_0 as usize].bitfield).zmmword() as libc::c_int
                            != 0
                    {
                        suffixes
                            &= !((7 as libc::c_int) << 6 as libc::c_int) as libc::c_uint;
                        evex = 0 as libc::c_int as libc::c_uint;
                        break;
                    } else if i.flags[op_0 as usize] & 2 as libc::c_int as libc::c_uint
                        != 0
                        && (i.tm.operand_types[op_0 as usize].bitfield).unspecified()
                            as libc::c_int != 0
                    {
                        if (i.tm.operand_types[op_0 as usize].bitfield).xmmword() != 0 {
                            suffixes
                                |= ((1 as libc::c_int) << 6 as libc::c_int) as libc::c_uint;
                        }
                        if (i.tm.operand_types[op_0 as usize].bitfield).ymmword() != 0 {
                            suffixes
                                |= ((1 as libc::c_int) << 7 as libc::c_int) as libc::c_uint;
                        }
                        if (i.tm.operand_types[op_0 as usize].bitfield).zmmword() != 0 {
                            suffixes
                                |= ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
                        }
                        if is_evex_encoding(&mut i.tm) {
                            evex = 1 as libc::c_int as libc::c_uint;
                        }
                    }
                }
                op_0 = op_0.wrapping_add(1);
                op_0;
            }
        }
        if suffixes & suffixes.wrapping_sub(1 as libc::c_int as libc::c_uint) != 0 {
            if intel_syntax != 0
                && ((i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    != 2 as libc::c_int
                    || operand_check as libc::c_uint
                        == check_error as libc::c_int as libc::c_uint)
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"ambiguous operand size for `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
                return 0 as libc::c_int;
            }
            if operand_check as libc::c_uint
                == check_error as libc::c_int as libc::c_uint
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"no instruction mnemonic suffix given and no register operands; can't size `%s'\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
                return 0 as libc::c_int;
            }
            if operand_check as libc::c_uint
                == check_warning as libc::c_int as libc::c_uint
            {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"%s; using default for `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    if intel_syntax != 0 {
                        dcgettext(
                            0 as *const libc::c_char,
                            b"ambiguous operand size\0" as *const u8
                                as *const libc::c_char,
                            5 as libc::c_int,
                        )
                    } else {
                        dcgettext(
                            0 as *const libc::c_char,
                            b"no instruction mnemonic suffix given and no register operands\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        )
                    },
                    i.tm.name,
                );
            }
            if (i.tm.opcode_modifier).floatmf() != 0 {
                i.suffix = 's' as i32 as libc::c_char;
            } else if !is_movx {
                if evex != 0 {
                    (i.tm.opcode_modifier).set_evex(evex);
                } else if flag_code as libc::c_uint
                    == CODE_16BIT as libc::c_int as libc::c_uint
                {
                    i.suffix = 'w' as i32 as libc::c_char;
                } else if (i.tm.opcode_modifier).no_lsuf() == 0 {
                    i.suffix = 'l' as i32 as libc::c_char;
                } else {
                    i.suffix = 'q' as i32 as libc::c_char;
                }
            }
        }
    }
    if is_movx {
        if (i.tm.opcode_modifier).w() as libc::c_int != 0 && i.suffix as libc::c_int != 0
            && i.suffix as libc::c_int != 'b' as i32
        {
            (i.tm)
                .set_base_opcode(
                    (i.tm).base_opcode() | 1 as libc::c_int as libc::c_uint,
                );
        }
        if (i.tm.opcode_modifier).w() as libc::c_int != 0
            || (i.tm).base_opcode() as libc::c_int == 0x63 as libc::c_int
            || i.suffix == 0
        {
            if (i.types[1 as libc::c_int as usize].bitfield).word() != 0 {
                i.suffix = 'w' as i32 as libc::c_char;
            } else if (i.types[1 as libc::c_int as usize].bitfield).qword() != 0 {
                i.suffix = 'q' as i32 as libc::c_char;
            } else {
                i.suffix = 'l' as i32 as libc::c_char;
            }
            (i.tm.opcode_modifier).set_w(0 as libc::c_int as libc::c_uint);
        }
    }
    if (i.tm.opcode_modifier).modrm() == 0 && i.reg_operands != 0
        && ((i.tm).operands() as libc::c_int) < 3 as libc::c_int
    {
        i
            .short_form = ((i.tm.operand_types[0 as libc::c_int as usize].bitfield)
            .class() as libc::c_int == Reg as libc::c_int) as libc::c_int
            != ((i.tm.operand_types[1 as libc::c_int as usize].bitfield).class()
                as libc::c_int == Reg as libc::c_int) as libc::c_int;
    }
    let mut current_block_160: u64;
    match i.suffix as libc::c_int {
        108 => {
            if (i.tm.opcode_modifier).floatmf() != 0 {
                (i.tm)
                    .set_base_opcode(
                        (i.tm).base_opcode() ^ 4 as libc::c_int as libc::c_uint,
                    );
                current_block_160 = 11735322225073324345;
            } else {
                current_block_160 = 1320973311833545709;
            }
        }
        119 | 113 => {
            current_block_160 = 1320973311833545709;
        }
        115 => {
            current_block_160 = 4214024748553907597;
        }
        0 => {
            if (i.tm.opcode_modifier).w() as libc::c_int != 0
                && (i.prefix[3 as libc::c_int as usize] as libc::c_int != 0
                    || i.prefix[6 as libc::c_int as usize] as libc::c_int
                        & 8 as libc::c_int != 0)
                && (i.reg_operands == 0
                    || i.reg_operands == 1 as libc::c_int as libc::c_uint
                        && ((i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                            .instance() as libc::c_int == RegC as libc::c_int
                            || (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                                .instance() as libc::c_int == RegD as libc::c_int
                            || (i.tm.operand_types[1 as libc::c_int as usize].bitfield)
                                .instance() as libc::c_int == RegD as libc::c_int
                            || is_crc32 as libc::c_int != 0))
            {
                (i.tm)
                    .set_base_opcode(
                        (i.tm).base_opcode() | 1 as libc::c_int as libc::c_uint,
                    );
            }
            current_block_160 = 11735322225073324345;
        }
        _ => {
            current_block_160 = 11735322225073324345;
        }
    }
    match current_block_160 {
        1320973311833545709 => {
            if (i.tm.opcode_modifier).w() != 0 {
                if i.short_form {
                    (i.tm)
                        .set_base_opcode(
                            (i.tm).base_opcode() | 8 as libc::c_int as libc::c_uint,
                        );
                } else {
                    (i.tm)
                        .set_base_opcode(
                            (i.tm).base_opcode() | 1 as libc::c_int as libc::c_uint,
                        );
                }
            }
            current_block_160 = 4214024748553907597;
        }
        _ => {}
    }
    match current_block_160 {
        4214024748553907597 => {
            if i.suffix as libc::c_int != 'q' as i32
                && (i.tm.opcode_modifier).mnemonicsize() as libc::c_int
                    != 1 as libc::c_int && (i.tm.opcode_modifier).floatmf() == 0
                && !is_any_vex_encoding(&mut i.tm)
                && ((i.suffix as libc::c_int == 'l' as i32) as libc::c_int
                    == (flag_code as libc::c_uint
                        == CODE_16BIT as libc::c_int as libc::c_uint) as libc::c_int
                    || flag_code as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                        && (i.tm.opcode_modifier).jump() as libc::c_int
                            == 3 as libc::c_int)
            {
                let mut prefix: libc::c_uint = 0x66 as libc::c_int as libc::c_uint;
                if (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int {
                    prefix = 0x67 as libc::c_int as libc::c_uint;
                }
                if add_prefix(prefix) as u64 == 0 {
                    return 0 as libc::c_int;
                }
            }
            if i.suffix as libc::c_int == 'q' as i32
                && flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                && (i.tm.opcode_modifier).norex64() == 0
                && (i.tm.opcode_modifier).vexw() == 0
                && !(i.operands == 2 as libc::c_int as libc::c_uint
                    && (i.tm).base_opcode() as libc::c_int == 0x90 as libc::c_int
                    && (i.tm).extension_opcode() == -(1 as libc::c_int)
                    && (i.types[0 as libc::c_int as usize].bitfield).instance()
                        as libc::c_int == Accum as libc::c_int
                    && (i.types[0 as libc::c_int as usize].bitfield).qword()
                        as libc::c_int != 0
                    && (i.types[1 as libc::c_int as usize].bitfield).instance()
                        as libc::c_int == Accum as libc::c_int
                    && (i.types[1 as libc::c_int as usize].bitfield).qword()
                        as libc::c_int != 0)
            {
                i.rex |= 8 as libc::c_int;
            }
        }
        _ => {}
    }
    if (i.tm.opcode_modifier).addrprefixopreg() != 0 {
        if i.suffix == 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7353 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 25],
                    &[libc::c_char; 25],
                >(b"int process_suffix(void)\0"))
                    .as_ptr(),
            );
        };
        if i.reg_operands != 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7354 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 25],
                    &[libc::c_char; 25],
                >(b"int process_suffix(void)\0"))
                    .as_ptr(),
            );
        };
        if (i.tm.operand_types[0 as libc::c_int as usize].bitfield).instance()
            as libc::c_int == Accum as libc::c_int
            || i.operands == 1 as libc::c_int as libc::c_uint
        {
            if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                && ((*i.op[0 as libc::c_int as usize].regs).reg_type.bitfield).word()
                    as libc::c_int != 0
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"16-bit addressing unavailable for `%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
                return 0 as libc::c_int;
            }
            if (if flag_code as libc::c_uint == CODE_32BIT as libc::c_int as libc::c_uint
            {
                ((*i.op[0 as libc::c_int as usize].regs).reg_type.bitfield).word()
                    as libc::c_int
            } else {
                ((*i.op[0 as libc::c_int as usize].regs).reg_type.bitfield).dword()
                    as libc::c_int
            }) != 0 && add_prefix(0x67 as libc::c_int as libc::c_uint) as u64 == 0
            {
                return 0 as libc::c_int;
            }
        } else {
            let mut op_1: libc::c_uint = 0;
            let mut need: C2RustUnnamed_53 = need_word;
            if i.mem_operands == 1 as libc::c_int as libc::c_uint
                && i.reg_operands == 1 as libc::c_int as libc::c_uint
                && i.operands == 2 as libc::c_int as libc::c_uint
                && (i.types[1 as libc::c_int as usize].bitfield).class() as libc::c_int
                    == Reg as libc::c_int
                && (if flag_code as libc::c_uint
                    == CODE_32BIT as libc::c_int as libc::c_uint
                {
                    ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).word()
                        as libc::c_int
                } else {
                    ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).dword()
                        as libc::c_int
                }) != 0
                && ((i.base_reg).is_null() && (i.index_reg).is_null()
                    || x86_elf_abi as libc::c_uint
                        == X86_64_X32_ABI as libc::c_int as libc::c_uint
                        && !(i.base_reg).is_null()
                        && (*i.base_reg).reg_num as libc::c_int
                            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                        && ((*i.base_reg).reg_type.bitfield).qword() as libc::c_int != 0)
                && add_prefix(0x67 as libc::c_int as libc::c_uint) as u64 == 0
            {
                return 0 as libc::c_int;
            }
            if flag_code as libc::c_uint == CODE_32BIT as libc::c_int as libc::c_uint {
                need = (if i.prefix[2 as libc::c_int as usize] as libc::c_int != 0 {
                    need_word as libc::c_int
                } else {
                    need_dword as libc::c_int
                }) as C2RustUnnamed_53;
            } else if i.prefix[2 as libc::c_int as usize] != 0 {
                need = need_dword;
            } else {
                need = (if flag_code as libc::c_uint
                    == CODE_64BIT as libc::c_int as libc::c_uint
                {
                    need_qword as libc::c_int
                } else {
                    need_word as libc::c_int
                }) as C2RustUnnamed_53;
            }
            let mut current_block_180: u64;
            op_1 = 0 as libc::c_int as libc::c_uint;
            while op_1 < i.operands {
                if !((i.types[op_1 as usize].bitfield).class() as libc::c_int
                    != Reg as libc::c_int)
                {
                    match need as libc::c_uint {
                        0 => {
                            if ((*i.op[op_1 as usize].regs).reg_type.bitfield).word()
                                != 0
                            {
                                current_block_180 = 7621726606299503655;
                            } else {
                                current_block_180 = 1953367063549441504;
                            }
                        }
                        1 => {
                            if ((*i.op[op_1 as usize].regs).reg_type.bitfield).dword()
                                != 0
                            {
                                current_block_180 = 7621726606299503655;
                            } else {
                                current_block_180 = 1953367063549441504;
                            }
                        }
                        2 => {
                            if ((*i.op[op_1 as usize].regs).reg_type.bitfield).qword()
                                != 0
                            {
                                current_block_180 = 7621726606299503655;
                            } else {
                                current_block_180 = 1953367063549441504;
                            }
                        }
                        _ => {
                            current_block_180 = 1953367063549441504;
                        }
                    }
                    match current_block_180 {
                        7621726606299503655 => {}
                        _ => {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"invalid register operand size for `%s'\0" as *const u8
                                        as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                i.tm.name,
                            );
                            return 0 as libc::c_int;
                        }
                    }
                }
                op_1 = op_1.wrapping_add(1);
                op_1;
            }
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn check_byte_reg() -> libc::c_int {
    let mut op: libc::c_int = 0;
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if (i.types[op as usize].bitfield).class() as libc::c_int != Reg as libc::c_int {
            continue;
        }
        if (i.types[op as usize].bitfield).byte() != 0 {
            continue;
        }
        if (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
            == RegD as libc::c_int
            && (i.tm.operand_types[op as usize].bitfield).word() as libc::c_int != 0
        {
            continue;
        }
        if (i.tm).base_opcode() as libc::c_int == 0xf0 as libc::c_int
            && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 2 as libc::c_int
            && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int == 3 as libc::c_int
            && op != 0 as libc::c_int
        {
            continue;
        }
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"`%s%s' not allowed with `%s%c'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            register_prefix,
            (*i.op[op as usize].regs).reg_name,
            i.tm.name,
            i.suffix as libc::c_int,
        );
        return 0 as libc::c_int;
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn check_long_reg() -> libc::c_int {
    let mut op: libc::c_int = 0;
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if (i.types[op as usize].bitfield).class() as libc::c_int != Reg as libc::c_int {
            continue;
        }
        if (i.types[op as usize].bitfield).byte() as libc::c_int != 0
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && ((i.tm.operand_types[op as usize].bitfield).word() as libc::c_int != 0
                || (i.tm.operand_types[op as usize].bitfield).dword() as libc::c_int
                    != 0)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s%s' not allowed with `%s%c'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[op as usize].regs).reg_name,
                i.tm.name,
                i.suffix as libc::c_int,
            );
            return 0 as libc::c_int;
        } else if (i.types[op as usize].bitfield).word() as libc::c_int != 0
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && (i.tm.operand_types[op as usize].bitfield).dword() as libc::c_int != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"incorrect register `%s%s' used with `%c' suffix\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[op as usize].regs).reg_name,
                i.suffix as libc::c_int,
            );
            return 0 as libc::c_int;
        } else if (i.types[op as usize].bitfield).qword() as libc::c_int != 0
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && (i.tm.operand_types[op as usize].bitfield).dword() as libc::c_int != 0
        {
            if intel_syntax != 0 && (i.tm.opcode_modifier).toqword() as libc::c_int != 0
                && (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
                    != RegSIMD as libc::c_int
            {
                i.suffix = 'q' as i32 as libc::c_char;
            } else {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"incorrect register `%s%s' used with `%c' suffix\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    register_prefix,
                    (*i.op[op as usize].regs).reg_name,
                    i.suffix as libc::c_int,
                );
                return 0 as libc::c_int;
            }
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn check_qword_reg() -> libc::c_int {
    let mut op: libc::c_int = 0;
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if (i.types[op as usize].bitfield).class() as libc::c_int != Reg as libc::c_int {
            continue;
        }
        if (i.types[op as usize].bitfield).byte() as libc::c_int != 0
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && ((i.tm.operand_types[op as usize].bitfield).word() as libc::c_int != 0
                || (i.tm.operand_types[op as usize].bitfield).dword() as libc::c_int
                    != 0)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s%s' not allowed with `%s%c'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[op as usize].regs).reg_name,
                i.tm.name,
                i.suffix as libc::c_int,
            );
            return 0 as libc::c_int;
        } else if ((i.types[op as usize].bitfield).word() as libc::c_int != 0
            || (i.types[op as usize].bitfield).dword() as libc::c_int != 0)
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && (i.tm.operand_types[op as usize].bitfield).qword() as libc::c_int != 0
        {
            if intel_syntax != 0 && (i.tm.opcode_modifier).todword() as libc::c_int != 0
                && (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
                    != RegSIMD as libc::c_int
            {
                i.suffix = 'l' as i32 as libc::c_char;
            } else {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"incorrect register `%s%s' used with `%c' suffix\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    register_prefix,
                    (*i.op[op as usize].regs).reg_name,
                    i.suffix as libc::c_int,
                );
                return 0 as libc::c_int;
            }
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn check_word_reg() -> libc::c_int {
    let mut op: libc::c_int = 0;
    op = i.operands as libc::c_int;
    loop {
        op -= 1;
        if !(op >= 0 as libc::c_int) {
            break;
        }
        if (i.types[op as usize].bitfield).class() as libc::c_int != Reg as libc::c_int {
            continue;
        }
        if (i.types[op as usize].bitfield).byte() as libc::c_int != 0
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && ((i.tm.operand_types[op as usize].bitfield).word() as libc::c_int != 0
                || (i.tm.operand_types[op as usize].bitfield).dword() as libc::c_int
                    != 0)
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s%s' not allowed with `%s%c'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[op as usize].regs).reg_name,
                i.tm.name,
                i.suffix as libc::c_int,
            );
            return 0 as libc::c_int;
        } else if ((i.types[op as usize].bitfield).dword() as libc::c_int != 0
            || (i.types[op as usize].bitfield).qword() as libc::c_int != 0)
            && ((i.tm.operand_types[op as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int
                || (i.tm.operand_types[op as usize].bitfield).instance() as libc::c_int
                    == Accum as libc::c_int)
            && (i.tm.operand_types[op as usize].bitfield).word() as libc::c_int != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"incorrect register `%s%s' used with `%c' suffix\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[op as usize].regs).reg_name,
                i.suffix as libc::c_int,
            );
            return 0 as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn finalize_imm() -> libc::c_int {
    let mut j: libc::c_uint = 0;
    let mut n: libc::c_uint = 0;
    n = if i.operands > 2 as libc::c_int as libc::c_uint {
        2 as libc::c_int as libc::c_uint
    } else {
        i.operands
    };
    if n != 0 {
        j = 0 as libc::c_int as libc::c_uint;
        while j < n {
            if update_imm(j) == 0 as libc::c_int {
                return 0 as libc::c_int;
            }
            j = j.wrapping_add(1);
            j;
        }
        if operand_type_check(i.types[2 as libc::c_int as usize], imm)
            == 0 as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7711 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 23],
                    &[libc::c_char; 23],
                >(b"int finalize_imm(void)\0"))
                    .as_ptr(),
            );
        };
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn process_operands() -> libc::c_int {
    let mut default_seg: *const reg_entry = 0 as *const reg_entry;
    if (i.tm.opcode_modifier).sse2avx() != 0 {
        i.rex
            |= i.prefix[6 as libc::c_int as usize] as libc::c_int
                & (8 as libc::c_int | 4 as libc::c_int | 2 as libc::c_int
                    | 1 as libc::c_int);
        i.prefix[6 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        i.rex_encoding = 0 as libc::c_int != 0;
    } else if (i.tm.opcode_modifier).immext() != 0 {
        process_immext();
    }
    if (i.tm.opcode_modifier).sse2avx() as libc::c_int != 0
        && (i.tm.opcode_modifier).vexvvvv() as libc::c_int != 0
    {
        let mut dupl: libc::c_uint = i.operands;
        let mut dest: libc::c_uint = dupl.wrapping_sub(1 as libc::c_int as libc::c_uint);
        let mut j: libc::c_uint = 0;
        if i.reg_operands != 0 && 5 as libc::c_int as libc::c_uint > dupl
            && operand_type_equal(
                &mut *(i.types).as_mut_ptr().offset(dest as isize),
                &regxmm,
            ) != 0
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7746 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"int process_operands(void)\0"))
                    .as_ptr(),
            );
        };
        let mut current_block_45: u64;
        if (i.tm.operand_types[0 as libc::c_int as usize].bitfield).instance()
            as libc::c_int == Accum as libc::c_int
            && (i.tm.operand_types[0 as libc::c_int as usize].bitfield).xmmword()
                as libc::c_int != 0
        {
            if (i.tm.opcode_modifier).vexsources() as libc::c_int == 2 as libc::c_int {
                (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                    .set_instance(InstanceNone as libc::c_int as libc::c_uint);
                (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                    .set_class(RegSIMD as libc::c_int as libc::c_uint);
                current_block_45 = 9123587656295728619;
            } else {
                j = 1 as libc::c_int as libc::c_uint;
                while j < i.operands {
                    i
                        .op[j.wrapping_sub(1 as libc::c_int as libc::c_uint)
                        as usize] = i.op[j as usize];
                    i
                        .types[j.wrapping_sub(1 as libc::c_int as libc::c_uint)
                        as usize] = i.types[j as usize];
                    i
                        .tm
                        .operand_types[j.wrapping_sub(1 as libc::c_int as libc::c_uint)
                        as usize] = i.tm.operand_types[j as usize];
                    i
                        .flags[j.wrapping_sub(1 as libc::c_int as libc::c_uint)
                        as usize] = i.flags[j as usize];
                    j = j.wrapping_add(1);
                    j;
                }
                current_block_45 = 7746103178988627676;
            }
        } else if (i.tm.opcode_modifier).implicit1stxmm0() != 0 {
            if (5 as libc::c_int - 1 as libc::c_int) as libc::c_uint > dupl
                && (i.tm.opcode_modifier).vexsources() as libc::c_int == 2 as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    7777 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 27],
                        &[libc::c_char; 27],
                    >(b"int process_operands(void)\0"))
                        .as_ptr(),
                );
            };
            j = i.operands;
            while j > 0 as libc::c_int as libc::c_uint {
                i
                    .op[j
                    as usize] = i
                    .op[j.wrapping_sub(1 as libc::c_int as libc::c_uint) as usize];
                i
                    .types[j
                    as usize] = i
                    .types[j.wrapping_sub(1 as libc::c_int as libc::c_uint) as usize];
                i
                    .tm
                    .operand_types[j
                    as usize] = i
                    .tm
                    .operand_types[j.wrapping_sub(1 as libc::c_int as libc::c_uint)
                    as usize];
                i
                    .flags[j
                    as usize] = i
                    .flags[j.wrapping_sub(1 as libc::c_int as libc::c_uint) as usize];
                j = j.wrapping_sub(1);
                j;
            }
            i
                .op[0 as libc::c_int as usize]
                .regs = str_hash_find(
                reg_hash,
                b"xmm0\0" as *const u8 as *const libc::c_char,
            ) as *const reg_entry;
            i.types[0 as libc::c_int as usize] = regxmm;
            i.tm.operand_types[0 as libc::c_int as usize] = regxmm;
            i.operands = (i.operands).wrapping_add(2 as libc::c_int as libc::c_uint);
            i
                .reg_operands = (i.reg_operands)
                .wrapping_add(2 as libc::c_int as libc::c_uint);
            (i.tm).set_operands((i.tm).operands() + 2 as libc::c_int as libc::c_uint);
            dupl = dupl.wrapping_add(1);
            dupl;
            dest = dest.wrapping_add(1);
            dest;
            i.op[dupl as usize] = i.op[dest as usize];
            i.types[dupl as usize] = i.types[dest as usize];
            i.tm.operand_types[dupl as usize] = i.tm.operand_types[dest as usize];
            i.flags[dupl as usize] = i.flags[dest as usize];
            current_block_45 = 7746103178988627676;
        } else {
            current_block_45 = 9123587656295728619;
        }
        match current_block_45 {
            9123587656295728619 => {
                i.operands = (i.operands).wrapping_add(1);
                i.operands;
                i.reg_operands = (i.reg_operands).wrapping_add(1);
                i.reg_operands;
                (i.tm).set_operands((i.tm).operands() + 1);
                (i.tm).operands();
                i.op[dupl as usize] = i.op[dest as usize];
                i.types[dupl as usize] = i.types[dest as usize];
                i.tm.operand_types[dupl as usize] = i.tm.operand_types[dest as usize];
                i.flags[dupl as usize] = i.flags[dest as usize];
            }
            _ => {}
        }
        if (i.tm.opcode_modifier).immext() != 0 {
            process_immext();
        }
    } else if (i.tm.operand_types[0 as libc::c_int as usize].bitfield).instance()
        as libc::c_int == Accum as libc::c_int
        && (i.tm.operand_types[0 as libc::c_int as usize].bitfield).xmmword()
            as libc::c_int != 0
    {
        let mut j_0: libc::c_uint = 0;
        j_0 = 1 as libc::c_int as libc::c_uint;
        while j_0 < i.operands {
            i
                .op[j_0.wrapping_sub(1 as libc::c_int as libc::c_uint)
                as usize] = i.op[j_0 as usize];
            i
                .types[j_0.wrapping_sub(1 as libc::c_int as libc::c_uint)
                as usize] = i.types[j_0 as usize];
            i
                .tm
                .operand_types[j_0.wrapping_sub(1 as libc::c_int as libc::c_uint)
                as usize] = i.tm.operand_types[j_0 as usize];
            i
                .flags[j_0.wrapping_sub(1 as libc::c_int as libc::c_uint)
                as usize] = i.flags[j_0 as usize];
            j_0 = j_0.wrapping_add(1);
            j_0;
        }
        i.operands = (i.operands).wrapping_sub(1);
        i.operands;
        i.reg_operands = (i.reg_operands).wrapping_sub(1);
        i.reg_operands;
        (i.tm).set_operands((i.tm).operands() - 1);
        (i.tm).operands();
    } else if (i.tm.opcode_modifier).implicitquadgroup() != 0 {
        let mut regnum: libc::c_uint = 0;
        let mut first_reg_in_group: libc::c_uint = 0;
        let mut last_reg_in_group: libc::c_uint = 0;
        if i.operands >= 2 as libc::c_int as libc::c_uint
            && (i.types[1 as libc::c_int as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7846 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"int process_operands(void)\0"))
                    .as_ptr(),
            );
        };
        regnum = register_number(i.op[1 as libc::c_int as usize].regs);
        first_reg_in_group = regnum & !(3 as libc::c_int) as libc::c_uint;
        last_reg_in_group = first_reg_in_group
            .wrapping_add(3 as libc::c_int as libc::c_uint);
        if regnum != first_reg_in_group {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"source register `%s%s' implicitly denotes `%s%.3s%u' to `%s%.3s%u' source group in `%s'\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                register_prefix,
                (*i.op[1 as libc::c_int as usize].regs).reg_name,
                register_prefix,
                (*i.op[1 as libc::c_int as usize].regs).reg_name,
                first_reg_in_group,
                register_prefix,
                (*i.op[1 as libc::c_int as usize].regs).reg_name,
                last_reg_in_group,
                i.tm.name,
            );
        }
    } else if (i.tm.opcode_modifier).regkludge() != 0 {
        let mut first_reg_op: libc::c_uint = 0;
        if operand_type_check(i.types[0 as libc::c_int as usize], reg) != 0 {
            first_reg_op = 0 as libc::c_int as libc::c_uint;
        } else {
            first_reg_op = 1 as libc::c_int as libc::c_uint;
        }
        if i.reg_operands == 1 as libc::c_int as libc::c_uint
            && (i
                .op[first_reg_op.wrapping_add(1 as libc::c_int as libc::c_uint) as usize]
                .regs)
                .is_null()
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7872 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"int process_operands(void)\0"))
                    .as_ptr(),
            );
        };
        i
            .op[first_reg_op.wrapping_add(1 as libc::c_int as libc::c_uint) as usize]
            .regs = i.op[first_reg_op as usize].regs;
        i
            .types[first_reg_op.wrapping_add(1 as libc::c_int as libc::c_uint)
            as usize] = i.types[first_reg_op as usize];
        i.operands = (i.operands).wrapping_add(1);
        i.operands;
        i.reg_operands = (i.reg_operands).wrapping_add(1);
        i.reg_operands;
    }
    if (i.tm.opcode_modifier).modrm() != 0 {
        default_seg = build_modrm_byte();
    } else if (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
        == SReg as libc::c_int
    {
        if if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint {
            ((i.tm).base_opcode() as libc::c_int == 0x7 as libc::c_int
                && (*i.op[0 as libc::c_int as usize].regs).reg_num as libc::c_int
                    == 1 as libc::c_int) as libc::c_int
        } else {
            ((i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                == 0xfa1 as libc::c_int & 0xff as libc::c_int
                && ((*i.op[0 as libc::c_int as usize].regs).reg_num as libc::c_int)
                    < 4 as libc::c_int) as libc::c_int
        } != 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"you can't `%s %s%s'\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
                register_prefix,
                (*i.op[0 as libc::c_int as usize].regs).reg_name,
            );
            return 0 as libc::c_int;
        }
        if (*i.op[0 as libc::c_int as usize].regs).reg_num as libc::c_int
            > 3 as libc::c_int
            && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        {
            (i.tm)
                .set_base_opcode(
                    (i.tm).base_opcode()
                        ^ ((0x7 as libc::c_int ^ 0xfa1 as libc::c_int)
                            & 0xff as libc::c_int) as libc::c_uint,
                );
            (i.tm.opcode_modifier).set_opcodespace(1 as libc::c_int as libc::c_uint);
        }
        (i.tm)
            .set_base_opcode(
                (i.tm).base_opcode()
                    | (((*i.op[0 as libc::c_int as usize].regs).reg_num as libc::c_int)
                        << 3 as libc::c_int) as libc::c_uint,
            );
    } else if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && (i.tm).base_opcode() as libc::c_int & !(3 as libc::c_int)
            == 0xa0 as libc::c_int
    {
        default_seg = reg_ds;
    } else if (i.tm.opcode_modifier).isstring() != 0 {
        default_seg = reg_ds;
    } else if i.short_form {
        let mut op: libc::c_uint = ((i
            .tm
            .operand_types[0 as libc::c_int as usize]
            .bitfield)
            .class() as libc::c_int != Reg as libc::c_int) as libc::c_int
            as libc::c_uint;
        (i.tm)
            .set_base_opcode(
                (i.tm).base_opcode()
                    | (*i.op[op as usize].regs).reg_num as libc::c_int as libc::c_uint,
            );
        if (*i.op[op as usize].regs).reg_flags as libc::c_int & 0x1 as libc::c_int
            != 0 as libc::c_int
        {
            i.rex |= 1 as libc::c_int;
        }
        if quiet_warnings == 0 && (i.tm.opcode_modifier).ugh() as libc::c_int != 0 {
            if i.operands == 2 as libc::c_int as libc::c_uint {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"translating to `%s %s%s,%s%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                    register_prefix,
                    (*i.op[(intel_syntax == 0) as libc::c_int as usize].regs).reg_name,
                    register_prefix,
                    (*i.op[intel_syntax as usize].regs).reg_name,
                );
            } else {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"translating to `%s %s%s'\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                    register_prefix,
                    (*i.op[0 as libc::c_int as usize].regs).reg_name,
                );
            }
        }
    }
    if (!(i.seg[0 as libc::c_int as usize]).is_null()
        || i.prefix[1 as libc::c_int as usize] as libc::c_int != 0)
        && (i.tm).base_opcode() as libc::c_int == 0x8d as libc::c_int
        && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && !is_any_vex_encoding(&mut i.tm)
    {
        if quiet_warnings == 0 {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"segment override on `%s' is ineffectual\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
            );
        }
        if optimize != 0 {
            i.seg[0 as libc::c_int as usize] = 0 as *const reg_entry;
            i.prefix[1 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        }
    }
    if !(i.seg[0 as libc::c_int as usize]).is_null()
        && i.seg[0 as libc::c_int as usize] != default_seg
        && i386_seg_prefixes[(*i.seg[0 as libc::c_int as usize]).reg_num as usize]
            as libc::c_int != i.prefix[1 as libc::c_int as usize] as libc::c_int
    {
        if add_prefix(
            i386_seg_prefixes[(*i.seg[0 as libc::c_int as usize]).reg_num as usize]
                as libc::c_uint,
        ) as u64 == 0
        {
            return 0 as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn build_modrm_byte() -> *const reg_entry {
    let mut default_seg: *const reg_entry = 0 as *const reg_entry;
    let mut source: libc::c_uint = 0;
    let mut dest: libc::c_uint = 0;
    let mut vex_3_sources: libc::c_int = 0;
    vex_3_sources = ((i.tm.opcode_modifier).vexsources() as libc::c_int
        == 2 as libc::c_int) as libc::c_int;
    if vex_3_sources != 0 {
        let mut nds: libc::c_uint = 0;
        let mut reg_slot: libc::c_uint = 0;
        let mut exp: *mut expressionS = 0 as *mut expressionS;
        dest = (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint);
        nds = dest.wrapping_sub(1 as libc::c_int as libc::c_uint);
        if (i.reg_operands == 4 as libc::c_int as libc::c_uint
            || i.reg_operands == 3 as libc::c_int as libc::c_uint
                && i.mem_operands == 1 as libc::c_int as libc::c_uint)
            && (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 1 as libc::c_int
            && (i.tm.opcode_modifier).vexw() as libc::c_int != 0
            && (i.tm.operand_types[dest as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                8023 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 40],
                    &[libc::c_char; 40],
                >(b"const reg_entry *build_modrm_byte(void)\0"))
                    .as_ptr(),
            );
        };
        if (i.tm.opcode_modifier).vexw() as libc::c_int == 2 as libc::c_int {
            source = i.imm_operands;
            reg_slot = (i.imm_operands).wrapping_add(1 as libc::c_int as libc::c_uint);
        } else {
            source = (i.imm_operands).wrapping_add(1 as libc::c_int as libc::c_uint);
            reg_slot = i.imm_operands;
        }
        if i.imm_operands == 0 as libc::c_int as libc::c_uint {
            let fresh15 = i.imm_operands;
            i.imm_operands = (i.imm_operands).wrapping_add(1);
            exp = &mut *im_expressions.as_mut_ptr().offset(fresh15 as isize)
                as *mut expressionS;
            i.op[i.operands as usize].imms = exp;
            i.types[i.operands as usize] = imm8;
            i.operands = (i.operands).wrapping_add(1);
            i.operands;
            if (i.tm.operand_types[reg_slot as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8047 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            (*exp).set_X_op(O_constant);
            (*exp)
                .X_add_number = (register_number(i.op[reg_slot as usize].regs)
                << 4 as libc::c_int) as offsetT;
            if (*i.op[reg_slot as usize].regs).reg_flags as libc::c_int
                & 0x4 as libc::c_int == 0 as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8050 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
        } else {
            if i.imm_operands == 1 as libc::c_int as libc::c_uint {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8054 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            if fits_in_imm4((*i.op[0 as libc::c_int as usize].imms).X_add_number) != 0
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8055 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            if (i.tm.opcode_modifier).immext() == 0 {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8056 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            (i.types[0 as libc::c_int as usize].bitfield)
                .set_imm8(1 as libc::c_int as libc::c_uint);
            if (i.tm.operand_types[reg_slot as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8061 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            (*i.op[0 as libc::c_int as usize].imms).X_add_number
                |= (register_number(i.op[reg_slot as usize].regs) << 4 as libc::c_int)
                    as libc::c_long;
            if (*i.op[reg_slot as usize].regs).reg_flags as libc::c_int
                & 0x4 as libc::c_int == 0 as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8064 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
        }
        if (i.tm.operand_types[nds as usize].bitfield).class() as libc::c_int
            == RegSIMD as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                8067 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 40],
                    &[libc::c_char; 40],
                >(b"const reg_entry *build_modrm_byte(void)\0"))
                    .as_ptr(),
            );
        };
        i.vex.register_specifier = i.op[nds as usize].regs;
    } else {
        dest = 0 as libc::c_int as libc::c_uint;
        source = dest;
    }
    if i.mem_operands == 0 as libc::c_int as libc::c_uint
        && (i.reg_operands == 2 as libc::c_int as libc::c_uint
            && (i.tm.opcode_modifier).vexvvvv() as libc::c_int <= 1 as libc::c_int
            || i.reg_operands == 3 as libc::c_int as libc::c_uint
                && (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 1 as libc::c_int
            || i.reg_operands == 4 as libc::c_int as libc::c_uint && vex_3_sources != 0)
    {
        match i.operands {
            2 => {
                source = 0 as libc::c_int as libc::c_uint;
            }
            3 => {
                if i.imm_operands == 1 as libc::c_int as libc::c_uint
                    || i.imm_operands == 0 as libc::c_int as libc::c_uint
                        && ((i.tm.opcode_modifier).vexvvvv() as libc::c_int
                            == 1 as libc::c_int
                            || (i.types[0 as libc::c_int as usize].bitfield).instance()
                                as libc::c_int == RegC as libc::c_int
                                && (i.types[0 as libc::c_int as usize].bitfield).byte()
                                    as libc::c_int != 0)
                {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8100 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                if operand_type_check(i.types[0 as libc::c_int as usize], imm) != 0
                    || (i.types[0 as libc::c_int as usize].bitfield).instance()
                        as libc::c_int == RegC as libc::c_int
                        && (i.types[0 as libc::c_int as usize].bitfield).byte()
                            as libc::c_int != 0
                {
                    source = 1 as libc::c_int as libc::c_uint;
                } else {
                    source = 0 as libc::c_int as libc::c_uint;
                }
            }
            4 => {
                if i.imm_operands == 2 as libc::c_int as libc::c_uint
                    && (i.types[0 as libc::c_int as usize].bitfield).imm8()
                        as libc::c_int != 0
                    && (i.types[1 as libc::c_int as usize].bitfield).imm8()
                        as libc::c_int != 0
                    || (i.tm.opcode_modifier).vexvvvv() as libc::c_int
                        == 1 as libc::c_int
                        && i.imm_operands == 1 as libc::c_int as libc::c_uint
                        && ((i.types[0 as libc::c_int as usize].bitfield).imm8()
                            as libc::c_int != 0
                            || (i
                                .types[(i.operands)
                                    .wrapping_sub(1 as libc::c_int as libc::c_uint) as usize]
                                .bitfield)
                                .imm8() as libc::c_int != 0
                            || i.rounding.type_0 as libc::c_int
                                != rc_none as libc::c_int)
                {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8123 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                if i.imm_operands == 2 as libc::c_int as libc::c_uint {
                    source = 2 as libc::c_int as libc::c_uint;
                } else if (i.types[0 as libc::c_int as usize].bitfield).imm8() != 0 {
                    source = 1 as libc::c_int as libc::c_uint;
                } else {
                    source = 0 as libc::c_int as libc::c_uint;
                }
            }
            5 => {
                if is_evex_encoding(&mut i.tm) {
                    if i.imm_operands == 2 as libc::c_int as libc::c_uint
                        && (i.tm.opcode_modifier).sae() as libc::c_int != 0
                        && operand_type_check(i.types[0 as libc::c_int as usize], imm)
                            != 0
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8144 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                    if operand_type_check(i.types[1 as libc::c_int as usize], imm) != 0 {
                        source = 2 as libc::c_int as libc::c_uint;
                    } else if operand_type_check(i.types[4 as libc::c_int as usize], imm)
                        != 0
                    {
                        source = 1 as libc::c_int as libc::c_uint;
                    } else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8150 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    }
                }
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8154 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            }
        }
        if vex_3_sources == 0 {
            dest = source.wrapping_add(1 as libc::c_int as libc::c_uint);
            if i.rounding.type_0 as libc::c_int != rc_none as libc::c_int
                && i.rounding.operand == dest
            {
                dest = dest.wrapping_add(1);
                dest;
            }
            if (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 1 as libc::c_int {
                let mut op: i386_operand_type = i386_operand_type {
                    bitfield: C2RustUnnamed_33 {
                        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                    },
                };
                let mut vvvv: libc::c_uint = 0;
                if (i.tm.opcode_modifier).swapsources() != 0 {
                    vvvv = source;
                    source = dest;
                } else {
                    vvvv = dest;
                }
                op = i.tm.operand_types[vvvv as usize];
                if dest.wrapping_add(1 as libc::c_int as libc::c_uint) >= i.operands
                    || ((op.bitfield).class() as libc::c_int != Reg as libc::c_int
                        || (op.bitfield).dword() == 0 && (op.bitfield).qword() == 0)
                        && (op.bitfield).class() as libc::c_int != RegSIMD as libc::c_int
                        && operand_type_equal(&mut op, &regmask) == 0
                {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8191 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                }
                i.vex.register_specifier = i.op[vvvv as usize].regs;
                dest = dest.wrapping_add(1);
                dest;
            }
        }
        i.rm.mode = 3 as libc::c_int as libc::c_uint;
        if (i.tm.opcode_modifier).regmem() == 0
            && operand_type_check(i.tm.operand_types[dest as usize], anymem)
                == 0 as libc::c_int
        {
            i.rm.reg = (*i.op[dest as usize].regs).reg_num as libc::c_uint;
            i.rm.regmem = (*i.op[source as usize].regs).reg_num as libc::c_uint;
            set_rex_vrex(
                i.op[dest as usize].regs,
                4 as libc::c_int as libc::c_uint,
                (i.tm.opcode_modifier).sse2avx() != 0,
            );
            set_rex_vrex(
                i.op[source as usize].regs,
                1 as libc::c_int as libc::c_uint,
                0 as libc::c_int != 0,
            );
        } else {
            i.rm.reg = (*i.op[source as usize].regs).reg_num as libc::c_uint;
            i.rm.regmem = (*i.op[dest as usize].regs).reg_num as libc::c_uint;
            set_rex_vrex(
                i.op[dest as usize].regs,
                1 as libc::c_int as libc::c_uint,
                (i.tm.opcode_modifier).sse2avx() != 0,
            );
            set_rex_vrex(
                i.op[source as usize].regs,
                4 as libc::c_int as libc::c_uint,
                0 as libc::c_int != 0,
            );
        }
        if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
            && i.rex & 4 as libc::c_int != 0
        {
            if (i
                .types[((i.tm.opcode_modifier).regmem() == 0) as libc::c_int as usize]
                .bitfield)
                .class() as libc::c_int != RegCR as libc::c_int
            {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8222 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            }
            i.rex &= !(4 as libc::c_int);
            add_prefix(0xf0 as libc::c_int as libc::c_uint);
        }
    } else {
        let mut mem: libc::c_uint = 0;
        if i.mem_operands != 0 {
            let mut fake_zero_displacement: libc::c_uint = 0 as libc::c_int
                as libc::c_uint;
            let mut op_0: libc::c_uint = 0;
            op_0 = 0 as libc::c_int as libc::c_uint;
            while op_0 < i.operands {
                if i.flags[op_0 as usize] & 2 as libc::c_int as libc::c_uint != 0 {
                    break;
                }
                op_0 = op_0.wrapping_add(1);
                op_0;
            }
            if op_0 < i.operands {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    8239 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 40],
                        &[libc::c_char; 40],
                    >(b"const reg_entry *build_modrm_byte(void)\0"))
                        .as_ptr(),
                );
            };
            if (i.tm.opcode_modifier).sib() != 0 {
                if (i.tm.opcode_modifier).sib() as libc::c_int != 4 as libc::c_int
                    && (*i.index_reg).reg_num as libc::c_int
                        == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                            - 1 as libc::c_int
                {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8246 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                }
                i.rm.regmem = 4 as libc::c_int as libc::c_uint;
                if (i.base_reg).is_null() {
                    i.sib.base = 5 as libc::c_int as libc::c_uint;
                    i.sib.scale = i.log2_scale_factor;
                    i
                        .types[op_0
                        as usize] = operand_type_and_not(
                        i.types[op_0 as usize],
                        anydisp,
                    );
                    if want_disp32(&mut i.tm) {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32s(1 as libc::c_int as libc::c_uint);
                    }
                }
                if !(i.index_reg).is_null() {
                    if (*i.index_reg).reg_num as libc::c_int
                        == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                            - 1 as libc::c_int
                    {
                        i.sib.index = 4 as libc::c_int as libc::c_uint;
                    } else {
                        i.sib.index = (*i.index_reg).reg_num as libc::c_uint;
                    }
                    set_rex_vrex(
                        i.index_reg,
                        2 as libc::c_int as libc::c_uint,
                        0 as libc::c_int != 0,
                    );
                }
            }
            default_seg = reg_ds;
            if (i.base_reg).is_null() {
                i.rm.mode = 0 as libc::c_int as libc::c_uint;
                if i.disp_operands == 0 {
                    fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                }
                if (i.index_reg).is_null() {
                    if (i.tm.opcode_modifier).sib() == 0
                        || (i.tm.opcode_modifier).sib() as libc::c_int
                            == 4 as libc::c_int
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8285 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                    i
                        .types[op_0
                        as usize] = operand_type_and_not(
                        i.types[op_0 as usize],
                        anydisp,
                    );
                    if flag_code as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                    {
                        i.rm.regmem = 4 as libc::c_int as libc::c_uint;
                        i.sib.base = 5 as libc::c_int as libc::c_uint;
                        i.sib.index = 4 as libc::c_int as libc::c_uint;
                        if want_disp32(&mut i.tm) {
                            (i.types[op_0 as usize].bitfield)
                                .set_disp32(1 as libc::c_int as libc::c_uint);
                        } else {
                            (i.types[op_0 as usize].bitfield)
                                .set_disp32s(1 as libc::c_int as libc::c_uint);
                        }
                    } else if (flag_code as libc::c_uint
                        == CODE_16BIT as libc::c_int as libc::c_uint) as libc::c_int
                        ^ (i.prefix[2 as libc::c_int as usize] as libc::c_int
                            != 0 as libc::c_int) as libc::c_int != 0
                    {
                        i.rm.regmem = 6 as libc::c_int as libc::c_uint;
                        (i.types[op_0 as usize].bitfield)
                            .set_disp16(1 as libc::c_int as libc::c_uint);
                    } else {
                        i.rm.regmem = 5 as libc::c_int as libc::c_uint;
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(1 as libc::c_int as libc::c_uint);
                    }
                } else if (i.tm.opcode_modifier).sib() == 0 {
                    if (*i.index_reg).reg_num as libc::c_int
                        == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                            - 1 as libc::c_int
                    {
                        i.sib.index = 4 as libc::c_int as libc::c_uint;
                    } else {
                        i.sib.index = (*i.index_reg).reg_num as libc::c_uint;
                    }
                    i.sib.base = 5 as libc::c_int as libc::c_uint;
                    i.sib.scale = i.log2_scale_factor;
                    i.rm.regmem = 4 as libc::c_int as libc::c_uint;
                    i
                        .types[op_0
                        as usize] = operand_type_and_not(
                        i.types[op_0 as usize],
                        anydisp,
                    );
                    if want_disp32(&mut i.tm) {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32s(1 as libc::c_int as libc::c_uint);
                    }
                    if (*i.index_reg).reg_flags as libc::c_int & 0x1 as libc::c_int
                        != 0 as libc::c_int
                    {
                        i.rex |= 2 as libc::c_int;
                    }
                }
            } else if (*i.base_reg).reg_num as libc::c_int
                == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
            {
                if (i.tm.opcode_modifier).sib() == 0 {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8336 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                i.rm.regmem = 5 as libc::c_int as libc::c_uint;
                (i.types[op_0 as usize].bitfield)
                    .set_disp8(0 as libc::c_int as libc::c_uint);
                (i.types[op_0 as usize].bitfield)
                    .set_disp16(0 as libc::c_int as libc::c_uint);
                (i.types[op_0 as usize].bitfield)
                    .set_disp32(0 as libc::c_int as libc::c_uint);
                (i.types[op_0 as usize].bitfield)
                    .set_disp32s(1 as libc::c_int as libc::c_uint);
                (i.types[op_0 as usize].bitfield)
                    .set_disp64(0 as libc::c_int as libc::c_uint);
                i.flags[op_0 as usize] |= 1 as libc::c_int as libc::c_uint;
                if i.disp_operands == 0 {
                    fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                }
            } else if ((*i.base_reg).reg_type.bitfield).word() != 0 {
                if (i.tm.opcode_modifier).sib() == 0 {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8349 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                match (*i.base_reg).reg_num as libc::c_int {
                    3 => {
                        if (i.index_reg).is_null() {
                            i.rm.regmem = 7 as libc::c_int as libc::c_uint;
                        } else {
                            i
                                .rm
                                .regmem = ((*i.index_reg).reg_num as libc::c_int
                                - 6 as libc::c_int) as libc::c_uint;
                        }
                    }
                    5 => {
                        default_seg = reg_ss;
                        if (i.index_reg).is_null() {
                            i.rm.regmem = 6 as libc::c_int as libc::c_uint;
                            if operand_type_check(i.types[op_0 as usize], disp)
                                == 0 as libc::c_int
                            {
                                if i.disp_encoding as libc::c_uint
                                    == disp_encoding_16bit as libc::c_int as libc::c_uint
                                {
                                    (i.types[op_0 as usize].bitfield)
                                        .set_disp16(1 as libc::c_int as libc::c_uint);
                                } else {
                                    (i.types[op_0 as usize].bitfield)
                                        .set_disp8(1 as libc::c_int as libc::c_uint);
                                }
                                fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                            }
                        } else {
                            i
                                .rm
                                .regmem = ((*i.index_reg).reg_num as libc::c_int
                                - 6 as libc::c_int + 2 as libc::c_int) as libc::c_uint;
                        }
                    }
                    _ => {
                        i
                            .rm
                            .regmem = ((*i.base_reg).reg_num as libc::c_int
                            - 6 as libc::c_int + 4 as libc::c_int) as libc::c_uint;
                    }
                }
                if fake_zero_displacement == 0 && i.disp_operands == 0
                    && i.disp_encoding as libc::c_uint != 0
                {
                    fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                    if i.disp_encoding as libc::c_uint
                        == disp_encoding_8bit as libc::c_int as libc::c_uint
                    {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp8(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp16(1 as libc::c_int as libc::c_uint);
                    }
                }
                i.rm.mode = mode_from_disp_size(i.types[op_0 as usize]);
            } else {
                if operand_type_check(i.types[op_0 as usize], disp) != 0 {
                    (i.types[op_0 as usize].bitfield)
                        .set_disp16(0 as libc::c_int as libc::c_uint);
                    (i.types[op_0 as usize].bitfield)
                        .set_disp64(0 as libc::c_int as libc::c_uint);
                    if !want_disp32(&mut i.tm) {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(0 as libc::c_int as libc::c_uint);
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32s(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(1 as libc::c_int as libc::c_uint);
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32s(0 as libc::c_int as libc::c_uint);
                    }
                }
                if (i.tm.opcode_modifier).sib() == 0 {
                    i.rm.regmem = (*i.base_reg).reg_num as libc::c_uint;
                }
                if (*i.base_reg).reg_flags as libc::c_int & 0x1 as libc::c_int
                    != 0 as libc::c_int
                {
                    i.rex |= 1 as libc::c_int;
                }
                i.sib.base = (*i.base_reg).reg_num as libc::c_uint;
                if (*i.base_reg).reg_flags as libc::c_int & 0x1 as libc::c_int == 0
                    && ((*i.base_reg).reg_num as libc::c_int == 5 as libc::c_int
                        || (*i.base_reg).reg_num as libc::c_int == 4 as libc::c_int)
                {
                    default_seg = reg_ss;
                }
                if (*i.base_reg).reg_num as libc::c_int == 5 as libc::c_int
                    && i.disp_operands == 0 as libc::c_int as libc::c_uint
                {
                    fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                    if i.disp_encoding as libc::c_uint
                        == disp_encoding_32bit as libc::c_int as libc::c_uint
                    {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp32(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.types[op_0 as usize].bitfield)
                            .set_disp8(1 as libc::c_int as libc::c_uint);
                    }
                }
                i.sib.scale = i.log2_scale_factor;
                if (i.index_reg).is_null() {
                    if (i.tm.opcode_modifier).sib() as libc::c_int != 1 as libc::c_int
                        && (i.tm.opcode_modifier).sib() as libc::c_int
                            != 2 as libc::c_int
                        && (i.tm.opcode_modifier).sib() as libc::c_int
                            != 3 as libc::c_int
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8434 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                    i.sib.index = 4 as libc::c_int as libc::c_uint;
                } else if (i.tm.opcode_modifier).sib() == 0 {
                    if (*i.index_reg).reg_num as libc::c_int
                        == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                            - 1 as libc::c_int
                    {
                        i.sib.index = 4 as libc::c_int as libc::c_uint;
                    } else {
                        i.sib.index = (*i.index_reg).reg_num as libc::c_uint;
                    }
                    i.rm.regmem = 4 as libc::c_int as libc::c_uint;
                    if (*i.index_reg).reg_flags as libc::c_int & 0x1 as libc::c_int
                        != 0 as libc::c_int
                    {
                        i.rex |= 2 as libc::c_int;
                    }
                }
                if i.disp_operands != 0
                    && (i.reloc[op_0 as usize] as libc::c_uint
                        == BFD_RELOC_386_TLS_DESC_CALL as libc::c_int as libc::c_uint
                        || i.reloc[op_0 as usize] as libc::c_uint
                            == BFD_RELOC_X86_64_TLSDESC_CALL as libc::c_int
                                as libc::c_uint)
                {
                    i.rm.mode = 0 as libc::c_int as libc::c_uint;
                } else {
                    if fake_zero_displacement == 0 && i.disp_operands == 0
                        && i.disp_encoding as libc::c_uint != 0
                    {
                        fake_zero_displacement = 1 as libc::c_int as libc::c_uint;
                        if i.disp_encoding as libc::c_uint
                            == disp_encoding_8bit as libc::c_int as libc::c_uint
                        {
                            (i.types[op_0 as usize].bitfield)
                                .set_disp8(1 as libc::c_int as libc::c_uint);
                        } else {
                            (i.types[op_0 as usize].bitfield)
                                .set_disp32(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    i.rm.mode = mode_from_disp_size(i.types[op_0 as usize]);
                }
            }
            if fake_zero_displacement != 0 {
                let mut exp_0: *mut expressionS = 0 as *mut expressionS;
                if (i.op[op_0 as usize].disps).is_null() {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8480 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                let fresh16 = i.disp_operands;
                i.disp_operands = (i.disp_operands).wrapping_add(1);
                exp_0 = &mut *disp_expressions.as_mut_ptr().offset(fresh16 as isize)
                    as *mut expressionS;
                i.op[op_0 as usize].disps = exp_0;
                (*exp_0).set_X_op(O_constant);
                (*exp_0).X_add_number = 0 as libc::c_int as offsetT;
                (*exp_0).X_add_symbol = 0 as *mut symbolS;
                (*exp_0).X_op_symbol = 0 as *mut symbolS;
            }
            mem = op_0;
        } else {
            mem = !(0 as libc::c_int) as libc::c_uint;
        }
        if (i.tm.opcode_modifier).vexsources() as libc::c_int == 1 as libc::c_int {
            if operand_type_check(i.types[0 as libc::c_int as usize], imm) != 0 {
                i.vex.register_specifier = 0 as *const reg_entry;
            } else if (i.tm.opcode_modifier).vexw() as libc::c_int == 1 as libc::c_int {
                i.vex.register_specifier = i.op[0 as libc::c_int as usize].regs;
            } else {
                i.vex.register_specifier = i.op[1 as libc::c_int as usize].regs;
            }
            i.rm.reg = (*i.op[2 as libc::c_int as usize].regs).reg_num as libc::c_uint;
            if (*i.op[2 as libc::c_int as usize].regs).reg_flags as libc::c_int
                & 0x1 as libc::c_int != 0 as libc::c_int
            {
                i.rex |= 4 as libc::c_int;
            }
            if i.mem_operands == 0 {
                i.rm.mode = 3 as libc::c_int as libc::c_uint;
                if (i.tm.opcode_modifier).vexw() as libc::c_int == 1 as libc::c_int {
                    i
                        .rm
                        .regmem = (*i.op[1 as libc::c_int as usize].regs).reg_num
                        as libc::c_uint;
                } else {
                    i
                        .rm
                        .regmem = (*i.op[0 as libc::c_int as usize].regs).reg_num
                        as libc::c_uint;
                }
                if (*i.op[1 as libc::c_int as usize].regs).reg_flags as libc::c_int
                    & 0x1 as libc::c_int != 0 as libc::c_int
                {
                    i.rex |= 1 as libc::c_int;
                }
            }
        } else if (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 3 as libc::c_int {
            i.vex.register_specifier = i.op[2 as libc::c_int as usize].regs;
            if i.mem_operands == 0 {
                i.rm.mode = 3 as libc::c_int as libc::c_uint;
                i
                    .rm
                    .regmem = (*i.op[1 as libc::c_int as usize].regs).reg_num
                    as libc::c_uint;
                if (*i.op[1 as libc::c_int as usize].regs).reg_flags as libc::c_int
                    & 0x1 as libc::c_int != 0 as libc::c_int
                {
                    i.rex |= 1 as libc::c_int;
                }
            }
        } else if i.reg_operands != 0 {
            let mut op_1: libc::c_uint = 0;
            let mut vex_reg: libc::c_uint = !(0 as libc::c_int) as libc::c_uint;
            op_1 = 0 as libc::c_int as libc::c_uint;
            while op_1 < i.operands {
                if (i.types[op_1 as usize].bitfield).class() as libc::c_int
                    == Reg as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegBND as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegMask as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == SReg as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegCR as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegDR as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegTR as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                    || (i.types[op_1 as usize].bitfield).class() as libc::c_int
                        == RegMMX as libc::c_int
                {
                    break;
                }
                op_1 = op_1.wrapping_add(1);
                op_1;
            }
            if vex_3_sources != 0 {
                op_1 = dest;
            } else if (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 1 as libc::c_int
            {
                if mem != !(0 as libc::c_int) as libc::c_uint {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8566 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
                if op_1 > mem {
                    let fresh17 = op_1;
                    op_1 = op_1.wrapping_add(1);
                    vex_reg = fresh17;
                    if op_1 < i.operands {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8571 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                } else if (i.tm.operand_types[op_1 as usize].bitfield).baseindex() == 0
                    && (i
                        .tm
                        .operand_types[op_1
                            .wrapping_add(1 as libc::c_int as libc::c_uint) as usize]
                        .bitfield)
                        .baseindex() as libc::c_int != 0
                {
                    vex_reg = op_1;
                    op_1 = op_1.wrapping_add(2 as libc::c_int as libc::c_uint);
                    if mem == vex_reg.wrapping_add(1 as libc::c_int as libc::c_uint)
                        && op_1 < i.operands
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8583 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                } else {
                    vex_reg = op_1.wrapping_add(1 as libc::c_int as libc::c_uint);
                    if vex_reg < i.operands {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8588 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                }
            } else if (i.tm.opcode_modifier).vexvvvv() as libc::c_int == 2 as libc::c_int
            {
                if i.mem_operands == 0 as libc::c_int as libc::c_uint {
                    if op_1.wrapping_add(2 as libc::c_int as libc::c_uint) == i.operands
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8599 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                    vex_reg = op_1.wrapping_add(1 as libc::c_int as libc::c_uint);
                } else {
                    if op_1
                        < (i.imm_operands).wrapping_add(2 as libc::c_int as libc::c_uint)
                        && i.operands
                            == (i.imm_operands)
                                .wrapping_add(2 as libc::c_int as libc::c_uint)
                    {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            8606 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 40],
                                &[libc::c_char; 40],
                            >(b"const reg_entry *build_modrm_byte(void)\0"))
                                .as_ptr(),
                        );
                    };
                    vex_reg = (i.imm_operands)
                        .wrapping_add(1 as libc::c_int as libc::c_uint);
                }
            } else {
                if op_1 < i.operands {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8611 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                };
            }
            if vex_reg != !(0 as libc::c_int) as libc::c_uint {
                let mut type_0: *mut i386_operand_type = &mut *(i.tm.operand_types)
                    .as_mut_ptr()
                    .offset(vex_reg as isize) as *mut i386_operand_type;
                if (((*type_0).bitfield).class() as libc::c_int != Reg as libc::c_int
                    || ((*type_0).bitfield).dword() == 0
                        && ((*type_0).bitfield).qword() == 0)
                    && ((*type_0).bitfield).class() as libc::c_int
                        != RegSIMD as libc::c_int
                    && operand_type_equal(type_0, &regmask) == 0
                {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        8621 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 40],
                            &[libc::c_char; 40],
                        >(b"const reg_entry *build_modrm_byte(void)\0"))
                            .as_ptr(),
                    );
                }
                i.vex.register_specifier = i.op[vex_reg as usize].regs;
            }
            if vex_reg != op_1 {
                if (i.tm).extension_opcode() != -(1 as libc::c_int) {
                    i.rm.regmem = (*i.op[op_1 as usize].regs).reg_num as libc::c_uint;
                    set_rex_vrex(
                        i.op[op_1 as usize].regs,
                        1 as libc::c_int as libc::c_uint,
                        (i.tm.opcode_modifier).sse2avx() != 0,
                    );
                } else {
                    i.rm.reg = (*i.op[op_1 as usize].regs).reg_num as libc::c_uint;
                    set_rex_vrex(
                        i.op[op_1 as usize].regs,
                        4 as libc::c_int as libc::c_uint,
                        (i.tm.opcode_modifier).sse2avx() != 0,
                    );
                }
            }
            if i.mem_operands == 0 {
                i.rm.mode = 3 as libc::c_int as libc::c_uint;
            }
        }
        if (i.tm).extension_opcode() != -(1 as libc::c_int) {
            i.rm.reg = (i.tm).extension_opcode() as libc::c_uint;
        }
    }
    return default_seg;
}
unsafe extern "C" fn output_insn() {
    let mut insn_start_frag: *mut fragS = 0 as *mut fragS;
    let mut insn_start_off: offsetT = 0;
    let mut fragP: *mut fragS = 0 as *mut fragS;
    let mut branch: align_branch_kind = align_branch_none;
    let mut mf_jcc: mf_jcc_kind = mf_jcc_jo;
    if 1 as libc::c_int != 0 && x86_used_note != 0
        && now_seg
            != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection
    {
        if i.xstate as libc::c_uint & xstate_tmm as libc::c_int as libc::c_uint
            == xstate_tmm as libc::c_int as libc::c_uint
            || (i.tm.cpu_flags.bitfield).cpuamx_tile() as libc::c_int != 0
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 10 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpu8087() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpu287() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpu387() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpu687() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpufisttp() as libc::c_int != 0
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 1 as libc::c_int;
        }
        if i.xstate as libc::c_uint & xstate_mmx as libc::c_int as libc::c_uint != 0
            || (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
                && !is_any_vex_encoding(&mut i.tm)
                && ((i.tm).base_opcode() as libc::c_int == 0x77 as libc::c_int
                    || (i.tm).base_opcode() as libc::c_int == 0xe as libc::c_int)
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 2 as libc::c_int;
        }
        if !(i.index_reg).is_null() {
            if ((*i.index_reg).reg_type.bitfield).zmmword() != 0 {
                i
                    .xstate = ::core::mem::transmute::<
                    libc::c_uint,
                    C2RustUnnamed_38,
                >(i.xstate as libc::c_uint | xstate_zmm as libc::c_int as libc::c_uint);
            } else if ((*i.index_reg).reg_type.bitfield).ymmword() != 0 {
                i
                    .xstate = ::core::mem::transmute::<
                    libc::c_uint,
                    C2RustUnnamed_38,
                >(i.xstate as libc::c_uint | xstate_ymm as libc::c_int as libc::c_uint);
            } else if ((*i.index_reg).reg_type.bitfield).xmmword() != 0 {
                i
                    .xstate = ::core::mem::transmute::<
                    libc::c_uint,
                    C2RustUnnamed_38,
                >(i.xstate as libc::c_uint | xstate_xmm as libc::c_int as libc::c_uint);
            }
        }
        if (i.tm).base_opcode() as libc::c_int == 0x77 as libc::c_int
            && (i.tm.cpu_flags.bitfield).cpuavx() as libc::c_int != 0
        {
            i
                .xstate = ::core::mem::transmute::<
                libc::c_uint,
                C2RustUnnamed_38,
            >(i.xstate as libc::c_uint | xstate_ymm as libc::c_int as libc::c_uint);
        }
        if i.xstate as libc::c_uint & xstate_xmm as libc::c_int as libc::c_uint != 0
            || (i.tm).base_opcode() as libc::c_int == 0xae as libc::c_int
                && ((i.tm.cpu_flags.bitfield).cpusse() as libc::c_int != 0
                    || (i.tm.cpu_flags.bitfield).cpuavx() as libc::c_int != 0)
            || (i.tm.cpu_flags.bitfield).cpuwidekl() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpukl() as libc::c_int != 0
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 3 as libc::c_int;
        }
        if i.xstate as libc::c_uint & xstate_ymm as libc::c_int as libc::c_uint
            == xstate_ymm as libc::c_int as libc::c_uint
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 4 as libc::c_int;
        }
        if i.xstate as libc::c_uint & xstate_zmm as libc::c_int as libc::c_uint
            == xstate_zmm as libc::c_int as libc::c_uint
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 5 as libc::c_int;
        }
        if !(i.mask.reg).is_null()
            || i.xstate as libc::c_uint & xstate_mask as libc::c_int as libc::c_uint
                == xstate_mask as libc::c_int as libc::c_uint
        {
            x86_feature_2_used |= (1 as libc::c_uint) << 11 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpufxsr() != 0 {
            x86_feature_2_used |= (1 as libc::c_uint) << 6 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpuxsave() != 0 {
            x86_feature_2_used |= (1 as libc::c_uint) << 7 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpuxsaveopt() != 0 {
            x86_feature_2_used |= (1 as libc::c_uint) << 8 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpuxsavec() != 0 {
            x86_feature_2_used |= (1 as libc::c_uint) << 9 as libc::c_int;
        }
        if x86_feature_2_used != 0
            || (i.tm.cpu_flags.bitfield).cpucmov() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusyscall() as libc::c_int != 0
            || (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
                && (i.tm).base_opcode() as libc::c_int == 0xc7 as libc::c_int
                && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int
                    == 0 as libc::c_int && (i.tm).extension_opcode() == 1 as libc::c_int
        {
            x86_isa_1_used |= (1 as libc::c_uint) << 0 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpusse3() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpussse3() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse4_1() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpusse4_2() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpucx16() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpupopcnt() as libc::c_int != 0
            || flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                && (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                    == 0x9f as libc::c_int
                && (i.tm.opcode_modifier).opcodespace() as libc::c_int
                    == 0 as libc::c_int
        {
            x86_isa_1_used |= (1 as libc::c_uint) << 1 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpuavx() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuavx2() as libc::c_int != 0
            || (i.tm.opcode_modifier).vex() as libc::c_int != 0
                && (i.tm.cpu_flags.bitfield).cpuavx512f() == 0
                && (i.tm.cpu_flags.bitfield).cpuavx512bw() == 0
                && (i.tm.cpu_flags.bitfield).cpuavx512dq() == 0
                && (i.tm.cpu_flags.bitfield).cpulwp() == 0
                && (i.tm.cpu_flags.bitfield).cputbm() == 0
                && x86_feature_2_used & (1 as libc::c_uint) << 10 as libc::c_int == 0
            || (i.tm.cpu_flags.bitfield).cpuf16c() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpufma() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpulzcnt() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpumovbe() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuxsaves() as libc::c_int != 0
            || x86_feature_2_used
                & ((1 as libc::c_uint) << 7 as libc::c_int
                    | (1 as libc::c_uint) << 8 as libc::c_int
                    | (1 as libc::c_uint) << 9 as libc::c_int)
                != 0 as libc::c_int as libc::c_uint
        {
            x86_isa_1_used |= (1 as libc::c_uint) << 2 as libc::c_int;
        }
        if (i.tm.cpu_flags.bitfield).cpuavx512f() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuavx512bw() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuavx512dq() as libc::c_int != 0
            || (i.tm.cpu_flags.bitfield).cpuavx512vl() as libc::c_int != 0
            || (i.tm.opcode_modifier).evex() as libc::c_int != 0
                && (i.tm.cpu_flags.bitfield).cpuavx512er() == 0
                && (i.tm.cpu_flags.bitfield).cpuavx512pf() == 0
                && (i.tm.cpu_flags.bitfield).cpuavx512_4vnniw() == 0
        {
            x86_isa_1_used |= (1 as libc::c_uint) << 3 as libc::c_int;
        }
    }
    dwarf2_emit_insn(0 as libc::c_int);
    insn_start_frag = frag_now;
    insn_start_off = frag_now_fix() as offsetT;
    if add_branch_padding_frag_p(&mut branch, &mut mf_jcc) != 0 {
        let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut max_branch_padding_size: libc::c_uint = 14 as libc::c_int
            as libc::c_uint;
        record_alignment(now_seg, align_branch_power as libc::c_uint);
        frag_grow(max_branch_padding_size as size_t);
        p = frag_more(0 as libc::c_int as size_t);
        fragP = frag_now;
        frag_var(
            rs_machine_dependent,
            max_branch_padding_size as size_t,
            0 as libc::c_int as size_t,
            ((3 as libc::c_int) << 2 as libc::c_int | 0 as libc::c_int)
                as relax_substateT,
            0 as *mut symbolS,
            0 as libc::c_int as offsetT,
            p,
        );
        ((*fragP).tc_frag_data).set_mf_type(mf_jcc as libc::c_uint);
        ((*fragP).tc_frag_data).set_branch_type(branch as libc::c_uint);
        (*fragP).tc_frag_data.max_bytes = max_branch_padding_size;
    }
    if (i.tm.opcode_modifier).jump() as libc::c_int == 1 as libc::c_int {
        output_branch();
    } else if (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int
        || (i.tm.opcode_modifier).jump() as libc::c_int == 2 as libc::c_int
    {
        output_jump();
    } else if (i.tm.opcode_modifier).jump() as libc::c_int == 4 as libc::c_int {
        output_interseg_jump();
    } else {
        let mut p_0: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut q: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
        let mut j: libc::c_uint = 0;
        let mut mf_cmp: mf_cmp_kind = mf_cmp_test_and;
        if avoid_fence != 0
            && ((i.tm).base_opcode() as libc::c_int == 0xaee8 as libc::c_int
                || (i.tm).base_opcode() as libc::c_int == 0xaef0 as libc::c_int
                || (i.tm).base_opcode() as libc::c_int == 0xaef8 as libc::c_int)
        {
            if now_seg
                != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                    as *mut asection
            {
                let mut val: offsetT = 0x240483f0 as libc::c_ulonglong as offsetT;
                p_0 = frag_more(5 as libc::c_int as size_t);
                number_to_chars_littleendian(p_0, val as valueT, 5 as libc::c_int);
            } else {
                abs_section_offset = (abs_section_offset as libc::c_ulong)
                    .wrapping_add(5 as libc::c_int as libc::c_ulong) as addressT
                    as addressT;
            }
            return;
        }
        if omit_lock_prefix != 0 {
            if (i.tm).base_opcode() as libc::c_int == 0xf0 as libc::c_int
                && (i.tm.opcode_modifier).isprefix() as libc::c_int != 0
            {
                return;
            }
            i.prefix[5 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        }
        if !(branch as u64 != 0) {
            if add_fused_jcc_padding_frag_p(&mut mf_cmp) != 0 {
                frag_grow(20 as libc::c_int as size_t);
                p_0 = frag_more(0 as libc::c_int as size_t);
                fragP = frag_now;
                frag_var(
                    rs_machine_dependent,
                    20 as libc::c_int as size_t,
                    0 as libc::c_int as size_t,
                    ((5 as libc::c_int) << 2 as libc::c_int | 0 as libc::c_int)
                        as relax_substateT,
                    0 as *mut symbolS,
                    0 as libc::c_int as offsetT,
                    p_0,
                );
                ((*fragP).tc_frag_data).set_mf_type(mf_cmp as libc::c_uint);
                ((*fragP).tc_frag_data)
                    .set_branch_type(align_branch_fused as libc::c_int as libc::c_uint);
                (*fragP).tc_frag_data.max_bytes = 20 as libc::c_int as libc::c_uint;
            } else if add_branch_prefix_frag_p() != 0 {
                let mut max_prefix_size: libc::c_uint = align_branch_prefix_size;
                frag_grow(max_prefix_size as size_t);
                p_0 = frag_more(0 as libc::c_int as size_t);
                fragP = frag_now;
                frag_var(
                    rs_machine_dependent,
                    max_prefix_size as size_t,
                    0 as libc::c_int as size_t,
                    ((4 as libc::c_int) << 2 as libc::c_int | 0 as libc::c_int)
                        as relax_substateT,
                    0 as *mut symbolS,
                    0 as libc::c_int as offsetT,
                    p_0,
                );
                (*fragP).tc_frag_data.max_bytes = max_prefix_size;
            }
        }
        if (i.tm.opcode_modifier).vex() == 0 && (i.tm.opcode_modifier).evex() == 0 {
            match (i.tm.opcode_modifier).opcodeprefix() as libc::c_int {
                1 => {
                    add_prefix(0x66 as libc::c_int as libc::c_uint);
                }
                3 => {
                    add_prefix(0xf2 as libc::c_int as libc::c_uint);
                }
                2 => {
                    if (i.tm.cpu_flags.bitfield).cpupadlock() == 0
                        || i.prefix[4 as libc::c_int as usize] as libc::c_int
                            != 0xf3 as libc::c_int
                    {
                        add_prefix(0xf3 as libc::c_int as libc::c_uint);
                    }
                }
                0 => {
                    match i.opcode_length as libc::c_int {
                        2 => {}
                        1 => {
                            if !((i.tm.opcode_modifier).isprefix() == 0
                                || (i.tm).base_opcode() as libc::c_int != 0)
                            {
                                as_bad_where(
                                    (*insn_start_frag).fr_file,
                                    (*insn_start_frag).fr_line,
                                    dcgettext(
                                        0 as *const libc::c_char,
                                        b"pseudo prefix without instruction\0" as *const u8
                                            as *const libc::c_char,
                                        5 as libc::c_int,
                                    ),
                                );
                                return;
                            }
                        }
                        _ => {
                            as_abort(
                                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                9636 as libc::c_int,
                                (*::core::mem::transmute::<
                                    &[u8; 23],
                                    &[libc::c_char; 23],
                                >(b"void output_insn(void)\0"))
                                    .as_ptr(),
                            );
                        }
                    }
                }
                _ => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        9640 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 23],
                            &[libc::c_char; 23],
                        >(b"void output_insn(void)\0"))
                            .as_ptr(),
                    );
                }
            }
            if x86_elf_abi as libc::c_uint
                == X86_64_X32_ABI as libc::c_int as libc::c_uint
                && i.operands == 2 as libc::c_int as libc::c_uint
                && (i.reloc[0 as libc::c_int as usize] as libc::c_uint
                    == BFD_RELOC_X86_64_GOTTPOFF as libc::c_int as libc::c_uint
                    || i.reloc[0 as libc::c_int as usize] as libc::c_uint
                        == BFD_RELOC_X86_64_GOTPC32_TLSDESC as libc::c_int
                            as libc::c_uint)
                && i.prefix[6 as libc::c_int as usize] as libc::c_int == 0 as libc::c_int
            {
                add_prefix(0x40 as libc::c_int as libc::c_uint);
            }
            j = (::core::mem::size_of::<[libc::c_uchar; 7]>() as libc::c_ulong)
                .wrapping_div(::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong)
                as libc::c_uint;
            q = (i.prefix).as_mut_ptr();
            while j > 0 as libc::c_int as libc::c_uint {
                if *q != 0 {
                    frag_opcode_byte(*q);
                }
                j = j.wrapping_sub(1);
                j;
                q = q.offset(1);
                q;
            }
        } else {
            j = 0 as libc::c_int as libc::c_uint;
            q = (i.prefix).as_mut_ptr();
            while (j as libc::c_ulong)
                < (::core::mem::size_of::<[libc::c_uchar; 7]>() as libc::c_ulong)
                    .wrapping_div(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    )
            {
                if *q != 0 {
                    match j {
                        1 | 2 => {
                            frag_opcode_byte(*q);
                        }
                        _ => {
                            as_abort(
                                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                9675 as libc::c_int,
                                (*::core::mem::transmute::<
                                    &[u8; 23],
                                    &[libc::c_char; 23],
                                >(b"void output_insn(void)\0"))
                                    .as_ptr(),
                            );
                        }
                    }
                }
                j = j.wrapping_add(1);
                j;
                q = q.offset(1);
                q;
            }
            if i.vrex != 0 {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    9682 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 23],
                        &[libc::c_char; 23],
                    >(b"void output_insn(void)\0"))
                        .as_ptr(),
                );
            }
            if now_seg
                != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                    as *mut asection
            {
                p_0 = frag_more(i.vex.length as size_t);
                j = 0 as libc::c_int as libc::c_uint;
                while j < i.vex.length {
                    *p_0.offset(j as isize) = i.vex.bytes[j as usize] as libc::c_char;
                    j = j.wrapping_add(1);
                    j;
                }
            } else {
                abs_section_offset = (abs_section_offset as libc::c_ulong)
                    .wrapping_add(i.vex.length as libc::c_ulong) as addressT as addressT;
            }
        }
        j = i.opcode_length as libc::c_uint;
        if i.vex.length == 0 {
            match (i.tm.opcode_modifier).opcodespace() as libc::c_int {
                0 => {}
                1 => {
                    j = j.wrapping_add(1);
                    j;
                }
                2 | 3 => {
                    j = j.wrapping_add(2 as libc::c_int as libc::c_uint);
                }
                _ => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        9709 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 23],
                            &[libc::c_char; 23],
                        >(b"void output_insn(void)\0"))
                            .as_ptr(),
                    );
                }
            }
        }
        if now_seg
            == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection
        {
            abs_section_offset = (abs_section_offset as libc::c_ulong)
                .wrapping_add(j as libc::c_ulong) as addressT as addressT;
        } else if j == 1 as libc::c_int as libc::c_uint {
            frag_append_1_char((i.tm).base_opcode() as libc::c_int);
        } else {
            p_0 = frag_more(j as size_t);
            if i.vex.length == 0
                && (i.tm.opcode_modifier).opcodespace() as libc::c_int
                    != 0 as libc::c_int
            {
                let fresh18 = p_0;
                p_0 = p_0.offset(1);
                *fresh18 = 0xf as libc::c_int as libc::c_char;
                if (i.tm.opcode_modifier).opcodespace() as libc::c_int
                    != 1 as libc::c_int
                {
                    let fresh19 = p_0;
                    p_0 = p_0.offset(1);
                    *fresh19 = (if (i.tm.opcode_modifier).opcodespace() as libc::c_int
                        == 2 as libc::c_int
                    {
                        0x38 as libc::c_int
                    } else {
                        0x3a as libc::c_int
                    }) as libc::c_char;
                }
            }
            match i.opcode_length as libc::c_int {
                2 => {
                    let fresh20 = p_0;
                    p_0 = p_0.offset(1);
                    *fresh20 = ((i.tm).base_opcode() as libc::c_int >> 8 as libc::c_int
                        & 0xff as libc::c_int) as libc::c_char;
                }
                1 => {}
                _ => {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        9740 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 23],
                            &[libc::c_char; 23],
                        >(b"void output_insn(void)\0"))
                            .as_ptr(),
                    );
                }
            }
            *p_0 = ((i.tm).base_opcode() as libc::c_int & 0xff as libc::c_int)
                as libc::c_char;
        }
        if (i.tm.opcode_modifier).modrm() != 0 {
            frag_opcode_byte(
                (i.rm.regmem << 0 as libc::c_int | i.rm.reg << 3 as libc::c_int
                    | i.rm.mode << 6 as libc::c_int) as libc::c_uchar,
            );
            if i.rm.regmem == 4 as libc::c_int as libc::c_uint
                && i.rm.mode != 3 as libc::c_int as libc::c_uint
                && !(!(i.base_reg).is_null()
                    && ((*i.base_reg).reg_type.bitfield).word() as libc::c_int != 0)
            {
                frag_opcode_byte(
                    (i.sib.base << 0 as libc::c_int | i.sib.index << 3 as libc::c_int
                        | i.sib.scale << 6 as libc::c_int) as libc::c_uchar,
                );
            }
        }
        if i.disp_operands != 0 {
            output_disp(insn_start_frag, insn_start_off);
        }
        if i.imm_operands != 0 {
            output_imm(insn_start_frag, insn_start_off);
        }
        if now_seg
            != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection
        {
            j = encoding_length(
                insn_start_frag,
                insn_start_off,
                frag_more(0 as libc::c_int as size_t),
            );
            if j > 15 as libc::c_int as libc::c_uint {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"instruction length of %u bytes exceeds the limit of 15\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    j,
                );
            } else if !fragP.is_null() {
                let mut max: libc::c_uint = if i.has_gotpc_tls_reloc as libc::c_int != 0
                {
                    0 as libc::c_int as libc::c_uint
                } else {
                    (15 as libc::c_int as libc::c_uint).wrapping_sub(j)
                };
                let mut count: libc::c_uint = i.vex.length;
                let mut k: libc::c_uint = 0;
                k = 0 as libc::c_int as libc::c_uint;
                while (k as libc::c_ulong)
                    < (::core::mem::size_of::<[libc::c_uchar; 7]>() as libc::c_ulong)
                        .wrapping_div(
                            ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                        )
                {
                    if i.prefix[k as usize] as libc::c_int != 0
                        && (k != 6 as libc::c_int as libc::c_uint || i.vex.length == 0)
                    {
                        count = count.wrapping_add(1);
                        count;
                    }
                    k = k.wrapping_add(1);
                    k;
                }
                if i.vex.length == 0 {
                    match (i.tm.opcode_modifier).opcodespace() as libc::c_int {
                        0 => {}
                        1 => {
                            count = count.wrapping_add(1);
                            count;
                        }
                        2 | 3 => {
                            count = count.wrapping_add(2 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            as_abort(
                                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                9810 as libc::c_int,
                                (*::core::mem::transmute::<
                                    &[u8; 23],
                                    &[libc::c_char; 23],
                                >(b"void output_insn(void)\0"))
                                    .as_ptr(),
                            );
                        }
                    }
                }
                if (*fragP).fr_subtype >> 2 as libc::c_int
                    == 4 as libc::c_int as libc::c_uint
                {
                    if (*fragP).tc_frag_data.max_bytes > max {
                        (*fragP).tc_frag_data.max_bytes = max;
                    }
                    if (*fragP).tc_frag_data.max_bytes > count {
                        (*fragP)
                            .tc_frag_data
                            .max_bytes = ((*fragP).tc_frag_data.max_bytes)
                            .wrapping_sub(count);
                    } else {
                        (*fragP)
                            .tc_frag_data
                            .max_bytes = 0 as libc::c_int as libc::c_uint;
                    }
                } else {
                    let mut max_prefix_size_0: libc::c_uint = 0;
                    if align_branch_prefix_size > max {
                        max_prefix_size_0 = max;
                    } else {
                        max_prefix_size_0 = align_branch_prefix_size;
                    }
                    if max_prefix_size_0 > count {
                        (*fragP)
                            .tc_frag_data
                            .max_prefix_length = max_prefix_size_0.wrapping_sub(count)
                            as libc::c_uchar;
                    }
                }
                if i.prefix[1 as libc::c_int as usize] != 0 {
                    (*fragP)
                        .tc_frag_data
                        .default_prefix = i.prefix[1 as libc::c_int as usize];
                } else if flag_code as libc::c_uint
                    == CODE_64BIT as libc::c_int as libc::c_uint
                {
                    (*fragP)
                        .tc_frag_data
                        .default_prefix = 0x2e as libc::c_int as libc::c_uchar;
                } else if !(i.base_reg).is_null()
                    && ((*i.base_reg).reg_num as libc::c_int == 4 as libc::c_int
                        || (*i.base_reg).reg_num as libc::c_int == 5 as libc::c_int)
                {
                    (*fragP)
                        .tc_frag_data
                        .default_prefix = 0x36 as libc::c_int as libc::c_uchar;
                } else {
                    (*fragP)
                        .tc_frag_data
                        .default_prefix = 0x3e as libc::c_int as libc::c_uchar;
                }
            }
        }
    }
    if align_branch_power != 0
        && now_seg
            != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection
        && (cpu_arch_flags.bitfield).cpui386() as libc::c_int != 0
    {
        frag_wane(frag_now);
        frag_new(0 as libc::c_int as size_t);
    }
}
unsafe extern "C" fn output_imm(
    mut insn_start_frag: *mut fragS,
    mut insn_start_off: offsetT,
) {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut n: libc::c_uint = 0;
    n = 0 as libc::c_int as libc::c_uint;
    while n < i.operands {
        if !(i.rounding.type_0 as libc::c_int != rc_none as libc::c_int
            && n == i.rounding.operand)
        {
            if operand_type_check(i.types[n as usize], imm) != 0 {
                let mut size: libc::c_int = imm_size(n);
                if now_seg
                    == &mut *_bfd_std_section
                        .as_mut_ptr()
                        .offset(2 as libc::c_int as isize) as *mut asection
                {
                    abs_section_offset = (abs_section_offset as libc::c_ulong)
                        .wrapping_add(size as libc::c_ulong) as addressT as addressT;
                } else if (*i.op[n as usize].imms).X_op() as libc::c_int
                    == O_constant as libc::c_int
                {
                    let mut val: offsetT = 0;
                    val = offset_in_range((*i.op[n as usize].imms).X_add_number, size);
                    p = frag_more(size as size_t);
                    number_to_chars_littleendian(p, val as valueT, size);
                } else {
                    let mut reloc_type: bfd_reloc_code_real = _dummy_first_bfd_reloc_code_real;
                    let mut sign: libc::c_int = 0;
                    if (i.types[n as usize].bitfield).imm32s() as libc::c_int != 0
                        && (i.suffix as libc::c_int == 'q' as i32
                            || i.suffix == 0
                                && (i.tm.opcode_modifier).no_lsuf() as libc::c_int != 0)
                    {
                        sign = 1 as libc::c_int;
                    } else {
                        sign = 0 as libc::c_int;
                    }
                    p = frag_more(size as size_t);
                    reloc_type = reloc(
                        size as libc::c_uint,
                        0 as libc::c_int,
                        sign,
                        i.reloc[n as usize],
                    );
                    if (reloc_type as libc::c_uint
                        == BFD_RELOC_32 as libc::c_int as libc::c_uint
                        || reloc_type as libc::c_uint
                            == BFD_RELOC_X86_64_32S as libc::c_int as libc::c_uint
                        || reloc_type as libc::c_uint
                            == BFD_RELOC_64 as libc::c_int as libc::c_uint)
                        && !GOT_symbol.is_null()
                        && GOT_symbol == (*i.op[n as usize].imms).X_add_symbol
                        && ((*i.op[n as usize].imms).X_op() as libc::c_int
                            == O_symbol as libc::c_int
                            || (*i.op[n as usize].imms).X_op() as libc::c_int
                                == O_add as libc::c_int
                                && (*symbol_get_value_expression(
                                    (*i.op[n as usize].imms).X_op_symbol,
                                ))
                                    .X_op() as libc::c_int == O_subtract as libc::c_int)
                    {
                        if object_64bit == 0 {
                            reloc_type = BFD_RELOC_386_GOTPC;
                        } else if size == 4 as libc::c_int {
                            reloc_type = BFD_RELOC_X86_64_GOTPC32;
                        } else if size == 8 as libc::c_int {
                            reloc_type = BFD_RELOC_X86_64_GOTPC64;
                        }
                        i.has_gotpc_tls_reloc = 1 as libc::c_int != 0;
                        (*i.op[n as usize].imms).X_add_number
                            += encoding_length(insn_start_frag, insn_start_off, p)
                                as libc::c_long;
                    }
                    fix_new_exp(
                        frag_now,
                        p.offset_from(((*frag_now).fr_literal).as_mut_ptr())
                            as libc::c_long as libc::c_ulong,
                        size as libc::c_ulong,
                        i.op[n as usize].imms,
                        0 as libc::c_int,
                        reloc_type,
                    );
                }
            }
        }
        n = n.wrapping_add(1);
        n;
    }
}
unsafe extern "C" fn output_disp(
    mut insn_start_frag: *mut fragS,
    mut insn_start_off: offsetT,
) {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut n: libc::c_uint = 0;
    n = 0 as libc::c_int as libc::c_uint;
    while n < i.operands {
        if operand_type_check(i.types[n as usize], disp) != 0 {
            let mut size: libc::c_int = disp_size(n);
            if now_seg
                == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                    as *mut asection
            {
                abs_section_offset = (abs_section_offset as libc::c_ulong)
                    .wrapping_add(size as libc::c_ulong) as addressT as addressT;
            } else if (*i.op[n as usize].disps).X_op() as libc::c_int
                == O_constant as libc::c_int
            {
                let mut val: offsetT = (*i.op[n as usize].disps).X_add_number;
                val = offset_in_range(
                    val
                        >> (if size == 1 as libc::c_int {
                            i.memshift
                        } else {
                            0 as libc::c_int as libc::c_uint
                        }),
                    size,
                );
                p = frag_more(size as size_t);
                number_to_chars_littleendian(p, val as valueT, size);
            } else {
                let mut reloc_type: bfd_reloc_code_real = _dummy_first_bfd_reloc_code_real;
                let mut sign: libc::c_int = (i.types[n as usize].bitfield).disp32s()
                    as libc::c_int;
                let mut pcrel: libc::c_int = (i.flags[n as usize]
                    & 1 as libc::c_int as libc::c_uint
                    != 0 as libc::c_int as libc::c_uint) as libc::c_int;
                let mut fixP: *mut fixS = 0 as *mut fixS;
                if (i.types[n as usize].bitfield).disp8() == 0 {} else {
                    as_abort(
                        b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                        9938 as libc::c_int,
                        (*::core::mem::transmute::<
                            &[u8; 35],
                            &[libc::c_char; 35],
                        >(b"void output_disp(fragS *, offsetT)\0"))
                            .as_ptr(),
                    );
                };
                if pcrel != 0 && i.imm_operands != 0 {
                    let mut n1: libc::c_uint = 0;
                    let mut sz: libc::c_int = 0 as libc::c_int;
                    n1 = 0 as libc::c_int as libc::c_uint;
                    while n1 < i.operands {
                        if operand_type_check(i.types[n1 as usize], imm) != 0 {
                            if sz == 0 as libc::c_int {} else {
                                as_abort(
                                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                    9953 as libc::c_int,
                                    (*::core::mem::transmute::<
                                        &[u8; 35],
                                        &[libc::c_char; 35],
                                    >(b"void output_disp(fragS *, offsetT)\0"))
                                        .as_ptr(),
                                );
                            };
                            sz = imm_size(n1);
                            (*i.op[n as usize].disps).X_add_number -= sz as libc::c_long;
                        }
                        n1 = n1.wrapping_add(1);
                        n1;
                    }
                    if sz != 0 as libc::c_int {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            9958 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 35],
                                &[libc::c_char; 35],
                            >(b"void output_disp(fragS *, offsetT)\0"))
                                .as_ptr(),
                        );
                    };
                }
                p = frag_more(size as size_t);
                reloc_type = reloc(
                    size as libc::c_uint,
                    pcrel,
                    sign,
                    i.reloc[n as usize],
                );
                if !GOT_symbol.is_null()
                    && GOT_symbol == (*i.op[n as usize].disps).X_add_symbol
                    && ((reloc_type as libc::c_uint
                        == BFD_RELOC_32 as libc::c_int as libc::c_uint
                        || reloc_type as libc::c_uint
                            == BFD_RELOC_X86_64_32S as libc::c_int as libc::c_uint
                        || reloc_type as libc::c_uint
                            == BFD_RELOC_64 as libc::c_int as libc::c_uint
                            && object_64bit != 0)
                        && ((*i.op[n as usize].disps).X_op() as libc::c_int
                            == O_symbol as libc::c_int
                            || (*i.op[n as usize].disps).X_op() as libc::c_int
                                == O_add as libc::c_int
                                && (*symbol_get_value_expression(
                                    (*i.op[n as usize].disps).X_op_symbol,
                                ))
                                    .X_op() as libc::c_int == O_subtract as libc::c_int)
                        || reloc_type as libc::c_uint
                            == BFD_RELOC_32_PCREL as libc::c_int as libc::c_uint)
                {
                    if object_64bit == 0 {
                        reloc_type = BFD_RELOC_386_GOTPC;
                        i.has_gotpc_tls_reloc = 1 as libc::c_int != 0;
                        (*i.op[n as usize].disps).X_add_number
                            += encoding_length(insn_start_frag, insn_start_off, p)
                                as libc::c_long;
                    } else if reloc_type as libc::c_uint
                        == BFD_RELOC_64 as libc::c_int as libc::c_uint
                    {
                        reloc_type = BFD_RELOC_X86_64_GOTPC64;
                    } else {
                        reloc_type = BFD_RELOC_X86_64_GOTPC32;
                    }
                } else if align_branch_power != 0 {
                    match reloc_type as libc::c_uint {
                        368 | 369 | 365 | 371 | 366 | 376 | 377 | 392 | 393 | 395 | 404
                        | 405 => {
                            i.has_gotpc_tls_reloc = 1 as libc::c_int != 0;
                        }
                        _ => {}
                    }
                }
                fixP = fix_new_exp(
                    frag_now,
                    p.offset_from(((*frag_now).fr_literal).as_mut_ptr()) as libc::c_long
                        as libc::c_ulong,
                    size as libc::c_ulong,
                    i.op[n as usize].disps,
                    pcrel,
                    reloc_type,
                );
                if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
                    && size == 4 as libc::c_int && pcrel != 0
                    && i.prefix[2 as libc::c_int as usize] == 0
                {
                    (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
                }
                if i.prefix[3 as libc::c_int as usize] as libc::c_int == 0 as libc::c_int
                    && (generate_relax_relocations != 0
                        || object_64bit == 0
                            && i.rm.mode == 0 as libc::c_int as libc::c_uint
                            && i.rm.regmem == 5 as libc::c_int as libc::c_uint)
                    && (i.rm.mode == 2 as libc::c_int as libc::c_uint
                        || i.rm.mode == 0 as libc::c_int as libc::c_uint
                            && i.rm.regmem == 5 as libc::c_int as libc::c_uint)
                    && (i.tm.opcode_modifier).opcodespace() as libc::c_int
                        == 0 as libc::c_int
                    && (i.operands == 1 as libc::c_int as libc::c_uint
                        && (i.tm).base_opcode() as libc::c_int == 0xff as libc::c_int
                        && (i.rm.reg == 2 as libc::c_int as libc::c_uint
                            || i.rm.reg == 4 as libc::c_int as libc::c_uint)
                        || i.operands == 2 as libc::c_int as libc::c_uint
                            && ((i.tm).base_opcode() as libc::c_int
                                == 0x8b as libc::c_int
                                || (i.tm).base_opcode() as libc::c_int
                                    == 0x85 as libc::c_int
                                || (i.tm).base_opcode() as libc::c_int
                                    & !(0x38 as libc::c_int) == 0x3 as libc::c_int))
                {
                    if object_64bit != 0 {
                        (*fixP)
                            .set_fx_tcbit(
                                (i.rex != 0 as libc::c_int) as libc::c_int as libc::c_uint,
                            );
                        if !(i.base_reg).is_null()
                            && (*i.base_reg).reg_num as libc::c_int
                                == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                        {
                            (*fixP).set_fx_tcbit2(1 as libc::c_int as libc::c_uint);
                        }
                    } else {
                        (*fixP).set_fx_tcbit2(1 as libc::c_int as libc::c_uint);
                    }
                }
            }
        }
        n = n.wrapping_add(1);
        n;
    }
}
unsafe extern "C" fn s_bss(mut ignore: libc::c_int) {
    let mut temp: libc::c_int = 0;
    obj_elf_section_change_hook();
    temp = get_absolute_expression() as libc::c_int;
    subseg_set(bss_section, temp);
    demand_empty_rest_of_line();
}
unsafe extern "C" fn handle_large_common(mut small: libc::c_int) {
    if flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint {
        s_comm_internal(
            0 as libc::c_int,
            Some(
                elf_common_parse
                    as unsafe extern "C" fn(
                        libc::c_int,
                        *mut symbolS,
                        addressT,
                    ) -> *mut symbolS,
            ),
        );
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b".largecomm supported only in 64bit mode, producing .comm\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    } else {
        static mut lbss_section: segT = 0 as *const asection as *mut asection;
        let mut saved_com_section_ptr: *mut asection = elf_com_section_ptr;
        let mut saved_bss_section: *mut asection = bss_section;
        if lbss_section.is_null() {
            let mut applicable: flagword = 0;
            let mut seg: segT = now_seg;
            let mut subseg: subsegT = now_subseg;
            lbss_section = subseg_new(
                b".lbss\0" as *const u8 as *const libc::c_char,
                0 as libc::c_int,
            );
            applicable = bfd_applicable_section_flags(stdoutput);
            bfd_set_section_flags(
                lbss_section,
                applicable & 0x1 as libc::c_int as libc::c_uint,
            );
            let ref mut fresh21 = *(bfd_section_userdata(lbss_section as *const asection)
                as *mut segment_info_type);
            (*fresh21).set_bss(1 as libc::c_int as libc::c_uint);
            subseg_set(seg, subseg);
        }
        elf_com_section_ptr = &mut _bfd_elf_large_com_section;
        bss_section = lbss_section;
        s_comm_internal(
            0 as libc::c_int,
            Some(
                elf_common_parse
                    as unsafe extern "C" fn(
                        libc::c_int,
                        *mut symbolS,
                        addressT,
                    ) -> *mut symbolS,
            ),
        );
        elf_com_section_ptr = saved_com_section_ptr;
        bss_section = saved_bss_section;
    };
}
static mut x86_isa_1_used: libc::c_uint = 0;
static mut x86_feature_2_used: libc::c_uint = 0;
static mut x86_used_note: libc::c_uint = 1 as libc::c_int as libc::c_uint;
static mut default_arch: *const libc::c_char = b"x86_64\0" as *const u8
    as *const libc::c_char;
static mut bad_reg: reg_entry = reg_entry {
    reg_name: 0 as *const libc::c_char,
    reg_type: i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    },
    reg_flags: 0,
    reg_num: 0,
    dw2_regnum: [0; 2],
};
static mut reg_eax: *const reg_entry = 0 as *const reg_entry;
static mut reg_ds: *const reg_entry = 0 as *const reg_entry;
static mut reg_es: *const reg_entry = 0 as *const reg_entry;
static mut reg_ss: *const reg_entry = 0 as *const reg_entry;
static mut reg_st0: *const reg_entry = 0 as *const reg_entry;
static mut reg_k0: *const reg_entry = 0 as *const reg_entry;
static mut RC_NamesTable: [RC_name; 5] = [RC_name {
    type_0: rne,
    name: 0 as *const libc::c_char,
    len: 0,
}; 5];
static mut mnemonic_chars: [libc::c_char; 256] = [0; 256];
static mut register_chars: [libc::c_char; 256] = [0; 256];
static mut operand_chars: [libc::c_char; 256] = [0; 256];
static mut identifier_chars: [libc::c_char; 256] = [0; 256];
static mut operand_special_chars: [libc::c_char; 23] = unsafe {
    *::core::mem::transmute::<
        &[u8; 23],
        &mut [libc::c_char; 23],
    >(b"%$-+(,)*._~/<>|&^!:[@]\0")
};
static mut save_stack: [libc::c_char; 32] = [0; 32];
static mut save_stack_p: *mut libc::c_char = 0 as *const libc::c_char
    as *mut libc::c_char;
static mut i: i386_insn = i386_insn {
    tm: insn_template {
        name: 0 as *const libc::c_char as *mut libc::c_char,
        base_opcode_extension_opcode_operands: [0; 4],
        opcode_modifier: i386_opcode_modifier {
            d_w_load_modrm_jump_floatmf_floatr_size_checkregsize_mnemonicsize_anysize_no_bsuf_no_wsuf_no_lsuf_no_ssuf_no_qsuf_no_ldsuf_fwait_isstring_regmem_bndprefixok_regkludge_implicit1stxmm0_prefixok_todword_toqword_addrprefixopreg_isprefix_immext_norex64_ugh_pseudovexprefix_vex_vexvvvv_vexw_opcodespace_opcodeprefix_vexsources_sib_sse2avx_noavx_evex_masking_broadcast_staticrounding_sae_disp8memshift_nodefmask_implicitquadgroup_swapsources_optimize_attmnemonic_attsyntax_intelsyntax_isa64: [0; 11],
            c2rust_padding: [0; 1],
        },
        cpu_flags: i386_cpu_flags {
            bitfield: C2RustUnnamed_24 {
                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
            },
        },
        operand_types: [i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        }; 5],
    },
    suffix: 0,
    opcode_length: 0,
    operands: 0,
    reg_operands: 0,
    disp_operands: 0,
    mem_operands: 0,
    imm_operands: 0,
    types: [i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    }; 5],
    op: [i386_op {
        disps: 0 as *mut expressionS,
    }; 5],
    flags: [0; 5],
    reloc: [_dummy_first_bfd_reloc_code_real; 5],
    base_reg: 0 as *const reg_entry,
    index_reg: 0 as *const reg_entry,
    log2_scale_factor: 0,
    seg: [0 as *const reg_entry; 2],
    memop1_string: 0 as *const libc::c_char as *mut libc::c_char,
    prefixes: 0,
    prefix: [0; 7],
    short_form: false,
    jumpabsolute: false,
    xstate: 0 as C2RustUnnamed_38,
    has_gotpc_tls_reloc: false,
    rm: modrm_byte {
        regmem: 0,
        reg: 0,
        mode: 0,
    },
    rex: 0,
    vrex: 0,
    sib: sib_byte {
        base: 0,
        index: 0,
        scale: 0,
    },
    vex: vex_prefix {
        bytes: [0; 4],
        length: 0,
        register_specifier: 0 as *const reg_entry,
    },
    mask: Mask_Operation {
        reg: 0 as *const reg_entry,
        zeroing: 0,
        operand: 0,
    },
    rounding: RC_Operation {
        type_0: rne,
        operand: 0,
    },
    broadcast: Broadcast_Operation {
        type_0: 0,
        operand: 0,
        bytes: 0,
    },
    memshift: 0,
    dir_encoding: dir_encoding_default,
    disp_encoding: disp_encoding_default,
    rex_encoding: false,
    no_optimize: false,
    vec_encoding: vex_encoding_default,
    rep_prefix: 0 as *const libc::c_char,
    hle_prefix: 0 as *const libc::c_char,
    bnd_prefix: 0 as *const libc::c_char,
    notrack_prefix: 0 as *const libc::c_char,
    error: operand_size_mismatch,
};
static mut current_templates: *const templates = 0 as *const templates;
static mut disp_expressions: [expressionS; 2] = [expressionS {
    X_add_symbol: 0 as *mut symbolS,
    X_op_symbol: 0 as *mut symbolS,
    X_add_number: 0,
    X_op_X_unsigned_X_extrabit: [0; 2],
    X_md: 0,
}; 2];
static mut im_expressions: [expressionS; 2] = [expressionS {
    X_add_symbol: 0 as *mut symbolS,
    X_op_symbol: 0 as *mut symbolS,
    X_add_number: 0,
    X_op_X_unsigned_X_extrabit: [0; 2],
    X_md: 0,
}; 2];
static mut this_operand: libc::c_int = -(1 as libc::c_int);
static mut flag_code: flag_code = CODE_32BIT;
static mut object_64bit: libc::c_uint = 0;
static mut disallow_64bit_reloc: libc::c_uint = 0;
static mut use_rela_relocations: libc::c_int = 0 as libc::c_int;
static mut tls_get_addr: *const libc::c_char = 0 as *const libc::c_char;
static mut x86_elf_abi: x86_elf_abi = I386_ABI;
static mut shared: libc::c_int = 0 as libc::c_int;
static mut intel_syntax: libc::c_int = 0 as libc::c_int;
static mut isa64: x86_64_isa = 0 as x86_64_isa;
static mut intel_mnemonic: libc::c_int = (1 as libc::c_int == 0) as libc::c_int;
static mut allow_pseudo_reg: libc::c_int = 0 as libc::c_int;
static mut allow_naked_reg: libc::c_int = 0 as libc::c_int;
static mut add_bnd_prefix: libc::c_int = 0 as libc::c_int;
static mut allow_index_reg: libc::c_int = 0 as libc::c_int;
static mut omit_lock_prefix: libc::c_int = 0 as libc::c_int;
static mut avoid_fence: libc::c_int = 0 as libc::c_int;
static mut lfence_after_load: libc::c_int = 0 as libc::c_int;
static mut lfence_before_indirect_branch: lfence_before_indirect_branch_kind = lfence_branch_none;
static mut lfence_before_ret: lfence_before_ret_kind = lfence_before_ret_none;
static mut last_insn: C2RustUnnamed_42 = C2RustUnnamed_42 {
    seg: 0 as *const asection as *mut asection,
    file: 0 as *const libc::c_char,
    name: 0 as *const libc::c_char,
    line: 0,
    kind: last_insn_other,
};
static mut generate_relax_relocations: libc::c_int = 1 as libc::c_int;
static mut sse_check: check_kind = check_none;
static mut operand_check: check_kind = check_warning;
static mut align_branch_power: libc::c_int = 0 as libc::c_int;
static mut align_branch: libc::c_uint = (align_branch_jcc_bit as libc::c_int
    | align_branch_fused_bit as libc::c_int | align_branch_jmp_bit as libc::c_int)
    as libc::c_uint;
static mut align_branch_prefix_size: libc::c_uint = 5 as libc::c_int as libc::c_uint;
static mut optimize: libc::c_int = 0 as libc::c_int;
static mut optimize_for_space: libc::c_int = 0 as libc::c_int;
static mut register_prefix: *const libc::c_char = b"%\0" as *const u8
    as *const libc::c_char;
static mut stackop_size: libc::c_char = '\0' as i32 as libc::c_char;
static mut quiet_warnings: libc::c_int = 0 as libc::c_int;
static mut cpu_arch_name: *const libc::c_char = 0 as *const libc::c_char;
static mut cpu_sub_arch_name: *mut libc::c_char = 0 as *const libc::c_char
    as *mut libc::c_char;
static mut cpu_arch_flags: i386_cpu_flags = i386_cpu_flags {
    bitfield: C2RustUnnamed_24 {
        cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
    },
};
static mut cpu_arch_tune_set: libc::c_int = 0 as libc::c_int;
static mut cpu_arch_tune_flags: i386_cpu_flags = i386_cpu_flags {
    bitfield: C2RustUnnamed_24 {
        cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
    },
};
static mut no_cond_jump_promotion: libc::c_uint = 0 as libc::c_int as libc::c_uint;
static mut sse2avx: libc::c_uint = 0;
static mut avxscalar: C2RustUnnamed_52 = vex128;
static mut vexwig: C2RustUnnamed_51 = vexw0;
static mut evexlig: C2RustUnnamed_50 = evexl128;
static mut evexwig: C2RustUnnamed_49 = evexw0;
static mut evexrcig: rc_type = rne;
static mut GOT_symbol: *mut symbolS = 0 as *const symbolS as *mut symbolS;
static mut cpu_arch: [arch_entry; 154] = [arch_entry {
    name: 0 as *const libc::c_char,
    len: 0,
    type_0: PROCESSOR_UNKNOWN,
    flags: i386_cpu_flags {
        bitfield: C2RustUnnamed_24 {
            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
        },
    },
    skip: 0,
}; 154];
static mut cpu_noarch: [noarch_entry; 50] = [noarch_entry {
    name: 0 as *const libc::c_char,
    len: 0,
    flags: i386_cpu_flags {
        bitfield: C2RustUnnamed_24 {
            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
        },
    },
}; 50];
static mut op_hash: htab_t = 0 as *const htab as *mut htab;
static mut reg_hash: htab_t = 0 as *const htab as *mut htab;
static mut f32_1: [libc::c_uchar; 1] = [0x90 as libc::c_int as libc::c_uchar];
static mut f32_2: [libc::c_uchar; 2] = [
    0x66 as libc::c_int as libc::c_uchar,
    0x90 as libc::c_int as libc::c_uchar,
];
static mut f32_3: [libc::c_uchar; 3] = [
    0x8d as libc::c_int as libc::c_uchar,
    0x76 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut f32_4: [libc::c_uchar; 4] = [
    0x8d as libc::c_int as libc::c_uchar,
    0x74 as libc::c_int as libc::c_uchar,
    0x26 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut f32_6: [libc::c_uchar; 6] = [
    0x8d as libc::c_int as libc::c_uchar,
    0xb6 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut f32_7: [libc::c_uchar; 7] = [
    0x8d as libc::c_int as libc::c_uchar,
    0xb4 as libc::c_int as libc::c_uchar,
    0x26 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut f16_3: [libc::c_uchar; 3] = [
    0x8d as libc::c_int as libc::c_uchar,
    0x74 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut f16_4: [libc::c_uchar; 4] = [
    0x8d as libc::c_int as libc::c_uchar,
    0xb4 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut jump_disp8: [libc::c_uchar; 1] = [0xeb as libc::c_int as libc::c_uchar];
static mut jump32_disp32: [libc::c_uchar; 1] = [0xe9 as libc::c_int as libc::c_uchar];
static mut jump16_disp32: [libc::c_uchar; 2] = [
    0x66 as libc::c_int as libc::c_uchar,
    0xe9 as libc::c_int as libc::c_uchar,
];
static mut f32_patt: [*const libc::c_uchar; 7] = unsafe {
    [
        f32_1.as_ptr(),
        f32_2.as_ptr(),
        f32_3.as_ptr(),
        f32_4.as_ptr(),
        0 as *const libc::c_uchar,
        f32_6.as_ptr(),
        f32_7.as_ptr(),
    ]
};
static mut f16_patt: [*const libc::c_uchar; 4] = unsafe {
    [f32_1.as_ptr(), f32_2.as_ptr(), f16_3.as_ptr(), f16_4.as_ptr()]
};
static mut alt_3: [libc::c_uchar; 3] = [
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_4: [libc::c_uchar; 4] = [
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x40 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_5: [libc::c_uchar; 5] = [
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x44 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_6: [libc::c_uchar; 6] = [
    0x66 as libc::c_int as libc::c_uchar,
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x44 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_7: [libc::c_uchar; 7] = [
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x80 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_8: [libc::c_uchar; 8] = [
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x84 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_9: [libc::c_uchar; 9] = [
    0x66 as libc::c_int as libc::c_uchar,
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x84 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_10: [libc::c_uchar; 10] = [
    0x66 as libc::c_int as libc::c_uchar,
    0x2e as libc::c_int as libc::c_uchar,
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x84 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_11: [libc::c_uchar; 11] = [
    0x66 as libc::c_int as libc::c_uchar,
    0x66 as libc::c_int as libc::c_uchar,
    0x2e as libc::c_int as libc::c_uchar,
    0xf as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0x84 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
    0 as libc::c_int as libc::c_uchar,
];
static mut alt_patt: [*const libc::c_uchar; 11] = unsafe {
    [
        f32_1.as_ptr(),
        f32_2.as_ptr(),
        alt_3.as_ptr(),
        alt_4.as_ptr(),
        alt_5.as_ptr(),
        alt_6.as_ptr(),
        alt_7.as_ptr(),
        alt_8.as_ptr(),
        alt_9.as_ptr(),
        alt_10.as_ptr(),
        alt_11.as_ptr(),
    ]
};
unsafe extern "C" fn i386_output_nops(
    mut where_0: *mut libc::c_char,
    mut patt: *const *const libc::c_uchar,
    mut count: libc::c_int,
    mut max_single_nop_size: libc::c_int,
) {
    let mut last: libc::c_int = 0;
    let mut offset: libc::c_int = 0;
    let mut nops: *const libc::c_uchar = 0 as *const libc::c_uchar;
    if max_single_nop_size < 1 as libc::c_int {
        as_fatal(
            dcgettext(
                0 as *const libc::c_char,
                b"i386_output_nops called to generate nops of at most %d bytes!\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            max_single_nop_size,
        );
    }
    nops = *patt.offset((max_single_nop_size - 1 as libc::c_int) as isize);
    if nops.is_null() {
        max_single_nop_size -= 1;
        max_single_nop_size;
        nops = *patt.offset((max_single_nop_size - 1 as libc::c_int) as isize);
    }
    last = count % max_single_nop_size;
    count -= last;
    offset = 0 as libc::c_int;
    while offset < count {
        memcpy(
            where_0.offset(offset as isize) as *mut libc::c_void,
            nops as *const libc::c_void,
            max_single_nop_size as libc::c_ulong,
        );
        offset += max_single_nop_size;
    }
    if last != 0 {
        nops = *patt.offset((last - 1 as libc::c_int) as isize);
        if nops.is_null() {
            last -= 1;
            last;
            nops = *patt.offset((last - 1 as libc::c_int) as isize);
            memcpy(
                where_0.offset(offset as isize) as *mut libc::c_void,
                nops as *const libc::c_void,
                last as libc::c_ulong,
            );
            *where_0
                .offset(
                    (offset + last) as isize,
                ) = **patt.offset(0 as libc::c_int as isize) as libc::c_char;
        } else {
            memcpy(
                where_0.offset(offset as isize) as *mut libc::c_void,
                nops as *const libc::c_void,
                last as libc::c_ulong,
            );
        }
    }
}
#[inline]
unsafe extern "C" fn fits_in_imm7(mut num: offsetT) -> libc::c_int {
    return (num & 0x7f as libc::c_int as libc::c_long == num) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_imm31(mut num: offsetT) -> libc::c_int {
    return (num & 0x7fffffff as libc::c_int as libc::c_long == num) as libc::c_int;
}
#[inline]
unsafe extern "C" fn operand_type_all_zero(
    mut x: *const i386_operand_type,
) -> libc::c_int {
    let mut current_block_5: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            if (*x).array[2 as libc::c_int as usize] != 0 {
                return 0 as libc::c_int;
            }
            current_block_5 = 7543185049324804208;
        }
        2 => {
            current_block_5 = 7543185049324804208;
        }
        1 => {
            current_block_5 = 5120779847983037567;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1755 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 59],
                    &[libc::c_char; 59],
                >(b"int operand_type_all_zero(const union i386_operand_type *)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_5 {
        7543185049324804208 => {
            if (*x).array[1 as libc::c_int as usize] != 0 {
                return 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return ((*x).array[0 as libc::c_int as usize] == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn operand_type_set(
    mut x: *mut i386_operand_type,
    mut v: libc::c_uint,
) {
    let mut current_block_3: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            (*x).array[2 as libc::c_int as usize] = v;
            current_block_3 = 6346893775061457261;
        }
        2 => {
            current_block_3 = 6346893775061457261;
        }
        1 => {
            current_block_3 = 2029833807900884038;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1775 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 63],
                    &[libc::c_char; 63],
                >(b"void operand_type_set(union i386_operand_type *, unsigned int)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_3 {
        6346893775061457261 => {
            (*x).array[1 as libc::c_int as usize] = v;
        }
        _ => {}
    }
    (*x).array[0 as libc::c_int as usize] = v;
    ((*x).bitfield).set_class(ClassNone as libc::c_int as libc::c_uint);
    ((*x).bitfield).set_instance(InstanceNone as libc::c_int as libc::c_uint);
}
#[inline]
unsafe extern "C" fn operand_type_equal(
    mut x: *const i386_operand_type,
    mut y: *const i386_operand_type,
) -> libc::c_int {
    let mut current_block_5: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            if (*x).array[2 as libc::c_int as usize]
                != (*y).array[2 as libc::c_int as usize]
            {
                return 0 as libc::c_int;
            }
            current_block_5 = 17328894878958153998;
        }
        2 => {
            current_block_5 = 17328894878958153998;
        }
        1 => {
            current_block_5 = 1784753705730161841;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1800 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 89],
                    &[libc::c_char; 89],
                >(
                    b"int operand_type_equal(const union i386_operand_type *, const union i386_operand_type *)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_5 {
        17328894878958153998 => {
            if (*x).array[1 as libc::c_int as usize]
                != (*y).array[1 as libc::c_int as usize]
            {
                return 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return ((*x).array[0 as libc::c_int as usize]
        == (*y).array[0 as libc::c_int as usize]) as libc::c_int;
}
#[inline]
unsafe extern "C" fn cpu_flags_all_zero(mut x: *const i386_cpu_flags) -> libc::c_int {
    let mut current_block_7: u64;
    match (::core::mem::size_of::<[libc::c_uint; 4]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        4 => {
            if (*x).array[3 as libc::c_int as usize] != 0 {
                return 0 as libc::c_int;
            }
            current_block_7 = 15271155828091330167;
        }
        3 => {
            current_block_7 = 15271155828091330167;
        }
        2 => {
            current_block_7 = 16058006711265435540;
        }
        1 => {
            current_block_7 = 16354851521869527938;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1824 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 53],
                    &[libc::c_char; 53],
                >(b"int cpu_flags_all_zero(const union i386_cpu_flags *)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_7 {
        15271155828091330167 => {
            if (*x).array[2 as libc::c_int as usize] != 0 {
                return 0 as libc::c_int;
            }
            current_block_7 = 16058006711265435540;
        }
        _ => {}
    }
    match current_block_7 {
        16058006711265435540 => {
            if (*x).array[1 as libc::c_int as usize] != 0 {
                return 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return ((*x).array[0 as libc::c_int as usize] == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn cpu_flags_equal(
    mut x: *const i386_cpu_flags,
    mut y: *const i386_cpu_flags,
) -> libc::c_int {
    let mut current_block_7: u64;
    match (::core::mem::size_of::<[libc::c_uint; 4]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        4 => {
            if (*x).array[3 as libc::c_int as usize]
                != (*y).array[3 as libc::c_int as usize]
            {
                return 0 as libc::c_int;
            }
            current_block_7 = 3437776558651176330;
        }
        3 => {
            current_block_7 = 3437776558651176330;
        }
        2 => {
            current_block_7 = 9372701965832155789;
        }
        1 => {
            current_block_7 = 14632555816581483097;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1850 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 80],
                    &[libc::c_char; 80],
                >(
                    b"int cpu_flags_equal(const union i386_cpu_flags *, const union i386_cpu_flags *)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_7 {
        3437776558651176330 => {
            if (*x).array[2 as libc::c_int as usize]
                != (*y).array[2 as libc::c_int as usize]
            {
                return 0 as libc::c_int;
            }
            current_block_7 = 9372701965832155789;
        }
        _ => {}
    }
    match current_block_7 {
        9372701965832155789 => {
            if (*x).array[1 as libc::c_int as usize]
                != (*y).array[1 as libc::c_int as usize]
            {
                return 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return ((*x).array[0 as libc::c_int as usize]
        == (*y).array[0 as libc::c_int as usize]) as libc::c_int;
}
#[inline]
unsafe extern "C" fn cpu_flags_check_cpu64(mut f: i386_cpu_flags) -> libc::c_int {
    return !(flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        && (f.bitfield).cpuno64() as libc::c_int != 0
        || flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
            && (f.bitfield).cpu64() as libc::c_int != 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn cpu_flags_and(
    mut x: i386_cpu_flags,
    mut y: i386_cpu_flags,
) -> i386_cpu_flags {
    let mut current_block_4: u64;
    match (::core::mem::size_of::<[libc::c_uint; 4]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        4 => {
            x.array[3 as libc::c_int as usize] &= y.array[3 as libc::c_int as usize];
            current_block_4 = 1928133374928147049;
        }
        3 => {
            current_block_4 = 1928133374928147049;
        }
        2 => {
            current_block_4 = 14604459486367054109;
        }
        1 => {
            current_block_4 = 3658242532414048787;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1879 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 61],
                    &[libc::c_char; 61],
                >(b"i386_cpu_flags cpu_flags_and(i386_cpu_flags, i386_cpu_flags)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_4 {
        1928133374928147049 => {
            x.array[2 as libc::c_int as usize] &= y.array[2 as libc::c_int as usize];
            current_block_4 = 14604459486367054109;
        }
        _ => {}
    }
    match current_block_4 {
        14604459486367054109 => {
            x.array[1 as libc::c_int as usize] &= y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] &= y.array[0 as libc::c_int as usize];
    return x;
}
#[inline]
unsafe extern "C" fn cpu_flags_or(
    mut x: i386_cpu_flags,
    mut y: i386_cpu_flags,
) -> i386_cpu_flags {
    let mut current_block_4: u64;
    match (::core::mem::size_of::<[libc::c_uint; 4]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        4 => {
            x.array[3 as libc::c_int as usize] |= y.array[3 as libc::c_int as usize];
            current_block_4 = 15039622006823621120;
        }
        3 => {
            current_block_4 = 15039622006823621120;
        }
        2 => {
            current_block_4 = 10599490746462633134;
        }
        1 => {
            current_block_4 = 1016484720253877915;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1902 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 60],
                    &[libc::c_char; 60],
                >(b"i386_cpu_flags cpu_flags_or(i386_cpu_flags, i386_cpu_flags)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_4 {
        15039622006823621120 => {
            x.array[2 as libc::c_int as usize] |= y.array[2 as libc::c_int as usize];
            current_block_4 = 10599490746462633134;
        }
        _ => {}
    }
    match current_block_4 {
        10599490746462633134 => {
            x.array[1 as libc::c_int as usize] |= y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] |= y.array[0 as libc::c_int as usize];
    return x;
}
#[inline]
unsafe extern "C" fn cpu_flags_and_not(
    mut x: i386_cpu_flags,
    mut y: i386_cpu_flags,
) -> i386_cpu_flags {
    let mut current_block_4: u64;
    match (::core::mem::size_of::<[libc::c_uint; 4]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        4 => {
            x.array[3 as libc::c_int as usize] &= !y.array[3 as libc::c_int as usize];
            current_block_4 = 17328333307588293427;
        }
        3 => {
            current_block_4 = 17328333307588293427;
        }
        2 => {
            current_block_4 = 10645439993927658551;
        }
        1 => {
            current_block_4 = 13633057361329209222;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                1925 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 65],
                    &[libc::c_char; 65],
                >(b"i386_cpu_flags cpu_flags_and_not(i386_cpu_flags, i386_cpu_flags)\0"))
                    .as_ptr(),
            );
        }
    }
    match current_block_4 {
        17328333307588293427 => {
            x.array[2 as libc::c_int as usize] &= !y.array[2 as libc::c_int as usize];
            current_block_4 = 10645439993927658551;
        }
        _ => {}
    }
    match current_block_4 {
        10645439993927658551 => {
            x.array[1 as libc::c_int as usize] &= !y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] &= !y.array[0 as libc::c_int as usize];
    return x;
}
static mut avx512: i386_cpu_flags = i386_cpu_flags {
    bitfield: C2RustUnnamed_24 {
        cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
    },
};
unsafe extern "C" fn cpu_flags_match(mut t: *const insn_template) -> libc::c_int {
    let mut x: i386_cpu_flags = (*t).cpu_flags;
    let mut match_0: libc::c_int = if cpu_flags_check_cpu64(x) != 0 {
        0x2 as libc::c_int
    } else {
        0 as libc::c_int
    };
    (x.bitfield).set_cpu64(0 as libc::c_int as libc::c_uint);
    (x.bitfield).set_cpuno64(0 as libc::c_int as libc::c_uint);
    if cpu_flags_all_zero(&mut x) != 0 {
        match_0 |= 0x1 as libc::c_int;
    } else {
        let mut cpu: i386_cpu_flags = cpu_arch_flags;
        if (x.bitfield).cpuavx512vl() as libc::c_int != 0
            && (cpu.bitfield).cpuavx512vl() == 0
        {
            return match_0;
        }
        (x.bitfield).set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
        cpu = cpu_flags_and(x, cpu);
        if cpu_flags_all_zero(&mut cpu) == 0 {
            if (x.bitfield).cpuavx() != 0 {
                if (cpu.bitfield).cpuavx() as libc::c_int != 0
                    && (((*t).opcode_modifier).sse2avx() == 0
                        || sse2avx != 0 && i.prefix[3 as libc::c_int as usize] == 0)
                    && ((x.bitfield).cpuaes() == 0
                        || (cpu.bitfield).cpuaes() as libc::c_int != 0)
                    && ((x.bitfield).cpugfni() == 0
                        || (cpu.bitfield).cpugfni() as libc::c_int != 0)
                    && ((x.bitfield).cpupclmul() == 0
                        || (cpu.bitfield).cpupclmul() as libc::c_int != 0)
                {
                    match_0 |= 0x1 as libc::c_int;
                }
            } else if (x.bitfield).cpuavx512f() != 0 {
                if (cpu.bitfield).cpuavx512f() as libc::c_int != 0
                    && ((x.bitfield).cpugfni() == 0
                        || (cpu.bitfield).cpugfni() as libc::c_int != 0)
                    && ((x.bitfield).cpuvaes() == 0
                        || (cpu.bitfield).cpuvaes() as libc::c_int != 0)
                    && ((x.bitfield).cpuvpclmulqdq() == 0
                        || (cpu.bitfield).cpuvpclmulqdq() as libc::c_int != 0)
                {
                    match_0 |= 0x1 as libc::c_int;
                }
            } else {
                match_0 |= 0x1 as libc::c_int;
            }
        }
    }
    return match_0;
}
#[inline]
#[allow(unconditional_panic)]
unsafe extern "C" fn operand_type_and(
    mut x: i386_operand_type,
    mut y: i386_operand_type,
) -> i386_operand_type {
    if (x.bitfield).class() as libc::c_int != (y.bitfield).class() as libc::c_int {
        (x.bitfield).set_class(ClassNone as libc::c_int as libc::c_uint);
    }
    if (x.bitfield).instance() as libc::c_int != (y.bitfield).instance() as libc::c_int {
        (x.bitfield).set_instance(InstanceNone as libc::c_int as libc::c_uint);
    }
    let mut current_block_7: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            x.array[2 as libc::c_int as usize] &= y.array[2 as libc::c_int as usize];
            current_block_7 = 17809838619722010341;
        }
        2 => {
            current_block_7 = 17809838619722010341;
        }
        1 => {
            current_block_7 = 17406066799207566041;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2014 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 73],
                    &[libc::c_char; 73],
                >(
                    b"i386_operand_type operand_type_and(i386_operand_type, i386_operand_type)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_7 {
        17809838619722010341 => {
            x.array[1 as libc::c_int as usize] &= y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] &= y.array[0 as libc::c_int as usize];
    return x;
}
#[inline]
#[allow(unconditional_panic)]
unsafe extern "C" fn operand_type_and_not(
    mut x: i386_operand_type,
    mut y: i386_operand_type,
) -> i386_operand_type {
    if (y.bitfield).class() as libc::c_int == ClassNone as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2022 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 77],
                &[libc::c_char; 77],
            >(
                b"i386_operand_type operand_type_and_not(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    if (y.bitfield).instance() as libc::c_int == InstanceNone as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2023 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 77],
                &[libc::c_char; 77],
            >(
                b"i386_operand_type operand_type_and_not(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    let mut current_block_5: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            x.array[2 as libc::c_int as usize] &= !y.array[2 as libc::c_int as usize];
            current_block_5 = 17451072294308908881;
        }
        2 => {
            current_block_5 = 17451072294308908881;
        }
        1 => {
            current_block_5 = 17884726571867807181;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2037 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 77],
                    &[libc::c_char; 77],
                >(
                    b"i386_operand_type operand_type_and_not(i386_operand_type, i386_operand_type)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_5 {
        17451072294308908881 => {
            x.array[1 as libc::c_int as usize] &= !y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] &= !y.array[0 as libc::c_int as usize];
    return x;
}
#[inline]
#[allow(unconditional_panic)]
unsafe extern "C" fn operand_type_or(
    mut x: i386_operand_type,
    mut y: i386_operand_type,
) -> i386_operand_type {
    if (x.bitfield).class() as libc::c_int == ClassNone as libc::c_int
        || (y.bitfield).class() as libc::c_int == ClassNone as libc::c_int
        || (x.bitfield).class() as libc::c_int == (y.bitfield).class() as libc::c_int
    {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2047 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 72],
                &[libc::c_char; 72],
            >(
                b"i386_operand_type operand_type_or(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    if (x.bitfield).instance() as libc::c_int == InstanceNone as libc::c_int
        || (y.bitfield).instance() as libc::c_int == InstanceNone as libc::c_int
        || (x.bitfield).instance() as libc::c_int
            == (y.bitfield).instance() as libc::c_int
    {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2050 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 72],
                &[libc::c_char; 72],
            >(
                b"i386_operand_type operand_type_or(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    let mut current_block_5: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            x.array[2 as libc::c_int as usize] |= y.array[2 as libc::c_int as usize];
            current_block_5 = 4818448240168841592;
        }
        2 => {
            current_block_5 = 4818448240168841592;
        }
        1 => {
            current_block_5 = 6399477188284085113;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2064 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 72],
                    &[libc::c_char; 72],
                >(
                    b"i386_operand_type operand_type_or(i386_operand_type, i386_operand_type)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_5 {
        4818448240168841592 => {
            x.array[1 as libc::c_int as usize] |= y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] |= y.array[0 as libc::c_int as usize];
    return x;
}
#[inline]
#[allow(unconditional_panic)]
unsafe extern "C" fn operand_type_xor(
    mut x: i386_operand_type,
    mut y: i386_operand_type,
) -> i386_operand_type {
    if (y.bitfield).class() as libc::c_int == ClassNone as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2072 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 73],
                &[libc::c_char; 73],
            >(
                b"i386_operand_type operand_type_xor(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    if (y.bitfield).instance() as libc::c_int == InstanceNone as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2073 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 73],
                &[libc::c_char; 73],
            >(
                b"i386_operand_type operand_type_xor(i386_operand_type, i386_operand_type)\0",
            ))
                .as_ptr(),
        );
    };
    let mut current_block_5: u64;
    match (::core::mem::size_of::<[libc::c_uint; 1]>() as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
    {
        3 => {
            x.array[2 as libc::c_int as usize] ^= y.array[2 as libc::c_int as usize];
            current_block_5 = 4275856174860863028;
        }
        2 => {
            current_block_5 = 4275856174860863028;
        }
        1 => {
            current_block_5 = 1353825657226116931;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2087 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 73],
                    &[libc::c_char; 73],
                >(
                    b"i386_operand_type operand_type_xor(i386_operand_type, i386_operand_type)\0",
                ))
                    .as_ptr(),
            );
        }
    }
    match current_block_5 {
        4275856174860863028 => {
            x.array[1 as libc::c_int as usize] ^= y.array[1 as libc::c_int as usize];
        }
        _ => {}
    }
    x.array[0 as libc::c_int as usize] ^= y.array[0 as libc::c_int as usize];
    return x;
}
static mut disp16_32: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut anydisp: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut anyimm: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut regxmm: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut regmask: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm8: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm8s: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm16: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm32: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm32s: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm64: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm16_32: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm16_32s: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
static mut imm16_32_32s: i386_operand_type = i386_operand_type {
    bitfield: C2RustUnnamed_33 {
        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
    },
};
#[inline]
unsafe extern "C" fn operand_type_check(
    mut t: i386_operand_type,
    mut c: operand_type,
) -> libc::c_int {
    match c as libc::c_uint {
        0 => {
            return ((t.bitfield).class() as libc::c_int == Reg as libc::c_int)
                as libc::c_int;
        }
        1 => {
            return ((t.bitfield).imm8() as libc::c_int != 0
                || (t.bitfield).imm8s() as libc::c_int != 0
                || (t.bitfield).imm16() as libc::c_int != 0
                || (t.bitfield).imm32() as libc::c_int != 0
                || (t.bitfield).imm32s() as libc::c_int != 0
                || (t.bitfield).imm64() as libc::c_int != 0) as libc::c_int;
        }
        2 => {
            return ((t.bitfield).disp8() as libc::c_int != 0
                || (t.bitfield).disp16() as libc::c_int != 0
                || (t.bitfield).disp32() as libc::c_int != 0
                || (t.bitfield).disp32s() as libc::c_int != 0
                || (t.bitfield).disp64() as libc::c_int != 0) as libc::c_int;
        }
        3 => {
            return ((t.bitfield).disp8() as libc::c_int != 0
                || (t.bitfield).disp16() as libc::c_int != 0
                || (t.bitfield).disp32() as libc::c_int != 0
                || (t.bitfield).disp32s() as libc::c_int != 0
                || (t.bitfield).disp64() as libc::c_int != 0
                || (t.bitfield).baseindex() as libc::c_int != 0) as libc::c_int;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2147 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 61],
                    &[libc::c_char; 61],
                >(b"int operand_type_check(i386_operand_type, enum operand_type)\0"))
                    .as_ptr(),
            );
        }
    };
}
#[inline]
unsafe extern "C" fn match_operand_size(
    mut t: *const insn_template,
    mut wanted: libc::c_uint,
    mut given: libc::c_uint,
) -> libc::c_int {
    return !((i.types[given as usize].bitfield).byte() as libc::c_int != 0
        && ((*t).operand_types[wanted as usize].bitfield).byte() == 0
        || (i.types[given as usize].bitfield).word() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).word() == 0
        || (i.types[given as usize].bitfield).dword() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).dword() == 0
        || (i.types[given as usize].bitfield).qword() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).qword() == 0
        || (i.types[given as usize].bitfield).tbyte() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).tbyte() == 0)
        as libc::c_int;
}
#[inline]
unsafe extern "C" fn match_simd_size(
    mut t: *const insn_template,
    mut wanted: libc::c_uint,
    mut given: libc::c_uint,
) -> libc::c_int {
    return !((i.types[given as usize].bitfield).xmmword() as libc::c_int != 0
        && ((*t).operand_types[wanted as usize].bitfield).xmmword() == 0
        || (i.types[given as usize].bitfield).ymmword() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).ymmword() == 0
        || (i.types[given as usize].bitfield).zmmword() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).zmmword() == 0
        || (i.types[given as usize].bitfield).tmmword() as libc::c_int != 0
            && ((*t).operand_types[wanted as usize].bitfield).tmmword() == 0)
        as libc::c_int;
}
#[inline]
unsafe extern "C" fn match_mem_size(
    mut t: *const insn_template,
    mut wanted: libc::c_uint,
    mut given: libc::c_uint,
) -> libc::c_int {
    return (match_operand_size(t, wanted, given) != 0
        && !((i.types[given as usize].bitfield).unspecified() as libc::c_int != 0
            && i.broadcast.type_0 == 0
            && ((*t).operand_types[wanted as usize].bitfield).unspecified() == 0
            || (i.types[given as usize].bitfield).fword() as libc::c_int != 0
                && ((*t).operand_types[wanted as usize].bitfield).fword() == 0
            || (if ((*t).operand_types[wanted as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
                && ((*t).operand_types[wanted as usize].bitfield).byte() as libc::c_int
                    + ((*t).operand_types[wanted as usize].bitfield).word()
                        as libc::c_int
                    + ((*t).operand_types[wanted as usize].bitfield).dword()
                        as libc::c_int
                    + ((*t).operand_types[wanted as usize].bitfield).qword()
                        as libc::c_int
                    > (((*t).opcode_modifier).broadcast() != 0) as libc::c_int
            {
                ((i.types[given as usize].bitfield).xmmword() as libc::c_int != 0
                    || (i.types[given as usize].bitfield).ymmword() as libc::c_int != 0
                    || (i.types[given as usize].bitfield).zmmword() as libc::c_int != 0)
                    as libc::c_int
            } else {
                (match_simd_size(t, wanted, given) == 0) as libc::c_int
            }) != 0)) as libc::c_int;
}
#[inline]
unsafe extern "C" fn operand_size_match(mut t: *const insn_template) -> libc::c_uint {
    let mut current_block: u64;
    let mut j: libc::c_uint = 0;
    let mut match_0: libc::c_uint = 1 as libc::c_int as libc::c_uint;
    if ((*t).opcode_modifier).jump() as libc::c_int != 0
        && ((*t).opcode_modifier).jump() as libc::c_int != 5 as libc::c_int
    {
        return match_0;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while j < i.operands {
        if !((i.types[j as usize].bitfield).class() as libc::c_int != Reg as libc::c_int
            && (i.types[j as usize].bitfield).class() as libc::c_int
                != RegSIMD as libc::c_int
            && ((*t).opcode_modifier).anysize() as libc::c_int != 0)
        {
            if ((*t).operand_types[j as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int && match_operand_size(t, j, j) == 0
            {
                match_0 = 0 as libc::c_int as libc::c_uint;
                break;
            } else if ((*t).operand_types[j as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int && match_simd_size(t, j, j) == 0
            {
                match_0 = 0 as libc::c_int as libc::c_uint;
                break;
            } else if ((*t).operand_types[j as usize].bitfield).instance() as libc::c_int
                == Accum as libc::c_int
                && (match_operand_size(t, j, j) == 0 || match_simd_size(t, j, j) == 0)
            {
                match_0 = 0 as libc::c_int as libc::c_uint;
                break;
            } else if i.flags[j as usize] & 2 as libc::c_int as libc::c_uint != 0
                && match_mem_size(t, j, j) == 0
            {
                match_0 = 0 as libc::c_int as libc::c_uint;
                break;
            }
        }
        j = j.wrapping_add(1);
        j;
    }
    if !(((*t).opcode_modifier).d() == 0) {
        if i.operands >= 2 as libc::c_int as libc::c_uint
            && i.operands <= 3 as libc::c_int as libc::c_uint
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2281 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 55],
                    &[libc::c_char; 55],
                >(b"unsigned int operand_size_match(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        j = 0 as libc::c_int as libc::c_uint;
        loop {
            if !(j < i.operands) {
                current_block = 17478428563724192186;
                break;
            }
            let mut given: libc::c_uint = (i.operands)
                .wrapping_sub(j)
                .wrapping_sub(1 as libc::c_int as libc::c_uint);
            if ((*t).operand_types[j as usize].bitfield).class() as libc::c_int
                == Reg as libc::c_int && match_operand_size(t, j, given) == 0
            {
                current_block = 16113459091811546589;
                break;
            }
            if ((*t).operand_types[j as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int && match_simd_size(t, j, given) == 0
            {
                current_block = 16113459091811546589;
                break;
            }
            if ((*t).operand_types[j as usize].bitfield).instance() as libc::c_int
                == Accum as libc::c_int
                && (match_operand_size(t, j, given) == 0
                    || match_simd_size(t, j, given) == 0)
            {
                current_block = 16113459091811546589;
                break;
            }
            if i.flags[given as usize] & 2 as libc::c_int as libc::c_uint != 0
                && match_mem_size(t, j, given) == 0
            {
                current_block = 16113459091811546589;
                break;
            }
            j = j.wrapping_add(1);
            j;
        }
        match current_block {
            16113459091811546589 => {}
            _ => return match_0 | 2 as libc::c_int as libc::c_uint,
        }
    }
    if match_0 == 0 {
        i.error = operand_size_mismatch;
    }
    return match_0;
}
#[inline]
unsafe extern "C" fn operand_type_match(
    mut overlap: i386_operand_type,
    mut given: i386_operand_type,
) -> libc::c_int {
    let mut temp: i386_operand_type = overlap;
    (temp.bitfield).set_unspecified(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_byte(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_word(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_dword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_fword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_qword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_tbyte(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
    (temp.bitfield).set_tmmword(0 as libc::c_int as libc::c_uint);
    if !(operand_type_all_zero(&mut temp) != 0) {
        if (given.bitfield).baseindex() as libc::c_int
            == (overlap.bitfield).baseindex() as libc::c_int
        {
            return 1 as libc::c_int;
        }
    }
    i.error = operand_type_mismatch;
    return 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn operand_type_register_match(
    mut g0: i386_operand_type,
    mut t0: i386_operand_type,
    mut g1: i386_operand_type,
    mut t1: i386_operand_type,
) -> libc::c_int {
    if (g0.bitfield).class() as libc::c_int != Reg as libc::c_int
        && (g0.bitfield).class() as libc::c_int != RegSIMD as libc::c_int
        && (operand_type_check(g0, anymem) == 0
            || (g0.bitfield).unspecified() as libc::c_int != 0
            || (t0.bitfield).class() as libc::c_int != Reg as libc::c_int
                && (t0.bitfield).class() as libc::c_int != RegSIMD as libc::c_int)
    {
        return 1 as libc::c_int;
    }
    if (g1.bitfield).class() as libc::c_int != Reg as libc::c_int
        && (g1.bitfield).class() as libc::c_int != RegSIMD as libc::c_int
        && (operand_type_check(g1, anymem) == 0
            || (g1.bitfield).unspecified() as libc::c_int != 0
            || (t1.bitfield).class() as libc::c_int != Reg as libc::c_int
                && (t1.bitfield).class() as libc::c_int != RegSIMD as libc::c_int)
    {
        return 1 as libc::c_int;
    }
    if (g0.bitfield).byte() as libc::c_int == (g1.bitfield).byte() as libc::c_int
        && (g0.bitfield).word() as libc::c_int == (g1.bitfield).word() as libc::c_int
        && (g0.bitfield).dword() as libc::c_int == (g1.bitfield).dword() as libc::c_int
        && (g0.bitfield).qword() as libc::c_int == (g1.bitfield).qword() as libc::c_int
        && (g0.bitfield).xmmword() as libc::c_int
            == (g1.bitfield).xmmword() as libc::c_int
        && (g0.bitfield).ymmword() as libc::c_int
            == (g1.bitfield).ymmword() as libc::c_int
        && (g0.bitfield).zmmword() as libc::c_int
            == (g1.bitfield).zmmword() as libc::c_int
    {
        return 1 as libc::c_int;
    }
    if (t0.bitfield).byte() as libc::c_int & (t1.bitfield).byte() as libc::c_int == 0
        && (t0.bitfield).word() as libc::c_int & (t1.bitfield).word() as libc::c_int == 0
        && (t0.bitfield).dword() as libc::c_int & (t1.bitfield).dword() as libc::c_int
            == 0
        && (t0.bitfield).qword() as libc::c_int & (t1.bitfield).qword() as libc::c_int
            == 0
        && (t0.bitfield).xmmword() as libc::c_int
            & (t1.bitfield).xmmword() as libc::c_int == 0
        && (t0.bitfield).ymmword() as libc::c_int
            & (t1.bitfield).ymmword() as libc::c_int == 0
        && (t0.bitfield).zmmword() as libc::c_int
            & (t1.bitfield).zmmword() as libc::c_int == 0
    {
        return 1 as libc::c_int;
    }
    i.error = register_type_mismatch;
    return 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn register_number(mut r: *const reg_entry) -> libc::c_uint {
    let mut nr: libc::c_uint = (*r).reg_num as libc::c_uint;
    if (*r).reg_flags as libc::c_int & 0x1 as libc::c_int != 0 {
        nr = nr.wrapping_add(8 as libc::c_int as libc::c_uint);
    }
    if (*r).reg_flags as libc::c_int & 0x4 as libc::c_int != 0 {
        nr = nr.wrapping_add(16 as libc::c_int as libc::c_uint);
    }
    return nr;
}
#[inline]
unsafe extern "C" fn mode_from_disp_size(mut t: i386_operand_type) -> libc::c_uint {
    if (t.bitfield).disp8() != 0 {
        return 1 as libc::c_int as libc::c_uint
    } else if (t.bitfield).disp16() as libc::c_int != 0
        || (t.bitfield).disp32() as libc::c_int != 0
        || (t.bitfield).disp32s() as libc::c_int != 0
    {
        return 2 as libc::c_int as libc::c_uint
    } else {
        return 0 as libc::c_int as libc::c_uint
    };
}
#[inline]
unsafe extern "C" fn fits_in_signed_byte(mut num: addressT) -> libc::c_int {
    return (num.wrapping_add(0x80 as libc::c_int as libc::c_ulong)
        <= 0xff as libc::c_int as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_unsigned_byte(mut num: addressT) -> libc::c_int {
    return (num <= 0xff as libc::c_int as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_unsigned_word(mut num: addressT) -> libc::c_int {
    return (num <= 0xffff as libc::c_int as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_signed_word(mut num: addressT) -> libc::c_int {
    return (num.wrapping_add(0x8000 as libc::c_int as libc::c_ulong)
        <= 0xffff as libc::c_int as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_signed_long(mut num: addressT) -> libc::c_int {
    return (num.wrapping_add(0x80000000 as libc::c_uint as libc::c_ulong)
        <= 0xffffffff as libc::c_uint as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fits_in_unsigned_long(mut num: addressT) -> libc::c_int {
    return (num <= 0xffffffff as libc::c_uint as libc::c_ulong) as libc::c_int;
}
#[inline]
unsafe extern "C" fn extend_to_32bit_address(mut num: addressT) -> valueT {
    if fits_in_unsigned_long(num) != 0 {
        return (num ^ (1 as libc::c_int as addressT) << 31 as libc::c_int)
            .wrapping_sub((1 as libc::c_int as addressT) << 31 as libc::c_int);
    }
    if fits_in_signed_long(num) == 0 {
        return num & 0xffffffff as libc::c_uint as libc::c_ulong;
    }
    return num;
}
#[inline]
unsafe extern "C" fn fits_in_disp8(mut num: offsetT) -> libc::c_int {
    let mut shift: libc::c_int = i.memshift as libc::c_int;
    let mut mask: libc::c_uint = 0;
    if shift == -(1 as libc::c_int) {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            2475 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"int fits_in_disp8(offsetT)\0"))
                .as_ptr(),
        );
    }
    mask = (((1 as libc::c_int) << shift) - 1 as libc::c_int) as libc::c_uint;
    if num & mask as libc::c_long != 0 {
        return 0 as libc::c_int;
    }
    return fits_in_signed_byte((num >> shift) as addressT);
}
#[inline]
unsafe extern "C" fn fits_in_imm4(mut num: offsetT) -> libc::c_int {
    return (num & 0xf as libc::c_int as libc::c_long == num) as libc::c_int;
}
unsafe extern "C" fn smallest_imm_type(mut num: offsetT) -> i386_operand_type {
    let mut t: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    operand_type_set(&mut t, 0 as libc::c_int as libc::c_uint);
    (t.bitfield).set_imm64(1 as libc::c_int as libc::c_uint);
    if cpu_arch_tune as libc::c_uint != PROCESSOR_I486 as libc::c_int as libc::c_uint
        && num == 1 as libc::c_int as libc::c_long
    {
        (t.bitfield).set_imm1(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm8(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm8s(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm16(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
    } else if fits_in_signed_byte(num as addressT) != 0 {
        (t.bitfield).set_imm8(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm8s(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm16(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
    } else if fits_in_unsigned_byte(num as addressT) != 0 {
        (t.bitfield).set_imm8(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm16(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
    } else if fits_in_signed_word(num as addressT) != 0
        || fits_in_unsigned_word(num as addressT) != 0
    {
        (t.bitfield).set_imm16(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
    } else if fits_in_signed_long(num as addressT) != 0 {
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
        (t.bitfield).set_imm32s(1 as libc::c_int as libc::c_uint);
    } else if fits_in_unsigned_long(num as addressT) != 0 {
        (t.bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
    }
    return t;
}
unsafe extern "C" fn offset_in_range(
    mut val: offsetT,
    mut size: libc::c_int,
) -> offsetT {
    let mut mask: addressT = 0;
    match size {
        1 => {
            mask = ((1 as libc::c_int as addressT) << 8 as libc::c_int)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong);
        }
        2 => {
            mask = ((1 as libc::c_int as addressT) << 16 as libc::c_int)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong);
        }
        4 => {
            mask = ((1 as libc::c_int as addressT) << 32 as libc::c_int)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong);
        }
        8 => return val,
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                2560 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 38],
                    &[libc::c_char; 38],
                >(b"offsetT offset_in_range(offsetT, int)\0"))
                    .as_ptr(),
            );
        }
    }
    if val as libc::c_ulong & !mask != 0 as libc::c_int as libc::c_ulong
        && -val as libc::c_ulong & !mask != 0 as libc::c_int as libc::c_ulong
    {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"%lx shortened to %lx\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            val,
            val as libc::c_ulong & mask,
        );
    }
    return (val as libc::c_ulong & mask) as offsetT;
}
unsafe extern "C" fn add_prefix(mut prefix: libc::c_uint) -> PREFIX_GROUP {
    let mut ret: PREFIX_GROUP = PREFIX_OTHER;
    let mut q: libc::c_uint = 0;
    if prefix >= 0x40 as libc::c_int as libc::c_uint
        && prefix < (0x40 as libc::c_int + 16 as libc::c_int) as libc::c_uint
        && flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
    {
        if i.prefix[6 as libc::c_int as usize] as libc::c_uint & prefix
            & 8 as libc::c_int as libc::c_uint != 0
            || i.prefix[6 as libc::c_int as usize] as libc::c_uint & prefix
                & 4 as libc::c_int as libc::c_uint != 0
            || i.prefix[6 as libc::c_int as usize] as libc::c_uint & prefix
                & 2 as libc::c_int as libc::c_uint != 0
            || i.prefix[6 as libc::c_int as usize] as libc::c_uint & prefix
                & 1 as libc::c_int as libc::c_uint != 0
        {
            ret = PREFIX_EXIST;
        }
        q = 6 as libc::c_int as libc::c_uint;
    } else {
        let mut current_block_13: u64;
        match prefix {
            62 => {
                ret = PREFIX_DS;
                current_block_13 = 6157110104975418031;
            }
            46 | 38 | 100 | 101 | 54 => {
                current_block_13 = 6157110104975418031;
            }
            242 | 243 => {
                q = 4 as libc::c_int as libc::c_uint;
                ret = PREFIX_REP;
                current_block_13 = 15904375183555213903;
            }
            240 => {
                q = 5 as libc::c_int as libc::c_uint;
                ret = PREFIX_LOCK;
                current_block_13 = 15904375183555213903;
            }
            155 => {
                q = 0 as libc::c_int as libc::c_uint;
                current_block_13 = 15904375183555213903;
            }
            103 => {
                q = 2 as libc::c_int as libc::c_uint;
                current_block_13 = 15904375183555213903;
            }
            102 => {
                q = 3 as libc::c_int as libc::c_uint;
                current_block_13 = 15904375183555213903;
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    2609 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 43],
                        &[libc::c_char; 43],
                    >(b"enum PREFIX_GROUP add_prefix(unsigned int)\0"))
                        .as_ptr(),
                );
            }
        }
        match current_block_13 {
            6157110104975418031 => {
                q = 1 as libc::c_int as libc::c_uint;
            }
            _ => {}
        }
        if i.prefix[q as usize] as libc::c_int != 0 as libc::c_int {
            ret = PREFIX_EXIST;
        }
    }
    if ret as u64 != 0 {
        if i.prefix[q as usize] == 0 {
            i.prefixes = (i.prefixes).wrapping_add(1);
            i.prefixes;
        }
        i
            .prefix[q
            as usize] = (i.prefix[q as usize] as libc::c_uint | prefix) as libc::c_uchar;
    } else {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"same type of prefix used twice\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
    }
    return ret;
}
unsafe extern "C" fn check_cpu_arch_compatible(
    mut name: *const libc::c_char,
    mut new_flag: i386_cpu_flags,
) {
    static mut arch: *const libc::c_char = 0 as *const libc::c_char;
    if 1 as libc::c_int == 0 {
        return;
    }
    if arch.is_null() {
        arch = cpu_arch_name;
        if arch.is_null() {
            arch = default_arch;
        }
    }
    if (*((*(*stdoutput).xvec).backend_data as *const elf_backend_data)).elf_machine_code
        != 6 as libc::c_int || (new_flag.bitfield).cpuiamcu() as libc::c_int != 0
    {
        return;
    }
    if (*((*(*stdoutput).xvec).backend_data as *const elf_backend_data)).elf_machine_code
        != 180 as libc::c_int || (new_flag.bitfield).cpul1om() as libc::c_int != 0
    {
        return;
    }
    if (*((*(*stdoutput).xvec).backend_data as *const elf_backend_data)).elf_machine_code
        != 181 as libc::c_int || (new_flag.bitfield).cpuk1om() as libc::c_int != 0
    {
        return;
    }
    as_bad(
        dcgettext(
            0 as *const libc::c_char,
            b"`%s' is not supported on `%s'\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
        name,
        arch,
    );
}
unsafe extern "C" fn reloc(
    mut size: libc::c_uint,
    mut pcrel: libc::c_int,
    mut sign: libc::c_int,
    mut other: bfd_reloc_code_real_type,
) -> bfd_reloc_code_real_type {
    if other as libc::c_uint != BFD_RELOC_NONE as libc::c_int as libc::c_uint {
        let mut rel: *const reloc_howto_type = 0 as *const reloc_howto_type;
        if size == 8 as libc::c_int as libc::c_uint {
            match other as libc::c_uint {
                381 => return BFD_RELOC_X86_64_GOT64,
                402 => return BFD_RELOC_X86_64_GOTPLT64,
                403 => return BFD_RELOC_X86_64_PLTOFF64,
                398 => {
                    other = BFD_RELOC_X86_64_GOTPC64;
                }
                387 => {
                    other = BFD_RELOC_X86_64_GOTPCREL64;
                }
                396 => {
                    other = BFD_RELOC_X86_64_TPOFF64;
                }
                394 => {
                    other = BFD_RELOC_X86_64_DTPOFF64;
                }
                _ => {}
            }
        }
        if other as libc::c_uint == BFD_RELOC_SIZE32 as libc::c_int as libc::c_uint {
            if size == 8 as libc::c_int as libc::c_uint {
                other = BFD_RELOC_SIZE64;
            }
            if pcrel != 0 {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"there are no pc-relative size relocations\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                );
                return BFD_RELOC_NONE;
            }
        }
        if size == 4 as libc::c_int as libc::c_uint
            && (flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
                || disallow_64bit_reloc != 0)
        {
            sign = -(1 as libc::c_int);
        }
        rel = bfd_reloc_type_lookup(stdoutput, other);
        if rel.is_null() {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"unknown relocation (%u)\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                other as libc::c_uint,
            );
        } else if size != bfd_get_reloc_size(rel) {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"%u-byte relocation cannot be applied to %u-byte field\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                bfd_get_reloc_size(rel),
                size,
            );
        } else if pcrel != 0 && (*rel).pc_relative() == 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"non-pc-relative relocation for pc-relative field\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        } else if (*rel).complain_on_overflow() as libc::c_int
            == complain_overflow_signed as libc::c_int && sign == 0
            || (*rel).complain_on_overflow() as libc::c_int
                == complain_overflow_unsigned as libc::c_int && sign > 0 as libc::c_int
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"relocated field and relocation type differ in signedness\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        } else {
            return other
        }
        return BFD_RELOC_NONE;
    }
    if pcrel != 0 {
        if sign == 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"there are no unsigned pc-relative relocations\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        match size {
            1 => return BFD_RELOC_8_PCREL,
            2 => return BFD_RELOC_16_PCREL,
            4 => return BFD_RELOC_32_PCREL,
            8 => return BFD_RELOC_64_PCREL,
            _ => {}
        }
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"cannot do %u byte pc-relative relocation\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            size,
        );
    } else {
        if sign > 0 as libc::c_int {
            match size {
                4 => return BFD_RELOC_X86_64_32S,
                _ => {}
            }
        } else {
            match size {
                1 => return BFD_RELOC_8,
                2 => return BFD_RELOC_16,
                4 => return BFD_RELOC_32,
                8 => return BFD_RELOC_64,
                _ => {}
            }
        }
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"cannot do %s %u byte relocation\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            if sign > 0 as libc::c_int {
                b"signed\0" as *const u8 as *const libc::c_char
            } else {
                b"unsigned\0" as *const u8 as *const libc::c_char
            },
            size,
        );
    }
    return BFD_RELOC_NONE;
}
#[inline]
unsafe extern "C" fn want_disp32(mut t: *const insn_template) -> bool {
    return flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
        || i.prefix[2 as libc::c_int as usize] as libc::c_int != 0
        || (*t).base_opcode() as libc::c_int == 0x8d as libc::c_int
            && ((*t).opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
            && ((i.types[1 as libc::c_int as usize].bitfield).qword() == 0
                || ((*t).opcode_modifier).size() as libc::c_int == 2 as libc::c_int);
}
unsafe extern "C" fn intel_float_operand(
    mut mnemonic: *const libc::c_char,
) -> libc::c_int {
    if *mnemonic.offset(0 as libc::c_int as isize) as libc::c_int != 'f' as i32 {
        return 0 as libc::c_int;
    }
    match *mnemonic.offset(1 as libc::c_int as isize) as libc::c_int {
        105 => return 2 as libc::c_int,
        108 => {
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int == 'd' as i32
                && (*mnemonic.offset(3 as libc::c_int as isize) as libc::c_int
                    == 'c' as i32
                    || *mnemonic.offset(3 as libc::c_int as isize) as libc::c_int
                        == 'e' as i32)
            {
                return 3 as libc::c_int;
            }
        }
        110 => {
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int != 'o' as i32 {
                return 3 as libc::c_int;
            }
        }
        114 => {
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int == 's' as i32 {
                return 3 as libc::c_int;
            }
        }
        115 => {
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int == 'a' as i32 {
                return 3 as libc::c_int;
            }
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int == 't' as i32 {
                match *mnemonic.offset(3 as libc::c_int as isize) as libc::c_int {
                    99 | 100 | 101 | 115 => return 3 as libc::c_int,
                    _ => {}
                }
            }
        }
        120 => {
            if *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int == 'r' as i32
                || *mnemonic.offset(2 as libc::c_int as isize) as libc::c_int
                    == 's' as i32
            {
                return 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return 1 as libc::c_int;
}
#[inline]
unsafe extern "C" fn install_template(mut t: *const insn_template) {
    let mut l: libc::c_uint = 0;
    i.tm = *t;
    l = 1 as libc::c_int as libc::c_uint;
    while l < 4 as libc::c_int as libc::c_uint {
        if (*t).base_opcode() as libc::c_int
            >> (8 as libc::c_int as libc::c_uint).wrapping_mul(l) == 0
        {
            break;
        }
        l = l.wrapping_add(1);
        l;
    }
    i.opcode_length = l as libc::c_uchar;
}
unsafe extern "C" fn build_vex_prefix(mut t: *const insn_template) {
    let mut register_specifier: libc::c_uint = 0;
    let mut vector_length: libc::c_uint = 0;
    let mut w: libc::c_uint = 0;
    if !(i.vex.register_specifier).is_null() {
        register_specifier = !register_number(i.vex.register_specifier)
            & 0xf as libc::c_int as libc::c_uint;
        if (*i.vex.register_specifier).reg_flags as libc::c_int & 0x4 as libc::c_int
            == 0 as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3648 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
    } else {
        register_specifier = 0xf as libc::c_int as libc::c_uint;
    }
    if i.reg_operands > 1 as libc::c_int as libc::c_uint
        && i.vec_encoding as libc::c_uint
            != vex_encoding_vex3 as libc::c_int as libc::c_uint
        && i.dir_encoding as libc::c_uint
            == dir_encoding_default as libc::c_int as libc::c_uint
        && i.operands == i.reg_operands
        && operand_type_equal(
            &mut *(i.types).as_mut_ptr().offset(0 as libc::c_int as isize),
            &mut *(i.types)
                .as_mut_ptr()
                .offset(
                    (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint) as isize,
                ),
        ) != 0 && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
        && ((i.tm.opcode_modifier).load() as libc::c_int != 0
            || (i.tm.opcode_modifier).d() as libc::c_int != 0)
        && i.rex == 1 as libc::c_int
    {
        let mut xchg: libc::c_uint = (i.operands)
            .wrapping_sub(1 as libc::c_int as libc::c_uint);
        let mut temp_op: i386_op = i386_op {
            disps: 0 as *mut expressionS,
        };
        let mut temp_type: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        temp_type = i.types[xchg as usize];
        i.types[xchg as usize] = i.types[0 as libc::c_int as usize];
        i.types[0 as libc::c_int as usize] = temp_type;
        temp_op = i.op[xchg as usize];
        i.op[xchg as usize] = i.op[0 as libc::c_int as usize];
        i.op[0 as libc::c_int as usize] = temp_op;
        if i.rm.mode == 3 as libc::c_int as libc::c_uint {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3675 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        i.rex = 4 as libc::c_int;
        xchg = i.rm.regmem;
        i.rm.regmem = i.rm.reg;
        i.rm.reg = xchg;
        if (i.tm.opcode_modifier).d() != 0 {
            (i.tm)
                .set_base_opcode(
                    (i.tm).base_opcode()
                        ^ (if (i.tm).base_opcode() as libc::c_int & 0xee as libc::c_int
                            != 0x6e as libc::c_int
                        {
                            0x1 as libc::c_int
                        } else {
                            0x10 as libc::c_int
                        }) as libc::c_uint,
                );
        } else {
            install_template(&*t.offset(1 as libc::c_int as isize));
        }
    }
    if i.reg_operands >= 3 as libc::c_int as libc::c_uint
        && i.vec_encoding as libc::c_uint
            != vex_encoding_vex3 as libc::c_int as libc::c_uint
        && i.reg_operands == (i.operands).wrapping_sub(i.imm_operands)
        && (i.tm.opcode_modifier).vex() as libc::c_int != 0
        && (i.tm.opcode_modifier).staticrounding() as libc::c_int != 0
        && ((i.tm.opcode_modifier).sse2avx() as libc::c_int != 0
            || optimize > 1 as libc::c_int) && i.rex == 1 as libc::c_int
        && !(i.vex.register_specifier).is_null()
        && (*i.vex.register_specifier).reg_flags as libc::c_int & 0x1 as libc::c_int == 0
    {
        let mut xchg_0: libc::c_uint = (i.operands).wrapping_sub(i.reg_operands);
        let mut temp_op_0: i386_op = i386_op {
            disps: 0 as *mut expressionS,
        };
        let mut temp_type_0: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3705 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        if (i.tm.opcode_modifier).sae() == 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3706 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        if operand_type_equal(
            &mut *(i.types)
                .as_mut_ptr()
                .offset(
                    (i.operands).wrapping_sub(2 as libc::c_int as libc::c_uint) as isize,
                ),
            &mut *(i.types)
                .as_mut_ptr()
                .offset(
                    (i.operands).wrapping_sub(3 as libc::c_int as libc::c_uint) as isize,
                ),
        ) != 0
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3708 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        if i.rm.mode == 3 as libc::c_int as libc::c_uint {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3709 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        temp_type_0 = i.types[xchg_0 as usize];
        i
            .types[xchg_0
            as usize] = i
            .types[xchg_0.wrapping_add(1 as libc::c_int as libc::c_uint) as usize];
        i
            .types[xchg_0.wrapping_add(1 as libc::c_int as libc::c_uint)
            as usize] = temp_type_0;
        temp_op_0 = i.op[xchg_0 as usize];
        i
            .op[xchg_0
            as usize] = i
            .op[xchg_0.wrapping_add(1 as libc::c_int as libc::c_uint) as usize];
        i.op[xchg_0.wrapping_add(1 as libc::c_int as libc::c_uint) as usize] = temp_op_0;
        i.rex = 0 as libc::c_int;
        xchg_0 = i.rm.regmem | 8 as libc::c_int as libc::c_uint;
        i.rm.regmem = !register_specifier & 0xf as libc::c_int as libc::c_uint;
        if i.rm.regmem & 8 as libc::c_int as libc::c_uint == 0 {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3721 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"void build_vex_prefix(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        i
            .vex
            .register_specifier = (i.vex.register_specifier)
            .offset(xchg_0.wrapping_sub(i.rm.regmem) as isize);
        register_specifier = !xchg_0 & 0xf as libc::c_int as libc::c_uint;
    }
    if (i.tm.opcode_modifier).vex() as libc::c_int == 3 as libc::c_int {
        vector_length = avxscalar as libc::c_uint;
    } else if (i.tm.opcode_modifier).vex() as libc::c_int == 2 as libc::c_int {
        vector_length = 1 as libc::c_int as libc::c_uint;
    } else {
        let mut op: libc::c_uint = 0;
        vector_length = 0 as libc::c_int as libc::c_uint;
        op = (*t).operands();
        loop {
            let fresh22 = op;
            op = op.wrapping_sub(1);
            if !(fresh22 != 0) {
                break;
            }
            if !(((*t).operand_types[op as usize].bitfield).xmmword() as libc::c_int != 0
                && ((*t).operand_types[op as usize].bitfield).ymmword() as libc::c_int
                    != 0
                && (i.types[op as usize].bitfield).ymmword() as libc::c_int != 0)
            {
                continue;
            }
            vector_length = 1 as libc::c_int as libc::c_uint;
            break;
        }
    }
    if (i.tm.opcode_modifier).vexw() as libc::c_int == 3 as libc::c_int {
        w = (if vexwig as libc::c_uint == vexw1 as libc::c_int as libc::c_uint
            || i.rex & 8 as libc::c_int != 0
        {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    } else if (i.tm.opcode_modifier).vexw() != 0 {
        w = (if (i.tm.opcode_modifier).vexw() as libc::c_int == 2 as libc::c_int {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    } else {
        w = (if if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        {
            i.rex & 8 as libc::c_int
        } else {
            (vexwig as libc::c_uint == vexw1 as libc::c_int as libc::c_uint)
                as libc::c_int
        } != 0
        {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    }
    if w == 0 as libc::c_int as libc::c_uint
        && i.vec_encoding as libc::c_uint
            != vex_encoding_vex3 as libc::c_int as libc::c_uint
        && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
        && i.rex & (8 as libc::c_int | 2 as libc::c_int | 1 as libc::c_int)
            == 0 as libc::c_int
    {
        let mut r: libc::c_uint = 0;
        i.vex.length = 2 as libc::c_int as libc::c_uint;
        i.vex.bytes[0 as libc::c_int as usize] = 0xc5 as libc::c_int as libc::c_uchar;
        r = (if i.rex & 4 as libc::c_int != 0 {
            0 as libc::c_int
        } else {
            1 as libc::c_int
        }) as libc::c_uint;
        i
            .vex
            .bytes[1 as libc::c_int
            as usize] = (r << 7 as libc::c_int | register_specifier << 3 as libc::c_int
            | vector_length << 2 as libc::c_int | (i.tm.opcode_modifier).opcodeprefix())
            as libc::c_uchar;
    } else {
        i.vex.length = 3 as libc::c_int as libc::c_uint;
        match (i.tm.opcode_modifier).opcodespace() as libc::c_int {
            1 | 2 | 3 => {
                i
                    .vex
                    .bytes[0 as libc::c_int
                    as usize] = 0xc4 as libc::c_int as libc::c_uchar;
            }
            8 | 9 | 10 => {
                i
                    .vex
                    .bytes[0 as libc::c_int
                    as usize] = 0x8f as libc::c_int as libc::c_uchar;
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    3792 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"void build_vex_prefix(const insn_template *)\0"))
                        .as_ptr(),
                );
            }
        }
        i
            .vex
            .bytes[1 as libc::c_int
            as usize] = ((!i.rex & 0x7 as libc::c_int) << 5 as libc::c_int
            | (i.tm.opcode_modifier).opcodespace() as libc::c_int) as libc::c_uchar;
        i
            .vex
            .bytes[2 as libc::c_int
            as usize] = (w << 7 as libc::c_int | register_specifier << 3 as libc::c_int
            | vector_length << 2 as libc::c_int | (i.tm.opcode_modifier).opcodeprefix())
            as libc::c_uchar;
    };
}
#[inline]
unsafe extern "C" fn is_evex_encoding(mut t: *const insn_template) -> bool {
    return ((*t).opcode_modifier).evex() as libc::c_int != 0
        || ((*t).opcode_modifier).disp8memshift() as libc::c_int != 0
        || ((*t).opcode_modifier).broadcast() as libc::c_int != 0
        || ((*t).opcode_modifier).masking() as libc::c_int != 0
        || ((*t).opcode_modifier).sae() as libc::c_int != 0;
}
#[inline]
unsafe extern "C" fn is_any_vex_encoding(mut t: *const insn_template) -> bool {
    return ((*t).opcode_modifier).vex() as libc::c_int != 0
        || is_evex_encoding(t) as libc::c_int != 0;
}
unsafe extern "C" fn build_evex_prefix() {
    let mut register_specifier: libc::c_uint = 0;
    let mut w: libc::c_uint = 0;
    let mut vrex_used: rex_byte = 0 as libc::c_int;
    if !(i.vex.register_specifier).is_null() {
        if i.vrex & 2 as libc::c_int == 0 as libc::c_int {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                3831 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void build_evex_prefix(void)\0"))
                    .as_ptr(),
            );
        };
        register_specifier = (*i.vex.register_specifier).reg_num as libc::c_uint;
        if (*i.vex.register_specifier).reg_flags as libc::c_int & 0x1 as libc::c_int != 0
        {
            register_specifier = register_specifier
                .wrapping_add(8 as libc::c_int as libc::c_uint);
        }
        if (*i.vex.register_specifier).reg_flags as libc::c_int & 0x4 as libc::c_int == 0
        {
            i.vex.bytes[3 as libc::c_int as usize] = 0x8 as libc::c_int as libc::c_uchar;
        }
        register_specifier = !register_specifier & 0xf as libc::c_int as libc::c_uint;
    } else {
        register_specifier = 0xf as libc::c_int as libc::c_uint;
        if i.vrex & 2 as libc::c_int == 0 {
            i.vex.bytes[3 as libc::c_int as usize] = 0x8 as libc::c_int as libc::c_uchar;
        } else {
            vrex_used |= 2 as libc::c_int;
        }
    }
    i.vex.length = 4 as libc::c_int as libc::c_uint;
    i.vex.bytes[0 as libc::c_int as usize] = 0x62 as libc::c_int as libc::c_uchar;
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int >= 1 as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            3860 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void build_evex_prefix(void)\0"))
                .as_ptr(),
        );
    };
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int <= 3 as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            3861 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void build_evex_prefix(void)\0"))
                .as_ptr(),
        );
    };
    i
        .vex
        .bytes[1 as libc::c_int
        as usize] = ((!i.rex & 0x7 as libc::c_int) << 5 as libc::c_int
        | (i.tm.opcode_modifier).opcodespace() as libc::c_int) as libc::c_uchar;
    if i.vrex & 4 as libc::c_int == 0 {
        i
            .vex
            .bytes[1 as libc::c_int
            as usize] = (i.vex.bytes[1 as libc::c_int as usize] as libc::c_int
            | 0x10 as libc::c_int) as libc::c_uchar;
    } else {
        vrex_used |= 4 as libc::c_int;
    }
    if (i.reg_operands).wrapping_add(i.imm_operands) == i.operands {
        if i.vrex & 1 as libc::c_int != 0 {
            vrex_used |= 1 as libc::c_int;
            i
                .vex
                .bytes[1 as libc::c_int
                as usize] = (i.vex.bytes[1 as libc::c_int as usize] as libc::c_int
                & !(0x40 as libc::c_int)) as libc::c_uchar;
        }
    }
    i.vrex &= !vrex_used;
    if i.vrex == 0 as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            3886 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void build_evex_prefix(void)\0"))
                .as_ptr(),
        );
    };
    if (i.tm.opcode_modifier).vexw() as libc::c_int == 3 as libc::c_int {
        w = (if evexwig as libc::c_uint == evexw1 as libc::c_int as libc::c_uint
            || i.rex & 8 as libc::c_int != 0
        {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    } else if (i.tm.opcode_modifier).vexw() != 0 {
        w = (if (i.tm.opcode_modifier).vexw() as libc::c_int == 2 as libc::c_int {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    } else {
        w = (if if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        {
            i.rex & 8 as libc::c_int
        } else {
            (evexwig as libc::c_uint == evexw1 as libc::c_int as libc::c_uint)
                as libc::c_int
        } != 0
        {
            1 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_uint;
    }
    i
        .vex
        .bytes[2 as libc::c_int
        as usize] = (w << 7 as libc::c_int | register_specifier << 3 as libc::c_int
        | 4 as libc::c_int as libc::c_uint | (i.tm.opcode_modifier).opcodeprefix())
        as libc::c_uchar;
    if !(i.mask.reg).is_null() && i.mask.zeroing != 0 {
        i
            .vex
            .bytes[3 as libc::c_int
            as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_int
            | 0x80 as libc::c_int) as libc::c_uchar;
    }
    if i.rounding.type_0 as libc::c_int == rc_none as libc::c_int {
        let mut vec_length: libc::c_uint = 0;
        if (i.tm.opcode_modifier).evex() == 0
            || (i.tm.opcode_modifier).evex() as libc::c_int == 5 as libc::c_int
        {
            let mut op: libc::c_uint = 0;
            op = i.operands;
            loop {
                let fresh23 = op;
                op = op.wrapping_sub(1);
                if !(fresh23 != 0) {
                    break;
                }
                if !((i.tm.operand_types[op as usize].bitfield).xmmword() as libc::c_int
                    + (i.tm.operand_types[op as usize].bitfield).ymmword() as libc::c_int
                    + (i.tm.operand_types[op as usize].bitfield).zmmword() as libc::c_int
                    > 1 as libc::c_int)
                {
                    continue;
                }
                if (i.types[op as usize].bitfield).zmmword() != 0 {
                    (i.tm.opcode_modifier).set_evex(1 as libc::c_int as libc::c_uint);
                    break;
                } else if (i.types[op as usize].bitfield).ymmword() != 0 {
                    (i.tm.opcode_modifier).set_evex(3 as libc::c_int as libc::c_uint);
                    break;
                } else if (i.types[op as usize].bitfield).xmmword() != 0 {
                    (i.tm.opcode_modifier).set_evex(2 as libc::c_int as libc::c_uint);
                    break;
                } else {
                    if !(i.broadcast.type_0 != 0 && op == i.broadcast.operand) {
                        continue;
                    }
                    match i.broadcast.bytes {
                        64 => {
                            (i.tm.opcode_modifier)
                                .set_evex(1 as libc::c_int as libc::c_uint);
                        }
                        32 => {
                            (i.tm.opcode_modifier)
                                .set_evex(3 as libc::c_int as libc::c_uint);
                        }
                        16 => {
                            (i.tm.opcode_modifier)
                                .set_evex(2 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            as_abort(
                                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                                3954 as libc::c_int,
                                (*::core::mem::transmute::<
                                    &[u8; 29],
                                    &[libc::c_char; 29],
                                >(b"void build_evex_prefix(void)\0"))
                                    .as_ptr(),
                            );
                        }
                    }
                    break;
                }
            }
            if op >= 5 as libc::c_int as libc::c_uint {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    3961 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 29],
                        &[libc::c_char; 29],
                    >(b"void build_evex_prefix(void)\0"))
                        .as_ptr(),
                );
            }
        }
        match (i.tm.opcode_modifier).evex() as libc::c_int {
            4 => {
                vec_length = (evexlig as libc::c_uint) << 5 as libc::c_int;
            }
            2 => {
                vec_length = ((0 as libc::c_int) << 5 as libc::c_int) as libc::c_uint;
            }
            3 => {
                vec_length = ((1 as libc::c_int) << 5 as libc::c_int) as libc::c_uint;
            }
            1 => {
                vec_length = ((2 as libc::c_int) << 5 as libc::c_int) as libc::c_uint;
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    3979 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 29],
                        &[libc::c_char; 29],
                    >(b"void build_evex_prefix(void)\0"))
                        .as_ptr(),
                );
            }
        }
        i
            .vex
            .bytes[3 as libc::c_int
            as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_uint
            | vec_length) as libc::c_uchar;
        if i.broadcast.type_0 != 0 {
            i
                .vex
                .bytes[3 as libc::c_int
                as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_int
                | 0x10 as libc::c_int) as libc::c_uchar;
        }
    } else if i.rounding.type_0 as libc::c_int != saeonly as libc::c_int {
        i
            .vex
            .bytes[3 as libc::c_int
            as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_int
            | (0x10 as libc::c_int
                | (i.rounding.type_0 as libc::c_int) << 5 as libc::c_int))
            as libc::c_uchar;
    } else {
        i
            .vex
            .bytes[3 as libc::c_int
            as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_int
            | (0x10 as libc::c_int | (evexrcig as libc::c_int) << 5 as libc::c_int))
            as libc::c_uchar;
    }
    if !(i.mask.reg).is_null() {
        i
            .vex
            .bytes[3 as libc::c_int
            as usize] = (i.vex.bytes[3 as libc::c_int as usize] as libc::c_int
            | (*i.mask.reg).reg_num as libc::c_int) as libc::c_uchar;
    }
}
unsafe extern "C" fn process_immext() {
    let mut exp: *mut expressionS = 0 as *mut expressionS;
    if i.imm_operands <= 1 as libc::c_int as libc::c_uint
        && (i.operands <= 2 as libc::c_int as libc::c_uint
            || is_any_vex_encoding(&mut i.tm) as libc::c_int != 0
                && i.operands <= 4 as libc::c_int as libc::c_uint)
    {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            4012 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void process_immext(void)\0"))
                .as_ptr(),
        );
    };
    let fresh24 = i.imm_operands;
    i.imm_operands = (i.imm_operands).wrapping_add(1);
    exp = &mut *im_expressions.as_mut_ptr().offset(fresh24 as isize) as *mut expressionS;
    i.op[i.operands as usize].imms = exp;
    i.types[i.operands as usize] = imm8;
    i.operands = (i.operands).wrapping_add(1);
    i.operands;
    (*exp).set_X_op(O_constant);
    (*exp).X_add_number = (i.tm).extension_opcode() as offsetT;
    (i.tm).set_extension_opcode(-(1 as libc::c_int));
}
unsafe extern "C" fn check_hle() -> libc::c_int {
    match (i.tm.opcode_modifier).prefixok() as libc::c_int {
        4 | 0 | 3 | 1 => {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid instruction `%s' after `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
                i.hle_prefix,
            );
            return 0 as libc::c_int;
        }
        5 => {
            if i.prefix[5 as libc::c_int as usize] != 0 {
                return 1 as libc::c_int;
            }
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"missing `lock' with `%s'\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.hle_prefix,
            );
            return 0 as libc::c_int;
        }
        6 => return 1 as libc::c_int,
        2 => {
            if i.prefix[4 as libc::c_int as usize] as libc::c_int != 0xf3 as libc::c_int
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"instruction `%s' after `xacquire' not allowed\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
                return 0 as libc::c_int;
            }
            if i.mem_operands == 0 as libc::c_int as libc::c_uint
                || i
                    .flags[(i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
                    as usize] & 2 as libc::c_int as libc::c_uint == 0
            {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"memory destination needed for instruction `%s' after `xrelease'\0"
                            as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    i.tm.name,
                );
                return 0 as libc::c_int;
            }
            return 1 as libc::c_int;
        }
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                4030 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 20],
                    &[libc::c_char; 20],
                >(b"int check_hle(void)\0"))
                    .as_ptr(),
            );
        }
    };
}
unsafe extern "C" fn optimize_encoding() {
    let mut j: libc::c_uint = 0;
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && (i.tm).base_opcode() as libc::c_int == 0x8d as libc::c_int
    {
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
            && i.prefix[2 as libc::c_int as usize] as libc::c_int != 0
        {
            if ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).word() == 0 {
                (i.tm.opcode_modifier).set_size(2 as libc::c_int as libc::c_uint);
            }
            i.prefix[2 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        }
        if (i.index_reg).is_null() && (i.base_reg).is_null() {
            if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
                if !(i.op[0 as libc::c_int as usize].disps).is_null()
                    && (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                        != O_constant as libc::c_int
                    && ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).word()
                        as libc::c_int != 0
                {
                    return;
                }
                if ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).qword()
                    == 0
                    || (i.tm.opcode_modifier).size() as libc::c_int == 2 as libc::c_int
                {
                    (i.tm).set_base_opcode(0xb8 as libc::c_int as libc::c_uint);
                    (i.tm.opcode_modifier).set_modrm(0 as libc::c_int as libc::c_uint);
                    if ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).word()
                        == 0
                    {
                        (i.types[0 as libc::c_int as usize].bitfield)
                            .set_imm32(1 as libc::c_int as libc::c_uint);
                    } else {
                        (i.tm.opcode_modifier)
                            .set_size(1 as libc::c_int as libc::c_uint);
                        (i.types[0 as libc::c_int as usize].bitfield)
                            .set_imm16(1 as libc::c_int as libc::c_uint);
                    }
                } else {
                    (i.tm).set_base_opcode(0xc7 as libc::c_int as libc::c_uint);
                    (i.tm).set_extension_opcode(0 as libc::c_int);
                    (i.types[0 as libc::c_int as usize].bitfield)
                        .set_imm32s(1 as libc::c_int as libc::c_uint);
                    (i.types[0 as libc::c_int as usize].bitfield)
                        .set_baseindex(0 as libc::c_int as libc::c_uint);
                }
            } else if !(i.op[0 as libc::c_int as usize].disps).is_null()
                && (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                    != O_constant as libc::c_int
                && (i.prefix[2 as libc::c_int as usize] == 0) as libc::c_int
                    != (if flag_code as libc::c_uint
                        == CODE_32BIT as libc::c_int as libc::c_uint
                    {
                        ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield)
                            .dword() as libc::c_int
                    } else {
                        ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield)
                            .word() as libc::c_int
                    })
            {
                return
            } else if flag_code as libc::c_uint
                == CODE_16BIT as libc::c_int as libc::c_uint
                && (optimize <= 1 as libc::c_int || optimize_for_space != 0)
                && i.prefix[2 as libc::c_int as usize] == 0
                && ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).dword()
                    as libc::c_int != 0
            {
                return
            } else {
                (i.tm).set_base_opcode(0xb8 as libc::c_int as libc::c_uint);
                (i.tm.opcode_modifier).set_modrm(0 as libc::c_int as libc::c_uint);
                if ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).dword()
                    != 0
                {
                    (i.types[0 as libc::c_int as usize].bitfield)
                        .set_imm32(1 as libc::c_int as libc::c_uint);
                } else {
                    (i.types[0 as libc::c_int as usize].bitfield)
                        .set_imm16(1 as libc::c_int as libc::c_uint);
                }
                if !(i.op[0 as libc::c_int as usize].disps).is_null()
                    && (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                        == O_constant as libc::c_int
                    && ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield)
                        .dword() as libc::c_int != 0
                    && (i.prefix[2 as libc::c_int as usize] == 0) as libc::c_int
                        != (flag_code as libc::c_uint
                            == CODE_32BIT as libc::c_int as libc::c_uint) as libc::c_int
                {
                    (*i.op[0 as libc::c_int as usize].disps).X_add_number
                        &= 0xffff as libc::c_int as libc::c_long;
                }
            }
            i
                .tm
                .operand_types[0 as libc::c_int
                as usize] = i.types[0 as libc::c_int as usize];
            i.imm_operands = 1 as libc::c_int as libc::c_uint;
            if (i.op[0 as libc::c_int as usize].imms).is_null() {
                i
                    .op[0 as libc::c_int as usize]
                    .imms = &mut *im_expressions
                    .as_mut_ptr()
                    .offset(0 as libc::c_int as isize) as *mut expressionS;
                (*i.op[0 as libc::c_int as usize].imms).set_X_op(O_absent);
            }
        } else if !(i.op[0 as libc::c_int as usize].disps).is_null()
            && ((*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                != O_constant as libc::c_int
                || (*i.op[0 as libc::c_int as usize].disps).X_add_number != 0)
        {
            return
        } else {
            let mut addr_reg: *const reg_entry = 0 as *const reg_entry;
            if (i.index_reg).is_null()
                && (*i.base_reg).reg_num as libc::c_int
                    != !(0 as libc::c_int) as libc::c_uchar as libc::c_int
            {
                addr_reg = i.base_reg;
            } else if (i.base_reg).is_null()
                && (*i.index_reg).reg_num as libc::c_int
                    != !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                        - 1 as libc::c_int && i.log2_scale_factor == 0
            {
                addr_reg = i.index_reg;
            } else {
                return
            }
            if ((*addr_reg).reg_type.bitfield).word() as libc::c_int != 0
                && ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).dword()
                    as libc::c_int != 0
            {
                if flag_code as libc::c_uint != CODE_32BIT as libc::c_int as libc::c_uint
                {
                    return;
                }
                (i.tm.opcode_modifier).set_opcodespace(1 as libc::c_int as libc::c_uint);
                (i.tm).set_base_opcode(0xb7 as libc::c_int as libc::c_uint);
            } else {
                (i.tm).set_base_opcode(0x8b as libc::c_int as libc::c_uint);
            }
            if ((*addr_reg).reg_type.bitfield).dword() as libc::c_int != 0
                && ((*i.op[1 as libc::c_int as usize].regs).reg_type.bitfield).qword()
                    as libc::c_int != 0
            {
                (i.tm.opcode_modifier).set_size(2 as libc::c_int as libc::c_uint);
            }
            i.op[0 as libc::c_int as usize].regs = addr_reg;
            i.reg_operands = 2 as libc::c_int as libc::c_uint;
        }
        i.mem_operands = 0 as libc::c_int as libc::c_uint;
        i.disp_operands = 0 as libc::c_int as libc::c_uint;
        i.prefix[2 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        i.prefix[1 as libc::c_int as usize] = 0 as libc::c_int as libc::c_uchar;
        i.seg[0 as libc::c_int as usize] = 0 as *const reg_entry;
    }
    if optimize_for_space != 0
        && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && i.reg_operands == 1 as libc::c_int as libc::c_uint
        && i.imm_operands == 1 as libc::c_int as libc::c_uint
        && (i.types[1 as libc::c_int as usize].bitfield).byte() == 0
        && (*i.op[0 as libc::c_int as usize].imms).X_op() as libc::c_int
            == O_constant as libc::c_int
        && fits_in_imm7((*i.op[0 as libc::c_int as usize].imms).X_add_number) != 0
        && ((i.tm).base_opcode() as libc::c_int == 0xa8 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xf6 as libc::c_int
                && (i.tm).extension_opcode() == 0 as libc::c_int)
    {
        let mut base_regnum: libc::c_uint = (*i.op[1 as libc::c_int as usize].regs)
            .reg_num as libc::c_uint;
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
            || base_regnum < 4 as libc::c_int as libc::c_uint
        {
            (i.types[1 as libc::c_int as usize].bitfield)
                .set_byte(1 as libc::c_int as libc::c_uint);
            i.suffix = 0 as libc::c_int as libc::c_char;
            if (i.types[1 as libc::c_int as usize].bitfield).word() != 0 {
                j = 16 as libc::c_int as libc::c_uint;
            } else if (i.types[1 as libc::c_int as usize].bitfield).dword() != 0 {
                j = 32 as libc::c_int as libc::c_uint;
            } else {
                j = 48 as libc::c_int as libc::c_uint;
            }
            if (*i.op[1 as libc::c_int as usize].regs).reg_flags as libc::c_int
                & 0x1 as libc::c_int == 0
                && base_regnum < 4 as libc::c_int as libc::c_uint
            {
                j = j.wrapping_add(8 as libc::c_int as libc::c_uint);
            }
            i
                .op[1 as libc::c_int as usize]
                .regs = (i.op[1 as libc::c_int as usize].regs).offset(-(j as isize));
        }
    } else if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
        && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && ((i.types[1 as libc::c_int as usize].bitfield).qword() as libc::c_int != 0
            && i.reg_operands == 1 as libc::c_int as libc::c_uint
            && i.imm_operands == 1 as libc::c_int as libc::c_uint
            && (*i.op[0 as libc::c_int as usize].imms).X_op() as libc::c_int
                == O_constant as libc::c_int
            && ((i.tm).base_opcode() as libc::c_int == 0xb8 as libc::c_int
                && (i.tm).extension_opcode() == -(1 as libc::c_int)
                && fits_in_unsigned_long(
                    (*i.op[0 as libc::c_int as usize].imms).X_add_number as addressT,
                ) != 0
                || fits_in_imm31((*i.op[0 as libc::c_int as usize].imms).X_add_number)
                    != 0
                    && ((i.tm).base_opcode() as libc::c_int == 0x24 as libc::c_int
                        || (i.tm).base_opcode() as libc::c_int == 0xa8 as libc::c_int
                        || (i.tm).base_opcode() as libc::c_int == 0x80 as libc::c_int
                            && (i.tm).extension_opcode() == 0x4 as libc::c_int
                        || ((i.tm).base_opcode() as libc::c_int == 0xf6 as libc::c_int
                            || (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                                == 0xc7 as libc::c_int)
                            && (i.tm).extension_opcode() == 0 as libc::c_int)
                || fits_in_imm7((*i.op[0 as libc::c_int as usize].imms).X_add_number)
                    != 0 && (i.tm).base_opcode() as libc::c_int == 0x83 as libc::c_int
                    && (i.tm).extension_opcode() == 0x4 as libc::c_int)
            || (i.types[0 as libc::c_int as usize].bitfield).qword() as libc::c_int != 0
                && (i.reg_operands == 2 as libc::c_int as libc::c_uint
                    && i.op[0 as libc::c_int as usize].regs
                        == i.op[1 as libc::c_int as usize].regs
                    && ((i.tm).base_opcode() as libc::c_int == 0x30 as libc::c_int
                        || (i.tm).base_opcode() as libc::c_int == 0x28 as libc::c_int)
                    || i.reg_operands == 1 as libc::c_int as libc::c_uint
                        && i.operands == 1 as libc::c_int as libc::c_uint
                        && (i.tm).base_opcode() as libc::c_int == 0x30 as libc::c_int))
    {
        (i.tm.opcode_modifier).set_norex64(1 as libc::c_int as libc::c_uint);
        if (i.tm).base_opcode() as libc::c_int == 0xb8 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                == 0xc7 as libc::c_int
        {
            (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                .set_imm32(1 as libc::c_int as libc::c_uint);
            (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                .set_imm32s(0 as libc::c_int as libc::c_uint);
            (i.tm.operand_types[0 as libc::c_int as usize].bitfield)
                .set_imm64(0 as libc::c_int as libc::c_uint);
            (i.types[0 as libc::c_int as usize].bitfield)
                .set_imm32(1 as libc::c_int as libc::c_uint);
            (i.types[0 as libc::c_int as usize].bitfield)
                .set_imm32s(0 as libc::c_int as libc::c_uint);
            (i.types[0 as libc::c_int as usize].bitfield)
                .set_imm64(0 as libc::c_int as libc::c_uint);
            (i.types[1 as libc::c_int as usize].bitfield)
                .set_dword(1 as libc::c_int as libc::c_uint);
            (i.types[1 as libc::c_int as usize].bitfield)
                .set_qword(0 as libc::c_int as libc::c_uint);
            if (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
                == 0xc7 as libc::c_int
            {
                (i.tm).set_base_opcode(0xb8 as libc::c_int as libc::c_uint);
                (i.tm).set_extension_opcode(-(1 as libc::c_int));
                (i.tm.opcode_modifier).set_w(0 as libc::c_int as libc::c_uint);
                (i.tm.opcode_modifier).set_modrm(0 as libc::c_int as libc::c_uint);
            }
        }
    } else if optimize > 1 as libc::c_int && optimize_for_space == 0
        && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && i.reg_operands == 2 as libc::c_int as libc::c_uint
        && i.op[0 as libc::c_int as usize].regs == i.op[1 as libc::c_int as usize].regs
        && ((i.tm).base_opcode() as libc::c_int
            & !(0x2 as libc::c_int | 1 as libc::c_int) == 0x8 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int
                & !(0x2 as libc::c_int | 1 as libc::c_int) == 0x20 as libc::c_int)
        && (flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
            || (i.types[0 as libc::c_int as usize].bitfield).dword() == 0)
    {
        (i.tm)
            .set_base_opcode(
                (0x84 as libc::c_int
                    | (i.tm).base_opcode() as libc::c_int & 1 as libc::c_int)
                    as libc::c_uint,
            );
    } else if i.reg_operands == 3 as libc::c_int as libc::c_uint
        && i.op[0 as libc::c_int as usize].regs == i.op[1 as libc::c_int as usize].regs
        && (i.types[2 as libc::c_int as usize].bitfield).xmmword() == 0
        && ((i.tm.opcode_modifier).vex() as libc::c_int != 0
            || ((i.mask.reg).is_null() || i.mask.zeroing != 0)
                && i.rounding.type_0 as libc::c_int == rc_none as libc::c_int
                && is_evex_encoding(&mut i.tm) as libc::c_int != 0
                && (i.vec_encoding as libc::c_uint
                    != vex_encoding_evex as libc::c_int as libc::c_uint
                    || (cpu_arch_isa_flags.bitfield).cpuavx512vl() as libc::c_int != 0
                    || (i.tm.cpu_flags.bitfield).cpuavx512vl() as libc::c_int != 0
                    || (i.tm.operand_types[2 as libc::c_int as usize].bitfield).zmmword()
                        as libc::c_int != 0
                        && (i.types[2 as libc::c_int as usize].bitfield).ymmword()
                            as libc::c_int != 0))
        && (((i.tm).base_opcode() as libc::c_int == 0x55 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0x57 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xdf as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xef as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xf8 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xf9 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xfa as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xfb as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0x42 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0x47 as libc::c_int)
            && (i.tm).extension_opcode() == -(1 as libc::c_int))
    {
        if is_evex_encoding(&mut i.tm) {
            if i.vec_encoding as libc::c_uint
                != vex_encoding_evex as libc::c_int as libc::c_uint
            {
                (i.tm.opcode_modifier).set_vex(1 as libc::c_int as libc::c_uint);
                (i.tm.opcode_modifier).set_vexw(1 as libc::c_int as libc::c_uint);
                (i.tm.opcode_modifier).set_evex(0 as libc::c_int as libc::c_uint);
            } else if optimize > 1 as libc::c_int {
                (i.tm.opcode_modifier).set_evex(2 as libc::c_int as libc::c_uint);
            } else {
                return
            }
        } else if (i.tm.operand_types[0 as libc::c_int as usize].bitfield).class()
            as libc::c_int == RegMask as libc::c_int
        {
            (i.tm.opcode_modifier).set_opcodeprefix(0 as libc::c_int as libc::c_uint);
            (i.tm.opcode_modifier).set_vexw(1 as libc::c_int as libc::c_uint);
        } else {
            (i.tm.opcode_modifier).set_vex(1 as libc::c_int as libc::c_uint);
        }
        if (i.tm.opcode_modifier).vex() != 0 {
            j = 0 as libc::c_int as libc::c_uint;
            while j < 3 as libc::c_int as libc::c_uint {
                (i.types[j as usize].bitfield)
                    .set_xmmword(1 as libc::c_int as libc::c_uint);
                (i.types[j as usize].bitfield)
                    .set_ymmword(0 as libc::c_int as libc::c_uint);
                j = j.wrapping_add(1);
                j;
            }
        }
    } else if i.vec_encoding as libc::c_uint
        != vex_encoding_evex as libc::c_int as libc::c_uint
        && (i.types[0 as libc::c_int as usize].bitfield).zmmword() == 0
        && (i.types[1 as libc::c_int as usize].bitfield).zmmword() == 0
        && (i.mask.reg).is_null() && i.broadcast.type_0 == 0
        && is_evex_encoding(&mut i.tm) as libc::c_int != 0
        && ((i.tm).base_opcode() as libc::c_int & !(0x10 as libc::c_int)
            == 0x6f as libc::c_int
            || (i.tm).base_opcode() as libc::c_int & !(4 as libc::c_int)
                == 0xdb as libc::c_int
            || (i.tm).base_opcode() as libc::c_int & !(4 as libc::c_int)
                == 0xeb as libc::c_int)
        && (i.tm).extension_opcode() == -(1 as libc::c_int)
    {
        j = 0 as libc::c_int as libc::c_uint;
        while j < i.operands {
            if operand_type_check(i.types[j as usize], disp) != 0
                && (*i.op[j as usize].disps).X_op() as libc::c_int
                    == O_constant as libc::c_int
            {
                let mut evex_disp8: libc::c_int = 0;
                let mut vex_disp8: libc::c_int = 0;
                let mut memshift: libc::c_uint = i.memshift;
                let mut n: offsetT = (*i.op[j as usize].disps).X_add_number;
                evex_disp8 = fits_in_disp8(n);
                i.memshift = 0 as libc::c_int as libc::c_uint;
                vex_disp8 = fits_in_disp8(n);
                if evex_disp8 != vex_disp8 {
                    i.memshift = memshift;
                    return;
                }
                (i.types[j as usize].bitfield).set_disp8(vex_disp8 as libc::c_uint);
                break;
            } else {
                j = j.wrapping_add(1);
                j;
            }
        }
        if (i.tm).base_opcode() as libc::c_int & !(0x10 as libc::c_int)
            == 0x6f as libc::c_int
            && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int == 3 as libc::c_int
        {
            (i.tm.opcode_modifier).set_opcodeprefix(2 as libc::c_int as libc::c_uint);
        }
        (i.tm.opcode_modifier)
            .set_vex(
                (if (i.types[0 as libc::c_int as usize].bitfield).ymmword()
                    as libc::c_int != 0
                {
                    2 as libc::c_int
                } else {
                    1 as libc::c_int
                }) as libc::c_uint,
            );
        (i.tm.opcode_modifier).set_vexw(1 as libc::c_int as libc::c_uint);
        if i.reg_operands == 3 as libc::c_int as libc::c_uint
            && (i.tm).base_opcode() as libc::c_int != 0xdf as libc::c_int
        {
            (i.tm.opcode_modifier).set_staticrounding(1 as libc::c_int as libc::c_uint);
        }
        (i.tm.opcode_modifier).set_evex(0 as libc::c_int as libc::c_uint);
        (i.tm.opcode_modifier).set_masking(0 as libc::c_int as libc::c_uint);
        (i.tm.opcode_modifier).set_broadcast(0 as libc::c_int as libc::c_uint);
        (i.tm.opcode_modifier).set_disp8memshift(0 as libc::c_int as libc::c_uint);
        i.memshift = 0 as libc::c_int as libc::c_uint;
        if j < i.operands {
            (i.types[j as usize].bitfield)
                .set_disp8(
                    fits_in_disp8((*i.op[j as usize].disps).X_add_number) as libc::c_uint,
                );
        }
    }
}
unsafe extern "C" fn load_insn_p() -> libc::c_int {
    let mut dest: libc::c_uint = 0;
    let mut any_vex_p: libc::c_int = is_any_vex_encoding(&mut i.tm) as libc::c_int;
    let mut base_opcode: libc::c_uint = ((i.tm).base_opcode() as libc::c_int
        | 1 as libc::c_int) as libc::c_uint;
    if any_vex_p == 0 {
        if (i.tm.opcode_modifier).anysize() != 0 {
            return 0 as libc::c_int;
        }
        if strcmp(i.tm.name, b"pop\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {
            return 1 as libc::c_int;
        }
    }
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int {
        if (i.tm).base_opcode() as libc::c_int == 0x9d as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0x61 as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if (i.tm).base_opcode() as libc::c_int | 0xb as libc::c_int
            == 0xaf as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if base_opcode == 0x6f as libc::c_int as libc::c_uint
            || (i.tm).base_opcode() as libc::c_int == 0xd7 as libc::c_int
        {
            return 1 as libc::c_int;
        }
    }
    if i.mem_operands == 0 {
        return 0 as libc::c_int;
    }
    if any_vex_p != 0 {
        if (i.tm).base_opcode() as libc::c_int == 0xae as libc::c_int
            && (i.tm.opcode_modifier).vex() as libc::c_int != 0
            && (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
            && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int == 0 as libc::c_int
            && (i.tm).extension_opcode() == 2 as libc::c_int
        {
            return 1 as libc::c_int;
        }
    } else if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int {
        if ((i.tm).base_opcode() as libc::c_int == 0xf6 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xf7 as libc::c_int)
            && (i.tm).extension_opcode() != 1 as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if base_opcode == 0xff as libc::c_int as libc::c_uint
            && (i.tm).extension_opcode() <= 1 as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if (i.tm).base_opcode() as libc::c_int >= 0x80 as libc::c_int
            && (i.tm).base_opcode() as libc::c_int <= 0x83 as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if (base_opcode == 0xc1 as libc::c_int as libc::c_uint
            || (i.tm).base_opcode() as libc::c_int >= 0xd0 as libc::c_int
                && (i.tm).base_opcode() as libc::c_int <= 0xd3 as libc::c_int)
            && (i.tm).extension_opcode() != 6 as libc::c_int
        {
            return 1 as libc::c_int;
        }
        if base_opcode >= 0xd8 as libc::c_int as libc::c_uint
            && base_opcode <= 0xdf as libc::c_int as libc::c_uint
        {
            if (i.tm).base_opcode() as libc::c_int == 0xd9 as libc::c_int
                && ((i.tm).extension_opcode() == 2 as libc::c_int
                    || (i.tm).extension_opcode() == 3 as libc::c_int
                    || (i.tm).extension_opcode() == 6 as libc::c_int
                    || (i.tm).extension_opcode() == 7 as libc::c_int)
            {
                return 0 as libc::c_int;
            }
            if (i.tm).base_opcode() as libc::c_int == 0xdb as libc::c_int
                && ((i.tm).extension_opcode() == 1 as libc::c_int
                    || (i.tm).extension_opcode() == 2 as libc::c_int
                    || (i.tm).extension_opcode() == 3 as libc::c_int
                    || (i.tm).extension_opcode() == 7 as libc::c_int)
            {
                return 0 as libc::c_int;
            }
            if (i.tm).base_opcode() as libc::c_int == 0xdd as libc::c_int
                && ((i.tm).extension_opcode() == 1 as libc::c_int
                    || (i.tm).extension_opcode() == 2 as libc::c_int
                    || (i.tm).extension_opcode() == 3 as libc::c_int
                    || (i.tm).extension_opcode() == 6 as libc::c_int
                    || (i.tm).extension_opcode() == 7 as libc::c_int)
            {
                return 0 as libc::c_int;
            }
            if (i.tm).base_opcode() as libc::c_int == 0xdf as libc::c_int
                && ((i.tm).extension_opcode() == 1 as libc::c_int
                    || (i.tm).extension_opcode() == 2 as libc::c_int
                    || (i.tm).extension_opcode() == 3 as libc::c_int
                    || (i.tm).extension_opcode() == 6 as libc::c_int
                    || (i.tm).extension_opcode() == 7 as libc::c_int)
            {
                return 0 as libc::c_int;
            }
            return 1 as libc::c_int;
        }
    } else if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int {
        if (i.tm).base_opcode() as libc::c_int == 0xba as libc::c_int
            && ((i.tm).extension_opcode() >= 4 as libc::c_int
                && (i.tm).extension_opcode() <= 7 as libc::c_int)
        {
            return 1 as libc::c_int;
        }
        if (i.tm).base_opcode() as libc::c_int == 0xc7 as libc::c_int
            && (i.tm.opcode_modifier).opcodeprefix() as libc::c_int == 0 as libc::c_int
            && ((i.tm).extension_opcode() == 1 as libc::c_int
                || (i.tm).extension_opcode() == 3 as libc::c_int
                || (i.tm).extension_opcode() == 6 as libc::c_int)
        {
            return 1 as libc::c_int;
        }
        if (i.tm).base_opcode() as libc::c_int == 0xae as libc::c_int
            && ((i.tm).extension_opcode() == 1 as libc::c_int
                || (i.tm).extension_opcode() == 2 as libc::c_int
                || (i.tm).extension_opcode() == 5 as libc::c_int)
        {
            return 1 as libc::c_int;
        }
        if (i.tm).base_opcode() as libc::c_int == 0x1 as libc::c_int
            && ((i.tm).extension_opcode() == 2 as libc::c_int
                || (i.tm).extension_opcode() == 3 as libc::c_int
                || (i.tm).extension_opcode() == 6 as libc::c_int)
        {
            return 1 as libc::c_int;
        }
    }
    dest = (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint);
    if ((i.tm.opcode_modifier).immext() as libc::c_int != 0
        || (i.tm.opcode_modifier).vexsources() as libc::c_int == 2 as libc::c_int)
        && (i.types[dest as usize].bitfield).imm8() as libc::c_int != 0
    {
        dest = dest.wrapping_sub(1);
        dest;
    }
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 0 as libc::c_int
        && (base_opcode == 0x1 as libc::c_int as libc::c_uint
            || base_opcode == 0x9 as libc::c_int as libc::c_uint
            || base_opcode == 0x11 as libc::c_int as libc::c_uint
            || base_opcode == 0x19 as libc::c_int as libc::c_uint
            || base_opcode == 0x21 as libc::c_int as libc::c_uint
            || base_opcode == 0x29 as libc::c_int as libc::c_uint
            || base_opcode == 0x31 as libc::c_int as libc::c_uint
            || base_opcode == 0x39 as libc::c_int as libc::c_uint
            || base_opcode | 2 as libc::c_int as libc::c_uint
                == 0x87 as libc::c_int as libc::c_uint)
    {
        return 1 as libc::c_int;
    }
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int == 1 as libc::c_int
        && base_opcode == 0xc1 as libc::c_int as libc::c_uint
    {
        return 1 as libc::c_int;
    }
    return ((i.types[dest as usize].bitfield).class() as libc::c_int
        != ClassNone as libc::c_int
        || (i.types[dest as usize].bitfield).instance() as libc::c_int
            == Accum as libc::c_int) as libc::c_int;
}
unsafe extern "C" fn insert_lfence_after() {
    if lfence_after_load != 0 && load_insn_p() != 0 {
        if ((i.tm).base_opcode() as libc::c_int | 0x1 as libc::c_int
            == 0xa7 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int | 0x1 as libc::c_int
                == 0xaf as libc::c_int)
            && i.prefix[4 as libc::c_int as usize] as libc::c_int != 0
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s` changes flags which would affect control flow behavior\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
            );
        }
        let mut p: *mut libc::c_char = frag_more(3 as libc::c_int as size_t);
        let fresh25 = p;
        p = p.offset(1);
        *fresh25 = 0xf as libc::c_int as libc::c_char;
        let fresh26 = p;
        p = p.offset(1);
        *fresh26 = 0xae as libc::c_int as libc::c_char;
        *p = 0xe8 as libc::c_int as libc::c_char;
    }
}
unsafe extern "C" fn insert_lfence_before() {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int != 0 as libc::c_int {
        return;
    }
    if (i.tm).base_opcode() as libc::c_int == 0xff as libc::c_int
        && ((i.tm).extension_opcode() == 2 as libc::c_int
            || (i.tm).extension_opcode() == 4 as libc::c_int)
    {
        if lfence_before_indirect_branch as libc::c_uint
            == lfence_branch_none as libc::c_int as libc::c_uint
        {
            return;
        }
        if i.operands != 1 as libc::c_int as libc::c_uint {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                4729 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void insert_lfence_before(void)\0"))
                    .as_ptr(),
            );
        }
        if i.reg_operands == 1 as libc::c_int as libc::c_uint {
            if lfence_after_load != 0
                || lfence_before_indirect_branch as libc::c_uint
                    == lfence_branch_memory as libc::c_int as libc::c_uint
            {
                return;
            }
        } else if i.mem_operands == 1 as libc::c_int as libc::c_uint
            && lfence_before_indirect_branch as libc::c_uint
                != lfence_branch_register as libc::c_int as libc::c_uint
        {
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"indirect `%s` with memory operand should be avoided\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                i.tm.name,
            );
            return;
        } else {
            return
        }
        if last_insn.kind as libc::c_uint
            != last_insn_other as libc::c_int as libc::c_uint && last_insn.seg == now_seg
        {
            as_warn_where(
                last_insn.file,
                last_insn.line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s` skips -mlfence-before-indirect-branch on `%s`\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                last_insn.name,
                i.tm.name,
            );
            return;
        }
        p = frag_more(3 as libc::c_int as size_t);
        let fresh27 = p;
        p = p.offset(1);
        *fresh27 = 0xf as libc::c_int as libc::c_char;
        let fresh28 = p;
        p = p.offset(1);
        *fresh28 = 0xae as libc::c_int as libc::c_char;
        *p = 0xe8 as libc::c_int as libc::c_char;
        return;
    }
    if lfence_before_ret as libc::c_uint
        != lfence_before_ret_none as libc::c_int as libc::c_uint
        && ((i.tm).base_opcode() as libc::c_int == 0xc2 as libc::c_int
            || (i.tm).base_opcode() as libc::c_int == 0xc3 as libc::c_int)
    {
        if last_insn.kind as libc::c_uint
            != last_insn_other as libc::c_int as libc::c_uint && last_insn.seg == now_seg
        {
            as_warn_where(
                last_insn.file,
                last_insn.line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s` skips -mlfence-before-ret on `%s`\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                last_insn.name,
                i.tm.name,
            );
            return;
        }
        let mut prefix: libc::c_char = (if flag_code as libc::c_uint
            == CODE_64BIT as libc::c_int as libc::c_uint
        {
            0x48 as libc::c_int
        } else if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 {
            0x66 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_char;
        if lfence_before_ret as libc::c_uint
            == lfence_before_ret_not as libc::c_int as libc::c_uint
        {
            p = frag_more(
                ((if prefix as libc::c_int != 0 {
                    2 as libc::c_int
                } else {
                    0 as libc::c_int
                }) + 6 as libc::c_int + 3 as libc::c_int) as size_t,
            );
            if prefix != 0 {
                let fresh29 = p;
                p = p.offset(1);
                *fresh29 = prefix;
            }
            let fresh30 = p;
            p = p.offset(1);
            *fresh30 = 0xf7 as libc::c_int as libc::c_char;
            let fresh31 = p;
            p = p.offset(1);
            *fresh31 = 0x14 as libc::c_int as libc::c_char;
            let fresh32 = p;
            p = p.offset(1);
            *fresh32 = 0x24 as libc::c_int as libc::c_char;
            if prefix != 0 {
                let fresh33 = p;
                p = p.offset(1);
                *fresh33 = prefix;
            }
            let fresh34 = p;
            p = p.offset(1);
            *fresh34 = 0xf7 as libc::c_int as libc::c_char;
            let fresh35 = p;
            p = p.offset(1);
            *fresh35 = 0x14 as libc::c_int as libc::c_char;
            let fresh36 = p;
            p = p.offset(1);
            *fresh36 = 0x24 as libc::c_int as libc::c_char;
        } else {
            p = frag_more(
                ((if prefix as libc::c_int != 0 {
                    1 as libc::c_int
                } else {
                    0 as libc::c_int
                }) + 4 as libc::c_int + 3 as libc::c_int) as size_t,
            );
            if prefix != 0 {
                let fresh37 = p;
                p = p.offset(1);
                *fresh37 = prefix;
            }
            if lfence_before_ret as libc::c_uint
                == lfence_before_ret_or as libc::c_int as libc::c_uint
            {
                let fresh38 = p;
                p = p.offset(1);
                *fresh38 = 0x83 as libc::c_int as libc::c_char;
                let fresh39 = p;
                p = p.offset(1);
                *fresh39 = 0xc as libc::c_int as libc::c_char;
            } else {
                let fresh40 = p;
                p = p.offset(1);
                *fresh40 = 0xc1 as libc::c_int as libc::c_char;
                let fresh41 = p;
                p = p.offset(1);
                *fresh41 = 0x24 as libc::c_int as libc::c_char;
            }
            let fresh42 = p;
            p = p.offset(1);
            *fresh42 = 0x24 as libc::c_int as libc::c_char;
            let fresh43 = p;
            p = p.offset(1);
            *fresh43 = 0 as libc::c_int as libc::c_char;
        }
        let fresh44 = p;
        p = p.offset(1);
        *fresh44 = 0xf as libc::c_int as libc::c_char;
        let fresh45 = p;
        p = p.offset(1);
        *fresh45 = 0xae as libc::c_int as libc::c_char;
        *p = 0xe8 as libc::c_int as libc::c_char;
    }
}
#[inline]
unsafe extern "C" fn match_broadcast_size(
    mut t: *const insn_template,
    mut given: libc::c_uint,
) -> libc::c_int {
    return (((*t).opcode_modifier).broadcast() as libc::c_int == 1 as libc::c_int
        && (i.types[given as usize].bitfield).byte() as libc::c_int != 0
        || ((*t).opcode_modifier).broadcast() as libc::c_int == 2 as libc::c_int
            && (i.types[given as usize].bitfield).word() as libc::c_int != 0
        || ((*t).opcode_modifier).broadcast() as libc::c_int == 3 as libc::c_int
            && (i.types[given as usize].bitfield).dword() as libc::c_int != 0
        || ((*t).opcode_modifier).broadcast() as libc::c_int == 4 as libc::c_int
            && (i.types[given as usize].bitfield).qword() as libc::c_int != 0)
        as libc::c_int;
}
unsafe extern "C" fn check_VecOperands(mut t: *const insn_template) -> libc::c_int {
    let mut current_block: u64;
    let mut op: libc::c_uint = 0;
    let mut cpu: i386_cpu_flags = i386_cpu_flags {
        bitfield: C2RustUnnamed_24 {
            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
        },
    };
    cpu = cpu_flags_and((*t).cpu_flags, avx512);
    if cpu_flags_all_zero(&mut cpu) == 0 && ((*t).cpu_flags.bitfield).cpuavx512vl() == 0
        && (cpu_arch_flags.bitfield).cpuavx512vl() == 0
    {
        op = 0 as libc::c_int as libc::c_uint;
        while op < (*t).operands() {
            if ((*t).operand_types[op as usize].bitfield).zmmword() as libc::c_int != 0
                && ((i.types[op as usize].bitfield).ymmword() as libc::c_int != 0
                    || (i.types[op as usize].bitfield).xmmword() as libc::c_int != 0)
            {
                i.error = unsupported;
                return 1 as libc::c_int;
            }
            op = op.wrapping_add(1);
            op;
        }
    }
    if ((*t).opcode_modifier).sib() == 0 && !(i.index_reg).is_null()
        && (((*i.index_reg).reg_type.bitfield).xmmword() as libc::c_int != 0
            || ((*i.index_reg).reg_type.bitfield).ymmword() as libc::c_int != 0
            || ((*i.index_reg).reg_type.bitfield).zmmword() as libc::c_int != 0)
    {
        i.error = unsupported_vector_index_register;
        return 1 as libc::c_int;
    }
    if ((*t).opcode_modifier).nodefmask() as libc::c_int != 0
        && ((i.mask.reg).is_null()
            || (*i.mask.reg).reg_num as libc::c_int == 0 as libc::c_int)
    {
        i.error = no_default_mask;
        return 1 as libc::c_int;
    }
    if ((*t).opcode_modifier).sib() as libc::c_int != 0
        && ((*t).opcode_modifier).sib() as libc::c_int != 4 as libc::c_int
    {
        if (i.index_reg).is_null()
            || !(((*t).opcode_modifier).sib() as libc::c_int == 1 as libc::c_int
                && ((*i.index_reg).reg_type.bitfield).xmmword() as libc::c_int != 0
                || ((*t).opcode_modifier).sib() as libc::c_int == 2 as libc::c_int
                    && ((*i.index_reg).reg_type.bitfield).ymmword() as libc::c_int != 0
                || ((*t).opcode_modifier).sib() as libc::c_int == 3 as libc::c_int
                    && ((*i.index_reg).reg_type.bitfield).zmmword() as libc::c_int != 0)
        {
            i.error = invalid_vsib_address;
            return 1 as libc::c_int;
        }
        if i.reg_operands == 2 as libc::c_int as libc::c_uint || !(i.mask.reg).is_null()
        {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                6023 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"int check_VecOperands(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        if i.reg_operands == 2 as libc::c_int as libc::c_uint && (i.mask.reg).is_null() {
            if (i.types[0 as libc::c_int as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6026 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"int check_VecOperands(const insn_template *)\0"))
                        .as_ptr(),
                );
            };
            if (i.types[0 as libc::c_int as usize].bitfield).xmmword() as libc::c_int
                != 0
                || (i.types[0 as libc::c_int as usize].bitfield).ymmword() as libc::c_int
                    != 0
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6028 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"int check_VecOperands(const insn_template *)\0"))
                        .as_ptr(),
                );
            };
            if (i.types[2 as libc::c_int as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6029 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"int check_VecOperands(const insn_template *)\0"))
                        .as_ptr(),
                );
            };
            if (i.types[2 as libc::c_int as usize].bitfield).xmmword() as libc::c_int
                != 0
                || (i.types[2 as libc::c_int as usize].bitfield).ymmword() as libc::c_int
                    != 0
            {} else {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6031 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"int check_VecOperands(const insn_template *)\0"))
                        .as_ptr(),
                );
            };
            if operand_check as libc::c_uint == check_none as libc::c_int as libc::c_uint
            {
                return 0 as libc::c_int;
            }
            if register_number(i.op[0 as libc::c_int as usize].regs)
                != register_number(i.index_reg)
                && register_number(i.op[2 as libc::c_int as usize].regs)
                    != register_number(i.index_reg)
                && register_number(i.op[0 as libc::c_int as usize].regs)
                    != register_number(i.op[2 as libc::c_int as usize].regs)
            {
                return 0 as libc::c_int;
            }
            if operand_check as libc::c_uint
                == check_error as libc::c_int as libc::c_uint
            {
                i.error = invalid_vector_register_set;
                return 1 as libc::c_int;
            }
            as_warn(
                dcgettext(
                    0 as *const libc::c_char,
                    b"mask, index, and destination registers should be distinct\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        } else if i.reg_operands == 1 as libc::c_int as libc::c_uint
            && !(i.mask.reg).is_null()
        {
            if (i.types[1 as libc::c_int as usize].bitfield).class() as libc::c_int
                == RegSIMD as libc::c_int
                && ((i.types[1 as libc::c_int as usize].bitfield).xmmword()
                    as libc::c_int != 0
                    || (i.types[1 as libc::c_int as usize].bitfield).ymmword()
                        as libc::c_int != 0
                    || (i.types[1 as libc::c_int as usize].bitfield).zmmword()
                        as libc::c_int != 0)
                && register_number(i.op[1 as libc::c_int as usize].regs)
                    == register_number(i.index_reg)
            {
                if operand_check as libc::c_uint
                    == check_error as libc::c_int as libc::c_uint
                {
                    i.error = invalid_vector_register_set;
                    return 1 as libc::c_int;
                }
                if operand_check as libc::c_uint
                    != check_none as libc::c_int as libc::c_uint
                {
                    as_warn(
                        dcgettext(
                            0 as *const libc::c_char,
                            b"index and destination registers should be distinct\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                }
            }
        }
    }
    if ((*t).operand_types[0 as libc::c_int as usize].bitfield).tmmword() as libc::c_int
        != 0 && i.reg_operands == 3 as libc::c_int as libc::c_uint
    {
        if register_number(i.op[0 as libc::c_int as usize].regs)
            == register_number(i.op[1 as libc::c_int as usize].regs)
            || register_number(i.op[0 as libc::c_int as usize].regs)
                == register_number(i.op[2 as libc::c_int as usize].regs)
            || register_number(i.op[1 as libc::c_int as usize].regs)
                == register_number(i.op[2 as libc::c_int as usize].regs)
        {
            i.error = invalid_tmm_register_set;
            return 1 as libc::c_int;
        }
    }
    if i.broadcast.type_0 != 0 {
        let mut type_0: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        let mut overlap: i386_operand_type = i386_operand_type {
            bitfield: C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            },
        };
        op = i.broadcast.operand;
        if ((*t).opcode_modifier).broadcast() == 0
            || i.flags[op as usize] & 2 as libc::c_int as libc::c_uint == 0
            || (i.types[op as usize].bitfield).unspecified() == 0
                && match_broadcast_size(t, op) == 0
        {
            current_block = 7710163862378243729;
        } else {
            i
                .broadcast
                .bytes = (((1 as libc::c_int)
                << ((*t).opcode_modifier).broadcast() as libc::c_int - 1 as libc::c_int)
                as libc::c_uint)
                .wrapping_mul(i.broadcast.type_0);
            operand_type_set(&mut type_0, 0 as libc::c_int as libc::c_uint);
            match i.broadcast.bytes {
                2 => {
                    current_block = 3580328737957080674;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                4 => {
                    current_block = 11981942835245998357;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                8 => {
                    current_block = 9366293318226032799;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                16 => {
                    current_block = 15527776988400808025;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                32 => {
                    current_block = 2047002486878056599;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                64 => {
                    current_block = 1131073125393752371;
                    match current_block {
                        1131073125393752371 => {
                            (type_0.bitfield)
                                .set_zmmword(1 as libc::c_int as libc::c_uint);
                        }
                        11981942835245998357 => {
                            (type_0.bitfield)
                                .set_dword(1 as libc::c_int as libc::c_uint);
                        }
                        9366293318226032799 => {
                            (type_0.bitfield)
                                .set_qword(1 as libc::c_int as libc::c_uint);
                        }
                        15527776988400808025 => {
                            (type_0.bitfield)
                                .set_xmmword(1 as libc::c_int as libc::c_uint);
                        }
                        2047002486878056599 => {
                            (type_0.bitfield)
                                .set_ymmword(1 as libc::c_int as libc::c_uint);
                        }
                        _ => {
                            (type_0.bitfield).set_word(1 as libc::c_int as libc::c_uint);
                        }
                    }
                    overlap = operand_type_and(type_0, (*t).operand_types[op as usize]);
                    if ((*t).operand_types[op as usize].bitfield).class() as libc::c_int
                        == RegSIMD as libc::c_int
                        && ((*t).operand_types[op as usize].bitfield).byte()
                            as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).word()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).dword()
                                as libc::c_int
                            + ((*t).operand_types[op as usize].bitfield).qword()
                                as libc::c_int > 1 as libc::c_int
                    {
                        (overlap.bitfield).set_xmmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_ymmword(0 as libc::c_int as libc::c_uint);
                        (overlap.bitfield).set_zmmword(0 as libc::c_int as libc::c_uint);
                    }
                    if operand_type_all_zero(&mut overlap) != 0 {
                        current_block = 7710163862378243729;
                    } else if ((*t).opcode_modifier).checkregsize() != 0 {
                        let mut j: libc::c_uint = 0;
                        (type_0.bitfield)
                            .set_baseindex(1 as libc::c_int as libc::c_uint);
                        j = 0 as libc::c_int as libc::c_uint;
                        loop {
                            if !(j < i.operands) {
                                current_block = 15514718523126015390;
                                break;
                            }
                            if j != op
                                && operand_type_register_match(
                                    i.types[j as usize],
                                    (*t).operand_types[j as usize],
                                    type_0,
                                    (*t).operand_types[op as usize],
                                ) == 0
                            {
                                current_block = 7710163862378243729;
                                break;
                            }
                            j = j.wrapping_add(1);
                            j;
                        }
                    } else {
                        current_block = 15514718523126015390;
                    }
                }
                _ => {
                    current_block = 7710163862378243729;
                }
            }
        }
        match current_block {
            15514718523126015390 => {}
            _ => {
                i.error = unsupported_broadcast;
                return 1 as libc::c_int;
            }
        }
    } else if ((*t).opcode_modifier).broadcast() as libc::c_int != 0
        && i.mem_operands != 0
    {
        op = 0 as libc::c_int as libc::c_uint;
        while op < i.operands {
            if i.flags[op as usize] & 2 as libc::c_int as libc::c_uint != 0 {
                break;
            }
            op = op.wrapping_add(1);
            op;
        }
        if op < i.operands {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                6169 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 45],
                    &[libc::c_char; 45],
                >(b"int check_VecOperands(const insn_template *)\0"))
                    .as_ptr(),
            );
        };
        if match_broadcast_size(t, op) != 0 {
            i.error = broadcast_needed;
            return 1 as libc::c_int;
        }
    } else {
        op = (5 as libc::c_int - 1 as libc::c_int) as libc::c_uint;
    }
    if !(i.mask.reg).is_null() {
        let mut current_block_96: u64;
        match ((*t).opcode_modifier).masking() as libc::c_int {
            3 => {
                current_block_96 = 7301440000599063274;
            }
            2 => {
                if i.mask.zeroing != 0 {
                    current_block_96 = 11673225931131366517;
                } else {
                    current_block_96 = 7301440000599063274;
                }
            }
            0 => {
                current_block_96 = 11673225931131366517;
            }
            1 => {
                if i.mask.zeroing != 0 && i.mem_operands != 0 {
                    op = 0 as libc::c_int as libc::c_uint;
                    while op < i.operands {
                        if i.flags[op as usize] & 2 as libc::c_int as libc::c_uint != 0 {
                            break;
                        }
                        op = op.wrapping_add(1);
                        op;
                    }
                    if op < i.operands {} else {
                        as_abort(
                            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                            6203 as libc::c_int,
                            (*::core::mem::transmute::<
                                &[u8; 45],
                                &[libc::c_char; 45],
                            >(b"int check_VecOperands(const insn_template *)\0"))
                                .as_ptr(),
                        );
                    };
                    if op == (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
                    {
                        i.error = unsupported_masking;
                        return 1 as libc::c_int;
                    }
                }
                current_block_96 = 7301440000599063274;
            }
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    6212 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 45],
                        &[libc::c_char; 45],
                    >(b"int check_VecOperands(const insn_template *)\0"))
                        .as_ptr(),
                );
            }
        }
        match current_block_96 {
            7301440000599063274 => {}
            _ => {
                i.error = unsupported_masking;
                return 1 as libc::c_int;
            }
        }
    }
    if !(i.mask.reg).is_null()
        && i.mask.operand != (i.operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
    {
        i.error = mask_not_on_destination;
        return 1 as libc::c_int;
    }
    if i.rounding.type_0 as libc::c_int != rc_none as libc::c_int {
        if ((*t).opcode_modifier).sae() == 0
            || i.rounding.type_0 as libc::c_int != saeonly as libc::c_int
                && ((*t).opcode_modifier).staticrounding() == 0
        {
            i.error = unsupported_rc_sae;
            return 1 as libc::c_int;
        }
        if i.imm_operands > 1 as libc::c_int as libc::c_uint
            && i.rounding.operand
                != (i.imm_operands).wrapping_sub(1 as libc::c_int as libc::c_uint)
        {
            i.error = rc_sae_operand_not_last_imm;
            return 1 as libc::c_int;
        }
    }
    if ((*t).cpu_flags.bitfield).cpuxop() as libc::c_int != 0
        && (*t).operands() as libc::c_int == 5 as libc::c_int
    {
        if (*i.op[0 as libc::c_int as usize].imms).X_op() as libc::c_int
            != O_constant as libc::c_int
            || fits_in_imm4((*i.op[0 as libc::c_int as usize].imms).X_add_number) == 0
        {
            i.error = bad_imm4;
            return 1 as libc::c_int;
        }
        operand_type_set(
            &mut *(i.types).as_mut_ptr().offset(0 as libc::c_int as isize),
            0 as libc::c_int as libc::c_uint,
        );
    }
    if ((*t).opcode_modifier).disp8memshift() as libc::c_int != 0
        && i.disp_encoding as libc::c_uint
            != disp_encoding_32bit as libc::c_int as libc::c_uint
    {
        if i.broadcast.type_0 != 0 {
            i
                .memshift = (((*t).opcode_modifier).broadcast() as libc::c_int
                - 1 as libc::c_int) as libc::c_uint;
        } else if ((*t).opcode_modifier).disp8memshift() as libc::c_int
            != 7 as libc::c_int
        {
            i.memshift = ((*t).opcode_modifier).disp8memshift();
        } else {
            let mut type_1: *const i386_operand_type = 0 as *const i386_operand_type;
            i.memshift = 0 as libc::c_int as libc::c_uint;
            op = 0 as libc::c_int as libc::c_uint;
            while op < i.operands {
                if i.flags[op as usize] & 2 as libc::c_int as libc::c_uint != 0 {
                    if ((*t).opcode_modifier).evex() as libc::c_int == 4 as libc::c_int {
                        i
                            .memshift = (2 as libc::c_int
                            + (i.suffix as libc::c_int == 'q' as i32) as libc::c_int)
                            as libc::c_uint;
                    } else if ((*t).operand_types[op as usize].bitfield).xmmword()
                        as libc::c_int
                        + ((*t).operand_types[op as usize].bitfield).ymmword()
                            as libc::c_int
                        + ((*t).operand_types[op as usize].bitfield).zmmword()
                            as libc::c_int <= 1 as libc::c_int
                    {
                        type_1 = &*((*t).operand_types).as_ptr().offset(op as isize)
                            as *const i386_operand_type;
                    } else if (i.types[op as usize].bitfield).unspecified() == 0 {
                        type_1 = &mut *(i.types).as_mut_ptr().offset(op as isize)
                            as *mut i386_operand_type;
                    }
                } else if (i.types[op as usize].bitfield).class() as libc::c_int
                    == RegSIMD as libc::c_int
                    && ((*t).opcode_modifier).evex() as libc::c_int != 4 as libc::c_int
                {
                    if (i.types[op as usize].bitfield).zmmword() != 0 {
                        i.memshift = 6 as libc::c_int as libc::c_uint;
                    } else if (i.types[op as usize].bitfield).ymmword() as libc::c_int
                        != 0 && i.memshift < 5 as libc::c_int as libc::c_uint
                    {
                        i.memshift = 5 as libc::c_int as libc::c_uint;
                    } else if (i.types[op as usize].bitfield).xmmword() as libc::c_int
                        != 0 && i.memshift < 4 as libc::c_int as libc::c_uint
                    {
                        i.memshift = 4 as libc::c_int as libc::c_uint;
                    }
                }
                op = op.wrapping_add(1);
                op;
            }
            if !type_1.is_null() {
                if ((*type_1).bitfield).zmmword() != 0 {
                    i.memshift = 6 as libc::c_int as libc::c_uint;
                } else if ((*type_1).bitfield).ymmword() != 0 {
                    i.memshift = 5 as libc::c_int as libc::c_uint;
                } else if ((*type_1).bitfield).xmmword() != 0 {
                    i.memshift = 4 as libc::c_int as libc::c_uint;
                }
            }
            if i.memshift == 0 as libc::c_int as libc::c_uint {
                i.memshift = -(1 as libc::c_int) as libc::c_uint;
            }
        }
        op = 0 as libc::c_int as libc::c_uint;
        while op < i.operands {
            if operand_type_check(i.types[op as usize], disp) != 0
                && (*i.op[op as usize].disps).X_op() as libc::c_int
                    == O_constant as libc::c_int
            {
                if fits_in_disp8((*i.op[op as usize].disps).X_add_number) != 0 {
                    (i.types[op as usize].bitfield)
                        .set_disp8(1 as libc::c_int as libc::c_uint);
                    return 0 as libc::c_int;
                }
                (i.types[op as usize].bitfield)
                    .set_disp8(0 as libc::c_int as libc::c_uint);
            }
            op = op.wrapping_add(1);
            op;
        }
    }
    i.memshift = 0 as libc::c_int as libc::c_uint;
    return 0 as libc::c_int;
}
unsafe extern "C" fn VEX_check_encoding(mut t: *const insn_template) -> libc::c_int {
    if i.vec_encoding as libc::c_uint
        == vex_encoding_error as libc::c_int as libc::c_uint
    {
        i.error = unsupported;
        return 1 as libc::c_int;
    }
    if i.vec_encoding as libc::c_uint == vex_encoding_evex as libc::c_int as libc::c_uint
    {
        if !is_evex_encoding(t) {
            i.error = unsupported;
            return 1 as libc::c_int;
        }
        return 0 as libc::c_int;
    }
    if ((*t).opcode_modifier).vex() == 0 {
        if i.vec_encoding as libc::c_uint
            != vex_encoding_default as libc::c_int as libc::c_uint
        {
            i.error = unsupported;
            return 1 as libc::c_int;
        }
        return 0 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn update_imm(mut j: libc::c_uint) -> libc::c_int {
    let mut overlap: i386_operand_type = i.types[j as usize];
    if ((overlap.bitfield).imm8() as libc::c_int != 0
        || (overlap.bitfield).imm8s() as libc::c_int != 0
        || (overlap.bitfield).imm16() as libc::c_int != 0
        || (overlap.bitfield).imm32() as libc::c_int != 0
        || (overlap.bitfield).imm32s() as libc::c_int != 0
        || (overlap.bitfield).imm64() as libc::c_int != 0)
        && operand_type_equal(&mut overlap, &imm8) == 0
        && operand_type_equal(&mut overlap, &imm8s) == 0
        && operand_type_equal(&mut overlap, &imm16) == 0
        && operand_type_equal(&mut overlap, &imm32) == 0
        && operand_type_equal(&mut overlap, &imm32s) == 0
        && operand_type_equal(&mut overlap, &imm64) == 0
    {
        if i.suffix != 0 {
            let mut temp: i386_operand_type = i386_operand_type {
                bitfield: C2RustUnnamed_33 {
                    class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                },
            };
            operand_type_set(&mut temp, 0 as libc::c_int as libc::c_uint);
            if i.suffix as libc::c_int == 'b' as i32 {
                (temp.bitfield).set_imm8((overlap.bitfield).imm8());
                (temp.bitfield).set_imm8s((overlap.bitfield).imm8s());
            } else if i.suffix as libc::c_int == 'w' as i32 {
                (temp.bitfield).set_imm16((overlap.bitfield).imm16());
            } else if i.suffix as libc::c_int == 'q' as i32 {
                (temp.bitfield).set_imm64((overlap.bitfield).imm64());
                (temp.bitfield).set_imm32s((overlap.bitfield).imm32s());
            } else {
                (temp.bitfield).set_imm32((overlap.bitfield).imm32());
            }
            overlap = temp;
        } else if operand_type_equal(&mut overlap, &imm16_32_32s) != 0
            || operand_type_equal(&mut overlap, &imm16_32) != 0
            || operand_type_equal(&mut overlap, &imm16_32s) != 0
        {
            if (flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint)
                as libc::c_int
                ^ (i.prefix[3 as libc::c_int as usize] as libc::c_int
                    != 0 as libc::c_int) as libc::c_int != 0
            {
                overlap = imm16;
            } else {
                overlap = imm32s;
            }
        } else if i.prefix[6 as libc::c_int as usize] as libc::c_int & 8 as libc::c_int
            != 0
        {
            overlap = operand_type_and(overlap, imm32s);
        } else if i.prefix[3 as libc::c_int as usize] != 0 {
            overlap = operand_type_and(
                overlap,
                if flag_code as libc::c_uint != CODE_16BIT as libc::c_int as libc::c_uint
                {
                    imm16
                } else {
                    imm32
                },
            );
        }
        if operand_type_equal(&mut overlap, &imm8) == 0
            && operand_type_equal(&mut overlap, &imm8s) == 0
            && operand_type_equal(&mut overlap, &imm16) == 0
            && operand_type_equal(&mut overlap, &imm32) == 0
            && operand_type_equal(&mut overlap, &imm32s) == 0
            && operand_type_equal(&mut overlap, &imm64) == 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"no instruction mnemonic suffix given; can't determine immediate size\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
    }
    i.types[j as usize] = overlap;
    return 1 as libc::c_int;
}
#[inline]
unsafe extern "C" fn set_rex_vrex(
    mut r: *const reg_entry,
    mut rex_bit: libc::c_uint,
    mut do_sse2avx: bool,
) {
    if (*r).reg_flags as libc::c_int & 0x1 as libc::c_int != 0 {
        if i.rex as libc::c_uint & rex_bit != 0 {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"same type of prefix used twice\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        i.rex = (i.rex as libc::c_uint | rex_bit) as rex_byte;
    } else if do_sse2avx as libc::c_int != 0 && i.rex as libc::c_uint & rex_bit != 0
        && !(i.vex.register_specifier).is_null()
    {
        if i.vex.register_specifier == r {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                7988 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 58],
                    &[libc::c_char; 58],
                >(b"void set_rex_vrex(const reg_entry *, unsigned int, _Bool)\0"))
                    .as_ptr(),
            );
        };
        i
            .vex
            .register_specifier = (i.vex.register_specifier)
            .offset(8 as libc::c_int as isize);
    }
    if (*r).reg_flags as libc::c_int & 0x4 as libc::c_int != 0 {
        i.vrex = (i.vrex as libc::c_uint | rex_bit) as rex_byte;
    }
}
#[inline]
unsafe extern "C" fn frag_opcode_byte(mut byte: libc::c_uchar) {
    if now_seg
        != &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection
    {
        frag_append_1_char(byte as libc::c_int);
    } else {
        abs_section_offset = abs_section_offset.wrapping_add(1);
        abs_section_offset;
    };
}
unsafe extern "C" fn flip_code16(mut code16: libc::c_uint) -> libc::c_uint {
    if (i.tm).operands() as libc::c_int == 1 as libc::c_int {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            8671 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 39],
                &[libc::c_char; 39],
            >(b"unsigned int flip_code16(unsigned int)\0"))
                .as_ptr(),
        );
    };
    return (if i.prefix[6 as libc::c_int as usize] as libc::c_int & 8 as libc::c_int == 0
        && (if code16 != 0 {
            ((i.tm.operand_types[0 as libc::c_int as usize].bitfield).disp32()
                as libc::c_int != 0
                || (i.tm.operand_types[0 as libc::c_int as usize].bitfield).disp32s()
                    as libc::c_int != 0) as libc::c_int
        } else {
            (i.tm.operand_types[0 as libc::c_int as usize].bitfield).disp16()
                as libc::c_int
        }) != 0
    {
        1 as libc::c_int
    } else {
        0 as libc::c_int
    }) as libc::c_uint;
}
unsafe extern "C" fn output_branch() {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut code16: libc::c_int = 0;
    let mut prefix: libc::c_int = 0;
    let mut subtype: relax_substateT = 0;
    let mut sym: *mut symbolS = 0 as *mut symbolS;
    let mut off: offsetT = 0;
    if now_seg
        == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"relaxable branches not supported in absolute section\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return;
    }
    code16 = if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint {
        1 as libc::c_int
    } else {
        0 as libc::c_int
    };
    size = if i.disp_encoding as libc::c_uint
        == disp_encoding_32bit as libc::c_int as libc::c_uint
    {
        2 as libc::c_int
    } else {
        0 as libc::c_int
    };
    prefix = 0 as libc::c_int;
    if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        prefix = 1 as libc::c_int;
        i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
        code16 = (code16 as libc::c_uint ^ flip_code16(code16 as libc::c_uint))
            as libc::c_int;
    }
    if i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x2e as libc::c_int
        || i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x3e as libc::c_int
    {
        prefix += 1;
        prefix;
        i.prefixes = (i.prefixes).wrapping_sub(1);
        i.prefixes;
    }
    if i.prefix[6 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        prefix += 1;
        prefix;
        i.prefixes = (i.prefixes).wrapping_sub(1);
        i.prefixes;
    }
    if i.prefix[4 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        prefix += 1;
        prefix;
        i.prefixes = (i.prefixes).wrapping_sub(1);
        i.prefixes;
    }
    if i.prefixes != 0 as libc::c_int as libc::c_uint {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"skipping prefixes on `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
    }
    frag_grow((prefix + 2 as libc::c_int + 4 as libc::c_int) as size_t);
    p = frag_more((prefix + 1 as libc::c_int) as size_t);
    if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        let fresh46 = p;
        p = p.offset(1);
        *fresh46 = 0x66 as libc::c_int as libc::c_char;
    }
    if i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x2e as libc::c_int
        || i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x3e as libc::c_int
    {
        let fresh47 = p;
        p = p.offset(1);
        *fresh47 = i.prefix[1 as libc::c_int as usize] as libc::c_char;
    }
    if i.prefix[4 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        let fresh48 = p;
        p = p.offset(1);
        *fresh48 = 0xf2 as libc::c_int as libc::c_char;
    }
    if i.prefix[6 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        let fresh49 = p;
        p = p.offset(1);
        *fresh49 = i.prefix[6 as libc::c_int as usize] as libc::c_char;
    }
    *p = (i.tm).base_opcode() as libc::c_char;
    if *p as libc::c_uchar as libc::c_int == 0xeb as libc::c_int {
        subtype = ((0 as libc::c_int) << 2 as libc::c_int | size) as relax_substateT;
    } else if (cpu_arch_flags.bitfield).cpui386() != 0 {
        subtype = ((1 as libc::c_int) << 2 as libc::c_int | size) as relax_substateT;
    } else {
        subtype = ((2 as libc::c_int) << 2 as libc::c_int | size) as relax_substateT;
    }
    subtype |= code16 as libc::c_uint;
    sym = (*i.op[0 as libc::c_int as usize].disps).X_add_symbol;
    off = (*i.op[0 as libc::c_int as usize].disps).X_add_number;
    if (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
        != O_constant as libc::c_int
        && (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
            != O_symbol as libc::c_int
    {
        sym = make_expr_symbol(i.op[0 as libc::c_int as usize].disps);
        off = 0 as libc::c_int as offsetT;
    }
    frag_var(
        rs_machine_dependent,
        5 as libc::c_int as size_t,
        i.reloc[0 as libc::c_int as usize] as size_t,
        subtype,
        sym,
        off,
        p,
    );
}
unsafe extern "C" fn need_plt32_p(mut s: *mut symbolS) -> bool {
    if 1 as libc::c_int == 0 {
        return 0 as libc::c_int != 0;
    }
    if object_64bit == 0 {
        return 0 as libc::c_int != 0;
    }
    if s.is_null() {
        return 0 as libc::c_int != 0;
    }
    if S_IS_WEAK(s) != 0 || S_IS_DEFINED(s) == 0 {
        return 1 as libc::c_int != 0;
    }
    if S_IS_EXTERNAL(s) == 0 {
        return 0 as libc::c_int != 0;
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn output_jump() {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut fixP: *mut fixS = 0 as *mut fixS;
    let mut jump_reloc: bfd_reloc_code_real_type = i.reloc[0 as libc::c_int as usize];
    if (i.tm.opcode_modifier).jump() as libc::c_int == 3 as libc::c_int {
        size = 1 as libc::c_int;
        if i.prefix[2 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
            frag_opcode_byte(0x67 as libc::c_int as libc::c_uchar);
            i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
        }
        if i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x2e as libc::c_int
            || i.prefix[1 as libc::c_int as usize] as libc::c_int == 0x3e as libc::c_int
        {
            frag_opcode_byte(i.prefix[1 as libc::c_int as usize]);
            i.prefixes = (i.prefixes).wrapping_sub(1);
            i.prefixes;
        }
    } else {
        let mut code16: libc::c_int = 0;
        code16 = 0 as libc::c_int;
        if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint {
            code16 = 1 as libc::c_int;
        }
        if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
            frag_opcode_byte(0x66 as libc::c_int as libc::c_uchar);
            i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
            code16 = (code16 as libc::c_uint ^ flip_code16(code16 as libc::c_uint))
                as libc::c_int;
        }
        size = 4 as libc::c_int;
        if code16 != 0 {
            size = 2 as libc::c_int;
        }
    }
    if i.prefix[4 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        frag_opcode_byte(i.prefix[4 as libc::c_int as usize]);
        i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
    }
    if i.prefix[6 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        frag_opcode_byte(i.prefix[6 as libc::c_int as usize]);
        i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
    }
    if i.prefixes != 0 as libc::c_int as libc::c_uint {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"skipping prefixes on `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
    }
    if now_seg
        == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection
    {
        abs_section_offset = (abs_section_offset as libc::c_ulong)
            .wrapping_add((i.opcode_length as libc::c_int + size) as libc::c_ulong)
            as addressT as addressT;
        return;
    }
    p = frag_more((i.opcode_length as libc::c_int + size) as size_t);
    match i.opcode_length as libc::c_int {
        2 => {
            let fresh50 = p;
            p = p.offset(1);
            *fresh50 = ((i.tm).base_opcode() as libc::c_int >> 8 as libc::c_int)
                as libc::c_char;
        }
        1 => {}
        _ => {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                8892 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 23],
                    &[libc::c_char; 23],
                >(b"void output_jump(void)\0"))
                    .as_ptr(),
            );
        }
    }
    let fresh51 = p;
    p = p.offset(1);
    *fresh51 = (i.tm).base_opcode() as libc::c_char;
    if size == 4 as libc::c_int
        && jump_reloc as libc::c_uint == BFD_RELOC_NONE as libc::c_int as libc::c_uint
        && need_plt32_p((*i.op[0 as libc::c_int as usize].disps).X_add_symbol)
            as libc::c_int != 0
    {
        jump_reloc = BFD_RELOC_X86_64_PLT32;
    }
    jump_reloc = reloc(
        size as libc::c_uint,
        1 as libc::c_int,
        1 as libc::c_int,
        jump_reloc,
    );
    fixP = fix_new_exp(
        frag_now,
        p.offset_from(((*frag_now).fr_literal).as_mut_ptr()) as libc::c_long
            as libc::c_ulong,
        size as libc::c_ulong,
        i.op[0 as libc::c_int as usize].disps,
        1 as libc::c_int,
        jump_reloc,
    );
    match size {
        1 => {
            (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
        }
        2 => {
            if (i.tm).base_opcode() as libc::c_int == 0xc7f8 as libc::c_int {
                (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
            }
        }
        4 => {
            if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
                (*fixP).set_fx_signed(1 as libc::c_int as libc::c_uint);
            }
        }
        _ => {}
    };
}
unsafe extern "C" fn output_interseg_jump() {
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut prefix: libc::c_int = 0;
    let mut code16: libc::c_int = 0;
    code16 = 0 as libc::c_int;
    if flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint {
        code16 = 1 as libc::c_int;
    }
    prefix = 0 as libc::c_int;
    if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        prefix = 1 as libc::c_int;
        i.prefixes = (i.prefixes).wrapping_sub(1 as libc::c_int as libc::c_uint);
        code16 ^= 1 as libc::c_int;
    }
    if i.prefix[6 as libc::c_int as usize] == 0 {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            8949 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void output_interseg_jump(void)\0"))
                .as_ptr(),
        );
    };
    size = 4 as libc::c_int;
    if code16 != 0 {
        size = 2 as libc::c_int;
    }
    if i.prefixes != 0 as libc::c_int as libc::c_uint {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"skipping prefixes on `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            i.tm.name,
        );
    }
    if now_seg
        == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection
    {
        abs_section_offset = (abs_section_offset as libc::c_ulong)
            .wrapping_add(
                (prefix + 1 as libc::c_int + 2 as libc::c_int + size) as libc::c_ulong,
            ) as addressT as addressT;
        return;
    }
    p = frag_more((prefix + 1 as libc::c_int + 2 as libc::c_int + size) as size_t);
    if i.prefix[3 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        let fresh52 = p;
        p = p.offset(1);
        *fresh52 = 0x66 as libc::c_int as libc::c_char;
    }
    if i.prefix[6 as libc::c_int as usize] as libc::c_int != 0 as libc::c_int {
        let fresh53 = p;
        p = p.offset(1);
        *fresh53 = i.prefix[6 as libc::c_int as usize] as libc::c_char;
    }
    let fresh54 = p;
    p = p.offset(1);
    *fresh54 = (i.tm).base_opcode() as libc::c_char;
    if (*i.op[1 as libc::c_int as usize].imms).X_op() as libc::c_int
        == O_constant as libc::c_int
    {
        let mut n: offsetT = (*i.op[1 as libc::c_int as usize].imms).X_add_number;
        if size == 2 as libc::c_int && fits_in_unsigned_word(n as addressT) == 0
            && fits_in_signed_word(n as addressT) == 0
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"16-bit jump out of range\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return;
        }
        number_to_chars_littleendian(p, n as valueT, size);
    } else {
        fix_new_exp(
            frag_now,
            p.offset_from(((*frag_now).fr_literal).as_mut_ptr()) as libc::c_long
                as libc::c_ulong,
            size as libc::c_ulong,
            i.op[1 as libc::c_int as usize].imms,
            0 as libc::c_int,
            reloc(
                size as libc::c_uint,
                0 as libc::c_int,
                0 as libc::c_int,
                i.reloc[1 as libc::c_int as usize],
            ),
        );
    }
    p = p.offset(size as isize);
    if (*i.op[0 as libc::c_int as usize].imms).X_op() as libc::c_int
        == O_constant as libc::c_int
    {
        number_to_chars_littleendian(
            p,
            (*i.op[0 as libc::c_int as usize].imms).X_add_number as valueT,
            2 as libc::c_int,
        );
    } else {
        fix_new_exp(
            frag_now,
            p.offset_from(((*frag_now).fr_literal).as_mut_ptr()) as libc::c_long
                as libc::c_ulong,
            2 as libc::c_int as libc::c_ulong,
            i.op[0 as libc::c_int as usize].imms,
            0 as libc::c_int,
            reloc(
                2 as libc::c_int as libc::c_uint,
                0 as libc::c_int,
                0 as libc::c_int,
                i.reloc[0 as libc::c_int as usize],
            ),
        );
    };
}
unsafe extern "C" fn encoding_length(
    mut start_frag: *const fragS,
    mut start_off: offsetT,
    mut frag_now_ptr: *const libc::c_char,
) -> libc::c_uint {
    let mut len: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    if start_frag != frag_now as *const fragS {
        let mut fr: *const fragS = start_frag;
        loop {
            len = (len as libc::c_ulong).wrapping_add((*fr).fr_fix) as libc::c_uint
                as libc::c_uint;
            fr = (*fr).fr_next;
            if !(!fr.is_null() && fr != frag_now as *const fragS) {
                break;
            }
        }
    }
    return (len as libc::c_long - start_off
        + frag_now_ptr.offset_from(((*frag_now).fr_literal).as_mut_ptr())
            as libc::c_long) as libc::c_uint;
}
unsafe extern "C" fn maybe_fused_with_jcc_p(
    mut mf_cmp_p: *mut mf_cmp_kind,
) -> libc::c_int {
    if !(i.base_reg).is_null()
        && (*i.base_reg).reg_num as libc::c_int
            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
    {
        return 0 as libc::c_int;
    }
    if (i.tm.opcode_modifier).opcodespace() as libc::c_int != 0 as libc::c_int {
        return 0 as libc::c_int;
    }
    if (i.tm).base_opcode() as libc::c_int <= 5 as libc::c_int
        || (i.tm).base_opcode() as libc::c_int >= 0x28 as libc::c_int
            && (i.tm).base_opcode() as libc::c_int <= 0x2d as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 3 as libc::c_int == 0x83 as libc::c_int
            && ((i.tm).extension_opcode() == 0x5 as libc::c_int
                || (i.tm).extension_opcode() == 0 as libc::c_int)
    {
        *mf_cmp_p = mf_cmp_alu_cmp;
        return !(i.mem_operands != 0 && i.imm_operands != 0) as libc::c_int;
    }
    if (i.tm).base_opcode() as libc::c_int >= 0x20 as libc::c_int
        && (i.tm).base_opcode() as libc::c_int <= 0x25 as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 3 as libc::c_int == 0x83 as libc::c_int
            && (i.tm).extension_opcode() == 0x4 as libc::c_int
    {
        *mf_cmp_p = mf_cmp_test_and;
        return !(i.mem_operands != 0 && i.imm_operands != 0) as libc::c_int;
    }
    if (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int == 0x85 as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int == 0xa9 as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int == 0xf7 as libc::c_int
            && (i.tm).extension_opcode() == 0 as libc::c_int
    {
        *mf_cmp_p = mf_cmp_test_and;
        return !(i.mem_operands != 0 && i.imm_operands != 0) as libc::c_int;
    }
    if (i.tm).base_opcode() as libc::c_int >= 0x38 as libc::c_int
        && (i.tm).base_opcode() as libc::c_int <= 0x3d as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 3 as libc::c_int == 0x83 as libc::c_int
            && (i.tm).extension_opcode() == 0x7 as libc::c_int
    {
        *mf_cmp_p = mf_cmp_alu_cmp;
        return !(i.mem_operands != 0 && i.imm_operands != 0) as libc::c_int;
    }
    if (i.tm.cpu_flags.bitfield).cpuno64() as libc::c_int != 0
        && (i.tm).base_opcode() as libc::c_int | 0xf as libc::c_int
            == 0x4f as libc::c_int
        || (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int == 0xff as libc::c_int
            && (i.tm).extension_opcode() <= 0x1 as libc::c_int
    {
        *mf_cmp_p = mf_cmp_incdec;
        return (i.mem_operands == 0) as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn add_fused_jcc_padding_frag_p(
    mut mf_cmp_p: *mut mf_cmp_kind,
) -> libc::c_int {
    if align_branch_power == 0
        || now_seg
            == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection || (cpu_arch_flags.bitfield).cpui386() == 0
        || align_branch & align_branch_fused_bit as libc::c_int as libc::c_uint == 0
    {
        return 0 as libc::c_int;
    }
    if maybe_fused_with_jcc_p(mf_cmp_p) != 0 {
        if last_insn.kind as libc::c_uint
            == last_insn_other as libc::c_int as libc::c_uint || last_insn.seg != now_seg
        {
            return 1 as libc::c_int;
        }
        if flag_debug != 0 {
            as_warn_where(
                last_insn.file,
                last_insn.line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s` skips -malign-branch-boundary on `%s`\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                last_insn.name,
                i.tm.name,
            );
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn add_branch_prefix_frag_p() -> libc::c_int {
    if align_branch_power == 0 || align_branch_prefix_size == 0
        || now_seg
            == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection
        || (i.tm.cpu_flags.bitfield).cpupadlock() as libc::c_int != 0
        || (cpu_arch_flags.bitfield).cpui386() == 0
    {
        return 0 as libc::c_int;
    }
    if i.operands == 0 || (i.tm.opcode_modifier).isprefix() as libc::c_int != 0 {
        return 0 as libc::c_int;
    }
    if last_insn.kind as libc::c_uint == last_insn_other as libc::c_int as libc::c_uint
        || last_insn.seg != now_seg
    {
        return 1 as libc::c_int;
    }
    if flag_debug != 0 {
        as_warn_where(
            last_insn.file,
            last_insn.line,
            dcgettext(
                0 as *const libc::c_char,
                b"`%s` skips -malign-branch-boundary on `%s`\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            last_insn.name,
            i.tm.name,
        );
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn add_branch_padding_frag_p(
    mut branch_p: *mut align_branch_kind,
    mut mf_jcc_p: *mut mf_jcc_kind,
) -> libc::c_int {
    let mut add_padding: libc::c_int = 0;
    if align_branch_power == 0
        || now_seg
            == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
                as *mut asection || (cpu_arch_flags.bitfield).cpui386() == 0
        || (i.tm.opcode_modifier).opcodespace() as libc::c_int != 0 as libc::c_int
    {
        return 0 as libc::c_int;
    }
    add_padding = 0 as libc::c_int;
    if (i.tm.opcode_modifier).jump() as libc::c_int == 1 as libc::c_int {
        if (i.tm).base_opcode() as libc::c_int == 0xeb as libc::c_int {
            *branch_p = align_branch_jmp;
            add_padding = (align_branch
                & align_branch_jmp_bit as libc::c_int as libc::c_uint) as libc::c_int;
        } else {
            *mf_jcc_p = (((i.tm).base_opcode() as libc::c_int & 0xe as libc::c_int)
                >> 1 as libc::c_int) as mf_jcc_kind;
            *branch_p = align_branch_jcc;
            if align_branch & align_branch_jcc_bit as libc::c_int as libc::c_uint != 0 {
                add_padding = 1 as libc::c_int;
            }
        }
    } else if (i.tm).base_opcode() as libc::c_int | 1 as libc::c_int
        == 0xc3 as libc::c_int
    {
        *branch_p = align_branch_ret;
        if align_branch & align_branch_ret_bit as libc::c_int as libc::c_uint != 0 {
            add_padding = 1 as libc::c_int;
        }
    } else {
        if (i.tm).base_opcode() as libc::c_int == 0xe8 as libc::c_int {
            *branch_p = align_branch_call;
            if align_branch & align_branch_call_bit as libc::c_int as libc::c_uint != 0 {
                add_padding = 1 as libc::c_int;
            }
        } else if (i.tm).base_opcode() as libc::c_int == 0xff as libc::c_int
            && ((i.tm).extension_opcode() == 2 as libc::c_int
                || (i.tm).extension_opcode() == 4 as libc::c_int)
        {
            *branch_p = align_branch_indirect;
            if align_branch & align_branch_indirect_bit as libc::c_int as libc::c_uint
                != 0
            {
                add_padding = 1 as libc::c_int;
            }
        }
        if add_padding != 0 && i.disp_operands != 0 && !tls_get_addr.is_null()
            && ((*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                == O_symbol as libc::c_int
                || (*i.op[0 as libc::c_int as usize].disps).X_op() as libc::c_int
                    == O_subtract as libc::c_int
                    && (*i.op[0 as libc::c_int as usize].disps).X_op_symbol
                        == GOT_symbol)
        {
            let mut s: *mut symbolS = (*i.op[0 as libc::c_int as usize].disps)
                .X_add_symbol;
            if (S_IS_EXTERNAL(s) != 0 || S_IS_DEFINED(s) == 0)
                && strcmp(S_GET_NAME(s), tls_get_addr) == 0 as libc::c_int
            {
                return 0 as libc::c_int;
            }
        }
    }
    if add_padding != 0
        && last_insn.kind as libc::c_uint
            != last_insn_other as libc::c_int as libc::c_uint && last_insn.seg == now_seg
    {
        if flag_debug != 0 {
            as_warn_where(
                last_insn.file,
                last_insn.line,
                dcgettext(
                    0 as *const libc::c_char,
                    b"`%s` skips -malign-branch-boundary on `%s`\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                last_insn.name,
                i.tm.name,
            );
        }
        return 0 as libc::c_int;
    }
    return add_padding;
}
unsafe extern "C" fn disp_size(mut n: libc::c_uint) -> libc::c_int {
    let mut size: libc::c_int = 4 as libc::c_int;
    if (i.types[n as usize].bitfield).disp64() != 0 {
        size = 8 as libc::c_int;
    } else if (i.types[n as usize].bitfield).disp8() != 0 {
        size = 1 as libc::c_int;
    } else if (i.types[n as usize].bitfield).disp16() != 0 {
        size = 2 as libc::c_int;
    }
    return size;
}
unsafe extern "C" fn imm_size(mut n: libc::c_uint) -> libc::c_int {
    let mut size: libc::c_int = 4 as libc::c_int;
    if (i.types[n as usize].bitfield).imm64() != 0 {
        size = 8 as libc::c_int;
    } else if (i.types[n as usize].bitfield).imm8() as libc::c_int != 0
        || (i.types[n as usize].bitfield).imm8s() as libc::c_int != 0
    {
        size = 1 as libc::c_int;
    } else if (i.types[n as usize].bitfield).imm16() != 0 {
        size = 2 as libc::c_int;
    }
    return size;
}
static mut cons_sign: libc::c_int = -(1 as libc::c_int);
static mut gotrel: [C2RustUnnamed_39; 18] = [C2RustUnnamed_39 {
    str_0: 0 as *const libc::c_char,
    len: 0,
    rel: [_dummy_first_bfd_reloc_code_real; 2],
    types64: i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    },
    need_GOT_symbol: false,
}; 18];
unsafe extern "C" fn lex_got(
    mut rel: *mut bfd_reloc_code_real,
    mut adjust: *mut libc::c_int,
    mut types: *mut i386_operand_type,
) -> *mut libc::c_char {
    let mut cp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut j: libc::c_uint = 0;
    cp = input_line_pointer;
    while *cp as libc::c_int != '@' as i32 {
        if *is_end_of_line.as_mut_ptr().offset(*cp as libc::c_uchar as isize)
            as libc::c_int != 0 || *cp as libc::c_int == ',' as i32
        {
            return 0 as *mut libc::c_char;
        }
        cp = cp.offset(1);
        cp;
    }
    j = 0 as libc::c_int as libc::c_uint;
    while (j as libc::c_ulong)
        < (::core::mem::size_of::<[C2RustUnnamed_39; 18]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<C2RustUnnamed_39>() as libc::c_ulong)
    {
        let mut len: libc::c_int = gotrel[j as usize].len;
        if strncasecmp(
            cp.offset(1 as libc::c_int as isize),
            gotrel[j as usize].str_0,
            len as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            if gotrel[j as usize].rel[object_64bit as usize] as libc::c_uint
                != 0 as libc::c_int as libc::c_uint
            {
                let mut first: libc::c_int = 0;
                let mut second: libc::c_int = 0;
                let mut tmpbuf: *mut libc::c_char = 0 as *mut libc::c_char;
                let mut past_reloc: *mut libc::c_char = 0 as *mut libc::c_char;
                *rel = gotrel[j as usize].rel[object_64bit as usize];
                if !types.is_null() {
                    if flag_code as libc::c_uint
                        != CODE_64BIT as libc::c_int as libc::c_uint
                    {
                        ((*types).bitfield).set_imm32(1 as libc::c_int as libc::c_uint);
                        ((*types).bitfield).set_disp32(1 as libc::c_int as libc::c_uint);
                    } else {
                        *types = gotrel[j as usize].types64;
                    }
                }
                if gotrel[j as usize].need_GOT_symbol as libc::c_int != 0
                    && GOT_symbol.is_null()
                {
                    GOT_symbol = symbol_find_or_make(
                        b"_GLOBAL_OFFSET_TABLE_\0" as *const u8 as *const libc::c_char,
                    );
                }
                first = cp.offset_from(input_line_pointer) as libc::c_long
                    as libc::c_int;
                past_reloc = cp.offset(1 as libc::c_int as isize).offset(len as isize);
                cp = past_reloc;
                while *is_end_of_line.as_mut_ptr().offset(*cp as libc::c_uchar as isize)
                    == 0 && *cp as libc::c_int != ',' as i32
                {
                    cp = cp.offset(1);
                    cp;
                }
                second = cp.offset(1 as libc::c_int as isize).offset_from(past_reloc)
                    as libc::c_long as libc::c_int;
                tmpbuf = xmalloc(
                    (::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
                        .wrapping_mul(
                            (first + second + 2 as libc::c_int) as libc::c_ulong,
                        ),
                ) as *mut libc::c_char;
                memcpy(
                    tmpbuf as *mut libc::c_void,
                    input_line_pointer as *const libc::c_void,
                    first as libc::c_ulong,
                );
                if second != 0 as libc::c_int && *past_reloc as libc::c_int != ' ' as i32
                {
                    let fresh55 = first;
                    first = first + 1;
                    *tmpbuf.offset(fresh55 as isize) = ' ' as i32 as libc::c_char;
                } else {
                    len += 1;
                    len;
                }
                if !adjust.is_null() {
                    *adjust = len;
                }
                memcpy(
                    tmpbuf.offset(first as isize) as *mut libc::c_void,
                    past_reloc as *const libc::c_void,
                    second as libc::c_ulong,
                );
                *tmpbuf.offset((first + second) as isize) = '\0' as i32 as libc::c_char;
                return tmpbuf;
            }
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"@%s reloc is not supported with %d-bit output format\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
                gotrel[j as usize].str_0,
                (1 as libc::c_int)
                    << (5 as libc::c_int as libc::c_uint).wrapping_add(object_64bit),
            );
            return 0 as *mut libc::c_char;
        }
        j = j.wrapping_add(1);
        j;
    }
    return 0 as *mut libc::c_char;
}
unsafe extern "C" fn check_VecOperations(
    mut op_string: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut current_block: u64;
    let mut mask: *const reg_entry = 0 as *const reg_entry;
    let mut saved: *const libc::c_char = 0 as *const libc::c_char;
    let mut end_op: *mut libc::c_char = 0 as *mut libc::c_char;
    while *op_string != 0 {
        saved = op_string;
        if *op_string as libc::c_int == '{' as i32 {
            op_string = op_string.offset(1);
            op_string;
            if startswith(op_string, b"1to\0" as *const u8 as *const libc::c_char) {
                let mut bcst_type: libc::c_uint = 0;
                if i.broadcast.type_0 != 0 {
                    current_block = 3817000559719556406;
                } else {
                    op_string = op_string.offset(3 as libc::c_int as isize);
                    if *op_string as libc::c_int == '8' as i32 {
                        bcst_type = 8 as libc::c_int as libc::c_uint;
                    } else if *op_string as libc::c_int == '4' as i32 {
                        bcst_type = 4 as libc::c_int as libc::c_uint;
                    } else if *op_string as libc::c_int == '2' as i32 {
                        bcst_type = 2 as libc::c_int as libc::c_uint;
                    } else if *op_string as libc::c_int == '1' as i32
                        && *op_string.offset(1 as libc::c_int as isize) as libc::c_int
                            == '6' as i32
                    {
                        bcst_type = 16 as libc::c_int as libc::c_uint;
                        op_string = op_string.offset(1);
                        op_string;
                    } else {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"Unsupported broadcast: `%s'\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            saved,
                        );
                        return 0 as *mut libc::c_char;
                    }
                    op_string = op_string.offset(1);
                    op_string;
                    i.broadcast.type_0 = bcst_type;
                    i.broadcast.operand = this_operand as libc::c_uint;
                    current_block = 12381812505308290051;
                }
            } else {
                mask = parse_register(op_string, &mut end_op);
                if !mask.is_null() {
                    if mask == &bad_reg as *const reg_entry {
                        return 0 as *mut libc::c_char;
                    }
                    if ((*mask).reg_type.bitfield).class() as libc::c_int
                        != RegMask as libc::c_int || (*mask).reg_num == 0
                    {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"`%s%s' can't be used for write mask\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            register_prefix,
                            (*mask).reg_name,
                        );
                        return 0 as *mut libc::c_char;
                    }
                    if (i.mask.reg).is_null() {
                        i.mask.reg = mask;
                        i.mask.operand = this_operand as libc::c_uint;
                        current_block = 5494826135382683477;
                    } else if (*i.mask.reg).reg_num != 0 {
                        current_block = 3817000559719556406;
                    } else {
                        i.mask.reg = mask;
                        if i.mask.operand != this_operand as libc::c_uint {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"invalid write mask `%s'\0" as *const u8
                                        as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                saved,
                            );
                            return 0 as *mut libc::c_char;
                        }
                        current_block = 5494826135382683477;
                    }
                    match current_block {
                        3817000559719556406 => {}
                        _ => {
                            op_string = end_op;
                            current_block = 12381812505308290051;
                        }
                    }
                } else if *op_string as libc::c_int == 'z' as i32 {
                    if (i.mask.reg).is_null() {
                        i.mask.reg = reg_k0;
                        i.mask.zeroing = 1 as libc::c_int as libc::c_uint;
                        i.mask.operand = this_operand as libc::c_uint;
                        current_block = 790185930182612747;
                    } else if i.mask.zeroing != 0 {
                        current_block = 3817000559719556406;
                    } else {
                        i.mask.zeroing = 1 as libc::c_int as libc::c_uint;
                        if i.mask.operand != this_operand as libc::c_uint {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"invalid zeroing-masking `%s'\0" as *const u8
                                        as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                saved,
                            );
                            return 0 as *mut libc::c_char;
                        }
                        current_block = 790185930182612747;
                    }
                    match current_block {
                        3817000559719556406 => {}
                        _ => {
                            op_string = op_string.offset(1);
                            op_string;
                            current_block = 12381812505308290051;
                        }
                    }
                } else {
                    current_block = 242012016349447358;
                }
            }
            match current_block {
                242012016349447358 => {}
                _ => {
                    match current_block {
                        3817000559719556406 => {
                            as_bad(
                                dcgettext(
                                    0 as *const libc::c_char,
                                    b"duplicated `%s'\0" as *const u8 as *const libc::c_char,
                                    5 as libc::c_int,
                                ),
                                saved,
                            );
                            return 0 as *mut libc::c_char;
                        }
                        _ => {
                            if *op_string as libc::c_int != '}' as i32 {
                                as_bad(
                                    dcgettext(
                                        0 as *const libc::c_char,
                                        b"missing `}' in `%s'\0" as *const u8
                                            as *const libc::c_char,
                                        5 as libc::c_int,
                                    ),
                                    saved,
                                );
                                return 0 as *mut libc::c_char;
                            }
                            op_string = op_string.offset(1);
                            op_string;
                            if *op_string as libc::c_int == ' ' as i32 {
                                op_string = op_string.offset(1);
                                op_string;
                            }
                            continue;
                        }
                    }
                }
            }
        }
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"unknown vector operation: `%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            saved,
        );
        return 0 as *mut libc::c_char;
    }
    if !(i.mask.reg).is_null() && i.mask.zeroing != 0 && (*i.mask.reg).reg_num == 0 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"zeroing-masking only allowed with write mask\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return 0 as *mut libc::c_char;
    }
    return op_string;
}
unsafe extern "C" fn i386_immediate(mut imm_start: *mut libc::c_char) -> libc::c_int {
    let mut save_input_line_pointer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut gotfree_input_line: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut exp_seg: segT = 0 as segT;
    let mut exp: *mut expressionS = 0 as *mut expressionS;
    let mut types: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    operand_type_set(&mut types, !(0 as libc::c_int) as libc::c_uint);
    if i.imm_operands == 2 as libc::c_int as libc::c_uint {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"at most %d immediate operands are allowed\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            2 as libc::c_int,
        );
        return 0 as libc::c_int;
    }
    let fresh56 = i.imm_operands;
    i.imm_operands = (i.imm_operands).wrapping_add(1);
    exp = &mut *im_expressions.as_mut_ptr().offset(fresh56 as isize) as *mut expressionS;
    i.op[this_operand as usize].imms = exp;
    if *imm_start as libc::c_int == ' ' as i32 {
        imm_start = imm_start.offset(1);
        imm_start;
    }
    save_input_line_pointer = input_line_pointer;
    input_line_pointer = imm_start;
    gotfree_input_line = lex_got(
        &mut *(i.reloc).as_mut_ptr().offset(this_operand as isize),
        0 as *mut libc::c_int,
        &mut types,
    );
    if !gotfree_input_line.is_null() {
        input_line_pointer = gotfree_input_line;
    }
    exp_seg = expr(0 as libc::c_int, exp, expr_normal);
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *input_line_pointer != 0 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"junk `%s' after expression\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            input_line_pointer,
        );
    }
    input_line_pointer = save_input_line_pointer;
    if !gotfree_input_line.is_null() {
        free(gotfree_input_line as *mut libc::c_void);
        if (*exp).X_op() as libc::c_int == O_constant as libc::c_int {
            (*exp).set_X_op(O_illegal);
        }
    }
    if exp_seg == reg_section {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"illegal immediate register operand %s\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            imm_start,
        );
        return 0 as libc::c_int;
    }
    return i386_finalize_immediate(exp_seg, exp, types, imm_start);
}
unsafe extern "C" fn i386_scale(mut scale: *mut libc::c_char) -> *mut libc::c_char {
    let mut val: offsetT = 0;
    let mut save: *mut libc::c_char = input_line_pointer;
    input_line_pointer = scale;
    val = get_absolute_expression();
    match val {
        1 => {
            i.log2_scale_factor = 0 as libc::c_int as libc::c_uint;
        }
        2 => {
            i.log2_scale_factor = 1 as libc::c_int as libc::c_uint;
        }
        4 => {
            i.log2_scale_factor = 2 as libc::c_int as libc::c_uint;
        }
        8 => {
            i.log2_scale_factor = 3 as libc::c_int as libc::c_uint;
        }
        _ => {
            let mut sep: libc::c_char = *input_line_pointer;
            *input_line_pointer = '\0' as i32 as libc::c_char;
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"expecting scale factor of 1, 2, 4, or 8: got `%s'\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                scale,
            );
            *input_line_pointer = sep;
            input_line_pointer = save;
            return 0 as *mut libc::c_char;
        }
    }
    if i.log2_scale_factor != 0 as libc::c_int as libc::c_uint && (i.index_reg).is_null()
    {
        as_warn(
            dcgettext(
                0 as *const libc::c_char,
                b"scale factor of %d without an index register\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            (1 as libc::c_int) << i.log2_scale_factor,
        );
        i.log2_scale_factor = 0 as libc::c_int as libc::c_uint;
    }
    scale = input_line_pointer;
    input_line_pointer = save;
    return scale;
}
unsafe extern "C" fn i386_displacement(
    mut disp_start: *mut libc::c_char,
    mut disp_end: *mut libc::c_char,
) -> libc::c_int {
    let mut exp: *mut expressionS = 0 as *mut expressionS;
    let mut exp_seg: segT = 0 as segT;
    let mut save_input_line_pointer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut gotfree_input_line: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut override_0: libc::c_int = 0;
    let mut bigdisp: i386_operand_type = i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    };
    let mut types: i386_operand_type = anydisp;
    let mut ret: libc::c_int = 0;
    if i.disp_operands == 2 as libc::c_int as libc::c_uint {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"at most %d displacement operands are allowed\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            2 as libc::c_int,
        );
        return 0 as libc::c_int;
    }
    operand_type_set(&mut bigdisp, 0 as libc::c_int as libc::c_uint);
    if i.jumpabsolute as libc::c_int != 0
        || (i.types[this_operand as usize].bitfield).baseindex() as libc::c_int != 0
        || ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            != 1 as libc::c_int
            && ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
                != 2 as libc::c_int
    {
        i386_addressing_mode();
        override_0 = (i.prefix[2 as libc::c_int as usize] as libc::c_int
            != 0 as libc::c_int) as libc::c_int;
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
            if override_0 == 0 {
                (bigdisp.bitfield).set_disp32s(1 as libc::c_int as libc::c_uint);
                (bigdisp.bitfield).set_disp64(1 as libc::c_int as libc::c_uint);
            } else {
                (bigdisp.bitfield).set_disp32(1 as libc::c_int as libc::c_uint);
            }
        } else if (flag_code as libc::c_uint
            == CODE_16BIT as libc::c_int as libc::c_uint) as libc::c_int ^ override_0
            != 0
        {
            (bigdisp.bitfield).set_disp16(1 as libc::c_int as libc::c_uint);
        } else {
            (bigdisp.bitfield).set_disp32(1 as libc::c_int as libc::c_uint);
        }
    } else {
        static mut aux_templates: templates = templates {
            start: 0 as *const insn_template,
            end: 0 as *const insn_template,
        };
        let mut t: *const insn_template = (*current_templates).start;
        let mut has_intel64: bool = 0 as libc::c_int != 0;
        aux_templates.start = t;
        loop {
            t = t.offset(1);
            if !(t < (*current_templates).end) {
                break;
            }
            if ((*t).opcode_modifier).jump() as libc::c_int
                != ((*(*current_templates).start).opcode_modifier).jump() as libc::c_int
            {
                break;
            }
            if ((*t).opcode_modifier).isa64() as libc::c_int >= 2 as libc::c_int {
                has_intel64 = 1 as libc::c_int != 0;
            }
        }
        if t < (*current_templates).end {
            aux_templates.end = t;
            current_templates = &mut aux_templates;
        }
        override_0 = (i.prefix[3 as libc::c_int as usize] as libc::c_int
            != 0 as libc::c_int) as libc::c_int;
        if flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint {
            if (override_0 != 0 || i.suffix as libc::c_int == 'w' as i32)
                && (intel64 as libc::c_int == 0 || !has_intel64)
            {
                (bigdisp.bitfield).set_disp16(1 as libc::c_int as libc::c_uint);
            } else {
                (bigdisp.bitfield).set_disp32s(1 as libc::c_int as libc::c_uint);
            }
        } else {
            if override_0 == 0 {
                override_0 = (i.suffix as libc::c_int
                    == (if flag_code as libc::c_uint
                        != CODE_16BIT as libc::c_int as libc::c_uint
                    {
                        'w' as i32
                    } else {
                        'l' as i32
                    })) as libc::c_int;
            }
            (bigdisp.bitfield).set_disp32(1 as libc::c_int as libc::c_uint);
            if (flag_code as libc::c_uint == CODE_16BIT as libc::c_int as libc::c_uint)
                as libc::c_int ^ override_0 != 0
            {
                (bigdisp.bitfield).set_disp32(0 as libc::c_int as libc::c_uint);
                (bigdisp.bitfield).set_disp16(1 as libc::c_int as libc::c_uint);
            }
        }
    }
    i
        .types[this_operand
        as usize] = operand_type_or(i.types[this_operand as usize], bigdisp);
    exp = &mut *disp_expressions.as_mut_ptr().offset(i.disp_operands as isize)
        as *mut expressionS;
    i.op[this_operand as usize].disps = exp;
    i.disp_operands = (i.disp_operands).wrapping_add(1);
    i.disp_operands;
    save_input_line_pointer = input_line_pointer;
    input_line_pointer = disp_start;
    let fresh57 = save_stack_p;
    save_stack_p = save_stack_p.offset(1);
    *fresh57 = *disp_end;
    *disp_end = '\0' as i32 as libc::c_char;
    gotfree_input_line = lex_got(
        &mut *(i.reloc).as_mut_ptr().offset(this_operand as isize),
        0 as *mut libc::c_int,
        &mut types,
    );
    if !gotfree_input_line.is_null() {
        input_line_pointer = gotfree_input_line;
    }
    exp_seg = expr(0 as libc::c_int, exp, expr_normal);
    if *input_line_pointer as libc::c_int == ' ' as i32 {
        input_line_pointer = input_line_pointer.offset(1);
        input_line_pointer;
    } else {};
    if *input_line_pointer != 0 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"junk `%s' after expression\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            input_line_pointer,
        );
    }
    input_line_pointer = save_input_line_pointer;
    if !gotfree_input_line.is_null() {
        free(gotfree_input_line as *mut libc::c_void);
        if (*exp).X_op() as libc::c_int == O_constant as libc::c_int
            || (*exp).X_op() as libc::c_int == O_register as libc::c_int
        {
            (*exp).set_X_op(O_illegal);
        }
    }
    ret = i386_finalize_displacement(exp_seg, exp, types, disp_start);
    save_stack_p = save_stack_p.offset(-1);
    *disp_end = *save_stack_p;
    return ret;
}
unsafe extern "C" fn i386_index_check(
    mut operand_string: *const libc::c_char,
) -> libc::c_int {
    let mut expected_reg: *const reg_entry = 0 as *const reg_entry;
    static mut di_si: [[*const libc::c_char; 2]; 3] = [
        [
            b"esi\0" as *const u8 as *const libc::c_char,
            b"edi\0" as *const u8 as *const libc::c_char,
        ],
        [
            b"si\0" as *const u8 as *const libc::c_char,
            b"di\0" as *const u8 as *const libc::c_char,
        ],
        [
            b"rsi\0" as *const u8 as *const libc::c_char,
            b"rdi\0" as *const u8 as *const libc::c_char,
        ],
    ];
    static mut bx: [*const libc::c_char; 3] = [
        b"ebx\0" as *const u8 as *const libc::c_char,
        b"bx\0" as *const u8 as *const libc::c_char,
        b"rbx\0" as *const u8 as *const libc::c_char,
    ];
    let mut current_block: u64;
    let mut kind: *const libc::c_char = b"base/index\0" as *const u8
        as *const libc::c_char;
    let mut addr_mode: flag_code = i386_addressing_mode();
    let mut t: *const insn_template = (*current_templates).start;
    if ((*t).opcode_modifier).isstring() as libc::c_int != 0
        && ((*t).cpu_flags.bitfield).cpupadlock() == 0
        && (((*((*current_templates).end).offset(-(1 as libc::c_int) as isize))
            .opcode_modifier)
            .isstring() as libc::c_int != 0 || i.mem_operands != 0)
    {
        expected_reg = 0 as *const reg_entry;
        kind = b"string address\0" as *const u8 as *const libc::c_char;
        if ((*t).opcode_modifier).prefixok() as libc::c_int == 1 as libc::c_int {
            let mut es_op: libc::c_int = ((*((*current_templates).end)
                .offset(-(1 as libc::c_int) as isize))
                .opcode_modifier)
                .isstring() as libc::c_int - 2 as libc::c_int;
            let mut op: libc::c_int = 0 as libc::c_int;
            if ((*((*current_templates).end).offset(-(1 as libc::c_int) as isize))
                .operand_types[0 as libc::c_int as usize]
                .bitfield)
                .baseindex() == 0
                || (i.mem_operands == 0) as libc::c_int
                    != (intel_syntax == 0) as libc::c_int
                    && ((*((*current_templates).end)
                        .offset(-(1 as libc::c_int) as isize))
                        .operand_types[1 as libc::c_int as usize]
                        .bitfield)
                        .baseindex() as libc::c_int != 0
            {
                op = 1 as libc::c_int;
            }
            expected_reg = str_hash_find(
                reg_hash,
                di_si[addr_mode as usize][(op == es_op) as libc::c_int as usize],
            ) as *const reg_entry;
        } else {
            expected_reg = str_hash_find(reg_hash, bx[addr_mode as usize])
                as *const reg_entry;
        }
        if i.base_reg != expected_reg || !(i.index_reg).is_null()
            || operand_type_check(i.types[this_operand as usize], disp) != 0
        {
            if !(i.mem_operands != 0 && !(i.base_reg).is_null()
                && !(addr_mode as libc::c_uint
                    == CODE_64BIT as libc::c_int as libc::c_uint
                    && ((*i.base_reg).reg_type.bitfield).qword() as libc::c_int != 0
                    || (if addr_mode as libc::c_uint
                        == CODE_32BIT as libc::c_int as libc::c_uint
                    {
                        ((*i.base_reg).reg_type.bitfield).dword() as libc::c_int
                    } else {
                        ((*i.base_reg).reg_type.bitfield).word() as libc::c_int
                    }) != 0))
            {
                as_warn(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"`%s' is not valid here (expected `%c%s%s%c')\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    operand_string,
                    if intel_syntax != 0 { '[' as i32 } else { '(' as i32 },
                    register_prefix,
                    (*expected_reg).reg_name,
                    if intel_syntax != 0 { ']' as i32 } else { ')' as i32 },
                );
                return 1 as libc::c_int;
            }
        } else {
            return 1 as libc::c_int
        }
    } else {
        if addr_mode as libc::c_uint != CODE_16BIT as libc::c_int as libc::c_uint {
            if i.disp_encoding as libc::c_uint
                == disp_encoding_16bit as libc::c_int as libc::c_uint
            {
                current_block = 18435247683113150872;
            } else if !(i.base_reg).is_null()
                && ((if addr_mode as libc::c_uint
                    == CODE_64BIT as libc::c_int as libc::c_uint
                {
                    (((*i.base_reg).reg_type.bitfield).qword() == 0) as libc::c_int
                } else {
                    (((*i.base_reg).reg_type.bitfield).dword() == 0) as libc::c_int
                }) != 0
                    || !(i.index_reg).is_null()
                        && (*i.base_reg).reg_num as libc::c_int
                            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                    || (*i.base_reg).reg_num as libc::c_int
                        == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                            - 1 as libc::c_int)
                || !(i.index_reg).is_null()
                    && ((*i.index_reg).reg_type.bitfield).xmmword() == 0
                    && ((*i.index_reg).reg_type.bitfield).ymmword() == 0
                    && ((*i.index_reg).reg_type.bitfield).zmmword() == 0
                    && ((if addr_mode as libc::c_uint
                        == CODE_64BIT as libc::c_int as libc::c_uint
                    {
                        (((*i.index_reg).reg_type.bitfield).qword() == 0) as libc::c_int
                    } else {
                        (((*i.index_reg).reg_type.bitfield).dword() == 0) as libc::c_int
                    }) != 0 || ((*i.index_reg).reg_type.bitfield).baseindex() == 0)
            {
                current_block = 4597251604723304907;
            } else {
                if ((*t).opcode_modifier).opcodeprefix() as libc::c_int
                    == 2 as libc::c_int
                    && ((*t).opcode_modifier).opcodespace() as libc::c_int
                        == 1 as libc::c_int
                    && (*t).base_opcode() as libc::c_int == 0x1b as libc::c_int
                    || ((*t).opcode_modifier).opcodeprefix() as libc::c_int
                        == 0 as libc::c_int
                        && ((*t).opcode_modifier).opcodespace() as libc::c_int
                            == 1 as libc::c_int
                        && (*t).base_opcode() as libc::c_int & !(1 as libc::c_int)
                            == 0x1a as libc::c_int
                    || ((*t).opcode_modifier).sib() as libc::c_int == 4 as libc::c_int
                {
                    if !(i.base_reg).is_null()
                        && (*i.base_reg).reg_num as libc::c_int
                            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                    {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"`%s' cannot be used here\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            operand_string,
                        );
                        return 0 as libc::c_int;
                    }
                    if ((*t).opcode_modifier).opcodeprefix() as libc::c_int
                        == 0 as libc::c_int
                        && ((*t).opcode_modifier).opcodespace() as libc::c_int
                            == 1 as libc::c_int
                        && (*t).base_opcode() as libc::c_int & !(1 as libc::c_int)
                            == 0x1a as libc::c_int && i.log2_scale_factor != 0
                    {
                        as_warn(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"register scaling is being ignored here\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                        );
                    }
                }
                current_block = 4761528863920922185;
            }
        } else if i.disp_encoding as libc::c_uint
            == disp_encoding_32bit as libc::c_int as libc::c_uint
        {
            current_block = 18435247683113150872;
        } else if !(i.base_reg).is_null()
            && (((*i.base_reg).reg_type.bitfield).word() == 0
                || ((*i.base_reg).reg_type.bitfield).baseindex() == 0)
            || !(i.index_reg).is_null()
                && (((*i.index_reg).reg_type.bitfield).word() == 0
                    || ((*i.index_reg).reg_type.bitfield).baseindex() == 0
                    || !(!(i.base_reg).is_null()
                        && ((*i.base_reg).reg_num as libc::c_int) < 6 as libc::c_int
                        && (*i.index_reg).reg_num as libc::c_int >= 6 as libc::c_int
                        && i.log2_scale_factor == 0 as libc::c_int as libc::c_uint))
        {
            current_block = 4597251604723304907;
        } else {
            current_block = 4761528863920922185;
        }
        match current_block {
            4597251604723304907 => {}
            _ => {
                match current_block {
                    4761528863920922185 => return 1 as libc::c_int,
                    _ => {
                        as_bad(
                            dcgettext(
                                0 as *const libc::c_char,
                                b"invalid `%s' prefix\0" as *const u8
                                    as *const libc::c_char,
                                5 as libc::c_int,
                            ),
                            if addr_mode as libc::c_uint
                                == CODE_16BIT as libc::c_int as libc::c_uint
                            {
                                b"{disp32}\0" as *const u8 as *const libc::c_char
                            } else {
                                b"{disp16}\0" as *const u8 as *const libc::c_char
                            },
                        );
                        return 0 as libc::c_int;
                    }
                }
            }
        }
    }
    as_bad(
        dcgettext(
            0 as *const libc::c_char,
            b"`%s' is not a valid %s expression\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
        operand_string,
        kind,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn RC_SAE_immediate(
    mut imm_start: *const libc::c_char,
) -> libc::c_int {
    let mut match_found: libc::c_uint = 0;
    let mut j: libc::c_uint = 0;
    let mut pstr: *const libc::c_char = imm_start;
    let mut exp: *mut expressionS = 0 as *mut expressionS;
    if *pstr as libc::c_int != '{' as i32 {
        return 0 as libc::c_int;
    }
    pstr = pstr.offset(1);
    pstr;
    match_found = 0 as libc::c_int as libc::c_uint;
    j = 0 as libc::c_int as libc::c_uint;
    while (j as libc::c_ulong)
        < (::core::mem::size_of::<[RC_name; 5]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<RC_name>() as libc::c_ulong)
    {
        if strncmp(
            pstr,
            RC_NamesTable[j as usize].name,
            RC_NamesTable[j as usize].len as libc::c_ulong,
        ) == 0
        {
            if i.rounding.type_0 as libc::c_int != rc_none as libc::c_int {
                as_bad(
                    dcgettext(
                        0 as *const libc::c_char,
                        b"duplicated `%s'\0" as *const u8 as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    imm_start,
                );
                return 0 as libc::c_int;
            }
            i.rounding.type_0 = RC_NamesTable[j as usize].type_0;
            i.rounding.operand = this_operand as libc::c_uint;
            pstr = pstr.offset(RC_NamesTable[j as usize].len as isize);
            match_found = 1 as libc::c_int as libc::c_uint;
            break;
        } else {
            j = j.wrapping_add(1);
            j;
        }
    }
    if match_found == 0 {
        return 0 as libc::c_int;
    }
    let fresh58 = pstr;
    pstr = pstr.offset(1);
    if *fresh58 as libc::c_int != '}' as i32 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"Missing '}': '%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            imm_start,
        );
        return 0 as libc::c_int;
    }
    if *pstr as libc::c_int != 0 as libc::c_int {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"Junk after '}': '%s'\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            imm_start,
        );
        return 0 as libc::c_int;
    }
    let fresh59 = i.imm_operands;
    i.imm_operands = (i.imm_operands).wrapping_add(1);
    exp = &mut *im_expressions.as_mut_ptr().offset(fresh59 as isize) as *mut expressionS;
    i.op[this_operand as usize].imms = exp;
    (*exp).set_X_op(O_constant);
    (*exp).X_add_number = 0 as libc::c_int as offsetT;
    (*exp).X_add_symbol = 0 as *mut symbolS;
    (*exp).X_op_symbol = 0 as *mut symbolS;
    (i.types[this_operand as usize].bitfield).set_imm8(1 as libc::c_int as libc::c_uint);
    return 1 as libc::c_int;
}
unsafe extern "C" fn maybe_adjust_templates() -> libc::c_int {
    let mut t: *const insn_template = 0 as *const insn_template;
    if i.mem_operands == 1 as libc::c_int as libc::c_uint {} else {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            11317 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 33],
                &[libc::c_char; 33],
            >(b"int maybe_adjust_templates(void)\0"))
                .as_ptr(),
        );
    };
    t = (*current_templates).start;
    while t < (*current_templates).end {
        if ((*t).opcode_modifier).isstring() != 0 {
            break;
        }
        t = t.offset(1);
        t;
    }
    if t < (*current_templates).end {
        static mut aux_templates: templates = templates {
            start: 0 as *const insn_template,
            end: 0 as *const insn_template,
        };
        let mut recheck: bool = false;
        aux_templates.start = t;
        while t < (*current_templates).end {
            if ((*t).opcode_modifier).isstring() == 0 {
                break;
            }
            t = t.offset(1);
            t;
        }
        aux_templates.end = t;
        recheck = aux_templates.start != (*current_templates).start
            || t != (*current_templates).end;
        current_templates = &mut aux_templates;
        if recheck {
            i.mem_operands = 0 as libc::c_int as libc::c_uint;
            if !(i.memop1_string).is_null()
                && i386_index_check(i.memop1_string) == 0 as libc::c_int
            {
                return 0 as libc::c_int;
            }
            i.mem_operands = 1 as libc::c_int as libc::c_uint;
        }
    }
    return 1 as libc::c_int;
}
#[inline]
unsafe extern "C" fn starts_memory_operand(mut c: libc::c_char) -> bool {
    return _sch_istable[(c as libc::c_int & 0xff as libc::c_int) as usize] as libc::c_int
        & _sch_isdigit as libc::c_int as libc::c_ushort as libc::c_int != 0
        || identifier_chars[c as libc::c_uchar as usize] as libc::c_int != 0
        || !(strchr(b"([\"+-!~\0" as *const u8 as *const libc::c_char, c as libc::c_int))
            .is_null();
}
unsafe extern "C" fn elf_symbol_resolved_in_segment_p(
    mut fr_symbol: *mut symbolS,
    mut fr_var: offsetT,
) -> libc::c_int {
    if (*symbol_get_bfdsym(fr_symbol)).flags
        & ((1 as libc::c_int) << 22 as libc::c_int) as libc::c_uint
        != 0 as libc::c_int as libc::c_uint
    {
        return 0 as libc::c_int;
    }
    if S_IS_EXTERNAL(fr_symbol) == 0 {
        return (S_IS_WEAK(fr_symbol) == 0) as libc::c_int;
    }
    if elf_s_get_other(fr_symbol) & 0x3 as libc::c_int != 0 as libc::c_int {
        return 1 as libc::c_int;
    }
    if fr_var != BFD_RELOC_NONE as libc::c_int as libc::c_long {
        match fr_var as bfd_reloc_code_real as libc::c_uint {
            357 | 382 => return 0 as libc::c_int,
            _ => {
                as_abort(
                    b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                    11737 as libc::c_int,
                    (*::core::mem::transmute::<
                        &[u8; 57],
                        &[libc::c_char; 57],
                    >(b"int elf_symbol_resolved_in_segment_p(symbolS *, offsetT)\0"))
                        .as_ptr(),
                );
            }
        }
    }
    return (shared == 0) as libc::c_int;
}
unsafe extern "C" fn i386_macro_fusible_p(
    mut mf_cmp: mf_cmp_kind,
    mut mf_jcc: mf_jcc_kind,
) -> libc::c_int {
    if mf_cmp as libc::c_uint == mf_cmp_alu_cmp as libc::c_int as libc::c_uint {
        return (mf_jcc as libc::c_uint >= mf_jcc_jc as libc::c_int as libc::c_uint
            && mf_jcc as libc::c_uint <= mf_jcc_jna as libc::c_int as libc::c_uint
            || mf_jcc as libc::c_uint == mf_jcc_jl as libc::c_int as libc::c_uint
            || mf_jcc as libc::c_uint == mf_jcc_jle as libc::c_int as libc::c_uint)
            as libc::c_int;
    }
    if mf_cmp as libc::c_uint == mf_cmp_incdec as libc::c_int as libc::c_uint {
        return (mf_jcc as libc::c_uint == mf_jcc_je as libc::c_int as libc::c_uint
            || mf_jcc as libc::c_uint == mf_jcc_jl as libc::c_int as libc::c_uint
            || mf_jcc as libc::c_uint == mf_jcc_jle as libc::c_int as libc::c_uint)
            as libc::c_int;
    }
    if mf_cmp as libc::c_uint == mf_cmp_test_and as libc::c_int as libc::c_uint {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn i386_next_non_empty_frag(mut fragP: *mut fragS) -> *mut fragS {
    fragP = (*fragP).fr_next;
    while !fragP.is_null()
        && (*fragP).fr_type as libc::c_uint == rs_fill as libc::c_int as libc::c_uint
        && (*fragP).fr_fix == 0 as libc::c_int as libc::c_ulong
    {
        fragP = (*fragP).fr_next;
    }
    return fragP;
}
unsafe extern "C" fn i386_next_fusible_jcc_frag(
    mut maybe_cmp_fragP: *mut fragS,
    mut pad_fragP: *mut fragS,
) -> *mut fragS {
    let mut branch_fragP: *mut fragS = 0 as *mut fragS;
    if pad_fragP.is_null() {
        return 0 as *mut fragS;
    }
    if (*pad_fragP).fr_type as libc::c_uint
        == rs_machine_dependent as libc::c_int as libc::c_uint
        && (*pad_fragP).fr_subtype >> 2 as libc::c_int
            == 3 as libc::c_int as libc::c_uint
    {
        branch_fragP = i386_next_non_empty_frag(pad_fragP);
        if (*branch_fragP).fr_type as libc::c_uint
            != rs_machine_dependent as libc::c_int as libc::c_uint
        {
            return 0 as *mut fragS;
        }
        if (*branch_fragP).fr_subtype >> 2 as libc::c_int
            == 1 as libc::c_int as libc::c_uint
            && i386_macro_fusible_p(
                ((*maybe_cmp_fragP).tc_frag_data).mf_type() as mf_cmp_kind,
                ((*pad_fragP).tc_frag_data).mf_type() as mf_jcc_kind,
            ) != 0
        {
            return branch_fragP;
        }
    }
    return 0 as *mut fragS;
}
unsafe extern "C" fn i386_classify_machine_dependent_frag(mut fragP: *mut fragS) {
    let mut cmp_fragP: *mut fragS = 0 as *mut fragS;
    let mut pad_fragP: *mut fragS = 0 as *mut fragS;
    let mut branch_fragP: *mut fragS = 0 as *mut fragS;
    let mut next_fragP: *mut fragS = 0 as *mut fragS;
    let mut max_prefix_length: libc::c_uint = 0;
    if ((*fragP).tc_frag_data).classified() != 0 {
        return;
    }
    next_fragP = fragP;
    while !next_fragP.is_null() {
        ((*next_fragP).tc_frag_data).set_classified(1 as libc::c_int as libc::c_uint);
        if (*next_fragP).fr_type as libc::c_uint
            == rs_machine_dependent as libc::c_int as libc::c_uint
        {
            match (*next_fragP).fr_subtype >> 2 as libc::c_int {
                3 => {
                    branch_fragP = i386_next_non_empty_frag(next_fragP);
                    (*next_fragP).tc_frag_data.u.branch_fragP = branch_fragP;
                }
                5 => {
                    cmp_fragP = i386_next_non_empty_frag(next_fragP);
                    pad_fragP = i386_next_non_empty_frag(cmp_fragP);
                    branch_fragP = i386_next_fusible_jcc_frag(next_fragP, pad_fragP);
                    if !branch_fragP.is_null() {
                        (*next_fragP).tc_frag_data.u.branch_fragP = branch_fragP;
                        (*next_fragP)
                            .tc_frag_data
                            .cmp_size = (*cmp_fragP).fr_fix as libc::c_uchar;
                        frag_wane(pad_fragP);
                        next_fragP = branch_fragP;
                    } else if (*next_fragP).tc_frag_data.max_prefix_length != 0 {
                        (*next_fragP)
                            .fr_subtype = ((4 as libc::c_int) << 2 as libc::c_int
                            | 0 as libc::c_int) as relax_substateT;
                        (*next_fragP)
                            .tc_frag_data
                            .max_bytes = (*next_fragP).tc_frag_data.max_prefix_length
                            as libc::c_uint;
                        (*next_fragP)
                            .tc_frag_data
                            .max_prefix_length = 0 as libc::c_int as libc::c_uchar;
                    } else {
                        frag_wane(next_fragP);
                    }
                }
                _ => {}
            }
        }
        next_fragP = (*next_fragP).fr_next;
    }
    if align_branch_prefix_size == 0 {
        return;
    }
    while !fragP.is_null() {
        if !((*fragP).fr_type as libc::c_uint
            != rs_machine_dependent as libc::c_int as libc::c_uint
            || (*fragP).fr_subtype >> 2 as libc::c_int
                != 4 as libc::c_int as libc::c_uint)
        {
            max_prefix_length = 0 as libc::c_int as libc::c_uint;
            next_fragP = fragP;
            while !next_fragP.is_null() {
                if !((*next_fragP).fr_type as libc::c_uint
                    == rs_fill as libc::c_int as libc::c_uint)
                {
                    if (*next_fragP).fr_type as libc::c_uint
                        != rs_machine_dependent as libc::c_int as libc::c_uint
                    {
                        break;
                    }
                    if (*next_fragP).fr_subtype >> 2 as libc::c_int
                        == 4 as libc::c_int as libc::c_uint
                    {
                        if max_prefix_length >= 20 as libc::c_int as libc::c_uint {
                            max_prefix_length = 20 as libc::c_int as libc::c_uint;
                            frag_wane(next_fragP);
                        } else {
                            max_prefix_length = max_prefix_length
                                .wrapping_add((*next_fragP).tc_frag_data.max_bytes);
                        }
                    } else {
                        if !((*next_fragP).fr_subtype >> 2 as libc::c_int
                            == 3 as libc::c_int as libc::c_uint
                            || (*next_fragP).fr_subtype >> 2 as libc::c_int
                                == 5 as libc::c_int as libc::c_uint)
                        {
                            break;
                        }
                        (*fragP).tc_frag_data.u.padding_fragP = next_fragP;
                        break;
                    }
                }
                next_fragP = (*next_fragP).fr_next;
            }
            (*fragP).tc_frag_data.max_prefix_length = max_prefix_length as libc::c_uchar;
            fragP = next_fragP;
        }
        fragP = (*fragP).fr_next;
    }
}
unsafe extern "C" fn i386_branch_padding_size(
    mut fragP: *mut fragS,
    mut address: offsetT,
) -> libc::c_int {
    let mut offset: libc::c_uint = 0;
    let mut size: libc::c_uint = 0;
    let mut padding_size: libc::c_uint = 0;
    let mut branch_fragP: *mut fragS = (*fragP).tc_frag_data.u.branch_fragP;
    if address == 0 {
        address = (*fragP).fr_address as offsetT;
    }
    address = (address as libc::c_ulong).wrapping_add((*fragP).fr_fix) as offsetT
        as offsetT;
    size = (*fragP).tc_frag_data.cmp_size as libc::c_uint;
    size = (size as libc::c_ulong).wrapping_add((*branch_fragP).fr_fix) as libc::c_uint
        as libc::c_uint;
    if (*branch_fragP).fr_type as libc::c_uint
        == rs_machine_dependent as libc::c_int as libc::c_uint
    {
        size = size
            .wrapping_add(
                md_relax_table[(*branch_fragP).fr_subtype as usize].rlx_length
                    as libc::c_uint,
            );
    }
    offset = (address
        & ((1 as libc::c_uint) << align_branch_power)
            .wrapping_sub(1 as libc::c_int as libc::c_uint) as libc::c_long)
        as libc::c_uint;
    if offset.wrapping_add(size) >= (1 as libc::c_uint) << align_branch_power {
        padding_size = ((1 as libc::c_uint) << align_branch_power).wrapping_sub(offset);
    } else {
        padding_size = 0 as libc::c_int as libc::c_uint;
    }
    if fits_in_unsigned_byte(padding_size as addressT) == 0 {
        as_abort(
            b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
            12000 as libc::c_int,
            (*::core::mem::transmute::<
                &[u8; 47],
                &[libc::c_char; 47],
            >(b"int i386_branch_padding_size(fragS *, offsetT)\0"))
                .as_ptr(),
        );
    }
    return padding_size as libc::c_int;
}
static mut output_invalid_buf: [libc::c_char; 8] = [0; 8];
unsafe extern "C" fn check_register(mut r: *const reg_entry) -> bool {
    if allow_pseudo_reg != 0 {
        return 1 as libc::c_int != 0;
    }
    if operand_type_all_zero(&(*r).reg_type) != 0 {
        return 0 as libc::c_int != 0;
    }
    if (((*r).reg_type.bitfield).dword() as libc::c_int != 0
        || ((*r).reg_type.bitfield).class() as libc::c_int == SReg as libc::c_int
            && (*r).reg_num as libc::c_int > 3 as libc::c_int
        || ((*r).reg_type.bitfield).class() as libc::c_int == RegCR as libc::c_int
        || ((*r).reg_type.bitfield).class() as libc::c_int == RegDR as libc::c_int)
        && (cpu_arch_flags.bitfield).cpui386() == 0
    {
        return 0 as libc::c_int != 0;
    }
    if ((*r).reg_type.bitfield).class() as libc::c_int == RegTR as libc::c_int
        && (flag_code as libc::c_uint == CODE_64BIT as libc::c_int as libc::c_uint
            || (cpu_arch_flags.bitfield).cpui386() == 0
            || (cpu_arch_isa_flags.bitfield).cpui586() as libc::c_int != 0
            || (cpu_arch_isa_flags.bitfield).cpui686() as libc::c_int != 0)
    {
        return 0 as libc::c_int != 0;
    }
    if ((*r).reg_type.bitfield).class() as libc::c_int == RegMMX as libc::c_int
        && (cpu_arch_flags.bitfield).cpummx() == 0
    {
        return 0 as libc::c_int != 0;
    }
    if (cpu_arch_flags.bitfield).cpuavx512f() == 0 {
        if ((*r).reg_type.bitfield).zmmword() as libc::c_int != 0
            || ((*r).reg_type.bitfield).class() as libc::c_int == RegMask as libc::c_int
        {
            return 0 as libc::c_int != 0;
        }
        if (cpu_arch_flags.bitfield).cpuavx() == 0 {
            if ((*r).reg_type.bitfield).ymmword() != 0 {
                return 0 as libc::c_int != 0;
            }
            if (cpu_arch_flags.bitfield).cpusse() == 0
                && ((*r).reg_type.bitfield).xmmword() as libc::c_int != 0
            {
                return 0 as libc::c_int != 0;
            }
        }
    }
    if ((*r).reg_type.bitfield).tmmword() as libc::c_int != 0
        && ((cpu_arch_flags.bitfield).cpuamx_tile() == 0
            || flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint)
    {
        return 0 as libc::c_int != 0;
    }
    if ((*r).reg_type.bitfield).class() as libc::c_int == RegBND as libc::c_int
        && (cpu_arch_flags.bitfield).cpumpx() == 0
    {
        return 0 as libc::c_int != 0;
    }
    if allow_index_reg == 0
        && (*r).reg_num as libc::c_int
            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int - 1 as libc::c_int
    {
        return 0 as libc::c_int != 0;
    }
    if (*r).reg_flags as libc::c_int & 0x4 as libc::c_int != 0 {
        if (cpu_arch_flags.bitfield).cpuavx512f() == 0
            || flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
        {
            return 0 as libc::c_int != 0;
        }
        if i.vec_encoding as libc::c_uint
            == vex_encoding_default as libc::c_int as libc::c_uint
        {
            i.vec_encoding = vex_encoding_evex;
        } else if i.vec_encoding as libc::c_uint
            != vex_encoding_evex as libc::c_int as libc::c_uint
        {
            i.vec_encoding = vex_encoding_error;
        }
    }
    if ((*r).reg_flags as libc::c_int & (0x2 as libc::c_int | 0x1 as libc::c_int) != 0
        || ((*r).reg_type.bitfield).qword() as libc::c_int != 0)
        && ((cpu_arch_flags.bitfield).cpulm() == 0
            || ((*r).reg_type.bitfield).class() as libc::c_int != RegCR as libc::c_int)
        && flag_code as libc::c_uint != CODE_64BIT as libc::c_int as libc::c_uint
    {
        return 0 as libc::c_int != 0;
    }
    if ((*r).reg_type.bitfield).class() as libc::c_int == SReg as libc::c_int
        && (*r).reg_num as libc::c_int
            == !(0 as libc::c_int) as libc::c_uchar as libc::c_int && intel_syntax == 0
    {
        return 0 as libc::c_int != 0;
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn parse_real_register(
    mut reg_string: *mut libc::c_char,
    mut end_op: *mut *mut libc::c_char,
) -> *const reg_entry {
    let mut s: *mut libc::c_char = reg_string;
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut reg_name_given: [libc::c_char; 9] = [0; 9];
    let mut r: *const reg_entry = 0 as *const reg_entry;
    if *s as libc::c_int == '%' as i32 {
        s = s.offset(1);
        s;
    }
    if *s as libc::c_int == ' ' as i32 {
        s = s.offset(1);
        s;
    }
    p = reg_name_given.as_mut_ptr();
    loop {
        let fresh60 = p;
        p = p.offset(1);
        *fresh60 = register_chars[*s as libc::c_uchar as usize];
        if !(*fresh60 as libc::c_int != '\0' as i32) {
            break;
        }
        if p >= reg_name_given.as_mut_ptr().offset(8 as libc::c_int as isize) {
            return 0 as *mut libc::c_void as *const reg_entry;
        }
        s = s.offset(1);
        s;
    }
    if allow_naked_reg != 0
        && identifier_chars[*s as libc::c_uchar as usize] as libc::c_int != 0
    {
        return 0 as *mut libc::c_void as *const reg_entry;
    }
    *end_op = s;
    r = str_hash_find(reg_hash, reg_name_given.as_mut_ptr()) as *const reg_entry;
    if r == reg_st0 {
        if (cpu_arch_flags.bitfield).cpu8087() == 0
            && (cpu_arch_flags.bitfield).cpu287() == 0
            && (cpu_arch_flags.bitfield).cpu387() == 0 && allow_pseudo_reg == 0
        {
            return 0 as *mut libc::c_void as *const reg_entry;
        }
        if *s as libc::c_int == ' ' as i32 {
            s = s.offset(1);
            s;
        }
        if *s as libc::c_int == '(' as i32 {
            s = s.offset(1);
            s;
            if *s as libc::c_int == ' ' as i32 {
                s = s.offset(1);
                s;
            }
            if *s as libc::c_int >= '0' as i32 && *s as libc::c_int <= '7' as i32 {
                let mut fpr: libc::c_int = *s as libc::c_int - '0' as i32;
                s = s.offset(1);
                s;
                if *s as libc::c_int == ' ' as i32 {
                    s = s.offset(1);
                    s;
                }
                if *s as libc::c_int == ')' as i32 {
                    *end_op = s.offset(1 as libc::c_int as isize);
                    return r.offset(fpr as isize);
                }
            }
            return 0 as *mut libc::c_void as *const reg_entry;
        }
    }
    return if !r.is_null() && check_register(r) as libc::c_int != 0 {
        r
    } else {
        0 as *const reg_entry
    };
}
#[no_mangle]
pub static mut md_shortopts: *const libc::c_char = b"kVQ:sqnO::\0" as *const u8
    as *const libc::c_char;
#[no_mangle]
pub static mut md_longopts: [option; 34] = [
    {
        let mut init = option {
            name: b"32\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"64\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"x32\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 14 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mshared\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 21 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mx86-used-note\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 25 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"divide\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"march\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 3 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mtune\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 4 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mmnemonic\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 5 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"msyntax\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 6 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mindex-reg\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 7 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mnaked-reg\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 8 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"msse2avx\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 10 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"msse-check\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 11 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"moperand-check\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 12 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mavxscalar\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 13 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mvexwig\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 26 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"madd-bnd-prefix\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 15 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mevexlig\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 16 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mevexwig\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 17 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"momit-lock-prefix\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 19 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mfence-as-lock-add\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 24 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mrelax-relocations\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 9 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mevexrcig\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 20 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"malign-branch-boundary\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 27 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"malign-branch-prefix-size\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 28 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"malign-branch\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 29 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mbranches-within-32B-boundaries\0" as *const u8
                as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 30 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mlfence-after-load\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 31 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mlfence-before-indirect-branch\0" as *const u8
                as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 32 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mlfence-before-ret\0" as *const u8 as *const libc::c_char,
            has_arg: 1 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 33 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mamd64\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 22 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"mintel64\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 290 as libc::c_int + 23 as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: 0 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 0 as libc::c_int,
        };
        init
    },
];
#[no_mangle]
pub static mut md_longopts_size: size_t = unsafe {
    ::core::mem::size_of::<[option; 34]>() as libc::c_ulong
};
unsafe extern "C" fn output_message(
    mut stream: *mut FILE,
    mut p: *mut libc::c_char,
    mut message: *mut libc::c_char,
    mut start: *mut libc::c_char,
    mut left_p: *mut libc::c_int,
    mut name: *const libc::c_char,
    mut len: libc::c_int,
) -> *mut libc::c_char {
    let mut size: libc::c_int = ::core::mem::size_of::<[libc::c_char; 81]>()
        as libc::c_ulong as libc::c_int;
    let mut left: libc::c_int = *left_p;
    left -= len + 2 as libc::c_int;
    if left >= 0 as libc::c_int {
        if p != start {
            let fresh61 = p;
            p = p.offset(1);
            *fresh61 = ',' as i32 as libc::c_char;
            let fresh62 = p;
            p = p.offset(1);
            *fresh62 = ' ' as i32 as libc::c_char;
        }
        p = mempcpy(
            p as *mut libc::c_void,
            name as *const libc::c_void,
            len as libc::c_ulong,
        ) as *mut libc::c_char;
    } else {
        let fresh63 = p;
        p = p.offset(1);
        *fresh63 = ',' as i32 as libc::c_char;
        *p = '\0' as i32 as libc::c_char;
        fprintf(stream, b"%s\n\0" as *const u8 as *const libc::c_char, message);
        p = start;
        left = (size as libc::c_long - start.offset_from(message) as libc::c_long
            - len as libc::c_long - 2 as libc::c_int as libc::c_long) as libc::c_int;
        if left >= 0 as libc::c_int {} else {
            as_abort(
                b"config/tc-i386.c\0" as *const u8 as *const libc::c_char,
                13636 as libc::c_int,
                (*::core::mem::transmute::<
                    &[u8; 79],
                    &[libc::c_char; 79],
                >(
                    b"char *output_message(FILE *, char *, char *, char *, int *, const char *, int)\0",
                ))
                    .as_ptr(),
            );
        };
        p = mempcpy(
            p as *mut libc::c_void,
            name as *const libc::c_void,
            len as libc::c_ulong,
        ) as *mut libc::c_char;
    }
    *left_p = left;
    return p;
}
unsafe extern "C" fn show_arch(
    mut stream: *mut FILE,
    mut ext: libc::c_int,
    mut check: libc::c_int,
) {
    static mut message: [libc::c_char; 81] = unsafe {
        *::core::mem::transmute::<
            &[u8; 81],
            &mut [libc::c_char; 81],
        >(
            b"                                                                                \0",
        )
    };
    let mut start: *mut libc::c_char = message
        .as_mut_ptr()
        .offset(27 as libc::c_int as isize);
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = ::core::mem::size_of::<[libc::c_char; 81]>()
        as libc::c_ulong as libc::c_int;
    let mut left: libc::c_int = 0;
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    let mut len: libc::c_int = 0;
    let mut j: libc::c_uint = 0;
    p = start;
    left = (size as libc::c_long
        - start.offset_from(message.as_mut_ptr()) as libc::c_long) as libc::c_int;
    let mut current_block_8: u64;
    j = 0 as libc::c_int as libc::c_uint;
    while (j as libc::c_ulong)
        < (::core::mem::size_of::<[arch_entry; 154]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<arch_entry>() as libc::c_ulong)
    {
        if !(cpu_arch[j as usize].skip != 0) {
            name = cpu_arch[j as usize].name;
            len = cpu_arch[j as usize].len as libc::c_int;
            if *name as libc::c_int == '.' as i32 {
                if ext != 0 {
                    name = name.offset(1);
                    name;
                    len -= 1;
                    len;
                    current_block_8 = 1054647088692577877;
                } else {
                    current_block_8 = 820271813250567934;
                }
            } else if ext != 0 {
                current_block_8 = 820271813250567934;
            } else if check != 0 && (cpu_arch[j as usize].flags.bitfield).cpui386() == 0
            {
                current_block_8 = 820271813250567934;
            } else {
                current_block_8 = 1054647088692577877;
            }
            match current_block_8 {
                820271813250567934 => {}
                _ => {
                    p = output_message(
                        stream,
                        p,
                        message.as_mut_ptr(),
                        start,
                        &mut left,
                        name,
                        len,
                    );
                }
            }
        }
        j = j.wrapping_add(1);
        j;
    }
    if ext != 0 {
        j = 0 as libc::c_int as libc::c_uint;
        while (j as libc::c_ulong)
            < (::core::mem::size_of::<[noarch_entry; 50]>() as libc::c_ulong)
                .wrapping_div(::core::mem::size_of::<noarch_entry>() as libc::c_ulong)
        {
            name = cpu_noarch[j as usize].name;
            len = cpu_noarch[j as usize].len as libc::c_int;
            p = output_message(
                stream,
                p,
                message.as_mut_ptr(),
                start,
                &mut left,
                name,
                len,
            );
            j = j.wrapping_add(1);
            j;
        }
    }
    *p = '\0' as i32 as libc::c_char;
    fprintf(stream, b"%s\n\0" as *const u8 as *const libc::c_char, message.as_mut_ptr());
}
static mut intel_state: C2RustUnnamed_34 = C2RustUnnamed_34 {
    op_modifier: O_illegal,
    is_mem: 0,
    is_indirect: 0,
    has_offset: 0,
    in_offset: 0,
    in_bracket: 0,
    in_scale: 0,
    reloc_types: i386_operand_type {
        bitfield: C2RustUnnamed_33 {
            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
        },
    },
    base: 0 as *const reg_entry,
    index: 0 as *const reg_entry,
    scale_factor: 0,
    seg: 0 as *const symbolS as *mut symbolS,
};
static mut i386_operators: [C2RustUnnamed_41; 16] = [
    {
        let mut init = C2RustUnnamed_41 {
            name: b"and\0" as *const u8 as *const libc::c_char,
            op: O_bit_and,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"eq\0" as *const u8 as *const libc::c_char,
            op: O_eq,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"ge\0" as *const u8 as *const libc::c_char,
            op: O_ge,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            op: O_gt,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"le\0" as *const u8 as *const libc::c_char,
            op: O_le,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            op: O_lt,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"mod\0" as *const u8 as *const libc::c_char,
            op: O_modulus,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"ne\0" as *const u8 as *const libc::c_char,
            op: O_ne,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"not\0" as *const u8 as *const libc::c_char,
            op: O_bit_not,
            operands: 1 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            op: O_md32,
            operands: 1 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"or\0" as *const u8 as *const libc::c_char,
            op: O_bit_inclusive_or,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"shl\0" as *const u8 as *const libc::c_char,
            op: O_left_shift,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"short\0" as *const u8 as *const libc::c_char,
            op: O_md31,
            operands: 1 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"shr\0" as *const u8 as *const libc::c_char,
            op: O_right_shift,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: b"xor\0" as *const u8 as *const libc::c_char,
            op: O_bit_exclusive_or,
            operands: 2 as libc::c_int as libc::c_uint,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_41 {
            name: 0 as *const libc::c_char,
            op: O_illegal,
            operands: 0 as libc::c_int as libc::c_uint,
        };
        init
    },
];
static mut i386_types: [C2RustUnnamed_40; 14] = [
    {
        let mut init = C2RustUnnamed_40 {
            name: b"byte\0" as *const u8 as *const libc::c_char,
            op: O_md28,
            sz: [
                1 as libc::c_int as libc::c_ushort,
                1 as libc::c_int as libc::c_ushort,
                1 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"word\0" as *const u8 as *const libc::c_char,
            op: O_md27,
            sz: [
                2 as libc::c_int as libc::c_ushort,
                2 as libc::c_int as libc::c_ushort,
                2 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"dword\0" as *const u8 as *const libc::c_char,
            op: O_md26,
            sz: [
                4 as libc::c_int as libc::c_ushort,
                4 as libc::c_int as libc::c_ushort,
                4 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"fword\0" as *const u8 as *const libc::c_char,
            op: O_md24,
            sz: [
                6 as libc::c_int as libc::c_ushort,
                6 as libc::c_int as libc::c_ushort,
                6 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"qword\0" as *const u8 as *const libc::c_char,
            op: O_md25,
            sz: [
                8 as libc::c_int as libc::c_ushort,
                8 as libc::c_int as libc::c_ushort,
                8 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"mmword\0" as *const u8 as *const libc::c_char,
            op: O_md25,
            sz: [
                8 as libc::c_int as libc::c_ushort,
                8 as libc::c_int as libc::c_ushort,
                8 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"tbyte\0" as *const u8 as *const libc::c_char,
            op: O_md23,
            sz: [
                10 as libc::c_int as libc::c_ushort,
                10 as libc::c_int as libc::c_ushort,
                10 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"oword\0" as *const u8 as *const libc::c_char,
            op: O_md22,
            sz: [
                16 as libc::c_int as libc::c_ushort,
                16 as libc::c_int as libc::c_ushort,
                16 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"xmmword\0" as *const u8 as *const libc::c_char,
            op: O_md22,
            sz: [
                16 as libc::c_int as libc::c_ushort,
                16 as libc::c_int as libc::c_ushort,
                16 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"ymmword\0" as *const u8 as *const libc::c_char,
            op: O_md21,
            sz: [
                32 as libc::c_int as libc::c_ushort,
                32 as libc::c_int as libc::c_ushort,
                32 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"zmmword\0" as *const u8 as *const libc::c_char,
            op: O_md20,
            sz: [
                64 as libc::c_int as libc::c_ushort,
                64 as libc::c_int as libc::c_ushort,
                64 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"near\0" as *const u8 as *const libc::c_char,
            op: O_md30,
            sz: [
                0xff04 as libc::c_int as libc::c_ushort,
                0xff02 as libc::c_int as libc::c_ushort,
                0xff08 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: b"far\0" as *const u8 as *const libc::c_char,
            op: O_md29,
            sz: [
                0xff06 as libc::c_int as libc::c_ushort,
                0xff05 as libc::c_int as libc::c_ushort,
                0xff06 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
    {
        let mut init = C2RustUnnamed_40 {
            name: 0 as *const libc::c_char,
            op: O_illegal,
            sz: [
                0 as libc::c_int as libc::c_ushort,
                0 as libc::c_int as libc::c_ushort,
                0 as libc::c_int as libc::c_ushort,
            ],
        };
        init
    },
];
#[inline]
unsafe extern "C" fn i386_intel_check(
    mut rreg: *const reg_entry,
    mut base: *const reg_entry,
    mut iindex: *const reg_entry,
) -> libc::c_int {
    if this_operand >= 0 as libc::c_int && rreg != i.op[this_operand as usize].regs
        || base != intel_state.base || iindex != intel_state.index
    {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"invalid use of register\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return 0 as libc::c_int;
    }
    return 1 as libc::c_int;
}
#[inline]
unsafe extern "C" fn i386_intel_fold(mut e: *mut expressionS, mut sym: *mut symbolS) {
    let mut exp: *mut expressionS = symbol_get_value_expression(sym);
    if S_GET_SEGMENT(sym)
        == &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize)
            as *mut asection
    {
        let mut val: offsetT = (*e).X_add_number;
        *e = *exp;
        (*e).X_add_number += val;
    } else {
        if (*exp).X_op() as libc::c_int == O_symbol as libc::c_int
            && strcmp(
                S_GET_NAME((*exp).X_add_symbol),
                b"_GLOBAL_OFFSET_TABLE_\0" as *const u8 as *const libc::c_char,
            ) == 0 as libc::c_int
        {
            sym = (*exp).X_add_symbol;
        }
        (*e).X_add_symbol = sym;
        (*e).X_op_symbol = 0 as *mut symbolS;
        (*e).set_X_op(O_symbol);
    };
}
unsafe extern "C" fn i386_intel_simplify_register(
    mut e: *mut expressionS,
) -> libc::c_int {
    let mut reg_num: libc::c_int = 0;
    if this_operand < 0 as libc::c_int || intel_state.in_offset != 0 {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"invalid use of register\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return 0 as libc::c_int;
    }
    if (*e).X_op() as libc::c_int == O_register as libc::c_int {
        reg_num = (*e).X_add_number as libc::c_int;
    } else {
        reg_num = (*e).X_md as libc::c_int - 1 as libc::c_int;
    }
    if reg_num < 0 as libc::c_int || reg_num >= i386_regtab_size as libc::c_int {
        as_bad(
            dcgettext(
                0 as *const libc::c_char,
                b"invalid register number\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        return 0 as libc::c_int;
    }
    if intel_state.in_bracket == 0 {
        if !(i.op[this_operand as usize].regs).is_null() {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid use of register\0" as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
        if ((*i386_regtab.as_ptr().offset(reg_num as isize)).reg_type.bitfield).class()
            as libc::c_int == SReg as libc::c_int
            && (*i386_regtab.as_ptr().offset(reg_num as isize)).reg_num as libc::c_int
                == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
        {
            as_bad(
                dcgettext(
                    0 as *const libc::c_char,
                    b"invalid use of pseudo-register\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
            return 0 as libc::c_int;
        }
        i.op[this_operand as usize].regs = i386_regtab.as_ptr().offset(reg_num as isize);
    } else if (intel_state.index).is_null()
        && (((*i386_regtab.as_ptr().offset(reg_num as isize)).reg_type.bitfield)
            .xmmword() as libc::c_int != 0
            || ((*i386_regtab.as_ptr().offset(reg_num as isize)).reg_type.bitfield)
                .ymmword() as libc::c_int != 0
            || ((*i386_regtab.as_ptr().offset(reg_num as isize)).reg_type.bitfield)
                .zmmword() as libc::c_int != 0
            || (*i386_regtab.as_ptr().offset(reg_num as isize)).reg_num as libc::c_int
                == !(0 as libc::c_int) as libc::c_uchar as libc::c_int
                    - 1 as libc::c_int)
    {
        intel_state.index = i386_regtab.as_ptr().offset(reg_num as isize);
    } else if (intel_state.base).is_null() && intel_state.in_scale == 0 {
        intel_state.base = i386_regtab.as_ptr().offset(reg_num as isize);
    } else if (intel_state.index).is_null() {
        let mut t: *const insn_template = (*current_templates).start;
        if intel_state.in_scale != 0
            || ((*t).opcode_modifier).opcodeprefix() as libc::c_int == 2 as libc::c_int
                && ((*t).opcode_modifier).opcodespace() as libc::c_int
                    == 1 as libc::c_int
                && (*t).base_opcode() as libc::c_int == 0x1b as libc::c_int
            || ((*t).opcode_modifier).opcodeprefix() as libc::c_int == 0 as libc::c_int
                && ((*t).opcode_modifier).opcodespace() as libc::c_int
                    == 1 as libc::c_int
                && (*t).base_opcode() as libc::c_int & !(1 as libc::c_int)
                    == 0x1a as libc::c_int
            || ((*i386_regtab.as_ptr().offset(reg_num as isize)).reg_type.bitfield)
                .baseindex() as libc::c_int != 0
        {
            intel_state.index = i386_regtab.as_ptr().offset(reg_num as isize);
        } else {
            intel_state.index = intel_state.base;
            intel_state.base = i386_regtab.as_ptr().offset(reg_num as isize);
        }
    } else {
        intel_state.index = reg_eax.offset(4 as libc::c_int as isize);
    }
    return 2 as libc::c_int;
}
#[inline]
unsafe extern "C" fn i386_intel_simplify_symbol(mut sym: *mut symbolS) -> libc::c_int {
    let mut ret: libc::c_int = i386_intel_simplify(symbol_get_value_expression(sym));
    if ret == 2 as libc::c_int {
        S_SET_SEGMENT(
            sym,
            &mut *_bfd_std_section.as_mut_ptr().offset(2 as libc::c_int as isize),
        );
        ret = 1 as libc::c_int;
    }
    return ret;
}
unsafe extern "C" fn run_static_initializers() {
    iamcu_flags = i386_cpu_flags {
        bitfield: {
            let mut init = C2RustUnnamed_24 {
                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
            };
            init.set_cpui186(1 as libc::c_int as libc::c_uint);
            init.set_cpui286(1 as libc::c_int as libc::c_uint);
            init.set_cpui386(1 as libc::c_int as libc::c_uint);
            init.set_cpui486(1 as libc::c_int as libc::c_uint);
            init.set_cpui586(1 as libc::c_int as libc::c_uint);
            init.set_cpui686(0 as libc::c_int as libc::c_uint);
            init.set_cpucmov(0 as libc::c_int as libc::c_uint);
            init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
            init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
            init.set_cpunop(0 as libc::c_int as libc::c_uint);
            init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
            init.set_cpu8087(0 as libc::c_int as libc::c_uint);
            init.set_cpu287(0 as libc::c_int as libc::c_uint);
            init.set_cpu387(0 as libc::c_int as libc::c_uint);
            init.set_cpu687(0 as libc::c_int as libc::c_uint);
            init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
            init.set_cpummx(0 as libc::c_int as libc::c_uint);
            init.set_cpusse(0 as libc::c_int as libc::c_uint);
            init.set_cpusse2(0 as libc::c_int as libc::c_uint);
            init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
            init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
            init.set_cpusse3(0 as libc::c_int as libc::c_uint);
            init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
            init.set_cpusvme(0 as libc::c_int as libc::c_uint);
            init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
            init.set_cpusmx(0 as libc::c_int as libc::c_uint);
            init.set_cpussse3(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
            init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
            init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
            init.set_cpul1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
            init.set_cpuaes(0 as libc::c_int as libc::c_uint);
            init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
            init.set_cpufma(0 as libc::c_int as libc::c_uint);
            init.set_cpufma4(0 as libc::c_int as libc::c_uint);
            init.set_cpuxop(0 as libc::c_int as libc::c_uint);
            init.set_cpulwp(0 as libc::c_int as libc::c_uint);
            init.set_cpubmi(0 as libc::c_int as libc::c_uint);
            init.set_cputbm(0 as libc::c_int as libc::c_uint);
            init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
            init.set_cpucx16(0 as libc::c_int as libc::c_uint);
            init.set_cpuept(0 as libc::c_int as libc::c_uint);
            init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
            init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
            init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
            init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
            init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
            init.set_cpuhle(0 as libc::c_int as libc::c_uint);
            init.set_cpurtm(0 as libc::c_int as libc::c_uint);
            init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
            init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
            init.set_cpumpx(0 as libc::c_int as libc::c_uint);
            init.set_cpulm(0 as libc::c_int as libc::c_uint);
            init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
            init.set_cpuadx(0 as libc::c_int as libc::c_uint);
            init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
            init.set_cpusmap(0 as libc::c_int as libc::c_uint);
            init.set_cpusha(0 as libc::c_int as libc::c_uint);
            init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
            init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
            init.set_cpuse1(0 as libc::c_int as libc::c_uint);
            init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vp2intersect(0 as libc::c_int as libc::c_uint);
            init.set_cputdx(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
            init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
            init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
            init.set_cpuospke(0 as libc::c_int as libc::c_uint);
            init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
            init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
            init.set_cpuibt(0 as libc::c_int as libc::c_uint);
            init.set_cpushstk(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
            init.set_cpugfni(0 as libc::c_int as libc::c_uint);
            init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
            init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
            init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
            init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
            init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
            init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
            init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
            init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
            init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
            init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
            init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
            init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
            init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
            init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
            init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
            init.set_cpukl(0 as libc::c_int as libc::c_uint);
            init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
            init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
            init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
            init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
            init.set_cpusnp(0 as libc::c_int as libc::c_uint);
            init.set_cpu64(0 as libc::c_int as libc::c_uint);
            init.set_cpuno64(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    bad_reg = {
        let mut init = reg_entry {
            reg_name: b"<bad>\0" as *const u8 as *const libc::c_char,
            reg_type: i386_operand_type {
                bitfield: {
                    let mut init = C2RustUnnamed_33 {
                        class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                    };
                    init.set_class(0 as libc::c_int as libc::c_uint);
                    init.set_instance(0 as libc::c_int as libc::c_uint);
                    init.set_imm1(0 as libc::c_int as libc::c_uint);
                    init.set_imm8(0 as libc::c_int as libc::c_uint);
                    init.set_imm8s(0 as libc::c_int as libc::c_uint);
                    init.set_imm16(0 as libc::c_int as libc::c_uint);
                    init.set_imm32(0 as libc::c_int as libc::c_uint);
                    init.set_imm32s(0 as libc::c_int as libc::c_uint);
                    init.set_imm64(0 as libc::c_int as libc::c_uint);
                    init.set_disp8(0 as libc::c_int as libc::c_uint);
                    init.set_disp16(0 as libc::c_int as libc::c_uint);
                    init.set_disp32(0 as libc::c_int as libc::c_uint);
                    init.set_disp32s(0 as libc::c_int as libc::c_uint);
                    init.set_disp64(0 as libc::c_int as libc::c_uint);
                    init.set_baseindex(0 as libc::c_int as libc::c_uint);
                    init.set_byte(0 as libc::c_int as libc::c_uint);
                    init.set_word(0 as libc::c_int as libc::c_uint);
                    init.set_dword(0 as libc::c_int as libc::c_uint);
                    init.set_fword(0 as libc::c_int as libc::c_uint);
                    init.set_qword(0 as libc::c_int as libc::c_uint);
                    init.set_tbyte(0 as libc::c_int as libc::c_uint);
                    init.set_xmmword(0 as libc::c_int as libc::c_uint);
                    init.set_ymmword(0 as libc::c_int as libc::c_uint);
                    init.set_zmmword(0 as libc::c_int as libc::c_uint);
                    init.set_tmmword(0 as libc::c_int as libc::c_uint);
                    init.set_unspecified(0 as libc::c_int as libc::c_uint);
                    init.set_unused(0 as libc::c_int as libc::c_uint);
                    init
                },
            },
            reg_flags: 0 as libc::c_int as libc::c_uchar,
            reg_num: 0 as libc::c_int as libc::c_uchar,
            dw2_regnum: [
                -(1 as libc::c_int) as libc::c_schar,
                -(1 as libc::c_int) as libc::c_schar,
            ],
        };
        init
    };
    RC_NamesTable = [
        {
            let mut init = RC_name {
                type_0: rne,
                name: b"rn-sae\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
            };
            init
        },
        {
            let mut init = RC_name {
                type_0: rd,
                name: b"rd-sae\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
            };
            init
        },
        {
            let mut init = RC_name {
                type_0: ru,
                name: b"ru-sae\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
            };
            init
        },
        {
            let mut init = RC_name {
                type_0: rz,
                name: b"rz-sae\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
            };
            init
        },
        {
            let mut init = RC_name {
                type_0: saeonly,
                name: b"sae\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
            };
            init
        },
    ];
    cpu_arch_flags = i386_cpu_flags {
        bitfield: {
            let mut init = C2RustUnnamed_24 {
                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
            };
            init.set_cpui186(1 as libc::c_int as libc::c_uint);
            init.set_cpui286(1 as libc::c_int as libc::c_uint);
            init.set_cpui386(1 as libc::c_int as libc::c_uint);
            init.set_cpui486(1 as libc::c_int as libc::c_uint);
            init.set_cpui586(1 as libc::c_int as libc::c_uint);
            init.set_cpui686(1 as libc::c_int as libc::c_uint);
            init.set_cpucmov(1 as libc::c_int as libc::c_uint);
            init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
            init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
            init.set_cpunop(1 as libc::c_int as libc::c_uint);
            init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
            init.set_cpu8087(1 as libc::c_int as libc::c_uint);
            init.set_cpu287(1 as libc::c_int as libc::c_uint);
            init.set_cpu387(1 as libc::c_int as libc::c_uint);
            init.set_cpu687(1 as libc::c_int as libc::c_uint);
            init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
            init.set_cpummx(1 as libc::c_int as libc::c_uint);
            init.set_cpusse(1 as libc::c_int as libc::c_uint);
            init.set_cpusse2(1 as libc::c_int as libc::c_uint);
            init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
            init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
            init.set_cpusse3(1 as libc::c_int as libc::c_uint);
            init.set_cpupadlock(1 as libc::c_int as libc::c_uint);
            init.set_cpusvme(1 as libc::c_int as libc::c_uint);
            init.set_cpuvmx(1 as libc::c_int as libc::c_uint);
            init.set_cpusmx(1 as libc::c_int as libc::c_uint);
            init.set_cpussse3(1 as libc::c_int as libc::c_uint);
            init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
            init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
            init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
            init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
            init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
            init.set_cpul1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuiamcu(1 as libc::c_int as libc::c_uint);
            init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
            init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
            init.set_cpuaes(1 as libc::c_int as libc::c_uint);
            init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
            init.set_cpufma(1 as libc::c_int as libc::c_uint);
            init.set_cpufma4(1 as libc::c_int as libc::c_uint);
            init.set_cpuxop(1 as libc::c_int as libc::c_uint);
            init.set_cpulwp(1 as libc::c_int as libc::c_uint);
            init.set_cpubmi(1 as libc::c_int as libc::c_uint);
            init.set_cputbm(1 as libc::c_int as libc::c_uint);
            init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
            init.set_cpucx16(1 as libc::c_int as libc::c_uint);
            init.set_cpuept(1 as libc::c_int as libc::c_uint);
            init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
            init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
            init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
            init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
            init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
            init.set_cpuhle(1 as libc::c_int as libc::c_uint);
            init.set_cpurtm(1 as libc::c_int as libc::c_uint);
            init.set_cpuinvpcid(1 as libc::c_int as libc::c_uint);
            init.set_cpuvmfunc(1 as libc::c_int as libc::c_uint);
            init.set_cpumpx(1 as libc::c_int as libc::c_uint);
            init.set_cpulm(1 as libc::c_int as libc::c_uint);
            init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
            init.set_cpuadx(1 as libc::c_int as libc::c_uint);
            init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
            init.set_cpusmap(1 as libc::c_int as libc::c_uint);
            init.set_cpusha(1 as libc::c_int as libc::c_uint);
            init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
            init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
            init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
            init.set_cpuprefetchwt1(1 as libc::c_int as libc::c_uint);
            init.set_cpuse1(1 as libc::c_int as libc::c_uint);
            init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vp2intersect(1 as libc::c_int as libc::c_uint);
            init.set_cputdx(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx_vnni(1 as libc::c_int as libc::c_uint);
            init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
            init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
            init.set_cpuospke(1 as libc::c_int as libc::c_uint);
            init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
            init.set_cpuptwrite(1 as libc::c_int as libc::c_uint);
            init.set_cpuibt(1 as libc::c_int as libc::c_uint);
            init.set_cpushstk(1 as libc::c_int as libc::c_uint);
            init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
            init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
            init.set_cpuamx_tile(1 as libc::c_int as libc::c_uint);
            init.set_cpugfni(1 as libc::c_int as libc::c_uint);
            init.set_cpuvaes(1 as libc::c_int as libc::c_uint);
            init.set_cpuvpclmulqdq(1 as libc::c_int as libc::c_uint);
            init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
            init.set_cpupconfig(1 as libc::c_int as libc::c_uint);
            init.set_cpuwaitpkg(1 as libc::c_int as libc::c_uint);
            init.set_cpuuintr(1 as libc::c_int as libc::c_uint);
            init.set_cpucldemote(1 as libc::c_int as libc::c_uint);
            init.set_cpumovdiri(1 as libc::c_int as libc::c_uint);
            init.set_cpumovdir64b(1 as libc::c_int as libc::c_uint);
            init.set_cpuenqcmd(1 as libc::c_int as libc::c_uint);
            init.set_cpuserialize(1 as libc::c_int as libc::c_uint);
            init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
            init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
            init.set_cpusev_es(1 as libc::c_int as libc::c_uint);
            init.set_cputsxldtrk(1 as libc::c_int as libc::c_uint);
            init.set_cpukl(1 as libc::c_int as libc::c_uint);
            init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
            init.set_cpuhreset(1 as libc::c_int as libc::c_uint);
            init.set_cpuinvlpgb(1 as libc::c_int as libc::c_uint);
            init.set_cputlbsync(1 as libc::c_int as libc::c_uint);
            init.set_cpusnp(1 as libc::c_int as libc::c_uint);
            init.set_cpu64(0 as libc::c_int as libc::c_uint);
            init.set_cpuno64(1 as libc::c_int as libc::c_uint);
            init.set_unused(1 as libc::c_int as libc::c_uint);
            init
        },
    };
    cpu_arch = [
        {
            let mut init = arch_entry {
                name: b"generic32\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_GENERIC32,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"generic64\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_GENERIC64,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i8086\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i186\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i286\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i386\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_I386,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i486\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_I486,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i586\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUM,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"i686\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUMPRO,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"pentium\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUM,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"pentiumpro\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUMPRO,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"pentiumii\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUMPRO,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"pentiumiii\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUMPRO,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"pentium4\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_PENTIUM4,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"prescott\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_NOCONA,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"nocona\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_NOCONA,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"yonah\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_CORE,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 1 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"core\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_CORE,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"merom\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_CORE2,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 1 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"core2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_CORE2,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"corei7\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_COREI7,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"l1om\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_L1OM,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(1 as libc::c_int as libc::c_uint);
                        init.set_cpu287(1 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(1 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(1 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(1 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(1 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(1 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(1 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(1 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(1 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(1 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(1 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(1 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(1 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(1 as libc::c_int as libc::c_uint);
                        init.set_cpukl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(1 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(1 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(1 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(1 as libc::c_int as libc::c_uint);
                        init.set_unused(1 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"k1om\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K1OM,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(1 as libc::c_int as libc::c_uint);
                        init.set_cpu287(1 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(1 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(1 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(1 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(1 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(1 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(1 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(1 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(1 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(1 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(1 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(1 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(1 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(1 as libc::c_int as libc::c_uint);
                        init.set_cpukl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(1 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(1 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(1 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(1 as libc::c_int as libc::c_uint);
                        init.set_unused(1 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"iamcu\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_IAMCU,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"k6\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K6,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"k6_2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K6,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"athlon\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_ATHLON,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"sledgehammer\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K8,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 1 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"opteron\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K8,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"k8\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_K8,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"amdfam10\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_AMDFAM10,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"bdver1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BD,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"bdver2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BD,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"bdver3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BD,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"bdver4\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BD,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"znver1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_ZNVER,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"znver2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_ZNVER,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"znver3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_ZNVER,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(1 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(1 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(1 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"btver1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BT,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b"btver2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_BT,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(1 as libc::c_int as libc::c_uint);
                        init.set_cpui286(1 as libc::c_int as libc::c_uint);
                        init.set_cpui386(1 as libc::c_int as libc::c_uint);
                        init.set_cpui486(1 as libc::c_int as libc::c_uint);
                        init.set_cpui586(1 as libc::c_int as libc::c_uint);
                        init.set_cpui686(1 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".8087\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(1 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".287\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(1 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".387\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".687\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".cmov\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".fxsr\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".mmx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse4a\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".ssse3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse4.1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse4.2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse4\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512f\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512cd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512er\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512pf\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512dq\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512bw\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512vl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".vmx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".vmfunc\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(1 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".smx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(1 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".xsave\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".xsaveopt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".xsavec\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".xsaves\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".aes\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".pclmul\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".clmul\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 1 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".fsgsbase\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rdrnd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".f16c\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".bmi2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".fma\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".fma4\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".xop\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".lwp\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".movbe\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(1 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".cx16\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".ept\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".lzcnt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".popcnt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".hle\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(1 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rtm\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".invpcid\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".clflush\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(1 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".nop\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(1 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".syscall\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(1 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rdtscp\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(1 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".3dnow\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".3dnowa\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".padlock\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(1 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".pacifica\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 1 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".svme\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sse4a\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".abm\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".bmi\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(1 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".tbm\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".adx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rdseed\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(1 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".prfchw\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(1 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".smap\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(1 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".mpx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(1 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sha\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".clflushopt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".prefetchwt1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".se1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".clwb\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512ifma\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512vbmi\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_4fmaps\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_4vnniw\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_vpopcntdq\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_vbmi2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_vnni\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_bitalg\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx_vnni\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".clzero\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(1 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".mwaitx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".ospke\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rdpid\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(1 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".ptwrite\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(1 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".ibt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(1 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".shstk\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".gfni\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".vaes\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(1 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".vpclmulqdq\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".wbnoinvd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(1 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".pconfig\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".waitpkg\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".cldemote\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".amx_int8\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".amx_bf16\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".amx_tile\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(1 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".movdiri\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".movdir64b\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(1 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_bf16\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".avx512_vp2intersect\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".tdx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".enqcmd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".serialize\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".rdpru\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(1 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".mcommit\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(1 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".sev_es\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(1 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".tsxldtrk\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(1 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".kl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".widekl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".uintr\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(1 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
        {
            let mut init = arch_entry {
                name: b".hreset\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                type_0: PROCESSOR_UNKNOWN,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                skip: 0 as libc::c_int as libc::c_uint,
            };
            init
        },
    ];
    cpu_noarch = [
        {
            let mut init = noarch_entry {
                name: b"no87\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(1 as libc::c_int as libc::c_uint);
                        init.set_cpu287(1 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"no287\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(1 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"no387\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(1 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"no687\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(1 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(1 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nocmov\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(1 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nofxsr\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(1 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nommx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(1 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse4a\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(1 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nossse3\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse4.1\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse4.2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nosse4\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(1 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(1 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(1 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(1 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(1 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512f\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512cd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512er\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512pf\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512dq\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512bw\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512vl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512ifma\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512vbmi\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_4fmaps\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_4vnniw\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_vpopcntdq\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_vbmi2\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_vnni\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_bitalg\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx_vnni\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(1 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noibt\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(1 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noshstk\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noamx_int8\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noamx_bf16\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noamx_tile\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(1 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nomovdiri\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(1 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nomovdir64b\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(1 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_bf16\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noavx512_vp2intersect\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            1 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"notdx\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(1 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noenqcmd\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(1 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"noserialize\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(1 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"notsxldtrk\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(1 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nokl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nowidekl\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(1 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nouintr\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(1 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
        {
            let mut init = noarch_entry {
                name: b"nohreset\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_uint,
                flags: i386_cpu_flags {
                    bitfield: {
                        let mut init = C2RustUnnamed_24 {
                            cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
                        };
                        init.set_cpui186(0 as libc::c_int as libc::c_uint);
                        init.set_cpui286(0 as libc::c_int as libc::c_uint);
                        init.set_cpui386(0 as libc::c_int as libc::c_uint);
                        init.set_cpui486(0 as libc::c_int as libc::c_uint);
                        init.set_cpui586(0 as libc::c_int as libc::c_uint);
                        init.set_cpui686(0 as libc::c_int as libc::c_uint);
                        init.set_cpucmov(0 as libc::c_int as libc::c_uint);
                        init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
                        init.set_cpunop(0 as libc::c_int as libc::c_uint);
                        init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
                        init.set_cpu8087(0 as libc::c_int as libc::c_uint);
                        init.set_cpu287(0 as libc::c_int as libc::c_uint);
                        init.set_cpu387(0 as libc::c_int as libc::c_uint);
                        init.set_cpu687(0 as libc::c_int as libc::c_uint);
                        init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
                        init.set_cpummx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse2(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
                        init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
                        init.set_cpusvme(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmx(0 as libc::c_int as libc::c_uint);
                        init.set_cpussse3(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
                        init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
                        init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512f(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512cd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512er(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512pf(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512dq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512bw(0 as libc::c_int as libc::c_uint);
                        init.set_cpul1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
                        init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma(0 as libc::c_int as libc::c_uint);
                        init.set_cpufma4(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxop(0 as libc::c_int as libc::c_uint);
                        init.set_cpulwp(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi(0 as libc::c_int as libc::c_uint);
                        init.set_cputbm(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
                        init.set_cpucx16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuept(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
                        init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
                        init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhle(0 as libc::c_int as libc::c_uint);
                        init.set_cpurtm(0 as libc::c_int as libc::c_uint);
                        init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
                        init.set_cpumpx(0 as libc::c_int as libc::c_uint);
                        init.set_cpulm(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
                        init.set_cpuadx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
                        init.set_cpusmap(0 as libc::c_int as libc::c_uint);
                        init.set_cpusha(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
                        init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
                        init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuse1(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512ifma(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512vbmi(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4fmaps(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_4vnniw(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vpopcntdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vbmi2(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bitalg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx512_vp2intersect(
                            0 as libc::c_int as libc::c_uint,
                        );
                        init.set_cputdx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
                        init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
                        init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
                        init.set_cpuospke(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
                        init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
                        init.set_cpuibt(0 as libc::c_int as libc::c_uint);
                        init.set_cpushstk(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
                        init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
                        init.set_cpugfni(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
                        init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
                        init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
                        init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
                        init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
                        init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
                        init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
                        init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
                        init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
                        init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
                        init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
                        init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
                        init.set_cpukl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
                        init.set_cpuhreset(1 as libc::c_int as libc::c_uint);
                        init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
                        init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
                        init.set_cpusnp(0 as libc::c_int as libc::c_uint);
                        init.set_cpu64(0 as libc::c_int as libc::c_uint);
                        init.set_cpuno64(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
            };
            init
        },
    ];
    avx512 = i386_cpu_flags {
        bitfield: {
            let mut init = C2RustUnnamed_24 {
                cpui186_cpui286_cpui386_cpui486_cpui586_cpui686_cpucmov_cpufxsr_cpuclflush_cpunop_cpusyscall_cpu8087_cpu287_cpu387_cpu687_cpufisttp_cpummx_cpusse_cpusse2_cpua3dnow_cpua3dnowa_cpusse3_cpupadlock_cpusvme_cpuvmx_cpusmx_cpussse3_cpusse4a_cpulzcnt_cpupopcnt_cpusse4_1_cpusse4_2_cpuavx_cpuavx2_cpuavx512f_cpuavx512cd_cpuavx512er_cpuavx512pf_cpuavx512vl_cpuavx512dq_cpuavx512bw_cpul1om_cpuk1om_cpuiamcu_cpuxsave_cpuxsaveopt_cpuaes_cpupclmul_cpufma_cpufma4_cpuxop_cpulwp_cpubmi_cputbm_cpumovbe_cpucx16_cpuept_cpurdtscp_cpufsgsbase_cpurdrnd_cpuf16c_cpubmi2_cpuhle_cpurtm_cpuinvpcid_cpuvmfunc_cpumpx_cpulm_cpurdseed_cpuadx_cpuprfchw_cpusmap_cpusha_cpuclflushopt_cpuxsaves_cpuxsavec_cpuprefetchwt1_cpuse1_cpuclwb_cpuavx512ifma_cpuavx512vbmi_cpuavx512_4fmaps_cpuavx512_4vnniw_cpuavx512_vpopcntdq_cpuavx512_vbmi2_cpuavx512_vnni_cpuavx512_bitalg_cpuavx512_bf16_cpuavx512_vp2intersect_cputdx_cpuavx_vnni_cpumwaitx_cpuclzero_cpuospke_cpurdpid_cpuptwrite_cpuibt_cpushstk_cpuamx_int8_cpuamx_bf16_cpuamx_tile_cpugfni_cpuvaes_cpuvpclmulqdq_cpuwbnoinvd_cpupconfig_cpuwaitpkg_cpuuintr_cpucldemote_cpumovdiri_cpumovdir64b_cpuenqcmd_cpuserialize_cpurdpru_cpumcommit_cpusev_es_cputsxldtrk_cpukl_cpuwidekl_cpuhreset_cpuinvlpgb_cputlbsync_cpusnp_cpu64_cpuno64_unused: [0; 16],
            };
            init.set_cpui186(0 as libc::c_int as libc::c_uint);
            init.set_cpui286(0 as libc::c_int as libc::c_uint);
            init.set_cpui386(0 as libc::c_int as libc::c_uint);
            init.set_cpui486(0 as libc::c_int as libc::c_uint);
            init.set_cpui586(0 as libc::c_int as libc::c_uint);
            init.set_cpui686(0 as libc::c_int as libc::c_uint);
            init.set_cpucmov(0 as libc::c_int as libc::c_uint);
            init.set_cpufxsr(0 as libc::c_int as libc::c_uint);
            init.set_cpuclflush(0 as libc::c_int as libc::c_uint);
            init.set_cpunop(0 as libc::c_int as libc::c_uint);
            init.set_cpusyscall(0 as libc::c_int as libc::c_uint);
            init.set_cpu8087(0 as libc::c_int as libc::c_uint);
            init.set_cpu287(0 as libc::c_int as libc::c_uint);
            init.set_cpu387(0 as libc::c_int as libc::c_uint);
            init.set_cpu687(0 as libc::c_int as libc::c_uint);
            init.set_cpufisttp(0 as libc::c_int as libc::c_uint);
            init.set_cpummx(0 as libc::c_int as libc::c_uint);
            init.set_cpusse(0 as libc::c_int as libc::c_uint);
            init.set_cpusse2(0 as libc::c_int as libc::c_uint);
            init.set_cpua3dnow(0 as libc::c_int as libc::c_uint);
            init.set_cpua3dnowa(0 as libc::c_int as libc::c_uint);
            init.set_cpusse3(0 as libc::c_int as libc::c_uint);
            init.set_cpupadlock(0 as libc::c_int as libc::c_uint);
            init.set_cpusvme(0 as libc::c_int as libc::c_uint);
            init.set_cpuvmx(0 as libc::c_int as libc::c_uint);
            init.set_cpusmx(0 as libc::c_int as libc::c_uint);
            init.set_cpussse3(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4a(0 as libc::c_int as libc::c_uint);
            init.set_cpulzcnt(0 as libc::c_int as libc::c_uint);
            init.set_cpupopcnt(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4_1(0 as libc::c_int as libc::c_uint);
            init.set_cpusse4_2(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx2(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512f(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512cd(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512er(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512pf(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vl(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512dq(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512bw(1 as libc::c_int as libc::c_uint);
            init.set_cpul1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuk1om(0 as libc::c_int as libc::c_uint);
            init.set_cpuiamcu(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsave(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsaveopt(0 as libc::c_int as libc::c_uint);
            init.set_cpuaes(0 as libc::c_int as libc::c_uint);
            init.set_cpupclmul(0 as libc::c_int as libc::c_uint);
            init.set_cpufma(0 as libc::c_int as libc::c_uint);
            init.set_cpufma4(0 as libc::c_int as libc::c_uint);
            init.set_cpuxop(0 as libc::c_int as libc::c_uint);
            init.set_cpulwp(0 as libc::c_int as libc::c_uint);
            init.set_cpubmi(0 as libc::c_int as libc::c_uint);
            init.set_cputbm(0 as libc::c_int as libc::c_uint);
            init.set_cpumovbe(0 as libc::c_int as libc::c_uint);
            init.set_cpucx16(0 as libc::c_int as libc::c_uint);
            init.set_cpuept(0 as libc::c_int as libc::c_uint);
            init.set_cpurdtscp(0 as libc::c_int as libc::c_uint);
            init.set_cpufsgsbase(0 as libc::c_int as libc::c_uint);
            init.set_cpurdrnd(0 as libc::c_int as libc::c_uint);
            init.set_cpuf16c(0 as libc::c_int as libc::c_uint);
            init.set_cpubmi2(0 as libc::c_int as libc::c_uint);
            init.set_cpuhle(0 as libc::c_int as libc::c_uint);
            init.set_cpurtm(0 as libc::c_int as libc::c_uint);
            init.set_cpuinvpcid(0 as libc::c_int as libc::c_uint);
            init.set_cpuvmfunc(0 as libc::c_int as libc::c_uint);
            init.set_cpumpx(0 as libc::c_int as libc::c_uint);
            init.set_cpulm(0 as libc::c_int as libc::c_uint);
            init.set_cpurdseed(0 as libc::c_int as libc::c_uint);
            init.set_cpuadx(0 as libc::c_int as libc::c_uint);
            init.set_cpuprfchw(0 as libc::c_int as libc::c_uint);
            init.set_cpusmap(0 as libc::c_int as libc::c_uint);
            init.set_cpusha(0 as libc::c_int as libc::c_uint);
            init.set_cpuclflushopt(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsaves(0 as libc::c_int as libc::c_uint);
            init.set_cpuxsavec(0 as libc::c_int as libc::c_uint);
            init.set_cpuprefetchwt1(0 as libc::c_int as libc::c_uint);
            init.set_cpuse1(0 as libc::c_int as libc::c_uint);
            init.set_cpuclwb(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx512ifma(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512vbmi(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4fmaps(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_4vnniw(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vpopcntdq(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vbmi2(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vnni(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bitalg(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_bf16(1 as libc::c_int as libc::c_uint);
            init.set_cpuavx512_vp2intersect(1 as libc::c_int as libc::c_uint);
            init.set_cputdx(0 as libc::c_int as libc::c_uint);
            init.set_cpuavx_vnni(0 as libc::c_int as libc::c_uint);
            init.set_cpumwaitx(0 as libc::c_int as libc::c_uint);
            init.set_cpuclzero(0 as libc::c_int as libc::c_uint);
            init.set_cpuospke(0 as libc::c_int as libc::c_uint);
            init.set_cpurdpid(0 as libc::c_int as libc::c_uint);
            init.set_cpuptwrite(0 as libc::c_int as libc::c_uint);
            init.set_cpuibt(0 as libc::c_int as libc::c_uint);
            init.set_cpushstk(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_int8(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_bf16(0 as libc::c_int as libc::c_uint);
            init.set_cpuamx_tile(0 as libc::c_int as libc::c_uint);
            init.set_cpugfni(0 as libc::c_int as libc::c_uint);
            init.set_cpuvaes(0 as libc::c_int as libc::c_uint);
            init.set_cpuvpclmulqdq(0 as libc::c_int as libc::c_uint);
            init.set_cpuwbnoinvd(0 as libc::c_int as libc::c_uint);
            init.set_cpupconfig(0 as libc::c_int as libc::c_uint);
            init.set_cpuwaitpkg(0 as libc::c_int as libc::c_uint);
            init.set_cpuuintr(0 as libc::c_int as libc::c_uint);
            init.set_cpucldemote(0 as libc::c_int as libc::c_uint);
            init.set_cpumovdiri(0 as libc::c_int as libc::c_uint);
            init.set_cpumovdir64b(0 as libc::c_int as libc::c_uint);
            init.set_cpuenqcmd(0 as libc::c_int as libc::c_uint);
            init.set_cpuserialize(0 as libc::c_int as libc::c_uint);
            init.set_cpurdpru(0 as libc::c_int as libc::c_uint);
            init.set_cpumcommit(0 as libc::c_int as libc::c_uint);
            init.set_cpusev_es(0 as libc::c_int as libc::c_uint);
            init.set_cputsxldtrk(0 as libc::c_int as libc::c_uint);
            init.set_cpukl(0 as libc::c_int as libc::c_uint);
            init.set_cpuwidekl(0 as libc::c_int as libc::c_uint);
            init.set_cpuhreset(0 as libc::c_int as libc::c_uint);
            init.set_cpuinvlpgb(0 as libc::c_int as libc::c_uint);
            init.set_cputlbsync(0 as libc::c_int as libc::c_uint);
            init.set_cpusnp(0 as libc::c_int as libc::c_uint);
            init.set_cpu64(0 as libc::c_int as libc::c_uint);
            init.set_cpuno64(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    disp16_32 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(1 as libc::c_int as libc::c_uint);
            init.set_disp32(1 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    anydisp = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(1 as libc::c_int as libc::c_uint);
            init.set_disp16(1 as libc::c_int as libc::c_uint);
            init.set_disp32(1 as libc::c_int as libc::c_uint);
            init.set_disp32s(1 as libc::c_int as libc::c_uint);
            init.set_disp64(1 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    anyimm = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(1 as libc::c_int as libc::c_uint);
            init.set_imm8(1 as libc::c_int as libc::c_uint);
            init.set_imm8s(1 as libc::c_int as libc::c_uint);
            init.set_imm16(1 as libc::c_int as libc::c_uint);
            init.set_imm32(1 as libc::c_int as libc::c_uint);
            init.set_imm32s(1 as libc::c_int as libc::c_uint);
            init.set_imm64(1 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    regxmm = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(7 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(1 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    regmask = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(8 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm8 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(1 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm8s = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(1 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm16 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(1 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm32 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(1 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm32s = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(1 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm64 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(0 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(1 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm16_32 = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(1 as libc::c_int as libc::c_uint);
            init.set_imm32(1 as libc::c_int as libc::c_uint);
            init.set_imm32s(0 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm16_32s = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(1 as libc::c_int as libc::c_uint);
            init.set_imm32(0 as libc::c_int as libc::c_uint);
            init.set_imm32s(1 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    imm16_32_32s = i386_operand_type {
        bitfield: {
            let mut init = C2RustUnnamed_33 {
                class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
            };
            init.set_class(0 as libc::c_int as libc::c_uint);
            init.set_instance(0 as libc::c_int as libc::c_uint);
            init.set_imm1(0 as libc::c_int as libc::c_uint);
            init.set_imm8(0 as libc::c_int as libc::c_uint);
            init.set_imm8s(0 as libc::c_int as libc::c_uint);
            init.set_imm16(1 as libc::c_int as libc::c_uint);
            init.set_imm32(1 as libc::c_int as libc::c_uint);
            init.set_imm32s(1 as libc::c_int as libc::c_uint);
            init.set_imm64(0 as libc::c_int as libc::c_uint);
            init.set_disp8(0 as libc::c_int as libc::c_uint);
            init.set_disp16(0 as libc::c_int as libc::c_uint);
            init.set_disp32(0 as libc::c_int as libc::c_uint);
            init.set_disp32s(0 as libc::c_int as libc::c_uint);
            init.set_disp64(0 as libc::c_int as libc::c_uint);
            init.set_baseindex(0 as libc::c_int as libc::c_uint);
            init.set_byte(0 as libc::c_int as libc::c_uint);
            init.set_word(0 as libc::c_int as libc::c_uint);
            init.set_dword(0 as libc::c_int as libc::c_uint);
            init.set_fword(0 as libc::c_int as libc::c_uint);
            init.set_qword(0 as libc::c_int as libc::c_uint);
            init.set_tbyte(0 as libc::c_int as libc::c_uint);
            init.set_xmmword(0 as libc::c_int as libc::c_uint);
            init.set_ymmword(0 as libc::c_int as libc::c_uint);
            init.set_zmmword(0 as libc::c_int as libc::c_uint);
            init.set_tmmword(0 as libc::c_int as libc::c_uint);
            init.set_unspecified(0 as libc::c_int as libc::c_uint);
            init.set_unused(0 as libc::c_int as libc::c_uint);
            init
        },
    };
    gotrel = [
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"SIZE\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_SIZE32, BFD_RELOC_SIZE32],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 0 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"PLTOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [_dummy_first_bfd_reloc_code_real, BFD_RELOC_X86_64_PLTOFF64],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"PLT\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_PLT32, BFD_RELOC_X86_64_PLT32],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 0 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOTPLT\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [_dummy_first_bfd_reloc_code_real, BFD_RELOC_X86_64_GOTPLT64],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(1 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOTOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_GOTOFF, BFD_RELOC_X86_64_GOTOFF64],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(1 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOTPCREL\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [_dummy_first_bfd_reloc_code_real, BFD_RELOC_X86_64_GOTPCREL],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TLSGD\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_GD, BFD_RELOC_X86_64_TLSGD],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TLSLDM\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_LDM, _dummy_first_bfd_reloc_code_real],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TLSLD\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [_dummy_first_bfd_reloc_code_real, BFD_RELOC_X86_64_TLSLD],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOTTPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_IE_32, BFD_RELOC_X86_64_GOTTPOFF],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_LE_32, BFD_RELOC_X86_64_TPOFF32],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(1 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"NTPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_LE, _dummy_first_bfd_reloc_code_real],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"DTPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_LDO_32, BFD_RELOC_X86_64_DTPOFF32],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(1 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOTNTPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_GOTIE, _dummy_first_bfd_reloc_code_real],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"INDNTPOFF\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_IE, _dummy_first_bfd_reloc_code_real],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(0 as libc::c_int as libc::c_uint);
                        init.set_imm32s(0 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(0 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"GOT\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_GOT32, BFD_RELOC_X86_64_GOT32],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(1 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TLSDESC\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_GOTDESC, BFD_RELOC_X86_64_GOTPC32_TLSDESC],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_39 {
                str_0: b"TLSCALL\0" as *const u8 as *const libc::c_char,
                len: (::core::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int,
                rel: [BFD_RELOC_386_TLS_DESC_CALL, BFD_RELOC_X86_64_TLSDESC_CALL],
                types64: i386_operand_type {
                    bitfield: {
                        let mut init = C2RustUnnamed_33 {
                            class_instance_imm1_imm8_imm8s_imm16_imm32_imm32s_imm64_disp8_disp16_disp32_disp32s_disp64_baseindex_byte_word_dword_fword_qword_tbyte_xmmword_ymmword_zmmword_tmmword_unspecified_unused: [0; 4],
                        };
                        init.set_class(0 as libc::c_int as libc::c_uint);
                        init.set_instance(0 as libc::c_int as libc::c_uint);
                        init.set_imm1(0 as libc::c_int as libc::c_uint);
                        init.set_imm8(0 as libc::c_int as libc::c_uint);
                        init.set_imm8s(0 as libc::c_int as libc::c_uint);
                        init.set_imm16(0 as libc::c_int as libc::c_uint);
                        init.set_imm32(1 as libc::c_int as libc::c_uint);
                        init.set_imm32s(1 as libc::c_int as libc::c_uint);
                        init.set_imm64(0 as libc::c_int as libc::c_uint);
                        init.set_disp8(0 as libc::c_int as libc::c_uint);
                        init.set_disp16(0 as libc::c_int as libc::c_uint);
                        init.set_disp32(1 as libc::c_int as libc::c_uint);
                        init.set_disp32s(0 as libc::c_int as libc::c_uint);
                        init.set_disp64(0 as libc::c_int as libc::c_uint);
                        init.set_baseindex(0 as libc::c_int as libc::c_uint);
                        init.set_byte(0 as libc::c_int as libc::c_uint);
                        init.set_word(0 as libc::c_int as libc::c_uint);
                        init.set_dword(0 as libc::c_int as libc::c_uint);
                        init.set_fword(0 as libc::c_int as libc::c_uint);
                        init.set_qword(0 as libc::c_int as libc::c_uint);
                        init.set_tbyte(0 as libc::c_int as libc::c_uint);
                        init.set_xmmword(0 as libc::c_int as libc::c_uint);
                        init.set_ymmword(0 as libc::c_int as libc::c_uint);
                        init.set_zmmword(0 as libc::c_int as libc::c_uint);
                        init.set_tmmword(0 as libc::c_int as libc::c_uint);
                        init.set_unspecified(0 as libc::c_int as libc::c_uint);
                        init.set_unused(0 as libc::c_int as libc::c_uint);
                        init
                    },
                },
                need_GOT_symbol: 1 as libc::c_int != 0,
            };
            init
        },
    ];
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
