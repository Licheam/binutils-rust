use ::libc;
use ::c2rust_bitfields;
extern "C" {
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn free(_: *mut libc::c_void);
    fn abort() -> !;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memcmp(
        _: *const libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
pub type ptrdiff_t = libc::c_long;
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type active_reg_t = libc::c_ulong;
pub type reg_syntax_t = libc::c_ulong;
pub type reg_errcode_t = libc::c_int;
pub const REG_ERPAREN: reg_errcode_t = 16;
pub const REG_ESIZE: reg_errcode_t = 15;
pub const REG_EEND: reg_errcode_t = 14;
pub const REG_BADRPT: reg_errcode_t = 13;
pub const REG_ESPACE: reg_errcode_t = 12;
pub const REG_ERANGE: reg_errcode_t = 11;
pub const REG_BADBR: reg_errcode_t = 10;
pub const REG_EBRACE: reg_errcode_t = 9;
pub const REG_EPAREN: reg_errcode_t = 8;
pub const REG_EBRACK: reg_errcode_t = 7;
pub const REG_ESUBREG: reg_errcode_t = 6;
pub const REG_EESCAPE: reg_errcode_t = 5;
pub const REG_ECTYPE: reg_errcode_t = 4;
pub const REG_ECOLLATE: reg_errcode_t = 3;
pub const REG_BADPAT: reg_errcode_t = 2;
pub const REG_NOMATCH: reg_errcode_t = 1;
pub const REG_NOERROR: reg_errcode_t = 0;
pub const REG_ENOSYS: reg_errcode_t = -1;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct re_pattern_buffer {
    pub buffer: *mut libc::c_uchar,
    pub allocated: libc::c_ulong,
    pub used: libc::c_ulong,
    pub syntax: reg_syntax_t,
    pub fastmap: *mut libc::c_char,
    pub translate: *mut libc::c_char,
    pub re_nsub: size_t,
    #[bitfield(name = "can_be_null", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "regs_allocated", ty = "libc::c_uint", bits = "1..=2")]
    #[bitfield(name = "fastmap_accurate", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "no_sub", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "not_bol", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "not_eol", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "newline_anchor", ty = "libc::c_uint", bits = "7..=7")]
    pub can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
pub type regex_t = re_pattern_buffer;
pub type xregoff_t = libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct re_registers {
    pub num_regs: libc::c_uint,
    pub start: *mut xregoff_t,
    pub end: *mut xregoff_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct regmatch_t {
    pub rm_so: xregoff_t,
    pub rm_eo: xregoff_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct compile_stack_elt_t {
    pub begalt_offset: pattern_offset_t,
    pub fixup_alt_jump: pattern_offset_t,
    pub inner_group_offset: pattern_offset_t,
    pub laststart_offset: pattern_offset_t,
    pub regnum: regnum_t,
}
pub type regnum_t = libc::c_uint;
pub type pattern_offset_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct compile_stack_type {
    pub stack: *mut compile_stack_elt_t,
    pub size: libc::c_uint,
    pub avail: libc::c_uint,
}
pub const succeed: re_opcode_t = 1;
pub type re_opcode_t = libc::c_uint;
pub const notwordbound: re_opcode_t = 29;
pub const wordbound: re_opcode_t = 28;
pub const wordend: re_opcode_t = 27;
pub const wordbeg: re_opcode_t = 26;
pub const notwordchar: re_opcode_t = 25;
pub const wordchar: re_opcode_t = 24;
pub const set_number_at: re_opcode_t = 23;
pub const jump_n: re_opcode_t = 22;
pub const succeed_n: re_opcode_t = 21;
pub const push_dummy_failure: re_opcode_t = 20;
pub const dummy_failure_jump: re_opcode_t = 19;
pub const maybe_pop_jump: re_opcode_t = 18;
pub const pop_failure_jump: re_opcode_t = 17;
pub const on_failure_keep_string_jump: re_opcode_t = 16;
pub const on_failure_jump: re_opcode_t = 15;
pub const jump_past_alt: re_opcode_t = 14;
pub const jump: re_opcode_t = 13;
pub const endbuf: re_opcode_t = 12;
pub const begbuf: re_opcode_t = 11;
pub const endline: re_opcode_t = 10;
pub const begline: re_opcode_t = 9;
pub const duplicate: re_opcode_t = 8;
pub const stop_memory: re_opcode_t = 7;
pub const start_memory: re_opcode_t = 6;
pub const charset_not: re_opcode_t = 5;
pub const charset: re_opcode_t = 4;
pub const anychar: re_opcode_t = 3;
pub const exactn: re_opcode_t = 2;
pub const no_op: re_opcode_t = 0;
pub type boolean = libc::c_char;
pub const _ISlower: C2RustUnnamed_0 = 512;
pub const _ISupper: C2RustUnnamed_0 = 256;
pub const _ISxdigit: C2RustUnnamed_0 = 4096;
pub const _ISspace: C2RustUnnamed_0 = 8192;
pub const _ISpunct: C2RustUnnamed_0 = 4;
pub const _ISprint: C2RustUnnamed_0 = 16384;
pub const _ISgraph: C2RustUnnamed_0 = 32768;
pub const _ISdigit: C2RustUnnamed_0 = 2048;
pub const _IScntrl: C2RustUnnamed_0 = 2;
pub const _ISblank: C2RustUnnamed_0 = 1;
pub const _ISalpha: C2RustUnnamed_0 = 1024;
pub const _ISalnum: C2RustUnnamed_0 = 8;
pub type byte_fail_stack_elt_t = byte_fail_stack_elt;
#[derive(Copy, Clone)]
#[repr(C)]
pub union byte_fail_stack_elt {
    pub pointer: *mut libc::c_uchar,
    pub integer: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct byte_fail_stack_type {
    pub stack: *mut byte_fail_stack_elt_t,
    pub size: libc::c_uint,
    pub avail: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union byte_register_info_type {
    pub word: byte_fail_stack_elt_t,
    pub bits: C2RustUnnamed,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct C2RustUnnamed {
    #[bitfield(name = "match_null_string_p", ty = "libc::c_uint", bits = "0..=1")]
    #[bitfield(name = "is_active", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "matched_something", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "ever_matched_something", ty = "libc::c_uint", bits = "4..=4")]
    pub match_null_string_p_is_active_matched_something_ever_matched_something: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 3],
}
pub type C2RustUnnamed_0 = libc::c_uint;
static mut re_syntax_table: [libc::c_char; 256] = [0; 256];
unsafe extern "C" fn init_syntax_once() {
    let mut c: libc::c_int = 0;
    static mut done: libc::c_int = 0 as libc::c_int;
    if done != 0 {
        return;
    }
    memset(
        re_syntax_table.as_mut_ptr() as *mut libc::c_void,
        '\0' as i32,
        ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
    );
    c = 0 as libc::c_int;
    while c < 256 as libc::c_int {
        if 1 as libc::c_int != 0
            && *(*__ctype_b_loc()).offset(c as isize) as libc::c_int
                & _ISalnum as libc::c_int as libc::c_ushort as libc::c_int != 0
        {
            re_syntax_table[c as usize] = 1 as libc::c_int as libc::c_char;
        }
        c += 1;
        c;
    }
    re_syntax_table['_' as i32 as usize] = 1 as libc::c_int as libc::c_char;
    done = 1 as libc::c_int;
}
#[no_mangle]
pub static mut xre_syntax_options: reg_syntax_t = 0;
#[no_mangle]
pub unsafe extern "C" fn xre_set_syntax(mut syntax: reg_syntax_t) -> reg_syntax_t {
    let mut ret: reg_syntax_t = xre_syntax_options;
    xre_syntax_options = syntax;
    return ret;
}
static mut re_error_msgid: [*const libc::c_char; 17] = [
    b"Success\0" as *const u8 as *const libc::c_char,
    b"No match\0" as *const u8 as *const libc::c_char,
    b"Invalid regular expression\0" as *const u8 as *const libc::c_char,
    b"Invalid collation character\0" as *const u8 as *const libc::c_char,
    b"Invalid character class name\0" as *const u8 as *const libc::c_char,
    b"Trailing backslash\0" as *const u8 as *const libc::c_char,
    b"Invalid back reference\0" as *const u8 as *const libc::c_char,
    b"Unmatched [ or [^\0" as *const u8 as *const libc::c_char,
    b"Unmatched ( or \\(\0" as *const u8 as *const libc::c_char,
    b"Unmatched \\{\0" as *const u8 as *const libc::c_char,
    b"Invalid content of \\{\\}\0" as *const u8 as *const libc::c_char,
    b"Invalid range end\0" as *const u8 as *const libc::c_char,
    b"Memory exhausted\0" as *const u8 as *const libc::c_char,
    b"Invalid preceding regular expression\0" as *const u8 as *const libc::c_char,
    b"Premature end of regular expression\0" as *const u8 as *const libc::c_char,
    b"Regular expression too big\0" as *const u8 as *const libc::c_char,
    b"Unmatched ) or \\)\0" as *const u8 as *const libc::c_char,
];
#[no_mangle]
pub static mut xre_max_failures: libc::c_int = 4000 as libc::c_int;
static mut byte_reg_unset_dummy: libc::c_char = 0;
unsafe extern "C" fn byte_regex_compile(
    mut pattern: *const libc::c_char,
    mut size: size_t,
    mut syntax: reg_syntax_t,
    mut bufp: *mut re_pattern_buffer,
) -> reg_errcode_t {
    let mut current_block: u64;
    let mut c: libc::c_uchar = 0;
    let mut c1: libc::c_uchar = 0;
    let mut p1: *const libc::c_char = 0 as *const libc::c_char;
    let mut b: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut compile_stack: compile_stack_type = compile_stack_type {
        stack: 0 as *mut compile_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut p: *const libc::c_char = pattern;
    let mut pend: *const libc::c_char = pattern.offset(size as isize);
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut pending_exact: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut laststart: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut begalt: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut fixup_alt_jump: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut regnum: regnum_t = 0 as libc::c_int as regnum_t;
    compile_stack
        .stack = malloc(
        (32 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<compile_stack_elt_t>() as libc::c_ulong),
    ) as *mut compile_stack_elt_t;
    if (compile_stack.stack).is_null() {
        return REG_ESPACE;
    }
    compile_stack.size = 32 as libc::c_int as libc::c_uint;
    compile_stack.avail = 0 as libc::c_int as libc::c_uint;
    (*bufp).syntax = syntax;
    (*bufp).set_fastmap_accurate(0 as libc::c_int as libc::c_uint);
    (*bufp).set_not_eol(0 as libc::c_int as libc::c_uint);
    (*bufp).set_not_bol((*bufp).not_eol());
    (*bufp).used = 0 as libc::c_int as libc::c_ulong;
    (*bufp).re_nsub = 0 as libc::c_int as size_t;
    init_syntax_once();
    if (*bufp).allocated == 0 as libc::c_int as libc::c_ulong {
        if !((*bufp).buffer).is_null() {
            (*bufp)
                .buffer = realloc(
                (*bufp).buffer as *mut libc::c_void,
                (32 as libc::c_int as libc::c_ulong)
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    )
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    ),
            ) as *mut libc::c_uchar;
        } else {
            (*bufp)
                .buffer = malloc(
                (32 as libc::c_int as libc::c_ulong)
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    )
                    .wrapping_div(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    )
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    ),
            ) as *mut libc::c_uchar;
        }
        if ((*bufp).buffer).is_null() {
            free(compile_stack.stack as *mut libc::c_void);
            return REG_ESPACE as libc::c_int as reg_errcode_t;
        }
        (*bufp)
            .allocated = (32 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong);
    }
    b = (*bufp).buffer;
    begalt = b;
    while p != pend {
        if p == pend {
            return REG_EEND;
        }
        let fresh0 = p;
        p = p.offset(1);
        c = *fresh0 as libc::c_uchar;
        if !translate.is_null() {
            c = *translate.offset(c as isize) as libc::c_uchar;
        }
        match c as libc::c_int {
            94 => {
                if p == pattern.offset(1 as libc::c_int as isize)
                    || syntax
                        & (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    || byte_at_begline_loc_p(pattern, p, syntax) as libc::c_int != 0
                {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer != (*bufp).buffer {
                            let mut incr: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer) as libc::c_long;
                            b = b.offset(incr as isize);
                            begalt = begalt.offset(incr as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr as isize);
                            }
                        }
                    }
                    let fresh1 = b;
                    b = b.offset(1);
                    *fresh1 = begline as libc::c_int as libc::c_uchar;
                    continue;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            36 => {
                if p == pend
                    || syntax
                        & (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    || byte_at_endline_loc_p(p, pend, syntax) as libc::c_int != 0
                {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_0: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer_0 != (*bufp).buffer {
                            let mut incr_0: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer_0) as libc::c_long;
                            b = b.offset(incr_0 as isize);
                            begalt = begalt.offset(incr_0 as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr_0 as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr_0 as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr_0 as isize);
                            }
                        }
                    }
                    let fresh2 = b;
                    b = b.offset(1);
                    *fresh2 = endline as libc::c_int as libc::c_uchar;
                    continue;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            43 | 63 => {
                if syntax & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int != 0
                    || syntax
                        & ((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    current_block = 12863738778380616964;
                } else {
                    current_block = 1951311294146316411;
                }
            }
            42 => {
                current_block = 1951311294146316411;
            }
            46 => {
                laststart = b;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_4: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp)
                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp)
                        .buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return REG_ESPACE;
                    }
                    if old_buffer_4 != (*bufp).buffer {
                        let mut incr_4: ptrdiff_t = ((*bufp).buffer)
                            .offset_from(old_buffer_4) as libc::c_long;
                        b = b.offset(incr_4 as isize);
                        begalt = begalt.offset(incr_4 as isize);
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = fixup_alt_jump.offset(incr_4 as isize);
                        }
                        if !laststart.is_null() {
                            laststart = laststart.offset(incr_4 as isize);
                        }
                        if !pending_exact.is_null() {
                            pending_exact = pending_exact.offset(incr_4 as isize);
                        }
                    }
                }
                let fresh5 = b;
                b = b.offset(1);
                *fresh5 = anychar as libc::c_int as libc::c_uchar;
                continue;
            }
            91 => {
                let mut had_char_class: boolean = 0 as libc::c_int as boolean;
                let mut range_start: libc::c_uint = 0xffffffff as libc::c_uint;
                if p == pend {
                    free(compile_stack.stack as *mut libc::c_void);
                    return REG_EBRACK as libc::c_int as reg_errcode_t;
                }
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 34 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_5: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp)
                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp)
                        .buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return REG_ESPACE;
                    }
                    if old_buffer_5 != (*bufp).buffer {
                        let mut incr_5: ptrdiff_t = ((*bufp).buffer)
                            .offset_from(old_buffer_5) as libc::c_long;
                        b = b.offset(incr_5 as isize);
                        begalt = begalt.offset(incr_5 as isize);
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = fixup_alt_jump.offset(incr_5 as isize);
                        }
                        if !laststart.is_null() {
                            laststart = laststart.offset(incr_5 as isize);
                        }
                        if !pending_exact.is_null() {
                            pending_exact = pending_exact.offset(incr_5 as isize);
                        }
                    }
                }
                laststart = b;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_6: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp)
                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp)
                        .buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return REG_ESPACE;
                    }
                    if old_buffer_6 != (*bufp).buffer {
                        let mut incr_6: ptrdiff_t = ((*bufp).buffer)
                            .offset_from(old_buffer_6) as libc::c_long;
                        b = b.offset(incr_6 as isize);
                        begalt = begalt.offset(incr_6 as isize);
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = fixup_alt_jump.offset(incr_6 as isize);
                        }
                        if !laststart.is_null() {
                            laststart = laststart.offset(incr_6 as isize);
                        }
                        if !pending_exact.is_null() {
                            pending_exact = pending_exact.offset(incr_6 as isize);
                        }
                    }
                }
                let fresh6 = b;
                b = b.offset(1);
                *fresh6 = (if *p as libc::c_int == '^' as i32 {
                    charset_not as libc::c_int
                } else {
                    charset as libc::c_int
                }) as libc::c_uchar;
                if *p as libc::c_int == '^' as i32 {
                    p = p.offset(1);
                    p;
                }
                p1 = p;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_7: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp)
                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp)
                        .buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return REG_ESPACE;
                    }
                    if old_buffer_7 != (*bufp).buffer {
                        let mut incr_7: ptrdiff_t = ((*bufp).buffer)
                            .offset_from(old_buffer_7) as libc::c_long;
                        b = b.offset(incr_7 as isize);
                        begalt = begalt.offset(incr_7 as isize);
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = fixup_alt_jump.offset(incr_7 as isize);
                        }
                        if !laststart.is_null() {
                            laststart = laststart.offset(incr_7 as isize);
                        }
                        if !pending_exact.is_null() {
                            pending_exact = pending_exact.offset(incr_7 as isize);
                        }
                    }
                }
                let fresh7 = b;
                b = b.offset(1);
                *fresh7 = (((1 as libc::c_int) << 8 as libc::c_int) / 8 as libc::c_int)
                    as libc::c_uchar;
                memset(
                    b as *mut libc::c_void,
                    '\0' as i32,
                    (((1 as libc::c_int) << 8 as libc::c_int) / 8 as libc::c_int)
                        as libc::c_ulong,
                );
                if *b.offset(-(2 as libc::c_int) as isize) as re_opcode_t as libc::c_uint
                    == charset_not as libc::c_int as libc::c_uint
                    && syntax
                        & ((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        != 0
                {
                    let ref mut fresh8 = *b
                        .offset(
                            ('\n' as i32 as libc::c_uchar as libc::c_int
                                / 8 as libc::c_int) as isize,
                        );
                    *fresh8 = (*fresh8 as libc::c_int
                        | (1 as libc::c_int)
                            << '\n' as i32 as libc::c_uchar as libc::c_int
                                % 8 as libc::c_int) as libc::c_uchar;
                }
                loop {
                    if p == pend {
                        free(compile_stack.stack as *mut libc::c_void);
                        return REG_EBRACK as libc::c_int as reg_errcode_t;
                    }
                    if p == pend {
                        return REG_EEND;
                    }
                    let fresh9 = p;
                    p = p.offset(1);
                    c = *fresh9 as libc::c_uchar;
                    if !translate.is_null() {
                        c = *translate.offset(c as isize) as libc::c_uchar;
                    }
                    if syntax & 1 as libc::c_int as libc::c_ulong != 0
                        && c as libc::c_int == '\\' as i32
                    {
                        if p == pend {
                            free(compile_stack.stack as *mut libc::c_void);
                            return REG_EESCAPE as libc::c_int as reg_errcode_t;
                        }
                        if p == pend {
                            return REG_EEND;
                        }
                        let fresh10 = p;
                        p = p.offset(1);
                        c1 = *fresh10 as libc::c_uchar;
                        if !translate.is_null() {
                            c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                        }
                        let ref mut fresh11 = *b
                            .offset((c1 as libc::c_int / 8 as libc::c_int) as isize);
                        *fresh11 = (*fresh11 as libc::c_int
                            | (1 as libc::c_int) << c1 as libc::c_int % 8 as libc::c_int)
                            as libc::c_uchar;
                        range_start = c1 as libc::c_uint;
                    } else {
                        if c as libc::c_int == ']' as i32
                            && p != p1.offset(1 as libc::c_int as isize)
                        {
                            break;
                        }
                        if had_char_class as libc::c_int != 0
                            && c as libc::c_int == '-' as i32
                            && *p as libc::c_int != ']' as i32
                        {
                            free(compile_stack.stack as *mut libc::c_void);
                            return REG_ERANGE as libc::c_int as reg_errcode_t;
                        }
                        if c as libc::c_int == '-' as i32
                            && !(p.offset(-(2 as libc::c_int as isize)) >= pattern
                                && *p.offset(-(2 as libc::c_int) as isize) as libc::c_int
                                    == '[' as i32)
                            && !(p.offset(-(3 as libc::c_int as isize)) >= pattern
                                && *p.offset(-(3 as libc::c_int) as isize) as libc::c_int
                                    == '[' as i32
                                && *p.offset(-(2 as libc::c_int) as isize) as libc::c_int
                                    == '^' as i32) && *p as libc::c_int != ']' as i32
                        {
                            let mut ret: reg_errcode_t = byte_compile_range(
                                range_start,
                                &mut p,
                                pend,
                                translate,
                                syntax,
                                b,
                            );
                            if ret as libc::c_int != REG_NOERROR as libc::c_int {
                                free(compile_stack.stack as *mut libc::c_void);
                                return ret;
                            }
                            range_start = 0xffffffff as libc::c_uint;
                        } else if *p.offset(0 as libc::c_int as isize) as libc::c_int
                            == '-' as i32
                            && *p.offset(1 as libc::c_int as isize) as libc::c_int
                                != ']' as i32
                        {
                            let mut ret_0: reg_errcode_t = REG_NOERROR;
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh12 = p;
                            p = p.offset(1);
                            c1 = *fresh12 as libc::c_uchar;
                            if !translate.is_null() {
                                c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                            }
                            ret_0 = byte_compile_range(
                                c as libc::c_uint,
                                &mut p,
                                pend,
                                translate,
                                syntax,
                                b,
                            );
                            if ret_0 as libc::c_int != REG_NOERROR as libc::c_int {
                                free(compile_stack.stack as *mut libc::c_void);
                                return ret_0;
                            }
                            range_start = 0xffffffff as libc::c_uint;
                        } else if syntax
                            & ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                                << 1 as libc::c_int != 0 && c as libc::c_int == '[' as i32
                            && *p as libc::c_int == ':' as i32
                        {
                            let mut str: [libc::c_char; 7] = [0; 7];
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh13 = p;
                            p = p.offset(1);
                            c = *fresh13 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            c1 = 0 as libc::c_int as libc::c_uchar;
                            if p == pend {
                                free(compile_stack.stack as *mut libc::c_void);
                                return REG_EBRACK as libc::c_int as reg_errcode_t;
                            }
                            loop {
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh14 = p;
                                p = p.offset(1);
                                c = *fresh14 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if c as libc::c_int == ':' as i32
                                    && *p as libc::c_int == ']' as i32 || p == pend
                                {
                                    break;
                                }
                                if (c1 as libc::c_int) < 6 as libc::c_int {
                                    let fresh15 = c1;
                                    c1 = c1.wrapping_add(1);
                                    str[fresh15 as usize] = c as libc::c_char;
                                } else {
                                    str[0 as libc::c_int
                                        as usize] = '\0' as i32 as libc::c_char;
                                }
                            }
                            str[c1 as usize] = '\0' as i32 as libc::c_char;
                            if c as libc::c_int == ':' as i32
                                && *p as libc::c_int == ']' as i32
                            {
                                let mut ch: libc::c_int = 0;
                                let mut is_alnum: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"alnum\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_alpha: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"alpha\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_blank: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"blank\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_cntrl: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"cntrl\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_digit: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"digit\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_graph: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"graph\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_lower: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"lower\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_print: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"print\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_punct: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"punct\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_space: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"space\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_upper: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"upper\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_xdigit: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"xdigit\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                if !(strcmp(
                                    str.as_mut_ptr(),
                                    b"alpha\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"upper\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"lower\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"digit\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"alnum\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"xdigit\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"space\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"print\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"punct\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"graph\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"cntrl\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"blank\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int)
                                {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return REG_ECTYPE as libc::c_int as reg_errcode_t;
                                }
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh16 = p;
                                p = p.offset(1);
                                c = *fresh16 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if p == pend {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return REG_EBRACK as libc::c_int as reg_errcode_t;
                                }
                                ch = 0 as libc::c_int;
                                while ch < (1 as libc::c_int) << 8 as libc::c_int {
                                    if is_alnum as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & _ISalnum as libc::c_int as libc::c_ushort as libc::c_int
                                                != 0)
                                        || is_alpha as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISalpha as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_blank as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISblank as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_cntrl as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _IScntrl as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                    {
                                        let ref mut fresh17 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh17 = (*fresh17 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if is_digit as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
                                                != 0)
                                        || is_graph as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISgraph as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_lower as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISlower as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_print as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                    {
                                        let ref mut fresh18 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh18 = (*fresh18 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if is_punct as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & _ISpunct as libc::c_int as libc::c_ushort as libc::c_int
                                                != 0)
                                        || is_space as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_upper as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISupper as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                        || is_xdigit as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISxdigit as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                    {
                                        let ref mut fresh19 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh19 = (*fresh19 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if !translate.is_null()
                                        && (is_upper as libc::c_int != 0
                                            || is_lower as libc::c_int != 0)
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & _ISupper as libc::c_int as libc::c_ushort as libc::c_int
                                                != 0
                                            || 1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & _ISlower as libc::c_int as libc::c_ushort as libc::c_int
                                                    != 0)
                                    {
                                        let ref mut fresh20 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh20 = (*fresh20 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    ch += 1;
                                    ch;
                                }
                                had_char_class = 1 as libc::c_int as boolean;
                            } else {
                                c1 = c1.wrapping_add(1);
                                c1;
                                loop {
                                    let fresh21 = c1;
                                    c1 = c1.wrapping_sub(1);
                                    if !(fresh21 != 0) {
                                        break;
                                    }
                                    p = p.offset(-1);
                                    p;
                                }
                                let ref mut fresh22 = *b
                                    .offset(
                                        ('[' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh22 = (*fresh22 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '[' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                let ref mut fresh23 = *b
                                    .offset(
                                        (':' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh23 = (*fresh23 as libc::c_int
                                    | (1 as libc::c_int)
                                        << ':' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                range_start = ':' as i32 as libc::c_uint;
                                had_char_class = 0 as libc::c_int as boolean;
                            }
                        } else if syntax
                            & ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                                << 1 as libc::c_int != 0 && c as libc::c_int == '[' as i32
                            && *p as libc::c_int == '=' as i32
                        {
                            let mut str_0: [libc::c_uchar; 17] = [0; 17];
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh24 = p;
                            p = p.offset(1);
                            c = *fresh24 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            c1 = 0 as libc::c_int as libc::c_uchar;
                            if p == pend {
                                free(compile_stack.stack as *mut libc::c_void);
                                return REG_EBRACK as libc::c_int as reg_errcode_t;
                            }
                            loop {
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh25 = p;
                                p = p.offset(1);
                                c = *fresh25 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if c as libc::c_int == '=' as i32
                                    && *p as libc::c_int == ']' as i32 || p == pend
                                {
                                    break;
                                }
                                if (c1 as libc::c_int) < 16 as libc::c_int {
                                    let fresh26 = c1;
                                    c1 = c1.wrapping_add(1);
                                    str_0[fresh26 as usize] = c;
                                } else {
                                    str_0[0 as libc::c_int
                                        as usize] = '\0' as i32 as libc::c_uchar;
                                }
                            }
                            str_0[c1 as usize] = '\0' as i32 as libc::c_uchar;
                            if c as libc::c_int == '=' as i32
                                && *p as libc::c_int == ']' as i32
                                && str_0[0 as libc::c_int as usize] as libc::c_int
                                    != '\0' as i32
                            {
                                if c1 as libc::c_int != 1 as libc::c_int {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return REG_ECOLLATE as libc::c_int as reg_errcode_t;
                                }
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh27 = p;
                                p = p.offset(1);
                                c = *fresh27 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                let ref mut fresh28 = *b
                                    .offset(
                                        (str_0[0 as libc::c_int as usize] as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh28 = (*fresh28 as libc::c_int
                                    | (1 as libc::c_int)
                                        << str_0[0 as libc::c_int as usize] as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                had_char_class = 1 as libc::c_int as boolean;
                            } else {
                                c1 = c1.wrapping_add(1);
                                c1;
                                loop {
                                    let fresh29 = c1;
                                    c1 = c1.wrapping_sub(1);
                                    if !(fresh29 != 0) {
                                        break;
                                    }
                                    p = p.offset(-1);
                                    p;
                                }
                                let ref mut fresh30 = *b
                                    .offset(
                                        ('[' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh30 = (*fresh30 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '[' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                let ref mut fresh31 = *b
                                    .offset(
                                        ('=' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh31 = (*fresh31 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '=' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                range_start = '=' as i32 as libc::c_uint;
                                had_char_class = 0 as libc::c_int as boolean;
                            }
                        } else if syntax
                            & ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                                << 1 as libc::c_int != 0 && c as libc::c_int == '[' as i32
                            && *p as libc::c_int == '.' as i32
                        {
                            let mut str_1: [libc::c_uchar; 128] = [0; 128];
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh32 = p;
                            p = p.offset(1);
                            c = *fresh32 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            c1 = 0 as libc::c_int as libc::c_uchar;
                            if p == pend {
                                free(compile_stack.stack as *mut libc::c_void);
                                return REG_EBRACK as libc::c_int as reg_errcode_t;
                            }
                            loop {
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh33 = p;
                                p = p.offset(1);
                                c = *fresh33 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if c as libc::c_int == '.' as i32
                                    && *p as libc::c_int == ']' as i32 || p == pend
                                {
                                    break;
                                }
                                if (c1 as libc::c_ulong)
                                    < ::core::mem::size_of::<[libc::c_uchar; 128]>()
                                        as libc::c_ulong
                                {
                                    let fresh34 = c1;
                                    c1 = c1.wrapping_add(1);
                                    str_1[fresh34 as usize] = c;
                                } else {
                                    str_1[0 as libc::c_int
                                        as usize] = '\0' as i32 as libc::c_uchar;
                                }
                            }
                            str_1[c1 as usize] = '\0' as i32 as libc::c_uchar;
                            if c as libc::c_int == '.' as i32
                                && *p as libc::c_int == ']' as i32
                                && str_1[0 as libc::c_int as usize] as libc::c_int
                                    != '\0' as i32
                            {
                                if c1 as libc::c_int != 1 as libc::c_int {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return REG_ECOLLATE as libc::c_int as reg_errcode_t;
                                }
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh35 = p;
                                p = p.offset(1);
                                c = *fresh35 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                let ref mut fresh36 = *b
                                    .offset(
                                        (str_1[0 as libc::c_int as usize] as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh36 = (*fresh36 as libc::c_int
                                    | (1 as libc::c_int)
                                        << str_1[0 as libc::c_int as usize] as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                range_start = *(str_1.as_mut_ptr() as *const libc::c_uchar)
                                    .offset(0 as libc::c_int as isize) as libc::c_uint;
                                had_char_class = 0 as libc::c_int as boolean;
                            } else {
                                c1 = c1.wrapping_add(1);
                                c1;
                                loop {
                                    let fresh37 = c1;
                                    c1 = c1.wrapping_sub(1);
                                    if !(fresh37 != 0) {
                                        break;
                                    }
                                    p = p.offset(-1);
                                    p;
                                }
                                let ref mut fresh38 = *b
                                    .offset(
                                        ('[' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh38 = (*fresh38 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '[' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                let ref mut fresh39 = *b
                                    .offset(
                                        ('.' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh39 = (*fresh39 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '.' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                range_start = '.' as i32 as libc::c_uint;
                                had_char_class = 0 as libc::c_int as boolean;
                            }
                        } else {
                            had_char_class = 0 as libc::c_int as boolean;
                            let ref mut fresh40 = *b
                                .offset((c as libc::c_int / 8 as libc::c_int) as isize);
                            *fresh40 = (*fresh40 as libc::c_int
                                | (1 as libc::c_int) << c as libc::c_int % 8 as libc::c_int)
                                as libc::c_uchar;
                            range_start = c as libc::c_uint;
                        }
                    }
                }
                while *b.offset(-(1 as libc::c_int) as isize) as libc::c_int
                    > 0 as libc::c_int
                    && *b
                        .offset(
                            (*b.offset(-(1 as libc::c_int) as isize) as libc::c_int
                                - 1 as libc::c_int) as isize,
                        ) as libc::c_int == 0 as libc::c_int
                {
                    let ref mut fresh41 = *b.offset(-(1 as libc::c_int) as isize);
                    *fresh41 = (*fresh41).wrapping_sub(1);
                    *fresh41;
                }
                b = b
                    .offset(
                        *b.offset(-(1 as libc::c_int) as isize) as libc::c_int as isize,
                    );
                continue;
            }
            40 => {
                if syntax
                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 780835977140579587;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            41 => {
                if syntax
                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 6745266761063133758;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            10 => {
                if syntax
                    & (((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 16170526729797811573;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            124 => {
                if syntax
                    & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                    != 0
                {
                    current_block = 16170526729797811573;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            123 => {
                if syntax
                    & (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                    && syntax
                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    current_block = 16767862475172154020;
                } else {
                    current_block = 12863738778380616964;
                }
            }
            92 => {
                if p == pend {
                    free(compile_stack.stack as *mut libc::c_void);
                    return REG_EESCAPE as libc::c_int as reg_errcode_t;
                }
                if p == pend {
                    return REG_EEND;
                }
                let fresh42 = p;
                p = p.offset(1);
                c = *fresh42 as libc::c_uchar;
                match c as libc::c_int {
                    40 => {
                        current_block = 14482728709982949437;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    41 => {
                        current_block = 14740325020723449778;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    124 => {
                        current_block = 13969438017981278443;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    123 => {
                        current_block = 6202905615421956879;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    119 => {
                        current_block = 16788951267886524043;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    87 => {
                        current_block = 9460594532082032140;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    60 => {
                        current_block = 17767742176799939193;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    62 => {
                        current_block = 5326660907490004708;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    98 => {
                        current_block = 16325921850189496668;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    66 => {
                        current_block = 2766314687199845540;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    96 => {
                        current_block = 3202472413399101603;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    39 => {
                        current_block = 3650469854258719807;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => {
                        current_block = 14408181944827820724;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    43 | 63 => {
                        current_block = 2455898347846820773;
                        match current_block {
                            2455898347846820773 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 1951311294146316411;
                                } else {
                                    current_block = 16208725274143298005;
                                }
                            }
                            9460594532082032140 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            let mut incr_16: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_16) as libc::c_long;
                                            b = b.offset(incr_16 as isize);
                                            begalt = begalt.offset(incr_16 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_16 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_16 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_16 as isize);
                                            }
                                        }
                                    }
                                    let fresh54 = b;
                                    b = b.offset(1);
                                    *fresh54 = notwordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16788951267886524043 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            let mut incr_15: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_15) as libc::c_long;
                                            b = b.offset(incr_15 as isize);
                                            begalt = begalt.offset(incr_15 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_15 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_15 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_15 as isize);
                                            }
                                        }
                                    }
                                    let fresh53 = b;
                                    b = b.offset(1);
                                    *fresh53 = wordchar as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            6202905615421956879 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16767862475172154020;
                                }
                            }
                            13969438017981278443 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 16170526729797811573;
                                }
                            }
                            14740325020723449778 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 16208725274143298005;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                                    }
                                } else {
                                    current_block = 6745266761063133758;
                                }
                            }
                            14482728709982949437 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 16208725274143298005;
                                } else {
                                    current_block = 780835977140579587;
                                }
                            }
                            5326660907490004708 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            let mut incr_18: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_18) as libc::c_long;
                                            b = b.offset(incr_18 as isize);
                                            begalt = begalt.offset(incr_18 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_18 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_18 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_18 as isize);
                                            }
                                        }
                                    }
                                    let fresh56 = b;
                                    b = b.offset(1);
                                    *fresh56 = wordend as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            16325921850189496668 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            let mut incr_19: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_19) as libc::c_long;
                                            b = b.offset(incr_19 as isize);
                                            begalt = begalt.offset(incr_19 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_19 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_19 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_19 as isize);
                                            }
                                        }
                                    }
                                    let fresh57 = b;
                                    b = b.offset(1);
                                    *fresh57 = wordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            2766314687199845540 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            let mut incr_20: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_20) as libc::c_long;
                                            b = b.offset(incr_20 as isize);
                                            begalt = begalt.offset(incr_20 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_20 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_20 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_20 as isize);
                                            }
                                        }
                                    }
                                    let fresh58 = b;
                                    b = b.offset(1);
                                    *fresh58 = notwordbound as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3202472413399101603 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            let mut incr_21: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_21) as libc::c_long;
                                            b = b.offset(incr_21 as isize);
                                            begalt = begalt.offset(incr_21 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_21 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_21 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_21 as isize);
                                            }
                                        }
                                    }
                                    let fresh59 = b;
                                    b = b.offset(1);
                                    *fresh59 = begbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            3650469854258719807 => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            let mut incr_22: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_22) as libc::c_long;
                                            b = b.offset(incr_22 as isize);
                                            begalt = begalt.offset(incr_22 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_22 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_22 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_22 as isize);
                                            }
                                        }
                                    }
                                    let fresh60 = b;
                                    b = b.offset(1);
                                    *fresh60 = endbuf as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                            14408181944827820724 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return REG_ESUBREG as libc::c_int as reg_errcode_t;
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 12863738778380616964;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp)
                                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong;
                                            }
                                            (*bufp)
                                                .buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                let mut incr_23: ptrdiff_t = ((*bufp).buffer)
                                                    .offset_from(old_buffer_23) as libc::c_long;
                                                b = b.offset(incr_23 as isize);
                                                begalt = begalt.offset(incr_23 as isize);
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = fixup_alt_jump.offset(incr_23 as isize);
                                                }
                                                if !laststart.is_null() {
                                                    laststart = laststart.offset(incr_23 as isize);
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = pending_exact.offset(incr_23 as isize);
                                                }
                                            }
                                        }
                                        let fresh61 = b;
                                        b = b.offset(1);
                                        *fresh61 = duplicate as libc::c_int as libc::c_uchar;
                                        let fresh62 = b;
                                        b = b.offset(1);
                                        *fresh62 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if syntax
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 12863738778380616964;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp)
                                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong;
                                        }
                                        (*bufp)
                                            .buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            let mut incr_17: ptrdiff_t = ((*bufp).buffer)
                                                .offset_from(old_buffer_17) as libc::c_long;
                                            b = b.offset(incr_17 as isize);
                                            begalt = begalt.offset(incr_17 as isize);
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = fixup_alt_jump.offset(incr_17 as isize);
                                            }
                                            if !laststart.is_null() {
                                                laststart = laststart.offset(incr_17 as isize);
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = pending_exact.offset(incr_17 as isize);
                                            }
                                        }
                                    }
                                    let fresh55 = b;
                                    b = b.offset(1);
                                    *fresh55 = wordbeg as libc::c_int as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    _ => {
                        current_block = 16208725274143298005;
                    }
                }
            }
            _ => {
                current_block = 12863738778380616964;
            }
        }
        match current_block {
            16767862475172154020 => {
                let mut lower_bound: libc::c_int = -(1 as libc::c_int);
                let mut upper_bound: libc::c_int = -(1 as libc::c_int);
                let mut beg_interval: *const libc::c_char = p;
                if p == pend {
                    current_block = 176136936165408708;
                } else {
                    while p != pend {
                        if p == pend {
                            return REG_EEND;
                        }
                        let fresh50 = p;
                        p = p.offset(1);
                        c = *fresh50 as libc::c_uchar;
                        if !translate.is_null() {
                            c = *translate.offset(c as isize) as libc::c_uchar;
                        }
                        if (c as libc::c_int) < '0' as i32
                            || c as libc::c_int > '9' as i32
                        {
                            break;
                        }
                        if lower_bound <= 0x7fff as libc::c_int {
                            if lower_bound < 0 as libc::c_int {
                                lower_bound = 0 as libc::c_int;
                            }
                            lower_bound = lower_bound * 10 as libc::c_int
                                + c as libc::c_int - '0' as i32;
                        }
                    }
                    if c as libc::c_int == ',' as i32 {
                        while p != pend {
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh51 = p;
                            p = p.offset(1);
                            c = *fresh51 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            if (c as libc::c_int) < '0' as i32
                                || c as libc::c_int > '9' as i32
                            {
                                break;
                            }
                            if upper_bound <= 0x7fff as libc::c_int {
                                if upper_bound < 0 as libc::c_int {
                                    upper_bound = 0 as libc::c_int;
                                }
                                upper_bound = upper_bound * 10 as libc::c_int
                                    + c as libc::c_int - '0' as i32;
                            }
                        }
                        if upper_bound < 0 as libc::c_int {
                            upper_bound = 0x7fff as libc::c_int;
                        }
                    } else {
                        upper_bound = lower_bound;
                    }
                    if !(0 as libc::c_int <= lower_bound && lower_bound <= upper_bound) {
                        current_block = 176136936165408708;
                    } else {
                        if syntax
                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int == 0
                        {
                            if c as libc::c_int != '\\' as i32 || p == pend {
                                current_block = 176136936165408708;
                            } else {
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh52 = p;
                                p = p.offset(1);
                                c = *fresh52 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                current_block = 9051581752802451084;
                            }
                        } else {
                            current_block = 9051581752802451084;
                        }
                        match current_block {
                            176136936165408708 => {}
                            _ => {
                                if c as libc::c_int != '}' as i32 {
                                    current_block = 176136936165408708;
                                } else {
                                    if laststart.is_null() {
                                        if syntax
                                            & (((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int != 0
                                            && syntax
                                                & (((((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                                    << 1 as libc::c_int == 0
                                        {
                                            free(compile_stack.stack as *mut libc::c_void);
                                            return REG_BADRPT as libc::c_int as reg_errcode_t;
                                        } else if syntax
                                            & ((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                        {
                                            laststart = b;
                                            current_block = 7398609934970550617;
                                        } else {
                                            current_block = 12957364464593353960;
                                        }
                                    } else {
                                        current_block = 7398609934970550617;
                                    }
                                    match current_block {
                                        12957364464593353960 => {}
                                        _ => {
                                            if (0x7fff as libc::c_int) < upper_bound {
                                                free(compile_stack.stack as *mut libc::c_void);
                                                return REG_BADBR as libc::c_int as reg_errcode_t;
                                            }
                                            if upper_bound == 0 as libc::c_int {
                                                while (b.offset_from((*bufp).buffer) as libc::c_long
                                                    + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                                    as libc::c_ulong > (*bufp).allocated
                                                {
                                                    let mut old_buffer_13: *mut libc::c_uchar = (*bufp).buffer;
                                                    if (*bufp).allocated
                                                        == ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong
                                                    {
                                                        return REG_ESIZE;
                                                    }
                                                    (*bufp).allocated <<= 1 as libc::c_int;
                                                    if (*bufp).allocated
                                                        > ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong
                                                    {
                                                        (*bufp)
                                                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong;
                                                    }
                                                    (*bufp)
                                                        .buffer = realloc(
                                                        (*bufp).buffer as *mut libc::c_void,
                                                        (*bufp).allocated,
                                                    ) as *mut libc::c_uchar;
                                                    if ((*bufp).buffer).is_null() {
                                                        return REG_ESPACE;
                                                    }
                                                    if old_buffer_13 != (*bufp).buffer {
                                                        let mut incr_13: ptrdiff_t = ((*bufp).buffer)
                                                            .offset_from(old_buffer_13) as libc::c_long;
                                                        b = b.offset(incr_13 as isize);
                                                        begalt = begalt.offset(incr_13 as isize);
                                                        if !fixup_alt_jump.is_null() {
                                                            fixup_alt_jump = fixup_alt_jump.offset(incr_13 as isize);
                                                        }
                                                        if !laststart.is_null() {
                                                            laststart = laststart.offset(incr_13 as isize);
                                                        }
                                                        if !pending_exact.is_null() {
                                                            pending_exact = pending_exact.offset(incr_13 as isize);
                                                        }
                                                    }
                                                }
                                                byte_insert_op1(
                                                    jump,
                                                    laststart,
                                                    (b
                                                        .offset(1 as libc::c_int as isize)
                                                        .offset(2 as libc::c_int as isize)
                                                        .offset_from(laststart) as libc::c_long
                                                        - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                                        as libc::c_int,
                                                    b,
                                                );
                                                b = b
                                                    .offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                                            } else {
                                                let mut nbytes: libc::c_uint = (2 as libc::c_int
                                                    + 4 as libc::c_int * 2 as libc::c_int
                                                    + (upper_bound > 1 as libc::c_int) as libc::c_int
                                                        * (2 as libc::c_int + 4 as libc::c_int * 2 as libc::c_int))
                                                    as libc::c_uint;
                                                while (b.offset_from((*bufp).buffer) as libc::c_long
                                                    + nbytes as libc::c_long) as libc::c_ulong
                                                    > (*bufp).allocated
                                                {
                                                    let mut old_buffer_14: *mut libc::c_uchar = (*bufp).buffer;
                                                    if (*bufp).allocated
                                                        == ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong
                                                    {
                                                        return REG_ESIZE;
                                                    }
                                                    (*bufp).allocated <<= 1 as libc::c_int;
                                                    if (*bufp).allocated
                                                        > ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong
                                                    {
                                                        (*bufp)
                                                            .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                                            as libc::c_ulong;
                                                    }
                                                    (*bufp)
                                                        .buffer = realloc(
                                                        (*bufp).buffer as *mut libc::c_void,
                                                        (*bufp).allocated,
                                                    ) as *mut libc::c_uchar;
                                                    if ((*bufp).buffer).is_null() {
                                                        return REG_ESPACE;
                                                    }
                                                    if old_buffer_14 != (*bufp).buffer {
                                                        let mut incr_14: ptrdiff_t = ((*bufp).buffer)
                                                            .offset_from(old_buffer_14) as libc::c_long;
                                                        b = b.offset(incr_14 as isize);
                                                        begalt = begalt.offset(incr_14 as isize);
                                                        if !fixup_alt_jump.is_null() {
                                                            fixup_alt_jump = fixup_alt_jump.offset(incr_14 as isize);
                                                        }
                                                        if !laststart.is_null() {
                                                            laststart = laststart.offset(incr_14 as isize);
                                                        }
                                                        if !pending_exact.is_null() {
                                                            pending_exact = pending_exact.offset(incr_14 as isize);
                                                        }
                                                    }
                                                }
                                                byte_insert_op2(
                                                    succeed_n,
                                                    laststart,
                                                    (b
                                                        .offset(1 as libc::c_int as isize)
                                                        .offset((2 as libc::c_int * 2 as libc::c_int) as isize)
                                                        .offset(
                                                            ((upper_bound > 1 as libc::c_int) as libc::c_int
                                                                * (1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int))
                                                                as isize,
                                                        )
                                                        .offset_from(laststart) as libc::c_long
                                                        - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                                        as libc::c_int,
                                                    lower_bound,
                                                    b,
                                                );
                                                b = b
                                                    .offset(
                                                        (1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int)
                                                            as isize,
                                                    );
                                                byte_insert_op2(
                                                    set_number_at,
                                                    laststart,
                                                    1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int,
                                                    lower_bound,
                                                    b,
                                                );
                                                b = b
                                                    .offset(
                                                        (1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int)
                                                            as isize,
                                                    );
                                                if upper_bound > 1 as libc::c_int {
                                                    byte_store_op2(
                                                        jump_n,
                                                        b,
                                                        (laststart
                                                            .offset((2 as libc::c_int * 2 as libc::c_int) as isize)
                                                            .offset(1 as libc::c_int as isize)
                                                            .offset_from(b) as libc::c_long
                                                            - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                                            as libc::c_int,
                                                        upper_bound - 1 as libc::c_int,
                                                    );
                                                    b = b
                                                        .offset(
                                                            (1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int)
                                                                as isize,
                                                        );
                                                    byte_insert_op2(
                                                        set_number_at,
                                                        laststart,
                                                        b.offset_from(laststart) as libc::c_long as libc::c_int,
                                                        upper_bound - 1 as libc::c_int,
                                                        b,
                                                    );
                                                    b = b
                                                        .offset(
                                                            (1 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int)
                                                                as isize,
                                                        );
                                                }
                                            }
                                            pending_exact = 0 as *mut libc::c_uchar;
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                match current_block {
                    176136936165408708 => {
                        if syntax
                            & (((((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int == 0
                        {
                            free(compile_stack.stack as *mut libc::c_void);
                            return (if p == pend {
                                REG_EBRACE as libc::c_int
                            } else {
                                REG_BADBR as libc::c_int
                            }) as reg_errcode_t;
                        }
                    }
                    _ => {}
                }
                p = beg_interval;
                c = '{' as i32 as libc::c_uchar;
                if syntax
                    & ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    current_block = 12863738778380616964;
                } else {
                    current_block = 16208725274143298005;
                }
            }
            16170526729797811573 => {
                if syntax
                    & ((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                    != 0
                {
                    current_block = 12863738778380616964;
                } else {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                        as libc::c_ulong > (*bufp).allocated
                    {
                        let mut old_buffer_11: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer_11 != (*bufp).buffer {
                            let mut incr_11: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer_11) as libc::c_long;
                            b = b.offset(incr_11 as isize);
                            begalt = begalt.offset(incr_11 as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr_11 as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr_11 as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr_11 as isize);
                            }
                        }
                    }
                    byte_insert_op1(
                        on_failure_jump,
                        begalt,
                        (b
                            .offset(2 as libc::c_int as isize)
                            .offset((2 as libc::c_int * 2 as libc::c_int) as isize)
                            .offset_from(begalt) as libc::c_long
                            - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                            as libc::c_int,
                        b,
                    );
                    pending_exact = 0 as *mut libc::c_uchar;
                    b = b.offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                    if !fixup_alt_jump.is_null() {
                        byte_store_op1(
                            jump_past_alt,
                            fixup_alt_jump,
                            (b.offset_from(fixup_alt_jump) as libc::c_long
                                - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                as libc::c_int,
                        );
                    }
                    fixup_alt_jump = b;
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                        as libc::c_ulong > (*bufp).allocated
                    {
                        let mut old_buffer_12: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer_12 != (*bufp).buffer {
                            let mut incr_12: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer_12) as libc::c_long;
                            b = b.offset(incr_12 as isize);
                            begalt = begalt.offset(incr_12 as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr_12 as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr_12 as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr_12 as isize);
                            }
                        }
                    }
                    b = b.offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                    laststart = 0 as *mut libc::c_uchar;
                    begalt = b;
                    continue;
                }
            }
            6745266761063133758 => {
                if !fixup_alt_jump.is_null() {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_9: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer_9 != (*bufp).buffer {
                            let mut incr_9: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer_9) as libc::c_long;
                            b = b.offset(incr_9 as isize);
                            begalt = begalt.offset(incr_9 as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr_9 as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr_9 as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr_9 as isize);
                            }
                        }
                    }
                    let fresh46 = b;
                    b = b.offset(1);
                    *fresh46 = push_dummy_failure as libc::c_int as libc::c_uchar;
                    byte_store_op1(
                        jump_past_alt,
                        fixup_alt_jump,
                        (b
                            .offset(-(1 as libc::c_int as isize))
                            .offset_from(fixup_alt_jump) as libc::c_long
                            - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                            as libc::c_int,
                    );
                }
                if compile_stack.avail == 0 as libc::c_int as libc::c_uint {
                    if !(syntax
                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        != 0)
                    {
                        free(compile_stack.stack as *mut libc::c_void);
                        return REG_ERPAREN as libc::c_int as reg_errcode_t;
                    }
                } else {
                    let mut this_group_regnum: regnum_t = 0;
                    compile_stack.avail = (compile_stack.avail).wrapping_sub(1);
                    compile_stack.avail;
                    begalt = ((*bufp).buffer)
                        .offset(
                            (*(compile_stack.stack).offset(compile_stack.avail as isize))
                                .begalt_offset as isize,
                        );
                    fixup_alt_jump = if (*(compile_stack.stack)
                        .offset(compile_stack.avail as isize))
                        .fixup_alt_jump != 0
                    {
                        ((*bufp).buffer)
                            .offset(
                                (*(compile_stack.stack)
                                    .offset(compile_stack.avail as isize))
                                    .fixup_alt_jump as isize,
                            )
                            .offset(-(1 as libc::c_int as isize))
                    } else {
                        0 as *mut libc::c_uchar
                    };
                    laststart = ((*bufp).buffer)
                        .offset(
                            (*(compile_stack.stack).offset(compile_stack.avail as isize))
                                .laststart_offset as isize,
                        );
                    this_group_regnum = (*(compile_stack.stack)
                        .offset(compile_stack.avail as isize))
                        .regnum;
                    pending_exact = 0 as *mut libc::c_uchar;
                    if this_group_regnum <= 255 as libc::c_int as libc::c_uint {
                        let mut inner_group_loc: *mut libc::c_uchar = ((*bufp).buffer)
                            .offset(
                                (*(compile_stack.stack)
                                    .offset(compile_stack.avail as isize))
                                    .inner_group_offset as isize,
                            );
                        *inner_group_loc = regnum.wrapping_sub(this_group_regnum)
                            as libc::c_uchar;
                        while (b.offset_from((*bufp).buffer) as libc::c_long
                            + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                            > (*bufp).allocated
                        {
                            let mut old_buffer_10: *mut libc::c_uchar = (*bufp).buffer;
                            if (*bufp).allocated
                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                return REG_ESIZE;
                            }
                            (*bufp).allocated <<= 1 as libc::c_int;
                            if (*bufp).allocated
                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                (*bufp)
                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong;
                            }
                            (*bufp)
                                .buffer = realloc(
                                (*bufp).buffer as *mut libc::c_void,
                                (*bufp).allocated,
                            ) as *mut libc::c_uchar;
                            if ((*bufp).buffer).is_null() {
                                return REG_ESPACE;
                            }
                            if old_buffer_10 != (*bufp).buffer {
                                let mut incr_10: ptrdiff_t = ((*bufp).buffer)
                                    .offset_from(old_buffer_10) as libc::c_long;
                                b = b.offset(incr_10 as isize);
                                begalt = begalt.offset(incr_10 as isize);
                                if !fixup_alt_jump.is_null() {
                                    fixup_alt_jump = fixup_alt_jump.offset(incr_10 as isize);
                                }
                                if !laststart.is_null() {
                                    laststart = laststart.offset(incr_10 as isize);
                                }
                                if !pending_exact.is_null() {
                                    pending_exact = pending_exact.offset(incr_10 as isize);
                                }
                            }
                        }
                        let fresh47 = b;
                        b = b.offset(1);
                        *fresh47 = stop_memory as libc::c_int as libc::c_uchar;
                        let fresh48 = b;
                        b = b.offset(1);
                        *fresh48 = this_group_regnum as libc::c_uchar;
                        let fresh49 = b;
                        b = b.offset(1);
                        *fresh49 = regnum.wrapping_sub(this_group_regnum)
                            as libc::c_uchar;
                    }
                    continue;
                }
                current_block = 12863738778380616964;
            }
            780835977140579587 => {
                (*bufp).re_nsub = ((*bufp).re_nsub).wrapping_add(1);
                (*bufp).re_nsub;
                regnum = regnum.wrapping_add(1);
                regnum;
                if compile_stack.avail == compile_stack.size {
                    compile_stack
                        .stack = realloc(
                        compile_stack.stack as *mut libc::c_void,
                        ((compile_stack.size << 1 as libc::c_int) as libc::c_ulong)
                            .wrapping_mul(
                                ::core::mem::size_of::<compile_stack_elt_t>()
                                    as libc::c_ulong,
                            ),
                    ) as *mut compile_stack_elt_t;
                    if (compile_stack.stack).is_null() {
                        return REG_ESPACE;
                    }
                    compile_stack.size <<= 1 as libc::c_int;
                }
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .begalt_offset = begalt.offset_from((*bufp).buffer) as libc::c_long;
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .fixup_alt_jump = if !fixup_alt_jump.is_null() {
                    fixup_alt_jump.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long
                } else {
                    0 as libc::c_int as libc::c_long
                };
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .laststart_offset = b.offset_from((*bufp).buffer) as libc::c_long;
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .regnum = regnum;
                if regnum <= 255 as libc::c_int as libc::c_uint {
                    (*(compile_stack.stack).offset(compile_stack.avail as isize))
                        .inner_group_offset = b.offset_from((*bufp).buffer)
                        as libc::c_long + 2 as libc::c_int as libc::c_long;
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_8: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp)
                                .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong;
                        }
                        (*bufp)
                            .buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return REG_ESPACE;
                        }
                        if old_buffer_8 != (*bufp).buffer {
                            let mut incr_8: ptrdiff_t = ((*bufp).buffer)
                                .offset_from(old_buffer_8) as libc::c_long;
                            b = b.offset(incr_8 as isize);
                            begalt = begalt.offset(incr_8 as isize);
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = fixup_alt_jump.offset(incr_8 as isize);
                            }
                            if !laststart.is_null() {
                                laststart = laststart.offset(incr_8 as isize);
                            }
                            if !pending_exact.is_null() {
                                pending_exact = pending_exact.offset(incr_8 as isize);
                            }
                        }
                    }
                    let fresh43 = b;
                    b = b.offset(1);
                    *fresh43 = start_memory as libc::c_int as libc::c_uchar;
                    let fresh44 = b;
                    b = b.offset(1);
                    *fresh44 = regnum as libc::c_uchar;
                    let fresh45 = b;
                    b = b.offset(1);
                    *fresh45 = 0 as libc::c_int as libc::c_uchar;
                }
                compile_stack.avail = (compile_stack.avail).wrapping_add(1);
                compile_stack.avail;
                fixup_alt_jump = 0 as *mut libc::c_uchar;
                laststart = 0 as *mut libc::c_uchar;
                begalt = b;
                pending_exact = 0 as *mut libc::c_uchar;
                continue;
            }
            1951311294146316411 => {
                if laststart.is_null() {
                    if syntax
                        & (((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    {
                        free(compile_stack.stack as *mut libc::c_void);
                        return REG_BADRPT as libc::c_int as reg_errcode_t;
                    } else if syntax
                        & ((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        == 0
                    {
                        current_block = 12863738778380616964;
                    } else {
                        current_block = 726525485109251713;
                    }
                } else {
                    current_block = 726525485109251713;
                }
                match current_block {
                    12863738778380616964 => {}
                    _ => {
                        let mut keep_string_p: boolean = 0 as libc::c_int as boolean;
                        let mut zero_times_ok: libc::c_char = 0 as libc::c_int
                            as libc::c_char;
                        let mut many_times_ok: libc::c_char = 0 as libc::c_int
                            as libc::c_char;
                        loop {
                            zero_times_ok = (zero_times_ok as libc::c_int
                                | (c as libc::c_int != '+' as i32) as libc::c_int)
                                as libc::c_char;
                            many_times_ok = (many_times_ok as libc::c_int
                                | (c as libc::c_int != '?' as i32) as libc::c_int)
                                as libc::c_char;
                            if p == pend {
                                break;
                            }
                            if p == pend {
                                return REG_EEND;
                            }
                            let fresh3 = p;
                            p = p.offset(1);
                            c = *fresh3 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            if c as libc::c_int == '*' as i32
                                || syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    == 0
                                    && (c as libc::c_int == '+' as i32
                                        || c as libc::c_int == '?' as i32)
                            {
                                continue;
                            }
                            if syntax
                                & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                != 0 && c as libc::c_int == '\\' as i32
                            {
                                if p == pend {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return REG_EESCAPE as libc::c_int as reg_errcode_t;
                                }
                                if p == pend {
                                    return REG_EEND;
                                }
                                let fresh4 = p;
                                p = p.offset(1);
                                c1 = *fresh4 as libc::c_uchar;
                                if !translate.is_null() {
                                    c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                                }
                                if !(c1 as libc::c_int == '+' as i32
                                    || c1 as libc::c_int == '?' as i32)
                                {
                                    p = p.offset(-1);
                                    p;
                                    p = p.offset(-1);
                                    p;
                                    break;
                                } else {
                                    c = c1;
                                }
                            } else {
                                p = p.offset(-1);
                                p;
                                break;
                            }
                        }
                        if laststart.is_null() {
                            continue;
                        }
                        if many_times_ok != 0 {
                            while (b.offset_from((*bufp).buffer) as libc::c_long
                                + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                as libc::c_ulong > (*bufp).allocated
                            {
                                let mut old_buffer_1: *mut libc::c_uchar = (*bufp).buffer;
                                if (*bufp).allocated
                                    == ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    return REG_ESIZE;
                                }
                                (*bufp).allocated <<= 1 as libc::c_int;
                                if (*bufp).allocated
                                    > ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    (*bufp)
                                        .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong;
                                }
                                (*bufp)
                                    .buffer = realloc(
                                    (*bufp).buffer as *mut libc::c_void,
                                    (*bufp).allocated,
                                ) as *mut libc::c_uchar;
                                if ((*bufp).buffer).is_null() {
                                    return REG_ESPACE;
                                }
                                if old_buffer_1 != (*bufp).buffer {
                                    let mut incr_1: ptrdiff_t = ((*bufp).buffer)
                                        .offset_from(old_buffer_1) as libc::c_long;
                                    b = b.offset(incr_1 as isize);
                                    begalt = begalt.offset(incr_1 as isize);
                                    if !fixup_alt_jump.is_null() {
                                        fixup_alt_jump = fixup_alt_jump.offset(incr_1 as isize);
                                    }
                                    if !laststart.is_null() {
                                        laststart = laststart.offset(incr_1 as isize);
                                    }
                                    if !pending_exact.is_null() {
                                        pending_exact = pending_exact.offset(incr_1 as isize);
                                    }
                                }
                            }
                            if (if !translate.is_null() {
                                *translate
                                    .offset(
                                        *p.offset(-(2 as libc::c_int as isize)) as libc::c_uchar
                                            as isize,
                                    ) as libc::c_int
                            } else {
                                *p.offset(-(2 as libc::c_int as isize)) as libc::c_int
                            })
                                == (if !translate.is_null() {
                                    *translate.offset('.' as i32 as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    '.' as i32 as libc::c_char as libc::c_int
                                }) && zero_times_ok as libc::c_int != 0 && p < pend
                                && (if !translate.is_null() {
                                    *translate.offset(*p as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    *p as libc::c_int
                                })
                                    == (if !translate.is_null() {
                                        *translate.offset('\n' as i32 as libc::c_uchar as isize)
                                            as libc::c_int
                                    } else {
                                        '\n' as i32 as libc::c_char as libc::c_int
                                    })
                                && syntax
                                    & ((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int == 0
                            {
                                byte_store_op1(
                                    jump,
                                    b,
                                    (laststart.offset_from(b) as libc::c_long
                                        - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                        as libc::c_int,
                                );
                                keep_string_p = 1 as libc::c_int as boolean;
                            } else {
                                byte_store_op1(
                                    maybe_pop_jump,
                                    b,
                                    (laststart
                                        .offset(-((1 as libc::c_int + 2 as libc::c_int) as isize))
                                        .offset_from(b) as libc::c_long
                                        - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                        as libc::c_int,
                                );
                            }
                            b = b.offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                        }
                        while (b.offset_from((*bufp).buffer) as libc::c_long
                            + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                            as libc::c_ulong > (*bufp).allocated
                        {
                            let mut old_buffer_2: *mut libc::c_uchar = (*bufp).buffer;
                            if (*bufp).allocated
                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                return REG_ESIZE;
                            }
                            (*bufp).allocated <<= 1 as libc::c_int;
                            if (*bufp).allocated
                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                (*bufp)
                                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong;
                            }
                            (*bufp)
                                .buffer = realloc(
                                (*bufp).buffer as *mut libc::c_void,
                                (*bufp).allocated,
                            ) as *mut libc::c_uchar;
                            if ((*bufp).buffer).is_null() {
                                return REG_ESPACE;
                            }
                            if old_buffer_2 != (*bufp).buffer {
                                let mut incr_2: ptrdiff_t = ((*bufp).buffer)
                                    .offset_from(old_buffer_2) as libc::c_long;
                                b = b.offset(incr_2 as isize);
                                begalt = begalt.offset(incr_2 as isize);
                                if !fixup_alt_jump.is_null() {
                                    fixup_alt_jump = fixup_alt_jump.offset(incr_2 as isize);
                                }
                                if !laststart.is_null() {
                                    laststart = laststart.offset(incr_2 as isize);
                                }
                                if !pending_exact.is_null() {
                                    pending_exact = pending_exact.offset(incr_2 as isize);
                                }
                            }
                        }
                        byte_insert_op1(
                            (if keep_string_p as libc::c_int != 0 {
                                on_failure_keep_string_jump as libc::c_int
                            } else {
                                on_failure_jump as libc::c_int
                            }) as re_opcode_t,
                            laststart,
                            (b
                                .offset(1 as libc::c_int as isize)
                                .offset(2 as libc::c_int as isize)
                                .offset_from(laststart) as libc::c_long
                                - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                as libc::c_int,
                            b,
                        );
                        pending_exact = 0 as *mut libc::c_uchar;
                        b = b.offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                        if zero_times_ok == 0 {
                            while (b.offset_from((*bufp).buffer) as libc::c_long
                                + (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                as libc::c_ulong > (*bufp).allocated
                            {
                                let mut old_buffer_3: *mut libc::c_uchar = (*bufp).buffer;
                                if (*bufp).allocated
                                    == ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    return REG_ESIZE;
                                }
                                (*bufp).allocated <<= 1 as libc::c_int;
                                if (*bufp).allocated
                                    > ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    (*bufp)
                                        .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong;
                                }
                                (*bufp)
                                    .buffer = realloc(
                                    (*bufp).buffer as *mut libc::c_void,
                                    (*bufp).allocated,
                                ) as *mut libc::c_uchar;
                                if ((*bufp).buffer).is_null() {
                                    return REG_ESPACE;
                                }
                                if old_buffer_3 != (*bufp).buffer {
                                    let mut incr_3: ptrdiff_t = ((*bufp).buffer)
                                        .offset_from(old_buffer_3) as libc::c_long;
                                    b = b.offset(incr_3 as isize);
                                    begalt = begalt.offset(incr_3 as isize);
                                    if !fixup_alt_jump.is_null() {
                                        fixup_alt_jump = fixup_alt_jump.offset(incr_3 as isize);
                                    }
                                    if !laststart.is_null() {
                                        laststart = laststart.offset(incr_3 as isize);
                                    }
                                    if !pending_exact.is_null() {
                                        pending_exact = pending_exact.offset(incr_3 as isize);
                                    }
                                }
                            }
                            byte_insert_op1(
                                dummy_failure_jump,
                                laststart,
                                (laststart
                                    .offset(2 as libc::c_int as isize)
                                    .offset((2 as libc::c_int * 2 as libc::c_int) as isize)
                                    .offset_from(laststart) as libc::c_long
                                    - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long)
                                    as libc::c_int,
                                b,
                            );
                            b = b.offset((1 as libc::c_int + 2 as libc::c_int) as isize);
                        }
                        continue;
                    }
                }
            }
            _ => {}
        }
        match current_block {
            16208725274143298005 => {
                c = (if !translate.is_null() {
                    *translate.offset(c as isize) as libc::c_int
                } else {
                    c as libc::c_char as libc::c_int
                }) as libc::c_uchar;
            }
            _ => {}
        }
        if pending_exact.is_null()
            || pending_exact
                .offset(*pending_exact as libc::c_int as isize)
                .offset(1 as libc::c_int as isize) != b
            || *pending_exact as libc::c_int
                == ((1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int
            || *p as libc::c_int == '*' as i32 || *p as libc::c_int == '^' as i32
            || (if syntax & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int != 0
            {
                (*p as libc::c_int == '\\' as i32
                    && (*p.offset(1 as libc::c_int as isize) as libc::c_int == '+' as i32
                        || *p.offset(1 as libc::c_int as isize) as libc::c_int
                            == '?' as i32)) as libc::c_int
            } else {
                (*p as libc::c_int == '+' as i32 || *p as libc::c_int == '?' as i32)
                    as libc::c_int
            }) != 0
            || syntax
                & (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int != 0
                && (if syntax
                    & ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    (*p as libc::c_int == '{' as i32) as libc::c_int
                } else {
                    (*p.offset(0 as libc::c_int as isize) as libc::c_int == '\\' as i32
                        && *p.offset(1 as libc::c_int as isize) as libc::c_int
                            == '{' as i32) as libc::c_int
                }) != 0
        {
            laststart = b;
            while (b.offset_from((*bufp).buffer) as libc::c_long
                + 2 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
            {
                let mut old_buffer_24: *mut libc::c_uchar = (*bufp).buffer;
                if (*bufp).allocated
                    == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                {
                    return REG_ESIZE;
                }
                (*bufp).allocated <<= 1 as libc::c_int;
                if (*bufp).allocated
                    > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                {
                    (*bufp)
                        .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                        as libc::c_ulong;
                }
                (*bufp)
                    .buffer = realloc(
                    (*bufp).buffer as *mut libc::c_void,
                    (*bufp).allocated,
                ) as *mut libc::c_uchar;
                if ((*bufp).buffer).is_null() {
                    return REG_ESPACE;
                }
                if old_buffer_24 != (*bufp).buffer {
                    let mut incr_24: ptrdiff_t = ((*bufp).buffer)
                        .offset_from(old_buffer_24) as libc::c_long;
                    b = b.offset(incr_24 as isize);
                    begalt = begalt.offset(incr_24 as isize);
                    if !fixup_alt_jump.is_null() {
                        fixup_alt_jump = fixup_alt_jump.offset(incr_24 as isize);
                    }
                    if !laststart.is_null() {
                        laststart = laststart.offset(incr_24 as isize);
                    }
                    if !pending_exact.is_null() {
                        pending_exact = pending_exact.offset(incr_24 as isize);
                    }
                }
            }
            let fresh63 = b;
            b = b.offset(1);
            *fresh63 = exactn as libc::c_int as libc::c_uchar;
            let fresh64 = b;
            b = b.offset(1);
            *fresh64 = 0 as libc::c_int as libc::c_uchar;
            pending_exact = b.offset(-(1 as libc::c_int as isize));
        }
        while (b.offset_from((*bufp).buffer) as libc::c_long
            + 1 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
        {
            let mut old_buffer_25: *mut libc::c_uchar = (*bufp).buffer;
            if (*bufp).allocated
                == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                return REG_ESIZE;
            }
            (*bufp).allocated <<= 1 as libc::c_int;
            if (*bufp).allocated
                > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                (*bufp)
                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                    as libc::c_ulong;
            }
            (*bufp)
                .buffer = realloc((*bufp).buffer as *mut libc::c_void, (*bufp).allocated)
                as *mut libc::c_uchar;
            if ((*bufp).buffer).is_null() {
                return REG_ESPACE;
            }
            if old_buffer_25 != (*bufp).buffer {
                let mut incr_25: ptrdiff_t = ((*bufp).buffer).offset_from(old_buffer_25)
                    as libc::c_long;
                b = b.offset(incr_25 as isize);
                begalt = begalt.offset(incr_25 as isize);
                if !fixup_alt_jump.is_null() {
                    fixup_alt_jump = fixup_alt_jump.offset(incr_25 as isize);
                }
                if !laststart.is_null() {
                    laststart = laststart.offset(incr_25 as isize);
                }
                if !pending_exact.is_null() {
                    pending_exact = pending_exact.offset(incr_25 as isize);
                }
            }
        }
        let fresh65 = b;
        b = b.offset(1);
        *fresh65 = c;
        *pending_exact = (*pending_exact).wrapping_add(1);
        *pending_exact;
    }
    if !fixup_alt_jump.is_null() {
        byte_store_op1(
            jump_past_alt,
            fixup_alt_jump,
            (b.offset_from(fixup_alt_jump) as libc::c_long
                - (1 as libc::c_int + 2 as libc::c_int) as libc::c_long) as libc::c_int,
        );
    }
    if !(compile_stack.avail == 0 as libc::c_int as libc::c_uint) {
        free(compile_stack.stack as *mut libc::c_void);
        return REG_EPAREN as libc::c_int as reg_errcode_t;
    }
    if syntax
        & ((((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int != 0
    {
        while (b.offset_from((*bufp).buffer) as libc::c_long
            + 1 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
        {
            let mut old_buffer_26: *mut libc::c_uchar = (*bufp).buffer;
            if (*bufp).allocated
                == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                return REG_ESIZE;
            }
            (*bufp).allocated <<= 1 as libc::c_int;
            if (*bufp).allocated
                > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                (*bufp)
                    .allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                    as libc::c_ulong;
            }
            (*bufp)
                .buffer = realloc((*bufp).buffer as *mut libc::c_void, (*bufp).allocated)
                as *mut libc::c_uchar;
            if ((*bufp).buffer).is_null() {
                return REG_ESPACE;
            }
            if old_buffer_26 != (*bufp).buffer {
                let mut incr_26: ptrdiff_t = ((*bufp).buffer).offset_from(old_buffer_26)
                    as libc::c_long;
                b = b.offset(incr_26 as isize);
                begalt = begalt.offset(incr_26 as isize);
                if !fixup_alt_jump.is_null() {
                    fixup_alt_jump = fixup_alt_jump.offset(incr_26 as isize);
                }
                if !laststart.is_null() {
                    laststart = laststart.offset(incr_26 as isize);
                }
                if !pending_exact.is_null() {
                    pending_exact = pending_exact.offset(incr_26 as isize);
                }
            }
        }
        let fresh66 = b;
        b = b.offset(1);
        *fresh66 = succeed as libc::c_int as libc::c_uchar;
    }
    free(compile_stack.stack as *mut libc::c_void);
    (*bufp).used = b.offset_from((*bufp).buffer) as libc::c_long as libc::c_ulong;
    return REG_NOERROR;
}
unsafe extern "C" fn byte_store_op1(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg: libc::c_int,
) {
    *loc = op as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(
            0 as libc::c_int as isize,
        ) = (arg & 0o377 as libc::c_int) as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(1 as libc::c_int as isize) = (arg >> 8 as libc::c_int) as libc::c_uchar;
}
unsafe extern "C" fn byte_store_op2(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg1: libc::c_int,
    mut arg2: libc::c_int,
) {
    *loc = op as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(
            0 as libc::c_int as isize,
        ) = (arg1 & 0o377 as libc::c_int) as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(1 as libc::c_int as isize) = (arg1 >> 8 as libc::c_int) as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(2 as libc::c_int as isize)
        .offset(
            0 as libc::c_int as isize,
        ) = (arg2 & 0o377 as libc::c_int) as libc::c_uchar;
    *loc
        .offset(1 as libc::c_int as isize)
        .offset(2 as libc::c_int as isize)
        .offset(1 as libc::c_int as isize) = (arg2 >> 8 as libc::c_int) as libc::c_uchar;
}
unsafe extern "C" fn byte_insert_op1(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg: libc::c_int,
    mut end: *mut libc::c_uchar,
) {
    let mut pfrom: *mut libc::c_uchar = end;
    let mut pto: *mut libc::c_uchar = end
        .offset(1 as libc::c_int as isize)
        .offset(2 as libc::c_int as isize);
    while pfrom != loc {
        pfrom = pfrom.offset(-1);
        pto = pto.offset(-1);
        *pto = *pfrom;
    }
    byte_store_op1(op, loc, arg);
}
unsafe extern "C" fn byte_insert_op2(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg1: libc::c_int,
    mut arg2: libc::c_int,
    mut end: *mut libc::c_uchar,
) {
    let mut pfrom: *mut libc::c_uchar = end;
    let mut pto: *mut libc::c_uchar = end
        .offset(1 as libc::c_int as isize)
        .offset((2 as libc::c_int * 2 as libc::c_int) as isize);
    while pfrom != loc {
        pfrom = pfrom.offset(-1);
        pto = pto.offset(-1);
        *pto = *pfrom;
    }
    byte_store_op2(op, loc, arg1, arg2);
}
unsafe extern "C" fn byte_at_begline_loc_p(
    mut pattern: *const libc::c_char,
    mut p: *const libc::c_char,
    mut syntax: reg_syntax_t,
) -> boolean {
    let mut prev: *const libc::c_char = p.offset(-(2 as libc::c_int as isize));
    let mut prev_prev_backslash: boolean = (prev > pattern
        && *prev.offset(-(1 as libc::c_int) as isize) as libc::c_int == '\\' as i32)
        as libc::c_int as boolean;
    return (*prev as libc::c_int == '(' as i32
        && (syntax
            & (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
            || prev_prev_backslash as libc::c_int != 0)
        || *prev as libc::c_int == '|' as i32
            && (syntax
                & (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int != 0
                || prev_prev_backslash as libc::c_int != 0)) as libc::c_int as boolean;
}
unsafe extern "C" fn byte_at_endline_loc_p(
    mut p: *const libc::c_char,
    mut pend: *const libc::c_char,
    mut syntax: reg_syntax_t,
) -> boolean {
    let mut next: *const libc::c_char = p;
    let mut next_backslash: boolean = (*next as libc::c_int == '\\' as i32)
        as libc::c_int as boolean;
    let mut next_next: *const libc::c_char = if p.offset(1 as libc::c_int as isize)
        < pend
    {
        p.offset(1 as libc::c_int as isize)
    } else {
        0 as *const libc::c_char
    };
    return ((if syntax
        & (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
    {
        (*next as libc::c_int == ')' as i32) as libc::c_int
    } else {
        (next_backslash as libc::c_int != 0 && !next_next.is_null()
            && *next_next as libc::c_int == ')' as i32) as libc::c_int
    }) != 0
        || (if syntax
            & (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int != 0
        {
            (*next as libc::c_int == '|' as i32) as libc::c_int
        } else {
            (next_backslash as libc::c_int != 0 && !next_next.is_null()
                && *next_next as libc::c_int == '|' as i32) as libc::c_int
        }) != 0) as libc::c_int as boolean;
}
unsafe extern "C" fn group_in_compile_stack(
    mut compile_stack: compile_stack_type,
    mut regnum: regnum_t,
) -> boolean {
    let mut this_element: libc::c_int = 0;
    this_element = (compile_stack.avail).wrapping_sub(1 as libc::c_int as libc::c_uint)
        as libc::c_int;
    while this_element >= 0 as libc::c_int {
        if (*(compile_stack.stack).offset(this_element as isize)).regnum == regnum {
            return 1 as libc::c_int as boolean;
        }
        this_element -= 1;
        this_element;
    }
    return 0 as libc::c_int as boolean;
}
unsafe extern "C" fn byte_compile_range(
    mut range_start_char: libc::c_uint,
    mut p_ptr: *mut *const libc::c_char,
    mut pend: *const libc::c_char,
    mut translate: *mut libc::c_char,
    mut syntax: reg_syntax_t,
    mut b: *mut libc::c_uchar,
) -> reg_errcode_t {
    let mut this_char: libc::c_uint = 0;
    let mut p: *const libc::c_char = *p_ptr;
    let mut ret: reg_errcode_t = REG_NOERROR;
    let mut end_char: libc::c_uint = 0;
    if p == pend {
        return REG_ERANGE;
    }
    *p_ptr = (*p_ptr).offset(1);
    *p_ptr;
    ret = (if syntax
        & ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
    {
        REG_ERANGE as libc::c_int
    } else {
        REG_NOERROR as libc::c_int
    }) as reg_errcode_t;
    range_start_char = (if !translate.is_null() {
        *translate.offset(range_start_char as libc::c_uchar as isize) as libc::c_int
    } else {
        range_start_char as libc::c_char as libc::c_int
    }) as libc::c_uint;
    end_char = (if !translate.is_null() {
        *translate.offset(*p.offset(0 as libc::c_int as isize) as libc::c_uchar as isize)
            as libc::c_int
    } else {
        *p.offset(0 as libc::c_int as isize) as libc::c_int
    }) as libc::c_uint
        & (((1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int) as libc::c_uint;
    this_char = range_start_char;
    while this_char <= end_char {
        let ref mut fresh67 = *b
            .offset(
                ((if !translate.is_null() {
                    *translate.offset(this_char as libc::c_uchar as isize) as libc::c_int
                } else {
                    this_char as libc::c_char as libc::c_int
                }) as libc::c_uchar as libc::c_int / 8 as libc::c_int) as isize,
            );
        *fresh67 = (*fresh67 as libc::c_int
            | (1 as libc::c_int)
                << (if !translate.is_null() {
                    *translate.offset(this_char as libc::c_uchar as isize) as libc::c_int
                } else {
                    this_char as libc::c_char as libc::c_int
                }) as libc::c_uchar as libc::c_int % 8 as libc::c_int) as libc::c_uchar;
        ret = REG_NOERROR;
        this_char = this_char.wrapping_add(1);
        this_char;
    }
    return ret;
}
unsafe extern "C" fn byte_re_compile_fastmap(
    mut bufp: *mut re_pattern_buffer,
) -> libc::c_int {
    let mut current_block: u64;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut fail_stack: byte_fail_stack_type = byte_fail_stack_type {
        stack: 0 as *mut byte_fail_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut destination: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut fastmap: *mut libc::c_char = (*bufp).fastmap;
    let mut pattern: *mut libc::c_uchar = (*bufp).buffer;
    let mut pend: *mut libc::c_uchar = pattern.offset((*bufp).used as isize);
    let mut p: *mut libc::c_uchar = pattern;
    let mut path_can_be_null: boolean = 1 as libc::c_int as boolean;
    let mut succeed_n_p: boolean = 0 as libc::c_int as boolean;
    let mut fresh68 = ::std::vec::from_elem(
        0,
        (5 as libc::c_int as libc::c_ulong)
            .wrapping_mul(
                ::core::mem::size_of::<byte_fail_stack_elt_t>() as libc::c_ulong,
            ) as usize,
    );
    fail_stack.stack = fresh68.as_mut_ptr() as *mut byte_fail_stack_elt_t;
    if (fail_stack.stack).is_null() {
        return -(2 as libc::c_int);
    }
    fail_stack.size = 5 as libc::c_int as libc::c_uint;
    fail_stack.avail = 0 as libc::c_int as libc::c_uint;
    memset(
        fastmap as *mut libc::c_void,
        '\0' as i32,
        ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_ulong,
    );
    (*bufp).set_fastmap_accurate(1 as libc::c_int as libc::c_uint);
    (*bufp).set_can_be_null(0 as libc::c_int as libc::c_uint);
    loop {
        if p == pend
            || *p as libc::c_int
                == succeed as libc::c_int as libc::c_uchar as libc::c_int
        {
            if fail_stack.avail == 0 as libc::c_int as libc::c_uint {
                current_block = 5697748000427295508;
                break;
            }
            (*bufp)
                .set_can_be_null(
                    (*bufp).can_be_null()
                        | path_can_be_null as libc::c_int as libc::c_uint,
                );
            path_can_be_null = 1 as libc::c_int as boolean;
            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
            p = (*(fail_stack.stack).offset(fail_stack.avail as isize)).pointer;
        } else {
            let fresh69 = p;
            p = p.offset(1);
            match *fresh69 as re_opcode_t as libc::c_uint {
                8 => {
                    (*bufp).set_can_be_null(1 as libc::c_int as libc::c_uint);
                    current_block = 7639320476250304355;
                    break;
                }
                2 => {
                    *fastmap
                        .offset(
                            *p.offset(1 as libc::c_int as isize) as isize,
                        ) = 1 as libc::c_int as libc::c_char;
                    current_block = 14851765859726653900;
                }
                4 => {
                    let fresh70 = p;
                    p = p.offset(1);
                    j = *fresh70 as libc::c_int * 8 as libc::c_int - 1 as libc::c_int;
                    while j >= 0 as libc::c_int {
                        if *p.offset((j / 8 as libc::c_int) as isize) as libc::c_int
                            & (1 as libc::c_int) << j % 8 as libc::c_int != 0
                        {
                            *fastmap
                                .offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        }
                        j -= 1;
                        j;
                    }
                    current_block = 14851765859726653900;
                }
                5 => {
                    j = *p as libc::c_int * 8 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        *fastmap.offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        j += 1;
                        j;
                    }
                    let fresh71 = p;
                    p = p.offset(1);
                    j = *fresh71 as libc::c_int * 8 as libc::c_int - 1 as libc::c_int;
                    while j >= 0 as libc::c_int {
                        if *p.offset((j / 8 as libc::c_int) as isize) as libc::c_int
                            & (1 as libc::c_int) << j % 8 as libc::c_int == 0
                        {
                            *fastmap
                                .offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        }
                        j -= 1;
                        j;
                    }
                    current_block = 14851765859726653900;
                }
                24 => {
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        if re_syntax_table[j as libc::c_uchar as usize] as libc::c_int
                            == 1 as libc::c_int
                        {
                            *fastmap
                                .offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        }
                        j += 1;
                        j;
                    }
                    current_block = 14851765859726653900;
                }
                25 => {
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        if re_syntax_table[j as libc::c_uchar as usize] as libc::c_int
                            != 1 as libc::c_int
                        {
                            *fastmap
                                .offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        }
                        j += 1;
                        j;
                    }
                    current_block = 14851765859726653900;
                }
                3 => {
                    let mut fastmap_newline: libc::c_int = *fastmap
                        .offset('\n' as i32 as isize) as libc::c_int;
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        *fastmap.offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        j += 1;
                        j;
                    }
                    if (*bufp).syntax
                        & ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        == 0
                    {
                        *fastmap
                            .offset(
                                '\n' as i32 as isize,
                            ) = fastmap_newline as libc::c_char;
                    } else if (*bufp).can_be_null() != 0 {
                        current_block = 7639320476250304355;
                        break;
                    }
                    current_block = 14851765859726653900;
                }
                0 | 9 | 10 | 11 | 12 | 28 | 29 | 26 | 27 | 20 => {
                    continue;
                }
                22 | 17 | 18 | 13 | 14 | 19 => {
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j = (j as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p = p.offset(j as isize);
                    if j > 0 as libc::c_int {
                        continue;
                    }
                    if *p as re_opcode_t as libc::c_uint
                        != on_failure_jump as libc::c_int as libc::c_uint
                        && *p as re_opcode_t as libc::c_uint
                            != succeed_n as libc::c_int as libc::c_uint
                    {
                        continue;
                    }
                    p = p.offset(1);
                    p;
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j = (j as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p = p.offset(j as isize);
                    if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint)
                        && (*(fail_stack.stack)
                            .offset(
                                (fail_stack.avail)
                                    .wrapping_sub(1 as libc::c_int as libc::c_uint) as isize,
                            ))
                            .pointer == p
                    {
                        fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                        fail_stack.avail;
                    }
                    continue;
                }
                15 | 16 => {
                    current_block = 16281478827842611350;
                }
                21 => {
                    p = p.offset(2 as libc::c_int as isize);
                    k = *p as libc::c_int & 0o377 as libc::c_int;
                    k = (k as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    if !(k == 0 as libc::c_int) {
                        continue;
                    }
                    p = p.offset(-((2 as libc::c_int * 2 as libc::c_int) as isize));
                    succeed_n_p = 1 as libc::c_int as boolean;
                    current_block = 16281478827842611350;
                }
                23 => {
                    p = p.offset((2 as libc::c_int * 2 as libc::c_int) as isize);
                    continue;
                }
                6 | 7 => {
                    p = p.offset(2 as libc::c_int as isize);
                    continue;
                }
                _ => {
                    abort();
                }
            }
            match current_block {
                14851765859726653900 => {
                    path_can_be_null = 0 as libc::c_int as boolean;
                    p = pend;
                }
                _ => {
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j = (j as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    if p.offset(j as isize) < pend {
                        if if fail_stack.avail == fail_stack.size
                            && (if fail_stack.size
                                > (xre_max_failures
                                    * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                    as libc::c_uint
                            {
                                0 as libc::c_int
                            } else {
                                let mut fresh72 = ::std::vec::from_elem(
                                    0,
                                    ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                        .wrapping_mul(
                                            ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                as libc::c_ulong,
                                        ) as usize,
                                );
                                destination = fresh72.as_mut_ptr() as *mut libc::c_char;
                                fail_stack
                                    .stack = memcpy(
                                    destination as *mut libc::c_void,
                                    fail_stack.stack as *const libc::c_void,
                                    (fail_stack.size as libc::c_ulong)
                                        .wrapping_mul(
                                            ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                as libc::c_ulong,
                                        ),
                                ) as *mut byte_fail_stack_elt_t;
                                (if (fail_stack.stack).is_null() {
                                    0 as libc::c_int
                                } else {
                                    fail_stack.size <<= 1 as libc::c_int;
                                    1 as libc::c_int
                                })
                            }) == 0
                        {
                            0 as libc::c_int
                        } else {
                            let fresh73 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh74 = (*(fail_stack.stack)
                                .offset(fresh73 as isize))
                                .pointer;
                            *fresh74 = p.offset(j as isize);
                            1 as libc::c_int
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    } else {
                        (*bufp).set_can_be_null(1 as libc::c_int as libc::c_uint);
                    }
                    if succeed_n_p != 0 {
                        k = *p as libc::c_int & 0o377 as libc::c_int;
                        k = (k as libc::c_uint)
                            .wrapping_add(
                                (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                    as libc::c_uint) << 8 as libc::c_int,
                            ) as libc::c_int as libc::c_int;
                        p = p.offset(2 as libc::c_int as isize);
                        succeed_n_p = 0 as libc::c_int as boolean;
                    }
                }
            }
        }
    }
    match current_block {
        5697748000427295508 => {
            (*bufp)
                .set_can_be_null(
                    (*bufp).can_be_null()
                        | path_can_be_null as libc::c_int as libc::c_uint,
                );
        }
        _ => {}
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn xre_compile_fastmap(
    mut bufp: *mut re_pattern_buffer,
) -> libc::c_int {
    return byte_re_compile_fastmap(bufp);
}
#[no_mangle]
pub unsafe extern "C" fn xre_set_registers(
    mut bufp: *mut re_pattern_buffer,
    mut regs: *mut re_registers,
    mut num_regs: libc::c_uint,
    mut starts: *mut xregoff_t,
    mut ends: *mut xregoff_t,
) {
    if num_regs != 0 {
        (*bufp).set_regs_allocated(1 as libc::c_int as libc::c_uint);
        (*regs).num_regs = num_regs;
        (*regs).start = starts;
        (*regs).end = ends;
    } else {
        (*bufp).set_regs_allocated(0 as libc::c_int as libc::c_uint);
        (*regs).num_regs = 0 as libc::c_int as libc::c_uint;
        (*regs).end = 0 as *mut xregoff_t;
        (*regs).start = (*regs).end;
    };
}
#[no_mangle]
pub unsafe extern "C" fn xre_search(
    mut bufp: *mut re_pattern_buffer,
    mut string: *const libc::c_char,
    mut size: libc::c_int,
    mut startpos: libc::c_int,
    mut range: libc::c_int,
    mut regs: *mut re_registers,
) -> libc::c_int {
    return xre_search_2(
        bufp,
        0 as *const libc::c_char,
        0 as libc::c_int,
        string,
        size,
        startpos,
        range,
        regs,
        size,
    );
}
#[no_mangle]
pub unsafe extern "C" fn xre_search_2(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut startpos: libc::c_int,
    mut range: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    return byte_re_search_2(
        bufp,
        string1,
        size1,
        string2,
        size2,
        startpos,
        range,
        regs,
        stop,
    );
}
unsafe extern "C" fn byte_re_search_2(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut startpos: libc::c_int,
    mut range: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut val: libc::c_int = 0;
    let mut fastmap: *mut libc::c_char = (*bufp).fastmap;
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut total_size: libc::c_int = size1 + size2;
    let mut endpos: libc::c_int = startpos + range;
    if startpos < 0 as libc::c_int || startpos > total_size {
        return -(1 as libc::c_int);
    }
    if endpos < 0 as libc::c_int {
        range = 0 as libc::c_int - startpos;
    } else if endpos > total_size {
        range = total_size - startpos;
    }
    if (*bufp).used > 0 as libc::c_int as libc::c_ulong && range > 0 as libc::c_int
        && (*((*bufp).buffer).offset(0 as libc::c_int as isize) as re_opcode_t
            as libc::c_uint == begbuf as libc::c_int as libc::c_uint
            || *((*bufp).buffer).offset(0 as libc::c_int as isize) as re_opcode_t
                as libc::c_uint == begline as libc::c_int as libc::c_uint
                && (*bufp).newline_anchor() == 0)
    {
        if startpos > 0 as libc::c_int {
            return -(1 as libc::c_int)
        } else {
            range = 1 as libc::c_int;
        }
    }
    if !fastmap.is_null() && (*bufp).fastmap_accurate() == 0 {
        if xre_compile_fastmap(bufp) == -(2 as libc::c_int) {
            return -(2 as libc::c_int);
        }
    }
    let mut current_block_40: u64;
    loop {
        if !fastmap.is_null() && startpos < total_size && (*bufp).can_be_null() == 0 {
            if range > 0 as libc::c_int {
                let mut d: *const libc::c_char = 0 as *const libc::c_char;
                let mut lim: libc::c_int = 0 as libc::c_int;
                let mut irange: libc::c_int = range;
                if startpos < size1 && startpos + range >= size1 {
                    lim = range - (size1 - startpos);
                }
                d = (if startpos >= size1 {
                    string2.offset(-(size1 as isize))
                } else {
                    string1
                })
                    .offset(startpos as isize);
                if !translate.is_null() {
                    while range > lim
                        && {
                            let fresh75 = d;
                            d = d.offset(1);
                            *fastmap
                                .offset(
                                    *translate.offset(*fresh75 as libc::c_uchar as isize)
                                        as libc::c_uchar as isize,
                                ) == 0
                        }
                    {
                        range -= 1;
                        range;
                    }
                } else {
                    while range > lim
                        && {
                            let fresh76 = d;
                            d = d.offset(1);
                            *fastmap.offset(*fresh76 as libc::c_uchar as isize) == 0
                        }
                    {
                        range -= 1;
                        range;
                    }
                }
                startpos += irange - range;
                current_block_40 = 14648156034262866959;
            } else {
                let mut c: libc::c_char = (if size1 == 0 as libc::c_int
                    || startpos >= size1
                {
                    *string2.offset((startpos - size1) as isize) as libc::c_int
                } else {
                    *string1.offset(startpos as isize) as libc::c_int
                }) as libc::c_char;
                if *fastmap
                    .offset(
                        (if !translate.is_null() {
                            *translate.offset(c as libc::c_uchar as isize) as libc::c_int
                        } else {
                            c as libc::c_int
                        }) as libc::c_uchar as isize,
                    ) == 0
                {
                    current_block_40 = 2763587213084061686;
                } else {
                    current_block_40 = 14648156034262866959;
                }
            }
        } else {
            current_block_40 = 14648156034262866959;
        }
        match current_block_40 {
            14648156034262866959 => {
                if range >= 0 as libc::c_int && startpos == total_size
                    && !fastmap.is_null() && (*bufp).can_be_null() == 0
                {
                    return -(1 as libc::c_int);
                }
                val = byte_re_match_2_internal(
                    bufp,
                    string1,
                    size1,
                    string2,
                    size2,
                    startpos,
                    regs,
                    stop,
                );
                if val >= 0 as libc::c_int {
                    return startpos;
                }
                if val == -(2 as libc::c_int) {
                    return -(2 as libc::c_int);
                }
            }
            _ => {}
        }
        if range == 0 {
            break;
        }
        if range > 0 as libc::c_int {
            range -= 1;
            range;
            startpos += 1;
            startpos;
        } else {
            range += 1;
            range;
            startpos -= 1;
            startpos;
        }
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn xre_match(
    mut bufp: *mut re_pattern_buffer,
    mut string: *const libc::c_char,
    mut size: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
) -> libc::c_int {
    let mut result: libc::c_int = 0;
    result = byte_re_match_2_internal(
        bufp,
        0 as *const libc::c_char,
        0 as libc::c_int,
        string,
        size,
        pos,
        regs,
        size,
    );
    return result;
}
#[no_mangle]
pub unsafe extern "C" fn xre_match_2(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut result: libc::c_int = 0;
    result = byte_re_match_2_internal(
        bufp,
        string1,
        size1,
        string2,
        size2,
        pos,
        regs,
        stop,
    );
    return result;
}
unsafe extern "C" fn byte_re_match_2_internal(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut same_str_p: boolean = 0;
    let mut best_match_p: boolean = 0;
    let mut current_block: u64;
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut end1: *const libc::c_char = 0 as *const libc::c_char;
    let mut end2: *const libc::c_char = 0 as *const libc::c_char;
    let mut end_match_1: *const libc::c_char = 0 as *const libc::c_char;
    let mut end_match_2: *const libc::c_char = 0 as *const libc::c_char;
    let mut d: *const libc::c_char = 0 as *const libc::c_char;
    let mut dend: *const libc::c_char = 0 as *const libc::c_char;
    let mut p: *mut libc::c_uchar = (*bufp).buffer;
    let mut pend: *mut libc::c_uchar = p.offset((*bufp).used as isize);
    let mut just_past_start_mem: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut fail_stack: byte_fail_stack_type = byte_fail_stack_type {
        stack: 0 as *mut byte_fail_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut num_regs: size_t = ((*bufp).re_nsub)
        .wrapping_add(1 as libc::c_int as libc::c_ulong);
    let mut lowest_active_reg: active_reg_t = (((1 as libc::c_int) << 8 as libc::c_int)
        + 1 as libc::c_int) as active_reg_t;
    let mut highest_active_reg: active_reg_t = ((1 as libc::c_int) << 8 as libc::c_int)
        as active_reg_t;
    let mut regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut old_regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut old_regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut reg_info: *mut byte_register_info_type = 0 as *mut byte_register_info_type;
    let mut best_regs_set: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    let mut best_regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut best_regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut match_end: *const libc::c_char = 0 as *const libc::c_char;
    let mut set_regs_matched_done: libc::c_int = 0 as libc::c_int;
    let mut reg_dummy: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut reg_info_dummy: *mut byte_register_info_type = 0
        as *mut byte_register_info_type;
    let mut fresh77 = ::std::vec::from_elem(
        0,
        (5 as libc::c_int as libc::c_ulong)
            .wrapping_mul(
                ::core::mem::size_of::<byte_fail_stack_elt_t>() as libc::c_ulong,
            ) as usize,
    );
    fail_stack.stack = fresh77.as_mut_ptr() as *mut byte_fail_stack_elt_t;
    if (fail_stack.stack).is_null() {
        return -(2 as libc::c_int);
    }
    fail_stack.size = 5 as libc::c_int as libc::c_uint;
    fail_stack.avail = 0 as libc::c_int as libc::c_uint;
    if (*bufp).re_nsub != 0 {
        let mut fresh78 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        regstart = fresh78.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh79 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        regend = fresh79.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh80 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        old_regstart = fresh80.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh81 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        old_regend = fresh81.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh82 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        best_regstart = fresh82.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh83 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        best_regend = fresh83.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh84 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<byte_register_info_type>() as libc::c_ulong,
                ) as usize,
        );
        reg_info = fresh84.as_mut_ptr() as *mut byte_register_info_type;
        let mut fresh85 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        reg_dummy = fresh85.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh86 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<byte_register_info_type>() as libc::c_ulong,
                ) as usize,
        );
        reg_info_dummy = fresh86.as_mut_ptr() as *mut byte_register_info_type;
        if !(!regstart.is_null() && !regend.is_null() && !old_regstart.is_null()
            && !old_regend.is_null() && !reg_info.is_null() && !best_regstart.is_null()
            && !best_regend.is_null() && !reg_dummy.is_null()
            && !reg_info_dummy.is_null())
        {
            !regstart.is_null();
            regstart = 0 as *mut *const libc::c_char;
            !regend.is_null();
            regend = 0 as *mut *const libc::c_char;
            !old_regstart.is_null();
            old_regstart = 0 as *mut *const libc::c_char;
            !old_regend.is_null();
            old_regend = 0 as *mut *const libc::c_char;
            !best_regstart.is_null();
            best_regstart = 0 as *mut *const libc::c_char;
            !best_regend.is_null();
            best_regend = 0 as *mut *const libc::c_char;
            !reg_info.is_null();
            reg_info = 0 as *mut byte_register_info_type;
            !reg_dummy.is_null();
            reg_dummy = 0 as *mut *const libc::c_char;
            !reg_info_dummy.is_null();
            reg_info_dummy = 0 as *mut byte_register_info_type;
            return -(2 as libc::c_int);
        }
    } else {
        reg_dummy = 0 as *mut *const libc::c_char;
        best_regend = reg_dummy;
        best_regstart = best_regend;
        old_regend = best_regstart;
        old_regstart = old_regend;
        regend = old_regstart;
        regstart = regend;
        reg_info_dummy = 0 as *mut libc::c_void as *mut byte_register_info_type;
        reg_info = reg_info_dummy;
    }
    if pos < 0 as libc::c_int || pos > size1 + size2 {
        !regstart.is_null();
        regstart = 0 as *mut *const libc::c_char;
        !regend.is_null();
        regend = 0 as *mut *const libc::c_char;
        !old_regstart.is_null();
        old_regstart = 0 as *mut *const libc::c_char;
        !old_regend.is_null();
        old_regend = 0 as *mut *const libc::c_char;
        !best_regstart.is_null();
        best_regstart = 0 as *mut *const libc::c_char;
        !best_regend.is_null();
        best_regend = 0 as *mut *const libc::c_char;
        !reg_info.is_null();
        reg_info = 0 as *mut byte_register_info_type;
        !reg_dummy.is_null();
        reg_dummy = 0 as *mut *const libc::c_char;
        !reg_info_dummy.is_null();
        reg_info_dummy = 0 as *mut byte_register_info_type;
        return -(1 as libc::c_int);
    }
    mcnt = 1 as libc::c_int;
    while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
        let ref mut fresh87 = *old_regend.offset(mcnt as isize);
        *fresh87 = &mut byte_reg_unset_dummy;
        let ref mut fresh88 = *old_regstart.offset(mcnt as isize);
        *fresh88 = *fresh87;
        let ref mut fresh89 = *regend.offset(mcnt as isize);
        *fresh89 = *fresh88;
        let ref mut fresh90 = *regstart.offset(mcnt as isize);
        *fresh90 = *fresh89;
        let ref mut fresh91 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh91).set_match_null_string_p(3 as libc::c_int as libc::c_uint);
        let ref mut fresh92 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh92).set_is_active(0 as libc::c_int as libc::c_uint);
        let ref mut fresh93 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh93).set_matched_something(0 as libc::c_int as libc::c_uint);
        let ref mut fresh94 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh94).set_ever_matched_something(0 as libc::c_int as libc::c_uint);
        mcnt += 1;
        mcnt;
    }
    if size2 == 0 as libc::c_int && !string1.is_null() {
        string2 = string1;
        size2 = size1;
        string1 = 0 as *const libc::c_char;
        size1 = 0 as libc::c_int;
    }
    end1 = string1.offset(size1 as isize);
    end2 = string2.offset(size2 as isize);
    if stop <= size1 {
        end_match_1 = string1.offset(stop as isize);
        end_match_2 = string2;
    } else {
        end_match_1 = end1;
        end_match_2 = string2.offset(stop as isize).offset(-(size1 as isize));
    }
    if size1 > 0 as libc::c_int && pos <= size1 {
        d = string1.offset(pos as isize);
        dend = end_match_1;
    } else {
        d = string2.offset(pos as isize).offset(-(size1 as isize));
        dend = end_match_2;
    }
    's_497: loop {
        if p == pend {
            if !(d != end_match_2) {
                current_block = 7728257318064351663;
                break;
            }
            same_str_p = 0;
            best_match_p = 0;
            same_str_p = ((size1 != 0 && string1 <= match_end
                && match_end <= string1.offset(size1 as isize)) as libc::c_int
                == (dend == end_match_1) as libc::c_int) as libc::c_int as boolean;
            if same_str_p != 0 {
                best_match_p = (d > match_end) as libc::c_int as boolean;
            } else {
                best_match_p = !(dend == end_match_1) as libc::c_int as boolean;
            }
            if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint) {
                if best_regs_set == 0 || best_match_p as libc::c_int != 0 {
                    best_regs_set = 1 as libc::c_int as libc::c_uint;
                    match_end = d;
                    mcnt = 1 as libc::c_int;
                    while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
                        let ref mut fresh95 = *best_regstart.offset(mcnt as isize);
                        *fresh95 = *regstart.offset(mcnt as isize);
                        let ref mut fresh96 = *best_regend.offset(mcnt as isize);
                        *fresh96 = *regend.offset(mcnt as isize);
                        mcnt += 1;
                        mcnt;
                    }
                }
            } else if best_regs_set != 0 && best_match_p == 0 {
                current_block = 18002345992382212654;
                break;
            } else {
                current_block = 7728257318064351663;
                break;
            }
        } else {
            let fresh101 = p;
            p = p.offset(1);
            match *fresh101 as re_opcode_t as libc::c_uint {
                0 => {
                    continue;
                }
                1 => {
                    current_block = 7728257318064351663;
                    break;
                }
                2 => {
                    let fresh102 = p;
                    p = p.offset(1);
                    mcnt = *fresh102 as libc::c_int;
                    if !translate.is_null() {
                        loop {
                            if d == dend {
                                if dend == end_match_2 {
                                    current_block = 8612127615327024822;
                                    break;
                                }
                                d = string2;
                                dend = end_match_2;
                            } else {
                                let fresh103 = d;
                                d = d.offset(1);
                                let fresh104 = p;
                                p = p.offset(1);
                                if *translate.offset(*fresh103 as libc::c_uchar as isize)
                                    as libc::c_uchar as libc::c_int != *fresh104 as libc::c_int
                                {
                                    current_block = 8612127615327024822;
                                    break;
                                }
                                mcnt -= 1;
                                if !(mcnt != 0) {
                                    current_block = 2385072656283107554;
                                    break;
                                }
                            }
                        }
                    } else {
                        loop {
                            if d == dend {
                                if dend == end_match_2 {
                                    current_block = 8612127615327024822;
                                    break;
                                }
                                d = string2;
                                dend = end_match_2;
                            } else {
                                let fresh105 = d;
                                d = d.offset(1);
                                let fresh106 = p;
                                p = p.offset(1);
                                if *fresh105 as libc::c_int
                                    != *fresh106 as libc::c_char as libc::c_int
                                {
                                    current_block = 8612127615327024822;
                                    break;
                                }
                                mcnt -= 1;
                                if !(mcnt != 0) {
                                    current_block = 2385072656283107554;
                                    break;
                                }
                            }
                        }
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            if set_regs_matched_done == 0 {
                                let mut r: active_reg_t = 0;
                                set_regs_matched_done = 1 as libc::c_int;
                                r = lowest_active_reg;
                                while r <= highest_active_reg {
                                    let ref mut fresh108 = (*reg_info.offset(r as isize)).bits;
                                    let ref mut fresh107 = (*reg_info.offset(r as isize)).bits;
                                    (*fresh107)
                                        .set_ever_matched_something(
                                            1 as libc::c_int as libc::c_uint,
                                        );
                                    (*fresh108)
                                        .set_matched_something(
                                            (*fresh107).ever_matched_something(),
                                        );
                                    r = r.wrapping_add(1);
                                    r;
                                }
                            }
                            continue;
                        }
                    }
                }
                3 => {
                    loop {
                        if !(d == dend) {
                            current_block = 10632679619850208969;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 8612127615327024822;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            if (*bufp).syntax
                                & ((((((1 as libc::c_int as libc::c_ulong)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int == 0
                                && (if !translate.is_null() {
                                    *translate.offset(*d as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    *d as libc::c_int
                                }) == '\n' as i32
                                || (*bufp).syntax
                                    & (((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                    && (if !translate.is_null() {
                                        *translate.offset(*d as libc::c_uchar as isize)
                                            as libc::c_int
                                    } else {
                                        *d as libc::c_int
                                    }) == '\0' as i32
                            {
                                current_block = 8612127615327024822;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_0: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_0 = lowest_active_reg;
                                    while r_0 <= highest_active_reg {
                                        let ref mut fresh110 = (*reg_info.offset(r_0 as isize))
                                            .bits;
                                        let ref mut fresh109 = (*reg_info.offset(r_0 as isize))
                                            .bits;
                                        (*fresh109)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh110)
                                            .set_matched_something(
                                                (*fresh109).ever_matched_something(),
                                            );
                                        r_0 = r_0.wrapping_add(1);
                                        r_0;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                continue;
                            }
                        }
                    }
                }
                4 | 5 => {
                    let mut c: libc::c_uchar = 0;
                    let mut negate: boolean = (*p.offset(-(1 as libc::c_int as isize))
                        as re_opcode_t as libc::c_uint
                        == charset_not as libc::c_int as libc::c_uint) as libc::c_int
                        as boolean;
                    loop {
                        if !(d == dend) {
                            current_block = 9779573156760539169;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 8612127615327024822;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            c = (if !translate.is_null() {
                                *translate.offset(*d as libc::c_uchar as isize)
                                    as libc::c_int
                            } else {
                                *d as libc::c_int
                            }) as libc::c_uchar;
                            if (c as libc::c_uint)
                                < (*p as libc::c_int * 8 as libc::c_int) as libc::c_uint
                                && *p
                                    .offset(
                                        (1 as libc::c_int + c as libc::c_int / 8 as libc::c_int)
                                            as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int) << c as libc::c_int % 8 as libc::c_int
                                    != 0
                            {
                                negate = (negate == 0) as libc::c_int as boolean;
                            }
                            p = p
                                .offset((1 as libc::c_int + *p as libc::c_int) as isize);
                            if negate == 0 {
                                current_block = 8612127615327024822;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_1: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_1 = lowest_active_reg;
                                    while r_1 <= highest_active_reg {
                                        let ref mut fresh112 = (*reg_info.offset(r_1 as isize))
                                            .bits;
                                        let ref mut fresh111 = (*reg_info.offset(r_1 as isize))
                                            .bits;
                                        (*fresh111)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh112)
                                            .set_matched_something(
                                                (*fresh111).ever_matched_something(),
                                            );
                                        r_1 = r_1.wrapping_add(1);
                                        r_1;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                continue;
                            }
                        }
                    }
                }
                6 => {
                    p1 = p;
                    if ((*reg_info.offset(*p as isize)).bits).match_null_string_p()
                        as libc::c_int == 3 as libc::c_int
                    {
                        let ref mut fresh113 = (*reg_info.offset(*p as isize)).bits;
                        (*fresh113)
                            .set_match_null_string_p(
                                byte_group_match_null_string_p(&mut p1, pend, reg_info)
                                    as libc::c_uint,
                            );
                    }
                    let ref mut fresh114 = *old_regstart.offset(*p as isize);
                    *fresh114 = if ((*reg_info.offset(*p as isize)).bits)
                        .match_null_string_p() as libc::c_int != 0
                    {
                        if *regstart.offset(*p as isize)
                            == &mut byte_reg_unset_dummy as *mut libc::c_char
                                as *const libc::c_char
                        {
                            d
                        } else {
                            *regstart.offset(*p as isize)
                        }
                    } else {
                        *regstart.offset(*p as isize)
                    };
                    let ref mut fresh115 = *regstart.offset(*p as isize);
                    *fresh115 = d;
                    let ref mut fresh116 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh116).set_is_active(1 as libc::c_int as libc::c_uint);
                    let ref mut fresh117 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh117).set_matched_something(0 as libc::c_int as libc::c_uint);
                    set_regs_matched_done = 0 as libc::c_int;
                    highest_active_reg = *p as active_reg_t;
                    if lowest_active_reg
                        == (((1 as libc::c_int) << 8 as libc::c_int) + 1 as libc::c_int)
                            as libc::c_ulong
                    {
                        lowest_active_reg = *p as active_reg_t;
                    }
                    p = p.offset(2 as libc::c_int as isize);
                    just_past_start_mem = p;
                    continue;
                }
                7 => {
                    let ref mut fresh118 = *old_regend.offset(*p as isize);
                    *fresh118 = if ((*reg_info.offset(*p as isize)).bits)
                        .match_null_string_p() as libc::c_int != 0
                    {
                        if *regend.offset(*p as isize)
                            == &mut byte_reg_unset_dummy as *mut libc::c_char
                                as *const libc::c_char
                        {
                            d
                        } else {
                            *regend.offset(*p as isize)
                        }
                    } else {
                        *regend.offset(*p as isize)
                    };
                    let ref mut fresh119 = *regend.offset(*p as isize);
                    *fresh119 = d;
                    let ref mut fresh120 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh120).set_is_active(0 as libc::c_int as libc::c_uint);
                    set_regs_matched_done = 0 as libc::c_int;
                    if lowest_active_reg == highest_active_reg {
                        lowest_active_reg = (((1 as libc::c_int) << 8 as libc::c_int)
                            + 1 as libc::c_int) as active_reg_t;
                        highest_active_reg = ((1 as libc::c_int) << 8 as libc::c_int)
                            as active_reg_t;
                    } else {
                        let mut r_2: libc::c_uchar = (*p as libc::c_int
                            - 1 as libc::c_int) as libc::c_uchar;
                        while r_2 as libc::c_int > 0 as libc::c_int
                            && ((*reg_info.offset(r_2 as isize)).bits).is_active() == 0
                        {
                            r_2 = r_2.wrapping_sub(1);
                            r_2;
                        }
                        if r_2 as libc::c_int == 0 as libc::c_int {
                            lowest_active_reg = (((1 as libc::c_int) << 8 as libc::c_int)
                                + 1 as libc::c_int) as active_reg_t;
                            highest_active_reg = ((1 as libc::c_int) << 8 as libc::c_int)
                                as active_reg_t;
                        } else {
                            highest_active_reg = r_2 as active_reg_t;
                        }
                    }
                    if (((*reg_info.offset(*p as isize)).bits).matched_something() == 0
                        || just_past_start_mem == p.offset(-(1 as libc::c_int as isize)))
                        && p.offset(2 as libc::c_int as isize) < pend
                    {
                        let mut is_a_jump_n: boolean = 0 as libc::c_int as boolean;
                        p1 = p.offset(2 as libc::c_int as isize);
                        mcnt = 0 as libc::c_int;
                        let mut current_block_381: u64;
                        let fresh121 = p1;
                        p1 = p1.offset(1);
                        match *fresh121 as re_opcode_t as libc::c_uint {
                            22 => {
                                is_a_jump_n = 1 as libc::c_int as boolean;
                                current_block_381 = 1146532759706460683;
                            }
                            17 | 18 | 13 | 19 => {
                                current_block_381 = 1146532759706460683;
                            }
                            _ => {
                                current_block_381 = 4606643245351973654;
                            }
                        }
                        match current_block_381 {
                            1146532759706460683 => {
                                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                                mcnt = (mcnt as libc::c_uint)
                                    .wrapping_add(
                                        (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                            as libc::c_uint) << 8 as libc::c_int,
                                    ) as libc::c_int as libc::c_int;
                                p1 = p1.offset(2 as libc::c_int as isize);
                                if is_a_jump_n != 0 {
                                    p1 = p1.offset(2 as libc::c_int as isize);
                                }
                            }
                            _ => {}
                        }
                        p1 = p1.offset(mcnt as isize);
                        if mcnt < 0 as libc::c_int
                            && *p1 as re_opcode_t as libc::c_uint
                                == on_failure_jump as libc::c_int as libc::c_uint
                            && *p1.offset((1 as libc::c_int + 2 as libc::c_int) as isize)
                                as re_opcode_t as libc::c_uint
                                == start_memory as libc::c_int as libc::c_uint
                            && *p1.offset((2 as libc::c_int + 2 as libc::c_int) as isize)
                                as libc::c_int == *p as libc::c_int
                        {
                            if ((*reg_info.offset(*p as isize)).bits)
                                .ever_matched_something() != 0
                            {
                                let mut r_3: libc::c_uint = 0;
                                let ref mut fresh122 = (*reg_info.offset(*p as isize)).bits;
                                (*fresh122)
                                    .set_ever_matched_something(
                                        0 as libc::c_int as libc::c_uint,
                                    );
                                r_3 = *p as libc::c_uint;
                                while r_3
                                    < (*p as libc::c_uint)
                                        .wrapping_add(
                                            *p.offset(1 as libc::c_int as isize) as libc::c_uint,
                                        )
                                {
                                    let ref mut fresh123 = *regstart.offset(r_3 as isize);
                                    *fresh123 = *old_regstart.offset(r_3 as isize);
                                    if *old_regend.offset(r_3 as isize)
                                        >= *regstart.offset(r_3 as isize)
                                    {
                                        let ref mut fresh124 = *regend.offset(r_3 as isize);
                                        *fresh124 = *old_regend.offset(r_3 as isize);
                                    }
                                    r_3 = r_3.wrapping_add(1);
                                    r_3;
                                }
                            }
                            p1 = p1.offset(1);
                            p1;
                            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                            mcnt = (mcnt as libc::c_uint)
                                .wrapping_add(
                                    (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                        as libc::c_uint) << 8 as libc::c_int,
                                ) as libc::c_int as libc::c_int;
                            p1 = p1.offset(2 as libc::c_int as isize);
                            let mut destination: *mut libc::c_char = 0
                                as *mut libc::c_char;
                            let mut this_reg: active_reg_t = 0;
                            while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                                as libc::c_ulong)
                                < (if 0 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_ulong
                                } else {
                                    highest_active_reg
                                        .wrapping_sub(lowest_active_reg)
                                        .wrapping_add(1 as libc::c_int as libc::c_ulong)
                                })
                                    .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                                    .wrapping_add(4 as libc::c_int as libc::c_ulong)
                            {
                                if if fail_stack.size
                                    > (xre_max_failures
                                        * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                        as libc::c_uint
                                {
                                    0 as libc::c_int
                                } else {
                                    let mut fresh125 = ::std::vec::from_elem(
                                        0,
                                        ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                    as libc::c_ulong,
                                            ) as usize,
                                    );
                                    destination = fresh125.as_mut_ptr() as *mut libc::c_char;
                                    fail_stack
                                        .stack = memcpy(
                                        destination as *mut libc::c_void,
                                        fail_stack.stack as *const libc::c_void,
                                        (fail_stack.size as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                    as libc::c_ulong,
                                            ),
                                    ) as *mut byte_fail_stack_elt_t;
                                    (if (fail_stack.stack).is_null() {
                                        0 as libc::c_int
                                    } else {
                                        fail_stack.size <<= 1 as libc::c_int;
                                        1 as libc::c_int
                                    })
                                } == 0
                                {
                                    return -(2 as libc::c_int);
                                }
                            }
                            this_reg = lowest_active_reg;
                            while this_reg <= highest_active_reg {
                                let fresh126 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh127 = (*(fail_stack.stack)
                                    .offset(fresh126 as isize))
                                    .pointer;
                                *fresh127 = *regstart.offset(this_reg as isize)
                                    as *mut libc::c_uchar;
                                let fresh128 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh129 = (*(fail_stack.stack)
                                    .offset(fresh128 as isize))
                                    .pointer;
                                *fresh129 = *regend.offset(this_reg as isize)
                                    as *mut libc::c_uchar;
                                let fresh130 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                *(fail_stack.stack)
                                    .offset(
                                        fresh130 as isize,
                                    ) = (*reg_info.offset(this_reg as isize)).word;
                                this_reg = this_reg.wrapping_add(1);
                                this_reg;
                            }
                            let fresh131 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh131 as isize))
                                .integer = lowest_active_reg as libc::c_int;
                            let fresh132 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh132 as isize))
                                .integer = highest_active_reg as libc::c_int;
                            let fresh133 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh134 = (*(fail_stack.stack)
                                .offset(fresh133 as isize))
                                .pointer;
                            *fresh134 = p1.offset(mcnt as isize);
                            let fresh135 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh136 = (*(fail_stack.stack)
                                .offset(fresh135 as isize))
                                .pointer;
                            *fresh136 = d as *mut libc::c_uchar;
                            current_block = 8612127615327024822;
                        } else {
                            current_block = 15451600762152631869;
                        }
                    } else {
                        current_block = 15451600762152631869;
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            p = p.offset(2 as libc::c_int as isize);
                            continue;
                        }
                    }
                }
                8 => {
                    let mut d2: *const libc::c_char = 0 as *const libc::c_char;
                    let mut dend2: *const libc::c_char = 0 as *const libc::c_char;
                    let fresh137 = p;
                    p = p.offset(1);
                    let mut regno: libc::c_int = *fresh137 as libc::c_int;
                    if *regstart.offset(regno as isize)
                        == &mut byte_reg_unset_dummy as *mut libc::c_char
                            as *const libc::c_char
                        || *regend.offset(regno as isize)
                            == &mut byte_reg_unset_dummy as *mut libc::c_char
                                as *const libc::c_char
                    {
                        current_block = 8612127615327024822;
                    } else {
                        d2 = *regstart.offset(regno as isize);
                        dend2 = if (size1 != 0
                            && string1 <= *regstart.offset(regno as isize)
                            && *regstart.offset(regno as isize)
                                <= string1.offset(size1 as isize)) as libc::c_int
                            == (size1 != 0 && string1 <= *regend.offset(regno as isize)
                                && *regend.offset(regno as isize)
                                    <= string1.offset(size1 as isize)) as libc::c_int
                        {
                            *regend.offset(regno as isize)
                        } else {
                            end_match_1
                        };
                        's_1936: loop {
                            while d2 == dend2 {
                                if dend2 == end_match_2 {
                                    break;
                                }
                                if dend2 == *regend.offset(regno as isize) {
                                    break;
                                }
                                d2 = string2;
                                dend2 = *regend.offset(regno as isize);
                            }
                            if d2 == dend2 {
                                continue 's_497;
                            }
                            while d == dend {
                                if dend == end_match_2 {
                                    break 's_1936;
                                }
                                d = string2;
                                dend = end_match_2;
                            }
                            mcnt = dend.offset_from(d) as libc::c_long as libc::c_int;
                            if mcnt as libc::c_long
                                > dend2.offset_from(d2) as libc::c_long
                            {
                                mcnt = dend2.offset_from(d2) as libc::c_long as libc::c_int;
                            }
                            if if !translate.is_null() {
                                byte_bcmp_translate(d, d2, mcnt, translate)
                            } else {
                                memcmp(
                                    d as *const libc::c_void,
                                    d2 as *const libc::c_void,
                                    (mcnt as libc::c_ulong)
                                        .wrapping_mul(
                                            ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                                        ),
                                )
                            } != 0
                            {
                                break;
                            }
                            d = d.offset(mcnt as isize);
                            d2 = d2.offset(mcnt as isize);
                            if set_regs_matched_done == 0 {
                                let mut r_4: active_reg_t = 0;
                                set_regs_matched_done = 1 as libc::c_int;
                                r_4 = lowest_active_reg;
                                while r_4 <= highest_active_reg {
                                    let ref mut fresh139 = (*reg_info.offset(r_4 as isize))
                                        .bits;
                                    let ref mut fresh138 = (*reg_info.offset(r_4 as isize))
                                        .bits;
                                    (*fresh138)
                                        .set_ever_matched_something(
                                            1 as libc::c_int as libc::c_uint,
                                        );
                                    (*fresh139)
                                        .set_matched_something(
                                            (*fresh138).ever_matched_something(),
                                        );
                                    r_4 = r_4.wrapping_add(1);
                                    r_4;
                                }
                            }
                        }
                        current_block = 8612127615327024822;
                    }
                }
                9 => {
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0 {
                        if (*bufp).not_bol() == 0 {
                            continue;
                        }
                    } else if *d.offset(-(1 as libc::c_int) as isize) as libc::c_int
                        == '\n' as i32 && (*bufp).newline_anchor() as libc::c_int != 0
                    {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                10 => {
                    if d == end2 {
                        if (*bufp).not_eol() == 0 {
                            continue;
                        }
                    } else if (if d == end1 {
                        *string2 as libc::c_int
                    } else {
                        *d as libc::c_int
                    }) == '\n' as i32 && (*bufp).newline_anchor() as libc::c_int != 0
                    {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                11 => {
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0 {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                12 => {
                    if d == end2 {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                16 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    let mut destination_0: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_0: active_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (xre_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh140 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_0 = fresh140.as_mut_ptr() as *mut libc::c_char;
                            fail_stack
                                .stack = memcpy(
                                destination_0 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ),
                            ) as *mut byte_fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_0 = lowest_active_reg;
                    while this_reg_0 <= highest_active_reg {
                        let fresh141 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh142 = (*(fail_stack.stack)
                            .offset(fresh141 as isize))
                            .pointer;
                        *fresh142 = *regstart.offset(this_reg_0 as isize)
                            as *mut libc::c_uchar;
                        let fresh143 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh144 = (*(fail_stack.stack)
                            .offset(fresh143 as isize))
                            .pointer;
                        *fresh144 = *regend.offset(this_reg_0 as isize)
                            as *mut libc::c_uchar;
                        let fresh145 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack)
                            .offset(
                                fresh145 as isize,
                            ) = (*reg_info.offset(this_reg_0 as isize)).word;
                        this_reg_0 = this_reg_0.wrapping_add(1);
                        this_reg_0;
                    }
                    let fresh146 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh146 as isize))
                        .integer = lowest_active_reg as libc::c_int;
                    let fresh147 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh147 as isize))
                        .integer = highest_active_reg as libc::c_int;
                    let fresh148 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh149 = (*(fail_stack.stack)
                        .offset(fresh148 as isize))
                        .pointer;
                    *fresh149 = p.offset(mcnt as isize);
                    let fresh150 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh151 = (*(fail_stack.stack)
                        .offset(fresh150 as isize))
                        .pointer;
                    *fresh151 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    continue;
                }
                15 => {
                    current_block = 1993610015827684295;
                }
                18 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    let mut p2: *mut libc::c_uchar = p;
                    loop {
                        if p2.offset(2 as libc::c_int as isize) < pend
                            && (*p2 as re_opcode_t as libc::c_uint
                                == stop_memory as libc::c_int as libc::c_uint
                                || *p2 as re_opcode_t as libc::c_uint
                                    == start_memory as libc::c_int as libc::c_uint)
                        {
                            p2 = p2.offset(3 as libc::c_int as isize);
                        } else {
                            if !(p2
                                .offset(2 as libc::c_int as isize)
                                .offset((2 as libc::c_int * 2 as libc::c_int) as isize)
                                < pend
                                && *p2 as re_opcode_t as libc::c_uint
                                    == dummy_failure_jump as libc::c_int as libc::c_uint)
                            {
                                break;
                            }
                            p2 = p2
                                .offset(
                                    (2 as libc::c_int + 2 as libc::c_int * 2 as libc::c_int)
                                        as isize,
                                );
                        }
                    }
                    p1 = p.offset(mcnt as isize);
                    if p2 == pend {
                        *p
                            .offset(
                                -(1 as libc::c_int + 2 as libc::c_int) as isize,
                            ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                    } else if *p2 as re_opcode_t as libc::c_uint
                        == exactn as libc::c_int as libc::c_uint
                        || (*bufp).newline_anchor() as libc::c_int != 0
                            && *p2 as re_opcode_t as libc::c_uint
                                == endline as libc::c_int as libc::c_uint
                    {
                        let mut c_0: libc::c_uchar = (if *p2 as libc::c_int
                            == endline as libc::c_int as libc::c_uchar as libc::c_int
                        {
                            '\n' as i32
                        } else {
                            *p2.offset(2 as libc::c_int as isize) as libc::c_int
                        }) as libc::c_uchar;
                        if *p1.offset((1 as libc::c_int + 2 as libc::c_int) as isize)
                            as re_opcode_t as libc::c_uint
                            == exactn as libc::c_int as libc::c_uint
                            && *p1.offset((3 as libc::c_int + 2 as libc::c_int) as isize)
                                as libc::c_int != c_0 as libc::c_int
                        {
                            *p
                                .offset(
                                    -(1 as libc::c_int + 2 as libc::c_int) as isize,
                                ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                        } else if *p1.offset(3 as libc::c_int as isize) as re_opcode_t
                            as libc::c_uint == charset as libc::c_int as libc::c_uint
                            || *p1.offset(3 as libc::c_int as isize) as re_opcode_t
                                as libc::c_uint
                                == charset_not as libc::c_int as libc::c_uint
                        {
                            let mut negate_0: libc::c_int = (*p1
                                .offset(3 as libc::c_int as isize) as re_opcode_t
                                as libc::c_uint
                                == charset_not as libc::c_int as libc::c_uint)
                                as libc::c_int;
                            if (c_0 as libc::c_uint)
                                < (*p1.offset(4 as libc::c_int as isize) as libc::c_int
                                    * 8 as libc::c_int) as libc::c_uint
                                && *p1
                                    .offset(
                                        (5 as libc::c_int + c_0 as libc::c_int / 8 as libc::c_int)
                                            as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int)
                                        << c_0 as libc::c_int % 8 as libc::c_int != 0
                            {
                                negate_0 = (negate_0 == 0) as libc::c_int;
                            }
                            if negate_0 == 0 {
                                *p
                                    .offset(
                                        -(3 as libc::c_int) as isize,
                                    ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                            }
                        }
                    } else if *p2 as re_opcode_t as libc::c_uint
                        == charset as libc::c_int as libc::c_uint
                    {
                        if *p1.offset(3 as libc::c_int as isize) as re_opcode_t
                            as libc::c_uint == exactn as libc::c_int as libc::c_uint
                            && !(*p2.offset(1 as libc::c_int as isize) as libc::c_int
                                * 8 as libc::c_int
                                > *p1.offset(5 as libc::c_int as isize) as libc::c_int
                                && *p2
                                    .offset(
                                        (2 as libc::c_int
                                            + *p1.offset(5 as libc::c_int as isize) as libc::c_int
                                                / 8 as libc::c_int) as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int)
                                        << *p1.offset(5 as libc::c_int as isize) as libc::c_int
                                            % 8 as libc::c_int != 0)
                        {
                            *p
                                .offset(
                                    -(3 as libc::c_int) as isize,
                                ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                        } else if *p1.offset(3 as libc::c_int as isize) as re_opcode_t
                            as libc::c_uint == charset_not as libc::c_int as libc::c_uint
                        {
                            let mut idx: libc::c_int = 0;
                            idx = 0 as libc::c_int;
                            while idx
                                < *p2.offset(1 as libc::c_int as isize) as libc::c_int
                            {
                                if !(*p2.offset((2 as libc::c_int + idx) as isize)
                                    as libc::c_int == 0 as libc::c_int
                                    || idx
                                        < *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                        && *p2.offset((2 as libc::c_int + idx) as isize)
                                            as libc::c_int
                                            & !(*p1.offset((5 as libc::c_int + idx) as isize)
                                                as libc::c_int) == 0 as libc::c_int)
                                {
                                    break;
                                }
                                idx += 1;
                                idx;
                            }
                            if idx
                                == *p2.offset(1 as libc::c_int as isize) as libc::c_int
                            {
                                *p
                                    .offset(
                                        -(3 as libc::c_int) as isize,
                                    ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                            }
                        } else if *p1.offset(3 as libc::c_int as isize) as re_opcode_t
                            as libc::c_uint == charset as libc::c_int as libc::c_uint
                        {
                            let mut idx_0: libc::c_int = 0;
                            idx_0 = 0 as libc::c_int;
                            while idx_0
                                < *p2.offset(1 as libc::c_int as isize) as libc::c_int
                                && idx_0
                                    < *p1.offset(4 as libc::c_int as isize) as libc::c_int
                            {
                                if *p2.offset((2 as libc::c_int + idx_0) as isize)
                                    as libc::c_int
                                    & *p1.offset((5 as libc::c_int + idx_0) as isize)
                                        as libc::c_int != 0 as libc::c_int
                                {
                                    break;
                                }
                                idx_0 += 1;
                                idx_0;
                            }
                            if idx_0
                                == *p2.offset(1 as libc::c_int as isize) as libc::c_int
                                || idx_0
                                    == *p1.offset(4 as libc::c_int as isize) as libc::c_int
                            {
                                *p
                                    .offset(
                                        -(3 as libc::c_int) as isize,
                                    ) = pop_failure_jump as libc::c_int as libc::c_uchar;
                            }
                        }
                    }
                    p = p.offset(-(2 as libc::c_int as isize));
                    if *p.offset(-(1 as libc::c_int) as isize) as re_opcode_t
                        as libc::c_uint
                        != pop_failure_jump as libc::c_int as libc::c_uint
                    {
                        *p
                            .offset(
                                -(1 as libc::c_int) as isize,
                            ) = jump as libc::c_int as libc::c_uchar;
                        current_block = 3068339135349277178;
                    } else {
                        current_block = 17256577520301902719;
                    }
                }
                17 => {
                    current_block = 17256577520301902719;
                }
                13 | 14 => {
                    current_block = 3068339135349277178;
                }
                19 => {
                    let mut destination_2: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_3: active_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (xre_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh168 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_2 = fresh168.as_mut_ptr() as *mut libc::c_char;
                            fail_stack
                                .stack = memcpy(
                                destination_2 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ),
                            ) as *mut byte_fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_3 = lowest_active_reg;
                    while this_reg_3 <= highest_active_reg {
                        let fresh169 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh170 = (*(fail_stack.stack)
                            .offset(fresh169 as isize))
                            .pointer;
                        *fresh170 = *regstart.offset(this_reg_3 as isize)
                            as *mut libc::c_uchar;
                        let fresh171 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh172 = (*(fail_stack.stack)
                            .offset(fresh171 as isize))
                            .pointer;
                        *fresh172 = *regend.offset(this_reg_3 as isize)
                            as *mut libc::c_uchar;
                        let fresh173 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack)
                            .offset(
                                fresh173 as isize,
                            ) = (*reg_info.offset(this_reg_3 as isize)).word;
                        this_reg_3 = this_reg_3.wrapping_add(1);
                        this_reg_3;
                    }
                    let fresh174 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh174 as isize))
                        .integer = lowest_active_reg as libc::c_int;
                    let fresh175 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh175 as isize))
                        .integer = highest_active_reg as libc::c_int;
                    let fresh176 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh177 = (*(fail_stack.stack)
                        .offset(fresh176 as isize))
                        .pointer;
                    *fresh177 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    let fresh178 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh179 = (*(fail_stack.stack)
                        .offset(fresh178 as isize))
                        .pointer;
                    *fresh179 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    current_block = 3068339135349277178;
                }
                20 => {
                    let mut destination_3: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_4: active_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (xre_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh180 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_3 = fresh180.as_mut_ptr() as *mut libc::c_char;
                            fail_stack
                                .stack = memcpy(
                                destination_3 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                            as libc::c_ulong,
                                    ),
                            ) as *mut byte_fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_4 = lowest_active_reg;
                    while this_reg_4 <= highest_active_reg {
                        let fresh181 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh182 = (*(fail_stack.stack)
                            .offset(fresh181 as isize))
                            .pointer;
                        *fresh182 = *regstart.offset(this_reg_4 as isize)
                            as *mut libc::c_uchar;
                        let fresh183 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh184 = (*(fail_stack.stack)
                            .offset(fresh183 as isize))
                            .pointer;
                        *fresh184 = *regend.offset(this_reg_4 as isize)
                            as *mut libc::c_uchar;
                        let fresh185 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack)
                            .offset(
                                fresh185 as isize,
                            ) = (*reg_info.offset(this_reg_4 as isize)).word;
                        this_reg_4 = this_reg_4.wrapping_add(1);
                        this_reg_4;
                    }
                    let fresh186 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh186 as isize))
                        .integer = lowest_active_reg as libc::c_int;
                    let fresh187 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh187 as isize))
                        .integer = highest_active_reg as libc::c_int;
                    let fresh188 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh189 = (*(fail_stack.stack)
                        .offset(fresh188 as isize))
                        .pointer;
                    *fresh189 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    let fresh190 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh191 = (*(fail_stack.stack)
                        .offset(fresh190 as isize))
                        .pointer;
                    *fresh191 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    continue;
                }
                21 => {
                    mcnt = *p.offset(2 as libc::c_int as isize) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p
                                .offset(2 as libc::c_int as isize)
                                .offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    if mcnt > 0 as libc::c_int {
                        mcnt -= 1;
                        mcnt;
                        p = p.offset(2 as libc::c_int as isize);
                        *p
                            .offset(
                                0 as libc::c_int as isize,
                            ) = (mcnt & 0o377 as libc::c_int) as libc::c_uchar;
                        *p
                            .offset(
                                1 as libc::c_int as isize,
                            ) = (mcnt >> 8 as libc::c_int) as libc::c_uchar;
                        p = p.offset(2 as libc::c_int as isize);
                        continue;
                    } else {
                        if !(mcnt == 0 as libc::c_int) {
                            continue;
                        }
                        *p
                            .offset(
                                2 as libc::c_int as isize,
                            ) = no_op as libc::c_int as libc::c_uchar;
                        *p
                            .offset(
                                3 as libc::c_int as isize,
                            ) = no_op as libc::c_int as libc::c_uchar;
                    }
                    current_block = 1993610015827684295;
                }
                22 => {
                    mcnt = *p.offset(2 as libc::c_int as isize) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p
                                .offset(2 as libc::c_int as isize)
                                .offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    if mcnt != 0 {
                        mcnt -= 1;
                        mcnt;
                        *p
                            .offset(2 as libc::c_int as isize)
                            .offset(
                                0 as libc::c_int as isize,
                            ) = (mcnt & 0o377 as libc::c_int) as libc::c_uchar;
                        *p
                            .offset(2 as libc::c_int as isize)
                            .offset(
                                1 as libc::c_int as isize,
                            ) = (mcnt >> 8 as libc::c_int) as libc::c_uchar;
                    } else {
                        p = p.offset((2 as libc::c_int * 2 as libc::c_int) as isize);
                        continue;
                    }
                    current_block = 3068339135349277178;
                }
                23 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p1 = p.offset(mcnt as isize);
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    *p1
                        .offset(
                            0 as libc::c_int as isize,
                        ) = (mcnt & 0o377 as libc::c_int) as libc::c_uchar;
                    *p1
                        .offset(
                            1 as libc::c_int as isize,
                        ) = (mcnt >> 8 as libc::c_int) as libc::c_uchar;
                    continue;
                }
                28 => {
                    let mut prevchar: boolean = 0;
                    let mut thischar: boolean = 0;
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0
                        || d == end2
                    {
                        continue;
                    }
                    prevchar = (re_syntax_table[(if d
                        .offset(-(1 as libc::c_int as isize)) == end1
                    {
                        *string2 as libc::c_int
                    } else {
                        (if d.offset(-(1 as libc::c_int as isize))
                            == string2.offset(-(1 as libc::c_int as isize))
                        {
                            *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                        } else {
                            *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                        })
                    }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int)
                        as libc::c_int as boolean;
                    thischar = (re_syntax_table[(if d == end1 {
                        *string2 as libc::c_int
                    } else {
                        (if d == string2.offset(-(1 as libc::c_int as isize)) {
                            *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                        } else {
                            *d as libc::c_int
                        })
                    }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int)
                        as libc::c_int as boolean;
                    if prevchar as libc::c_int != thischar as libc::c_int {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                29 => {
                    let mut prevchar_0: boolean = 0;
                    let mut thischar_0: boolean = 0;
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0
                        || d == end2
                    {
                        current_block = 8612127615327024822;
                    } else {
                        prevchar_0 = (re_syntax_table[(if d
                            .offset(-(1 as libc::c_int as isize)) == end1
                        {
                            *string2 as libc::c_int
                        } else {
                            (if d.offset(-(1 as libc::c_int as isize))
                                == string2.offset(-(1 as libc::c_int as isize))
                            {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            })
                        }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int)
                            as libc::c_int as boolean;
                        thischar_0 = (re_syntax_table[(if d == end1 {
                            *string2 as libc::c_int
                        } else {
                            (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d as libc::c_int
                            })
                        }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int)
                            as libc::c_int as boolean;
                        if !(prevchar_0 as libc::c_int != thischar_0 as libc::c_int) {
                            continue;
                        }
                        current_block = 8612127615327024822;
                    }
                }
                26 => {
                    if !(d == end2)
                        && re_syntax_table[(if d == end1 {
                            *string2 as libc::c_int
                        } else {
                            (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d as libc::c_int
                            })
                        }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int
                        && (d == (if size1 != 0 { string1 } else { string2 })
                            || size2 == 0
                            || !(re_syntax_table[(if d
                                .offset(-(1 as libc::c_int as isize)) == end1
                            {
                                *string2 as libc::c_int
                            } else {
                                (if d.offset(-(1 as libc::c_int as isize))
                                    == string2.offset(-(1 as libc::c_int as isize))
                                {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                })
                            }) as libc::c_uchar as usize] as libc::c_int
                                == 1 as libc::c_int))
                    {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                27 => {
                    if !(d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0)
                        && re_syntax_table[(if d.offset(-(1 as libc::c_int as isize))
                            == end1
                        {
                            *string2 as libc::c_int
                        } else {
                            (if d.offset(-(1 as libc::c_int as isize))
                                == string2.offset(-(1 as libc::c_int as isize))
                            {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            })
                        }) as libc::c_uchar as usize] as libc::c_int == 1 as libc::c_int
                        && (d == end2
                            || !(re_syntax_table[(if d == end1 {
                                *string2 as libc::c_int
                            } else {
                                (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d as libc::c_int
                                })
                            }) as libc::c_uchar as usize] as libc::c_int
                                == 1 as libc::c_int))
                    {
                        continue;
                    }
                    current_block = 8612127615327024822;
                }
                24 => {
                    loop {
                        if !(d == dend) {
                            current_block = 11104311189917246276;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 8612127615327024822;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            if !(re_syntax_table[(if d == end1 {
                                *string2 as libc::c_int
                            } else {
                                (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d as libc::c_int
                                })
                            }) as libc::c_uchar as usize] as libc::c_int
                                == 1 as libc::c_int)
                            {
                                current_block = 8612127615327024822;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_5: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_5 = lowest_active_reg;
                                    while r_5 <= highest_active_reg {
                                        let ref mut fresh193 = (*reg_info.offset(r_5 as isize))
                                            .bits;
                                        let ref mut fresh192 = (*reg_info.offset(r_5 as isize))
                                            .bits;
                                        (*fresh192)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh193)
                                            .set_matched_something(
                                                (*fresh192).ever_matched_something(),
                                            );
                                        r_5 = r_5.wrapping_add(1);
                                        r_5;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                continue;
                            }
                        }
                    }
                }
                25 => {
                    loop {
                        if !(d == dend) {
                            current_block = 17693699080408748514;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 8612127615327024822;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        8612127615327024822 => {}
                        _ => {
                            if re_syntax_table[(if d == end1 {
                                *string2 as libc::c_int
                            } else {
                                (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d as libc::c_int
                                })
                            }) as libc::c_uchar as usize] as libc::c_int
                                == 1 as libc::c_int
                            {
                                current_block = 8612127615327024822;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_6: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_6 = lowest_active_reg;
                                    while r_6 <= highest_active_reg {
                                        let ref mut fresh195 = (*reg_info.offset(r_6 as isize))
                                            .bits;
                                        let ref mut fresh194 = (*reg_info.offset(r_6 as isize))
                                            .bits;
                                        (*fresh194)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh195)
                                            .set_matched_something(
                                                (*fresh194).ever_matched_something(),
                                            );
                                        r_6 = r_6.wrapping_add(1);
                                        r_6;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                continue;
                            }
                        }
                    }
                }
                _ => {
                    abort();
                }
            }
            match current_block {
                8612127615327024822 => {}
                _ => {
                    match current_block {
                        1993610015827684295 => {
                            mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                            mcnt = (mcnt as libc::c_uint)
                                .wrapping_add(
                                    (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                        as libc::c_uint) << 8 as libc::c_int,
                                ) as libc::c_int as libc::c_int;
                            p = p.offset(2 as libc::c_int as isize);
                            p1 = p;
                            while p1 < pend
                                && *p1 as re_opcode_t as libc::c_uint
                                    == no_op as libc::c_int as libc::c_uint
                            {
                                p1 = p1.offset(1);
                                p1;
                            }
                            if p1 < pend
                                && *p1 as re_opcode_t as libc::c_uint
                                    == start_memory as libc::c_int as libc::c_uint
                            {
                                highest_active_reg = (*p1.offset(1 as libc::c_int as isize)
                                    as libc::c_int
                                    + *p1.offset(2 as libc::c_int as isize) as libc::c_int)
                                    as active_reg_t;
                                if lowest_active_reg
                                    == (((1 as libc::c_int) << 8 as libc::c_int)
                                        + 1 as libc::c_int) as libc::c_ulong
                                {
                                    lowest_active_reg = *p1.offset(1 as libc::c_int as isize)
                                        as active_reg_t;
                                }
                            }
                            let mut destination_1: *mut libc::c_char = 0
                                as *mut libc::c_char;
                            let mut this_reg_1: active_reg_t = 0;
                            while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                                as libc::c_ulong)
                                < (if 0 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_ulong
                                } else {
                                    highest_active_reg
                                        .wrapping_sub(lowest_active_reg)
                                        .wrapping_add(1 as libc::c_int as libc::c_ulong)
                                })
                                    .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                                    .wrapping_add(4 as libc::c_int as libc::c_ulong)
                            {
                                if if fail_stack.size
                                    > (xre_max_failures
                                        * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                        as libc::c_uint
                                {
                                    0 as libc::c_int
                                } else {
                                    let mut fresh152 = ::std::vec::from_elem(
                                        0,
                                        ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                    as libc::c_ulong,
                                            ) as usize,
                                    );
                                    destination_1 = fresh152.as_mut_ptr() as *mut libc::c_char;
                                    fail_stack
                                        .stack = memcpy(
                                        destination_1 as *mut libc::c_void,
                                        fail_stack.stack as *const libc::c_void,
                                        (fail_stack.size as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<byte_fail_stack_elt_t>()
                                                    as libc::c_ulong,
                                            ),
                                    ) as *mut byte_fail_stack_elt_t;
                                    (if (fail_stack.stack).is_null() {
                                        0 as libc::c_int
                                    } else {
                                        fail_stack.size <<= 1 as libc::c_int;
                                        1 as libc::c_int
                                    })
                                } == 0
                                {
                                    return -(2 as libc::c_int);
                                }
                            }
                            this_reg_1 = lowest_active_reg;
                            while this_reg_1 <= highest_active_reg {
                                let fresh153 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh154 = (*(fail_stack.stack)
                                    .offset(fresh153 as isize))
                                    .pointer;
                                *fresh154 = *regstart.offset(this_reg_1 as isize)
                                    as *mut libc::c_uchar;
                                let fresh155 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh156 = (*(fail_stack.stack)
                                    .offset(fresh155 as isize))
                                    .pointer;
                                *fresh156 = *regend.offset(this_reg_1 as isize)
                                    as *mut libc::c_uchar;
                                let fresh157 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                *(fail_stack.stack)
                                    .offset(
                                        fresh157 as isize,
                                    ) = (*reg_info.offset(this_reg_1 as isize)).word;
                                this_reg_1 = this_reg_1.wrapping_add(1);
                                this_reg_1;
                            }
                            let fresh158 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh158 as isize))
                                .integer = lowest_active_reg as libc::c_int;
                            let fresh159 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh159 as isize))
                                .integer = highest_active_reg as libc::c_int;
                            let fresh160 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh161 = (*(fail_stack.stack)
                                .offset(fresh160 as isize))
                                .pointer;
                            *fresh161 = p.offset(mcnt as isize);
                            let fresh162 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh163 = (*(fail_stack.stack)
                                .offset(fresh162 as isize))
                                .pointer;
                            *fresh163 = d as *mut libc::c_uchar;
                            continue;
                        }
                        17256577520301902719 => {
                            let mut dummy_low_reg: active_reg_t = 0;
                            let mut dummy_high_reg: active_reg_t = 0;
                            let mut pdummy: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
                            let mut sdummy: *const libc::c_char = 0
                                as *const libc::c_char;
                            let mut this_reg_2: active_reg_t = 0;
                            let mut string_temp: *const libc::c_uchar = 0
                                as *const libc::c_uchar;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            string_temp = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .pointer;
                            if !string_temp.is_null() {
                                sdummy = string_temp as *const libc::c_char;
                            }
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            pdummy = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .pointer;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            dummy_high_reg = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .integer as active_reg_t;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            dummy_low_reg = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .integer as active_reg_t;
                            this_reg_2 = dummy_high_reg;
                            while this_reg_2 >= dummy_low_reg {
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                (*reg_info_dummy.offset(this_reg_2 as isize))
                                    .word = *(fail_stack.stack)
                                    .offset(fail_stack.avail as isize);
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                let ref mut fresh164 = *reg_dummy
                                    .offset(this_reg_2 as isize);
                                *fresh164 = (*(fail_stack.stack)
                                    .offset(fail_stack.avail as isize))
                                    .pointer as *const libc::c_char;
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                let ref mut fresh165 = *reg_dummy
                                    .offset(this_reg_2 as isize);
                                *fresh165 = (*(fail_stack.stack)
                                    .offset(fail_stack.avail as isize))
                                    .pointer as *const libc::c_char;
                                this_reg_2 = this_reg_2.wrapping_sub(1);
                                this_reg_2;
                            }
                            set_regs_matched_done = 0 as libc::c_int;
                        }
                        _ => {}
                    }
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p = p.offset(mcnt as isize);
                    continue;
                }
            }
        }
        loop {
            if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint) {
                let mut this_reg_5: active_reg_t = 0;
                let mut string_temp_0: *const libc::c_uchar = 0 as *const libc::c_uchar;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                string_temp_0 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                    .pointer;
                if !string_temp_0.is_null() {
                    d = string_temp_0 as *const libc::c_char;
                }
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                p = (*(fail_stack.stack).offset(fail_stack.avail as isize)).pointer;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                highest_active_reg = (*(fail_stack.stack)
                    .offset(fail_stack.avail as isize))
                    .integer as active_reg_t;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                lowest_active_reg = (*(fail_stack.stack)
                    .offset(fail_stack.avail as isize))
                    .integer as active_reg_t;
                this_reg_5 = highest_active_reg;
                while this_reg_5 >= lowest_active_reg {
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    (*reg_info.offset(this_reg_5 as isize))
                        .word = *(fail_stack.stack).offset(fail_stack.avail as isize);
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    let ref mut fresh196 = *regend.offset(this_reg_5 as isize);
                    *fresh196 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                        .pointer as *const libc::c_char;
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    let ref mut fresh197 = *regstart.offset(this_reg_5 as isize);
                    *fresh197 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                        .pointer as *const libc::c_char;
                    this_reg_5 = this_reg_5.wrapping_sub(1);
                    this_reg_5;
                }
                set_regs_matched_done = 0 as libc::c_int;
                if p.is_null() {
                    continue;
                }
                if !(p < pend) {
                    break;
                }
                let mut is_a_jump_n_0: boolean = 0 as libc::c_int as boolean;
                match *p as re_opcode_t as libc::c_uint {
                    22 => {
                        is_a_jump_n_0 = 1 as libc::c_int as boolean;
                    }
                    18 | 17 | 13 => {}
                    _ => {
                        break;
                    }
                }
                p1 = p.offset(1 as libc::c_int as isize);
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt = (mcnt as libc::c_uint)
                    .wrapping_add(
                        (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_uint) << 8 as libc::c_int,
                    ) as libc::c_int as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
                if !(is_a_jump_n_0 as libc::c_int != 0
                    && *p1 as re_opcode_t as libc::c_uint
                        == succeed_n as libc::c_int as libc::c_uint
                    || is_a_jump_n_0 == 0
                        && *p1 as re_opcode_t as libc::c_uint
                            == on_failure_jump as libc::c_int as libc::c_uint)
                {
                    break;
                }
            } else if best_regs_set != 0 {
                current_block = 18002345992382212654;
                break 's_497;
            } else {
                current_block = 8429101540473356903;
                break 's_497;
            }
        }
        if d >= string1 && d <= end1 {
            dend = end_match_1;
        }
    }
    match current_block {
        18002345992382212654 => {
            d = match_end;
            dend = if d >= string1 && d <= end1 { end_match_1 } else { end_match_2 };
            mcnt = 1 as libc::c_int;
            while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
                let ref mut fresh97 = *regstart.offset(mcnt as isize);
                *fresh97 = *best_regstart.offset(mcnt as isize);
                let ref mut fresh98 = *regend.offset(mcnt as isize);
                *fresh98 = *best_regend.offset(mcnt as isize);
                mcnt += 1;
                mcnt;
            }
        }
        8429101540473356903 => {
            !regstart.is_null();
            regstart = 0 as *mut *const libc::c_char;
            !regend.is_null();
            regend = 0 as *mut *const libc::c_char;
            !old_regstart.is_null();
            old_regstart = 0 as *mut *const libc::c_char;
            !old_regend.is_null();
            old_regend = 0 as *mut *const libc::c_char;
            !best_regstart.is_null();
            best_regstart = 0 as *mut *const libc::c_char;
            !best_regend.is_null();
            best_regend = 0 as *mut *const libc::c_char;
            !reg_info.is_null();
            reg_info = 0 as *mut byte_register_info_type;
            !reg_dummy.is_null();
            reg_dummy = 0 as *mut *const libc::c_char;
            !reg_info_dummy.is_null();
            reg_info_dummy = 0 as *mut byte_register_info_type;
            return -(1 as libc::c_int);
        }
        _ => {}
    }
    if !regs.is_null() && (*bufp).no_sub() == 0 {
        if (*bufp).regs_allocated() as libc::c_int == 0 as libc::c_int {
            (*regs)
                .num_regs = (if 30 as libc::c_int as libc::c_ulong
                > num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            {
                30 as libc::c_int as libc::c_ulong
            } else {
                num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            }) as libc::c_uint;
            (*regs)
                .start = malloc(
                ((*regs).num_regs as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<xregoff_t>() as libc::c_ulong),
            ) as *mut xregoff_t;
            (*regs)
                .end = malloc(
                ((*regs).num_regs as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<xregoff_t>() as libc::c_ulong),
            ) as *mut xregoff_t;
            if ((*regs).start).is_null() || ((*regs).end).is_null() {
                !regstart.is_null();
                regstart = 0 as *mut *const libc::c_char;
                !regend.is_null();
                regend = 0 as *mut *const libc::c_char;
                !old_regstart.is_null();
                old_regstart = 0 as *mut *const libc::c_char;
                !old_regend.is_null();
                old_regend = 0 as *mut *const libc::c_char;
                !best_regstart.is_null();
                best_regstart = 0 as *mut *const libc::c_char;
                !best_regend.is_null();
                best_regend = 0 as *mut *const libc::c_char;
                !reg_info.is_null();
                reg_info = 0 as *mut byte_register_info_type;
                !reg_dummy.is_null();
                reg_dummy = 0 as *mut *const libc::c_char;
                !reg_info_dummy.is_null();
                reg_info_dummy = 0 as *mut byte_register_info_type;
                return -(2 as libc::c_int);
            }
            (*bufp).set_regs_allocated(1 as libc::c_int as libc::c_uint);
        } else if (*bufp).regs_allocated() as libc::c_int == 1 as libc::c_int {
            if ((*regs).num_regs as libc::c_ulong)
                < num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            {
                (*regs)
                    .num_regs = num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
                    as libc::c_uint;
                (*regs)
                    .start = realloc(
                    (*regs).start as *mut libc::c_void,
                    ((*regs).num_regs as libc::c_ulong)
                        .wrapping_mul(
                            ::core::mem::size_of::<xregoff_t>() as libc::c_ulong,
                        ),
                ) as *mut xregoff_t;
                (*regs)
                    .end = realloc(
                    (*regs).end as *mut libc::c_void,
                    ((*regs).num_regs as libc::c_ulong)
                        .wrapping_mul(
                            ::core::mem::size_of::<xregoff_t>() as libc::c_ulong,
                        ),
                ) as *mut xregoff_t;
                if ((*regs).start).is_null() || ((*regs).end).is_null() {
                    !regstart.is_null();
                    regstart = 0 as *mut *const libc::c_char;
                    !regend.is_null();
                    regend = 0 as *mut *const libc::c_char;
                    !old_regstart.is_null();
                    old_regstart = 0 as *mut *const libc::c_char;
                    !old_regend.is_null();
                    old_regend = 0 as *mut *const libc::c_char;
                    !best_regstart.is_null();
                    best_regstart = 0 as *mut *const libc::c_char;
                    !best_regend.is_null();
                    best_regend = 0 as *mut *const libc::c_char;
                    !reg_info.is_null();
                    reg_info = 0 as *mut byte_register_info_type;
                    !reg_dummy.is_null();
                    reg_dummy = 0 as *mut *const libc::c_char;
                    !reg_info_dummy.is_null();
                    reg_info_dummy = 0 as *mut byte_register_info_type;
                    return -(2 as libc::c_int);
                }
            }
        }
        if (*regs).num_regs > 0 as libc::c_int as libc::c_uint {
            *((*regs).start).offset(0 as libc::c_int as isize) = pos;
            *((*regs).end)
                .offset(
                    0 as libc::c_int as isize,
                ) = if dend == end_match_1 {
                d.offset_from(string1) as libc::c_long as xregoff_t
            } else {
                (d.offset_from(string2) as libc::c_long + size1 as libc::c_long)
                    as xregoff_t
            };
        }
        mcnt = 1 as libc::c_int;
        while (mcnt as libc::c_uint as libc::c_ulong)
            < (if num_regs < (*regs).num_regs as libc::c_ulong {
                num_regs
            } else {
                (*regs).num_regs as libc::c_ulong
            })
        {
            if *regstart.offset(mcnt as isize)
                == &mut byte_reg_unset_dummy as *mut libc::c_char as *const libc::c_char
                || *regend.offset(mcnt as isize)
                    == &mut byte_reg_unset_dummy as *mut libc::c_char
                        as *const libc::c_char
            {
                let ref mut fresh99 = *((*regs).end).offset(mcnt as isize);
                *fresh99 = -(1 as libc::c_int);
                *((*regs).start).offset(mcnt as isize) = *fresh99;
            } else {
                *((*regs).start)
                    .offset(
                        mcnt as isize,
                    ) = if size1 != 0 && string1 <= *regstart.offset(mcnt as isize)
                    && *regstart.offset(mcnt as isize) <= string1.offset(size1 as isize)
                {
                    (*regstart.offset(mcnt as isize)).offset_from(string1)
                        as libc::c_long as xregoff_t
                } else {
                    ((*regstart.offset(mcnt as isize)).offset_from(string2)
                        as libc::c_long + size1 as libc::c_long) as xregoff_t
                };
                *((*regs).end)
                    .offset(
                        mcnt as isize,
                    ) = if size1 != 0 && string1 <= *regend.offset(mcnt as isize)
                    && *regend.offset(mcnt as isize) <= string1.offset(size1 as isize)
                {
                    (*regend.offset(mcnt as isize)).offset_from(string1) as libc::c_long
                        as xregoff_t
                } else {
                    ((*regend.offset(mcnt as isize)).offset_from(string2) as libc::c_long
                        + size1 as libc::c_long) as xregoff_t
                };
            }
            mcnt += 1;
            mcnt;
        }
        mcnt = num_regs as libc::c_int;
        while (mcnt as libc::c_uint) < (*regs).num_regs {
            let ref mut fresh100 = *((*regs).end).offset(mcnt as isize);
            *fresh100 = -(1 as libc::c_int);
            *((*regs).start).offset(mcnt as isize) = *fresh100;
            mcnt += 1;
            mcnt;
        }
    }
    mcnt = d
        .offset(-(pos as isize))
        .offset_from(
            (if dend == end_match_1 {
                string1
            } else {
                string2.offset(-(size1 as isize))
            }),
        ) as libc::c_long as libc::c_int;
    !regstart.is_null();
    regstart = 0 as *mut *const libc::c_char;
    !regend.is_null();
    regend = 0 as *mut *const libc::c_char;
    !old_regstart.is_null();
    old_regstart = 0 as *mut *const libc::c_char;
    !old_regend.is_null();
    old_regend = 0 as *mut *const libc::c_char;
    !best_regstart.is_null();
    best_regstart = 0 as *mut *const libc::c_char;
    !best_regend.is_null();
    best_regend = 0 as *mut *const libc::c_char;
    !reg_info.is_null();
    reg_info = 0 as *mut byte_register_info_type;
    !reg_dummy.is_null();
    reg_dummy = 0 as *mut *const libc::c_char;
    !reg_info_dummy.is_null();
    reg_info_dummy = 0 as *mut byte_register_info_type;
    return mcnt;
}
unsafe extern "C" fn byte_group_match_null_string_p(
    mut p: *mut *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut byte_register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = (*p).offset(2 as libc::c_int as isize);
    while p1 < end {
        match *p1 as re_opcode_t as libc::c_uint {
            15 => {
                p1 = p1.offset(1);
                p1;
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt = (mcnt as libc::c_uint)
                    .wrapping_add(
                        (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_uint) << 8 as libc::c_int,
                    ) as libc::c_int as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                if mcnt >= 0 as libc::c_int {
                    while *p1
                        .offset((mcnt - (1 as libc::c_int + 2 as libc::c_int)) as isize)
                        as re_opcode_t as libc::c_uint
                        == jump_past_alt as libc::c_int as libc::c_uint
                    {
                        if byte_alt_match_null_string_p(
                            p1,
                            p1
                                .offset(mcnt as isize)
                                .offset(-((1 as libc::c_int + 2 as libc::c_int) as isize)),
                            reg_info,
                        ) == 0
                        {
                            return 0 as libc::c_int as boolean;
                        }
                        p1 = p1.offset(mcnt as isize);
                        if *p1 as re_opcode_t as libc::c_uint
                            != on_failure_jump as libc::c_int as libc::c_uint
                        {
                            break;
                        }
                        p1 = p1.offset(1);
                        p1;
                        mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                        mcnt = (mcnt as libc::c_uint)
                            .wrapping_add(
                                (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                    as libc::c_uint) << 8 as libc::c_int,
                            ) as libc::c_int as libc::c_int;
                        p1 = p1.offset(2 as libc::c_int as isize);
                        if !(*p1
                            .offset(
                                (mcnt - (1 as libc::c_int + 2 as libc::c_int)) as isize,
                            ) as re_opcode_t as libc::c_uint
                            != jump_past_alt as libc::c_int as libc::c_uint)
                        {
                            continue;
                        }
                        p1 = p1
                            .offset(-((1 as libc::c_int + 2 as libc::c_int) as isize));
                        break;
                    }
                    mcnt = *p1.offset(-(2 as libc::c_int as isize)) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt = (mcnt as libc::c_uint)
                        .wrapping_add(
                            (*p1
                                .offset(-(2 as libc::c_int as isize))
                                .offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_uint) << 8 as libc::c_int,
                        ) as libc::c_int as libc::c_int;
                    if byte_alt_match_null_string_p(
                        p1,
                        p1.offset(mcnt as isize),
                        reg_info,
                    ) == 0
                    {
                        return 0 as libc::c_int as boolean;
                    }
                    p1 = p1.offset(mcnt as isize);
                }
            }
            7 => {
                *p = p1.offset(2 as libc::c_int as isize);
                return 1 as libc::c_int as boolean;
            }
            _ => {
                if byte_common_op_match_null_string_p(&mut p1, end, reg_info) == 0 {
                    return 0 as libc::c_int as boolean;
                }
            }
        }
    }
    return 0 as libc::c_int as boolean;
}
unsafe extern "C" fn byte_alt_match_null_string_p(
    mut p: *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut byte_register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = p;
    while p1 < end {
        match *p1 as re_opcode_t as libc::c_uint {
            15 => {
                p1 = p1.offset(1);
                p1;
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt = (mcnt as libc::c_uint)
                    .wrapping_add(
                        (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_uint) << 8 as libc::c_int,
                    ) as libc::c_int as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
            }
            _ => {
                if byte_common_op_match_null_string_p(&mut p1, end, reg_info) == 0 {
                    return 0 as libc::c_int as boolean;
                }
            }
        }
    }
    return 1 as libc::c_int as boolean;
}
unsafe extern "C" fn byte_common_op_match_null_string_p(
    mut p: *mut *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut byte_register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut ret: boolean = 0;
    let mut reg_no: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = *p;
    let fresh200 = p1;
    p1 = p1.offset(1);
    match *fresh200 as re_opcode_t as libc::c_uint {
        0 | 9 | 10 | 11 | 12 | 26 | 27 | 28 | 29 => {}
        6 => {
            reg_no = *p1 as libc::c_int;
            ret = byte_group_match_null_string_p(&mut p1, end, reg_info);
            if ((*reg_info.offset(reg_no as isize)).bits).match_null_string_p()
                as libc::c_int == 3 as libc::c_int
            {
                let ref mut fresh201 = (*reg_info.offset(reg_no as isize)).bits;
                (*fresh201).set_match_null_string_p(ret as libc::c_uint);
            }
            if ret == 0 {
                return 0 as libc::c_int as boolean;
            }
        }
        13 => {
            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
            mcnt = (mcnt as libc::c_uint)
                .wrapping_add(
                    (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_uint) << 8 as libc::c_int,
                ) as libc::c_int as libc::c_int;
            p1 = p1.offset(2 as libc::c_int as isize);
            if mcnt >= 0 as libc::c_int {
                p1 = p1.offset(mcnt as isize);
            } else {
                return 0 as libc::c_int as boolean
            }
        }
        21 => {
            p1 = p1.offset(2 as libc::c_int as isize);
            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
            mcnt = (mcnt as libc::c_uint)
                .wrapping_add(
                    (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_uint) << 8 as libc::c_int,
                ) as libc::c_int as libc::c_int;
            p1 = p1.offset(2 as libc::c_int as isize);
            if mcnt == 0 as libc::c_int {
                p1 = p1.offset(-((2 as libc::c_int * 2 as libc::c_int) as isize));
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt = (mcnt as libc::c_uint)
                    .wrapping_add(
                        (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_uint) << 8 as libc::c_int,
                    ) as libc::c_int as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
            } else {
                return 0 as libc::c_int as boolean
            }
        }
        8 => {
            if ((*reg_info.offset(*p1 as isize)).bits).match_null_string_p() == 0 {
                return 0 as libc::c_int as boolean;
            }
        }
        23 => {
            p1 = p1.offset((2 as libc::c_int * 2 as libc::c_int) as isize);
            return 0 as libc::c_int as boolean;
        }
        _ => return 0 as libc::c_int as boolean,
    }
    *p = p1;
    return 1 as libc::c_int as boolean;
}
unsafe extern "C" fn byte_bcmp_translate(
    mut s1: *const libc::c_char,
    mut s2: *const libc::c_char,
    mut len: libc::c_int,
    mut translate: *mut libc::c_char,
) -> libc::c_int {
    let mut p1: *const libc::c_uchar = s1 as *const libc::c_uchar;
    let mut p2: *const libc::c_uchar = s2 as *const libc::c_uchar;
    while len != 0 {
        let fresh202 = p1;
        p1 = p1.offset(1);
        let fresh203 = p2;
        p2 = p2.offset(1);
        if *translate.offset(*fresh202 as isize) as libc::c_int
            != *translate.offset(*fresh203 as isize) as libc::c_int
        {
            return 1 as libc::c_int;
        }
        len -= 1;
        len;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn xre_compile_pattern(
    mut pattern: *const libc::c_char,
    mut length: size_t,
    mut bufp: *mut re_pattern_buffer,
) -> *const libc::c_char {
    let mut ret: reg_errcode_t = REG_NOERROR;
    (*bufp).set_regs_allocated(0 as libc::c_int as libc::c_uint);
    (*bufp).set_no_sub(0 as libc::c_int as libc::c_uint);
    (*bufp).set_newline_anchor(1 as libc::c_int as libc::c_uint);
    ret = byte_regex_compile(pattern, length, xre_syntax_options, bufp);
    if ret as u64 == 0 {
        return 0 as *const libc::c_char;
    }
    return re_error_msgid[ret as libc::c_int as usize];
}
static mut re_comp_buf: re_pattern_buffer = re_pattern_buffer {
    buffer: 0 as *const libc::c_uchar as *mut libc::c_uchar,
    allocated: 0,
    used: 0,
    syntax: 0,
    fastmap: 0 as *const libc::c_char as *mut libc::c_char,
    translate: 0 as *const libc::c_char as *mut libc::c_char,
    re_nsub: 0,
    can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [0; 1],
    c2rust_padding: [0; 7],
};
#[no_mangle]
pub unsafe extern "C" fn xre_comp(mut s: *const libc::c_char) -> *mut libc::c_char {
    let mut ret: reg_errcode_t = REG_NOERROR;
    if s.is_null() {
        if (re_comp_buf.buffer).is_null() {
            return b"No previous regular expression\0" as *const u8
                as *const libc::c_char as *mut libc::c_char;
        }
        return 0 as *mut libc::c_char;
    }
    if (re_comp_buf.buffer).is_null() {
        re_comp_buf
            .buffer = malloc(200 as libc::c_int as libc::c_ulong) as *mut libc::c_uchar;
        if (re_comp_buf.buffer).is_null() {
            return re_error_msgid[REG_ESPACE as libc::c_int as usize]
                as *mut libc::c_char;
        }
        re_comp_buf.allocated = 200 as libc::c_int as libc::c_ulong;
        re_comp_buf
            .fastmap = malloc(((1 as libc::c_int) << 8 as libc::c_int) as libc::c_ulong)
            as *mut libc::c_char;
        if (re_comp_buf.fastmap).is_null() {
            return re_error_msgid[REG_ESPACE as libc::c_int as usize]
                as *mut libc::c_char;
        }
    }
    re_comp_buf.set_newline_anchor(1 as libc::c_int as libc::c_uint);
    ret = byte_regex_compile(s, strlen(s), xre_syntax_options, &mut re_comp_buf);
    if ret as u64 == 0 {
        return 0 as *mut libc::c_char;
    }
    return re_error_msgid[ret as libc::c_int as usize] as *mut libc::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn xre_exec(mut s: *const libc::c_char) -> libc::c_int {
    let len: libc::c_int = strlen(s) as libc::c_int;
    return (0 as libc::c_int
        <= xre_search(
            &mut re_comp_buf,
            s,
            len,
            0 as libc::c_int,
            len,
            0 as *mut re_registers,
        )) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn xregcomp(
    mut preg: *mut regex_t,
    mut pattern: *const libc::c_char,
    mut cflags: libc::c_int,
) -> libc::c_int {
    let mut ret: reg_errcode_t = REG_NOERROR;
    let mut syntax: reg_syntax_t = if cflags & 1 as libc::c_int != 0 {
        ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int
            | (((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int
    } else {
        ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
    };
    (*preg).buffer = 0 as *mut libc::c_uchar;
    (*preg).allocated = 0 as libc::c_int as libc::c_ulong;
    (*preg).used = 0 as libc::c_int as libc::c_ulong;
    (*preg)
        .fastmap = malloc(((1 as libc::c_int) << 8 as libc::c_int) as libc::c_ulong)
        as *mut libc::c_char;
    if cflags & (1 as libc::c_int) << 1 as libc::c_int != 0 {
        let mut i: libc::c_int = 0;
        (*preg)
            .translate = malloc(
            (256 as libc::c_int as libc::c_ulong)
                .wrapping_mul(::core::mem::size_of::<libc::c_char>() as libc::c_ulong),
        ) as *mut libc::c_char;
        if ((*preg).translate).is_null() {
            return REG_ESPACE as libc::c_int;
        }
        i = 0 as libc::c_int;
        while i < 256 as libc::c_int {
            *((*preg).translate)
                .offset(
                    i as isize,
                ) = (if 1 as libc::c_int != 0
                && *(*__ctype_b_loc()).offset(i as isize) as libc::c_int
                    & _ISupper as libc::c_int as libc::c_ushort as libc::c_int != 0
            {
                *(*__ctype_tolower_loc()).offset(i as isize)
            } else {
                i
            }) as libc::c_char;
            i += 1;
            i;
        }
    } else {
        (*preg).translate = 0 as *mut libc::c_char;
    }
    if cflags & ((1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0 {
        syntax
            &= !(((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int);
        syntax
            |= ((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int;
        (*preg).set_newline_anchor(1 as libc::c_int as libc::c_uint);
    } else {
        (*preg).set_newline_anchor(0 as libc::c_int as libc::c_uint);
    }
    (*preg)
        .set_no_sub(
            (cflags
                & (((1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int != 0) as libc::c_int as libc::c_uint,
        );
    ret = byte_regex_compile(pattern, strlen(pattern), syntax, preg);
    if ret as libc::c_int == REG_ERPAREN as libc::c_int {
        ret = REG_EPAREN;
    }
    if ret as libc::c_int == REG_NOERROR as libc::c_int && !((*preg).fastmap).is_null() {
        if xre_compile_fastmap(preg) == -(2 as libc::c_int) {
            free((*preg).fastmap as *mut libc::c_void);
            (*preg).fastmap = 0 as *mut libc::c_char;
        }
    }
    return ret as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn xregexec(
    mut preg: *const regex_t,
    mut string: *const libc::c_char,
    mut nmatch: size_t,
    mut pmatch: *mut regmatch_t,
    mut eflags: libc::c_int,
) -> libc::c_int {
    let mut ret: libc::c_int = 0;
    let mut regs: re_registers = re_registers {
        num_regs: 0,
        start: 0 as *mut xregoff_t,
        end: 0 as *mut xregoff_t,
    };
    let mut private_preg: regex_t = re_pattern_buffer {
        buffer: 0 as *const libc::c_uchar as *mut libc::c_uchar,
        allocated: 0,
        used: 0,
        syntax: 0,
        fastmap: 0 as *const libc::c_char as *mut libc::c_char,
        translate: 0 as *const libc::c_char as *mut libc::c_char,
        re_nsub: 0,
        can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [0; 1],
        c2rust_padding: [0; 7],
    };
    let mut len: libc::c_int = strlen(string) as libc::c_int;
    let mut want_reg_info: boolean = ((*preg).no_sub() == 0
        && nmatch > 0 as libc::c_int as libc::c_ulong) as libc::c_int as boolean;
    private_preg = *preg;
    private_preg
        .set_not_bol((eflags & 1 as libc::c_int != 0) as libc::c_int as libc::c_uint);
    private_preg
        .set_not_eol(
            (eflags & (1 as libc::c_int) << 1 as libc::c_int != 0) as libc::c_int
                as libc::c_uint,
        );
    private_preg.set_regs_allocated(2 as libc::c_int as libc::c_uint);
    if want_reg_info != 0 {
        regs.num_regs = nmatch as libc::c_uint;
        regs
            .start = malloc(
            nmatch
                .wrapping_mul(2 as libc::c_int as libc::c_ulong)
                .wrapping_mul(::core::mem::size_of::<xregoff_t>() as libc::c_ulong),
        ) as *mut xregoff_t;
        if (regs.start).is_null() {
            return REG_NOMATCH as libc::c_int;
        }
        regs.end = (regs.start).offset(nmatch as isize);
    }
    ret = xre_search(
        &mut private_preg,
        string,
        len,
        0 as libc::c_int,
        len,
        if want_reg_info as libc::c_int != 0 {
            &mut regs
        } else {
            0 as *mut re_registers
        },
    );
    if want_reg_info != 0 {
        if ret >= 0 as libc::c_int {
            let mut r: libc::c_uint = 0;
            r = 0 as libc::c_int as libc::c_uint;
            while (r as libc::c_ulong) < nmatch {
                (*pmatch.offset(r as isize)).rm_so = *(regs.start).offset(r as isize);
                (*pmatch.offset(r as isize)).rm_eo = *(regs.end).offset(r as isize);
                r = r.wrapping_add(1);
                r;
            }
        }
        free(regs.start as *mut libc::c_void);
    }
    return if ret >= 0 as libc::c_int {
        REG_NOERROR as libc::c_int
    } else {
        REG_NOMATCH as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn xregerror(
    mut errcode: libc::c_int,
    mut preg: *const regex_t,
    mut errbuf: *mut libc::c_char,
    mut errbuf_size: size_t,
) -> size_t {
    let mut msg: *const libc::c_char = 0 as *const libc::c_char;
    let mut msg_size: size_t = 0;
    if errcode < 0 as libc::c_int
        || errcode
            >= (::core::mem::size_of::<[*const libc::c_char; 17]>() as libc::c_ulong)
                .wrapping_div(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as libc::c_int
    {
        abort();
    }
    msg = re_error_msgid[errcode as usize];
    msg_size = (strlen(msg)).wrapping_add(1 as libc::c_int as libc::c_ulong);
    if errbuf_size != 0 as libc::c_int as libc::c_ulong {
        if msg_size > errbuf_size {
            memcpy(
                errbuf as *mut libc::c_void,
                msg as *const libc::c_void,
                errbuf_size.wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            *errbuf
                .offset(
                    errbuf_size.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
                ) = 0 as libc::c_int as libc::c_char;
        } else {
            memcpy(errbuf as *mut libc::c_void, msg as *const libc::c_void, msg_size);
        }
    }
    return msg_size;
}
#[no_mangle]
pub unsafe extern "C" fn xregfree(mut preg: *mut regex_t) {
    free((*preg).buffer as *mut libc::c_void);
    (*preg).buffer = 0 as *mut libc::c_uchar;
    (*preg).allocated = 0 as libc::c_int as libc::c_ulong;
    (*preg).used = 0 as libc::c_int as libc::c_ulong;
    free((*preg).fastmap as *mut libc::c_void);
    (*preg).fastmap = 0 as *mut libc::c_char;
    (*preg).set_fastmap_accurate(0 as libc::c_int as libc::c_uint);
    free((*preg).translate as *mut libc::c_void);
    (*preg).translate = 0 as *mut libc::c_char;
}
